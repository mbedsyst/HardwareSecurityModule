
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113b4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08011600  08011600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801182c  0801182c  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  0801182c  0801182c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011834  08011834  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011834  08011834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011838  08011838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0801183c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  080119bc  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  080119bc  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000266c6  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f35  00000000  00000000  0003987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  000405d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008437  00000000  00000000  00041cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa40  00000000  00000000  0004a113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bc51  00000000  00000000  00074b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c07a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e4  00000000  00000000  001c07e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c90cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080115e8 	.word	0x080115e8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080115e8 	.word	0x080115e8

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <PacketBuilder_Build>:
#include "constants.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <PacketBuilder_Build+0x1e>
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <PacketBuilder_Build+0x1e>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <PacketBuilder_Build+0x22>
    {
    	return BUILD_NULL_POINTER;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e07c      	b.n	80006d0 <PacketBuilder_Build+0x11c>
    }
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	889b      	ldrh	r3, [r3, #4]
 80005da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005de:	d901      	bls.n	80005e4 <PacketBuilder_Build+0x30>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 80005e0:	2302      	movs	r3, #2
 80005e2:	e075      	b.n	80006d0 <PacketBuilder_Build+0x11c>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	82fb      	strh	r3, [r7, #22]
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	0e1a      	lsrs	r2, r3, #24
 80005ee:	8afb      	ldrh	r3, [r7, #22]
 80005f0:	1c59      	adds	r1, r3, #1
 80005f2:	82f9      	strh	r1, [r7, #22]
 80005f4:	4619      	mov	r1, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	440b      	add	r3, r1
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	0c1a      	lsrs	r2, r3, #16
 8000604:	8afb      	ldrh	r3, [r7, #22]
 8000606:	1c59      	adds	r1, r3, #1
 8000608:	82f9      	strh	r1, [r7, #22]
 800060a:	4619      	mov	r1, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	440b      	add	r3, r1
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	0a1a      	lsrs	r2, r3, #8
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	1c59      	adds	r1, r3, #1
 800061e:	82f9      	strh	r1, [r7, #22]
 8000620:	4619      	mov	r1, r3
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	440b      	add	r3, r1
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	8afb      	ldrh	r3, [r7, #22]
 8000630:	1c59      	adds	r1, r3, #1
 8000632:	82f9      	strh	r1, [r7, #22]
 8000634:	4619      	mov	r1, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	440b      	add	r3, r1
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	701a      	strb	r2, [r3, #0]
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	b29a      	uxth	r2, r3
 8000646:	8afb      	ldrh	r3, [r7, #22]
 8000648:	1c59      	adds	r1, r3, #1
 800064a:	82f9      	strh	r1, [r7, #22]
 800064c:	4619      	mov	r1, r3
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	440b      	add	r3, r1
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	889a      	ldrh	r2, [r3, #4]
 800065a:	8afb      	ldrh	r3, [r7, #22]
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	82f9      	strh	r1, [r7, #22]
 8000660:	4619      	mov	r1, r3
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	440b      	add	r3, r1
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 800066a:	8afb      	ldrh	r3, [r7, #22]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	18d0      	adds	r0, r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1d99      	adds	r1, r3, #6
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	889b      	ldrh	r3, [r3, #4]
 8000678:	461a      	mov	r2, r3
 800067a:	f010 f852 	bl	8010722 <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	889a      	ldrh	r2, [r3, #4]
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	4413      	add	r3, r2
 8000686:	82fb      	strh	r3, [r7, #22]
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (EOD_FLAG >> 24) & 0xFF;
 8000688:	8afb      	ldrh	r3, [r7, #22]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	82fa      	strh	r2, [r7, #22]
 800068e:	461a      	mov	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4413      	add	r3, r2
 8000694:	22de      	movs	r2, #222	@ 0xde
 8000696:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (EOD_FLAG >> 16) & 0xFF;
 8000698:	8afb      	ldrh	r3, [r7, #22]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	82fa      	strh	r2, [r7, #22]
 800069e:	461a      	mov	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4413      	add	r3, r2
 80006a4:	22ad      	movs	r2, #173	@ 0xad
 80006a6:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (EOD_FLAG >> 8)  & 0xFF;
 80006a8:	8afb      	ldrh	r3, [r7, #22]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	82fa      	strh	r2, [r7, #22]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4413      	add	r3, r2
 80006b4:	22be      	movs	r2, #190	@ 0xbe
 80006b6:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (EOD_FLAG)       & 0xFF;
 80006b8:	8afb      	ldrh	r3, [r7, #22]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	82fa      	strh	r2, [r7, #22]
 80006be:	461a      	mov	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4413      	add	r3, r2
 80006c4:	22ef      	movs	r2, #239	@ 0xef
 80006c6:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	8afa      	ldrh	r2, [r7, #22]
 80006cc:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 80006e2:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <log_init+0x1c>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	7013      	strb	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	20000000 	.word	0x20000000

080006f8 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b0c7      	sub	sp, #284	@ 0x11c
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	4604      	mov	r4, r0
 8000700:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000704:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000708:	6001      	str	r1, [r0, #0]
 800070a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800070e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000712:	600a      	str	r2, [r1, #0]
 8000714:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000718:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000722:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000726:	4622      	mov	r2, r4
 8000728:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <log_generic+0x8c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000732:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d31e      	bcc.n	800077a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800073c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000740:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000744:	f107 0010 	add.w	r0, r7, #16
 8000748:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000752:	f00f ff5d 	bl	8010610 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800075e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000762:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000766:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800076a:	4807      	ldr	r0, [pc, #28]	@ (8000788 <log_generic+0x90>)
 800076c:	9000      	str	r0, [sp, #0]
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <log_generic+0x94>)
 8000774:	f00f fecc 	bl	8010510 <iprintf>
 8000778:	e000      	b.n	800077c <log_generic+0x84>
        return;
 800077a:	bf00      	nop
}
 800077c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000780:	46bd      	mov	sp, r7
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	08011610 	.word	0x08011610
 800078c:	08011600 	.word	0x08011600

08000790 <log_debug>:

void log_debug(const char *fmt, ...)
{
 8000790:	b40f      	push	{r0, r1, r2, r3}
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <log_debug+0x2c>)
 80007a6:	4906      	ldr	r1, [pc, #24]	@ (80007c0 <log_debug+0x30>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ffa5 	bl	80006f8 <log_generic>
    va_end(args);
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	08011618 	.word	0x08011618
 80007c0:	08011620 	.word	0x08011620

080007c4 <log_info>:

void log_info(const char *fmt, ...)
{
 80007c4:	b40f      	push	{r0, r1, r2, r3}
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <log_info+0x2c>)
 80007da:	4906      	ldr	r1, [pc, #24]	@ (80007f4 <log_info+0x30>)
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff8b 	bl	80006f8 <log_generic>
    va_end(args);
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ec:	b004      	add	sp, #16
 80007ee:	4770      	bx	lr
 80007f0:	08011628 	.word	0x08011628
 80007f4:	08011630 	.word	0x08011630

080007f8 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 80007f8:	b40f      	push	{r0, r1, r2, r3}
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b084      	sub	sp, #16
 80007fe:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <log_error+0x2c>)
 800080e:	4906      	ldr	r1, [pc, #24]	@ (8000828 <log_error+0x30>)
 8000810:	2003      	movs	r0, #3
 8000812:	f7ff ff71 	bl	80006f8 <log_generic>
    va_end(args);
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr
 8000824:	08011648 	.word	0x08011648
 8000828:	08011650 	.word	0x08011650

0800082c <prepare_dummy_response_packet>:
static void MX_RNG_Init(void);
static void MX_HASH_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
ResponsePacket_t prepare_dummy_response_packet(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	f843 0c14 	str.w	r0, [r3, #-20]
    ResponsePacket_t response;

    response.transactionID = 0x12345678;
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	461a      	mov	r2, r3
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <prepare_dummy_response_packet+0x94>)
 8000846:	f842 3c0c 	str.w	r3, [r2, #-12]

    const char* msg = "Test response payload";
 800084a:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <prepare_dummy_response_packet+0x98>)
 800084c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000850:	f102 0214 	add.w	r2, r2, #20
 8000854:	6013      	str	r3, [r2, #0]
    response.outputSize = strlen(msg);
 8000856:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800085a:	f103 0314 	add.w	r3, r3, #20
 800085e:	6818      	ldr	r0, [r3, #0]
 8000860:	f7ff fd14 	bl	800028c <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	b29a      	uxth	r2, r3
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	f823 2c08 	strh.w	r2, [r3, #-8]
    memcpy(response.outputData, msg, response.outputSize);
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000878:	461a      	mov	r2, r3
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	3b0c      	subs	r3, #12
 8000880:	3306      	adds	r3, #6
 8000882:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8000886:	f101 0114 	add.w	r1, r1, #20
 800088a:	6809      	ldr	r1, [r1, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f00f ff48 	bl	8010722 <memcpy>

    return response;
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	f853 2c14 	ldr.w	r2, [r3, #-20]
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	4610      	mov	r0, r2
 80008a0:	3b0c      	subs	r3, #12
 80008a2:	f241 0208 	movw	r2, #4104	@ 0x1008
 80008a6:	4619      	mov	r1, r3
 80008a8:	f00f ff3b 	bl	8010722 <memcpy>
}
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80008b4:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	12345678 	.word	0x12345678
 80008c4:	08011658 	.word	0x08011658

080008c8 <test_packet_builder>:
void test_packet_builder(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
    // Step 1: Prepare dummy response
    ResponsePacket_t response = prepare_dummy_response_packet();
 80008d2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80008d6:	3b0c      	subs	r3, #12
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffa7 	bl	800082c <prepare_dummy_response_packet>

    // Step 2: Prepare output buffer and length
    uint8_t outBuffer[MAX_OUTPUT_DATA_SIZE + 10];  // buffer = data + headers
    uint16_t outLength = 0;
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2200      	movs	r2, #0
 80008e4:	f823 2c1a 	strh.w	r2, [r3, #-26]

    // Step 3: Build packet
    BuildStatus_t status = PacketBuilder_Build(&response, outBuffer, &outLength);
 80008e8:	f107 0220 	add.w	r2, r7, #32
 80008ec:	3a1a      	subs	r2, #26
 80008ee:	f107 0120 	add.w	r1, r7, #32
 80008f2:	3918      	subs	r1, #24
 80008f4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80008f8:	3b0c      	subs	r3, #12
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe5a 	bl	80005b4 <PacketBuilder_Build>
 8000900:	4603      	mov	r3, r0
 8000902:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000906:	f102 021d 	add.w	r2, r2, #29
 800090a:	7013      	strb	r3, [r2, #0]

    if (status == BUILD_SUCCESS)
 800090c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000910:	f103 031d 	add.w	r3, r3, #29
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d13b      	bne.n	8000992 <test_packet_builder+0xca>
    {
        log_debug("Packet built successfully. Length: %d bytes", outLength);
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8000922:	4619      	mov	r1, r3
 8000924:	4822      	ldr	r0, [pc, #136]	@ (80009b0 <test_packet_builder+0xe8>)
 8000926:	f7ff ff33 	bl	8000790 <log_debug>
        log_debug("Packet content (hex):");
 800092a:	4822      	ldr	r0, [pc, #136]	@ (80009b4 <test_packet_builder+0xec>)
 800092c:	f7ff ff30 	bl	8000790 <log_debug>

        for (uint16_t i = 0; i < outLength; ++i)
 8000930:	2300      	movs	r3, #0
 8000932:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000936:	f102 021e 	add.w	r2, r2, #30
 800093a:	8013      	strh	r3, [r2, #0]
 800093c:	e01d      	b.n	800097a <test_packet_builder+0xb2>
        {
            log_debug("  Byte[%03d] = 0x%02X", i, outBuffer[i]);
 800093e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000942:	f103 031e 	add.w	r3, r3, #30
 8000946:	8819      	ldrh	r1, [r3, #0]
 8000948:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800094c:	f103 031e 	add.w	r3, r3, #30
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	f107 0220 	add.w	r2, r7, #32
 8000956:	4413      	add	r3, r2
 8000958:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800095c:	461a      	mov	r2, r3
 800095e:	4816      	ldr	r0, [pc, #88]	@ (80009b8 <test_packet_builder+0xf0>)
 8000960:	f7ff ff16 	bl	8000790 <log_debug>
        for (uint16_t i = 0; i < outLength; ++i)
 8000964:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000968:	f103 031e 	add.w	r3, r3, #30
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000974:	f102 021e 	add.w	r2, r2, #30
 8000978:	8013      	strh	r3, [r2, #0]
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8000982:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000986:	f102 021e 	add.w	r2, r2, #30
 800098a:	8812      	ldrh	r2, [r2, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3d6      	bcc.n	800093e <test_packet_builder+0x76>
    }
    else
    {
        log_error("PacketBuilder failed with status: %d", status);
    }
}
 8000990:	e008      	b.n	80009a4 <test_packet_builder+0xdc>
        log_error("PacketBuilder failed with status: %d", status);
 8000992:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000996:	f103 031d 	add.w	r3, r3, #29
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	4807      	ldr	r0, [pc, #28]	@ (80009bc <test_packet_builder+0xf4>)
 80009a0:	f7ff ff2a 	bl	80007f8 <log_error>
}
 80009a4:	bf00      	nop
 80009a6:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	08011670 	.word	0x08011670
 80009b4:	0801169c 	.word	0x0801169c
 80009b8:	080116b4 	.word	0x080116b4
 80009bc:	080116cc 	.word	0x080116cc

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f001 fcae 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f8ba 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f000 fbbc 	bl	8001148 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80009d0:	f000 fb58 	bl	8001084 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80009d4:	f000 fa72 	bl	8000ebc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009d8:	f000 f942 	bl	8000c60 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009dc:	f000 fa18 	bl	8000e10 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80009e0:	f000 fb04 	bl	8000fec <MX_USART6_UART_Init>
  MX_RTC_Init();
 80009e4:	f000 f992 	bl	8000d0c <MX_RTC_Init>
  MX_RNG_Init();
 80009e8:	f000 f97a 	bl	8000ce0 <MX_RNG_Init>
  MX_HASH_Init();
 80009ec:	f000 f91e 	bl	8000c2c <MX_HASH_Init>
  MX_USART3_UART_Init();
 80009f0:	f000 fab0 	bl	8000f54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80009f4:	bf00      	nop
 80009f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000b28 <main+0x168>)
 80009f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0fa      	beq.n	80009f6 <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f001 fa75 	bl	8001ef0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f001 fa72 	bl	8001ef0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f001 fa6f 	bl	8001ef0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a12:	2101      	movs	r1, #1
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 fb0b 	bl	8002030 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a1a:	4b44      	ldr	r3, [pc, #272]	@ (8000b2c <main+0x16c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a20:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <main+0x16c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a28:	4b40      	ldr	r3, [pc, #256]	@ (8000b2c <main+0x16c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <main+0x16c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a34:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <main+0x16c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a3a:	493c      	ldr	r1, [pc, #240]	@ (8000b2c <main+0x16c>)
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f001 fb91 	bl	8002164 <BSP_COM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <main+0x8c>
  {
    Error_Handler();
 8000a48:	f000 fc7a 	bl	8001340 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  log_init(LOG_LEVEL_DEBUG);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fe43 	bl	80006d8 <log_init>
  log_info("Turning LED ON.");
 8000a52:	4837      	ldr	r0, [pc, #220]	@ (8000b30 <main+0x170>)
 8000a54:	f7ff feb6 	bl	80007c4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 fabf 	bl	8001fdc <BSP_LED_Toggle>
 8000a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a62:	f001 fd1d 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f001 fab8 	bl	8001fdc <BSP_LED_Toggle>
 8000a6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a70:	f001 fd16 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f001 fab1 	bl	8001fdc <BSP_LED_Toggle>
 8000a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a7e:	f001 fd0f 	bl	80024a0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000a82:	482c      	ldr	r0, [pc, #176]	@ (8000b34 <main+0x174>)
 8000a84:	f7ff fe9e 	bl	80007c4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 faa7 	bl	8001fdc <BSP_LED_Toggle>
 8000a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a92:	f001 fd05 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000a96:	2002      	movs	r0, #2
 8000a98:	f001 faa0 	bl	8001fdc <BSP_LED_Toggle>
 8000a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aa0:	f001 fcfe 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f001 fa99 	bl	8001fdc <BSP_LED_Toggle>
 8000aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aae:	f001 fcf7 	bl	80024a0 <HAL_Delay>
  log_info("Turning LED ON.");
 8000ab2:	481f      	ldr	r0, [pc, #124]	@ (8000b30 <main+0x170>)
 8000ab4:	f7ff fe86 	bl	80007c4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 fa8f 	bl	8001fdc <BSP_LED_Toggle>
 8000abe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac2:	f001 fced 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f001 fa88 	bl	8001fdc <BSP_LED_Toggle>
 8000acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad0:	f001 fce6 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f001 fa81 	bl	8001fdc <BSP_LED_Toggle>
 8000ada:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ade:	f001 fcdf 	bl	80024a0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000ae2:	4814      	ldr	r0, [pc, #80]	@ (8000b34 <main+0x174>)
 8000ae4:	f7ff fe6e 	bl	80007c4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 fa77 	bl	8001fdc <BSP_LED_Toggle>
 8000aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af2:	f001 fcd5 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f001 fa70 	bl	8001fdc <BSP_LED_Toggle>
 8000afc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b00:	f001 fcce 	bl	80024a0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 fa69 	bl	8001fdc <BSP_LED_Toggle>
 8000b0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0e:	f001 fcc7 	bl	80024a0 <HAL_Delay>

  log_info("Filling Dummy Data & Building Packet.");
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <main+0x178>)
 8000b14:	f7ff fe56 	bl	80007c4 <log_info>
  test_packet_builder();
 8000b18:	f7ff fed6 	bl	80008c8 <test_packet_builder>
  log_info("Logic Completed");
 8000b1c:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <main+0x17c>)
 8000b1e:	f7ff fe51 	bl	80007c4 <log_info>

  while (1)
 8000b22:	bf00      	nop
 8000b24:	e7fd      	b.n	8000b22 <main+0x162>
 8000b26:	bf00      	nop
 8000b28:	200007b4 	.word	0x200007b4
 8000b2c:	2000019c 	.word	0x2000019c
 8000b30:	080116f4 	.word	0x080116f4
 8000b34:	08011704 	.word	0x08011704
 8000b38:	08011718 	.word	0x08011718
 8000b3c:	08011740 	.word	0x08011740

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	@ 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2250      	movs	r2, #80	@ 0x50
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00f fd6c 	bl	801062c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b66:	4b2f      	ldr	r3, [pc, #188]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b6c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000b70:	6113      	str	r3, [r2, #16]
 8000b72:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b7e:	bf00      	nop
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <SystemClock_Config+0xe4>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d1f9      	bne.n	8000b80 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000b8c:	2329      	movs	r3, #41	@ 0x29
 8000b8e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b90:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000baa:	2304      	movs	r3, #4
 8000bac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000bae:	23fa      	movs	r3, #250	@ 0xfa
 8000bb0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fe94 	bl	80048fc <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bda:	f000 fbb1 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	231f      	movs	r3, #31
 8000be0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2303      	movs	r3, #3
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fab5 	bl	800516c <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c08:	f000 fb9a 	bl	8001340 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <SystemClock_Config+0xe8>)
 8000c16:	f043 0320 	orr.w	r3, r3, #32
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	3770      	adds	r7, #112	@ 0x70
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	44020800 	.word	0x44020800
 8000c28:	40022000 	.word	0x40022000

08000c2c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_HASH_Init+0x2c>)
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <MX_HASH_Init+0x30>)
 8000c34:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_HASH_Init+0x2c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_HASH_Init+0x2c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_HASH_Init+0x2c>)
 8000c44:	f001 ffec 	bl	8002c20 <HAL_HASH_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8000c4e:	f000 fb77 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200001ac 	.word	0x200001ac
 8000c5c:	420c0400 	.word	0x420c0400

08000c60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c66:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <MX_I2C1_Init+0x78>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <MX_I2C1_Init+0x7c>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9a:	480e      	ldr	r0, [pc, #56]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000c9c:	f001 fff8 	bl	8002c90 <HAL_I2C_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ca6:	f000 fb4b 	bl	8001340 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4809      	ldr	r0, [pc, #36]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000cae:	f002 f88a 	bl	8002dc6 <HAL_I2CEx_ConfigAnalogFilter>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb8:	f000 fb42 	bl	8001340 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_I2C1_Init+0x74>)
 8000cc0:	f002 f8cc 	bl	8002e5c <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cca:	f000 fb39 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001ec 	.word	0x200001ec
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	10c043e5 	.word	0x10c043e5

08000ce0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <MX_RNG_Init+0x24>)
 8000ce6:	4a08      	ldr	r2, [pc, #32]	@ (8000d08 <MX_RNG_Init+0x28>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_RNG_Init+0x24>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_RNG_Init+0x24>)
 8000cf2:	f009 fdd5 	bl	800a8a0 <HAL_RNG_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000cfc:	f000 fb20 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000240 	.word	0x20000240
 8000d08:	420c0800 	.word	0x420c0800

08000d0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	@ 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d3a:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d3c:	4a33      	ldr	r2, [pc, #204]	@ (8000e0c <MX_RTC_Init+0x100>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d40:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d46:	4b30      	ldr	r3, [pc, #192]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d48:	227f      	movs	r2, #127	@ 0x7f
 8000d4a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d4e:	22ff      	movs	r2, #255	@ 0xff
 8000d50:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d64:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d6c:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000d72:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d78:	4823      	ldr	r0, [pc, #140]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000d7a:	f009 fe2f 	bl	800a9dc <HAL_RTC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 fadc 	bl	8001340 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481a      	ldr	r0, [pc, #104]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000da0:	f00a f882 	bl	800aea8 <HAL_RTCEx_PrivilegeModeSet>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000daa:	f000 fac9 	bl	8001340 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480f      	ldr	r0, [pc, #60]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000dcc:	f009 fe88 	bl	800aae0 <HAL_RTC_SetTime>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000dd6:	f000 fab3 	bl	8001340 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dde:	2301      	movs	r3, #1
 8000de0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_RTC_Init+0xfc>)
 8000df2:	f009 ff07 	bl	800ac04 <HAL_RTC_SetDate>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000dfc:	f000 faa0 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3738      	adds	r7, #56	@ 0x38
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000254 	.word	0x20000254
 8000e0c:	44007800 	.word	0x44007800

08000e10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e14:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e16:	4a28      	ldr	r2, [pc, #160]	@ (8000eb8 <MX_SPI1_Init+0xa8>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e28:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e3c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e44:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000e48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e68:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000e94:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <MX_SPI1_Init+0xa4>)
 8000ea2:	f00a f82f 	bl	800af04 <HAL_SPI_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000eac:	f000 fa48 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000284 	.word	0x20000284
 8000eb8:	40013000 	.word	0x40013000

08000ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ec2:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <MX_USART2_UART_Init+0x94>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f04:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f06:	f00a f988 	bl	800b21a <HAL_UART_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f10:	f000 fa16 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f18:	f00a feb4 	bl	800bc84 <HAL_UARTEx_SetTxFifoThreshold>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f22:	f000 fa0d 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f2a:	f00a fee9 	bl	800bd00 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f34:	f000 fa04 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <MX_USART2_UART_Init+0x90>)
 8000f3a:	f00a fe6a 	bl	800bc12 <HAL_UARTEx_DisableFifoMode>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f000 f9fc 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000314 	.word	0x20000314
 8000f50:	40004400 	.word	0x40004400

08000f54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f5a:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <MX_USART3_UART_Init+0x94>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9c:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f00a f93c 	bl	800b21a <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fa8:	f000 f9ca 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000fb0:	f00a fe68 	bl	800bc84 <HAL_UARTEx_SetTxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fba:	f000 f9c1 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000fc2:	f00a fe9d 	bl	800bd00 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f000 f9b8 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_USART3_UART_Init+0x90>)
 8000fd2:	f00a fe1e 	bl	800bc12 <HAL_UARTEx_DisableFifoMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 f9b0 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200003a8 	.word	0x200003a8
 8000fe8:	40004800 	.word	0x40004800

08000fec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8000ff2:	4a23      	ldr	r2, [pc, #140]	@ (8001080 <MX_USART6_UART_Init+0x94>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <MX_USART6_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_USART6_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_USART6_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001034:	4811      	ldr	r0, [pc, #68]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001036:	f00a f8f0 	bl	800b21a <HAL_UART_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001040:	f000 f97e 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	480d      	ldr	r0, [pc, #52]	@ (800107c <MX_USART6_UART_Init+0x90>)
 8001048:	f00a fe1c 	bl	800bc84 <HAL_UARTEx_SetTxFifoThreshold>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001052:	f000 f975 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4808      	ldr	r0, [pc, #32]	@ (800107c <MX_USART6_UART_Init+0x90>)
 800105a:	f00a fe51 	bl	800bd00 <HAL_UARTEx_SetRxFifoThreshold>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001064:	f000 f96c 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_USART6_UART_Init+0x90>)
 800106a:	f00a fdd2 	bl	800bc12 <HAL_UARTEx_DisableFifoMode>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001074:	f000 f964 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000043c 	.word	0x2000043c
 8001080:	40006400 	.word	0x40006400

08001084 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 800108a:	4a2a      	ldr	r2, [pc, #168]	@ (8001134 <MX_USB_PCD_Init+0xb0>)
 800108c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <MX_USB_PCD_Init+0xb4>)
 8001094:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 8001098:	2208      	movs	r2, #8
 800109a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 800109e:	2202      	movs	r2, #2
 80010a0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010bc:	2200      	movs	r2, #0
 80010be:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80010d2:	4817      	ldr	r0, [pc, #92]	@ (8001130 <MX_USB_PCD_Init+0xac>)
 80010d4:	f001 ff71 	bl	8002fba <HAL_PCD_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 80010de:	f000 f92f 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80010e2:	2200      	movs	r2, #0
 80010e4:	4915      	ldr	r1, [pc, #84]	@ (800113c <MX_USB_PCD_Init+0xb8>)
 80010e6:	4813      	ldr	r0, [pc, #76]	@ (8001134 <MX_USB_PCD_Init+0xb0>)
 80010e8:	f00d fe12 	bl	800ed10 <USBD_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 80010f2:	f000 f925 	bl	8001340 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80010f6:	4912      	ldr	r1, [pc, #72]	@ (8001140 <MX_USB_PCD_Init+0xbc>)
 80010f8:	480e      	ldr	r0, [pc, #56]	@ (8001134 <MX_USB_PCD_Init+0xb0>)
 80010fa:	f00d fe39 	bl	800ed70 <USBD_RegisterClass>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001104:	f000 f91c 	bl	8001340 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001108:	490e      	ldr	r1, [pc, #56]	@ (8001144 <MX_USB_PCD_Init+0xc0>)
 800110a:	480a      	ldr	r0, [pc, #40]	@ (8001134 <MX_USB_PCD_Init+0xb0>)
 800110c:	f00d fa58 	bl	800e5c0 <USBD_CDC_RegisterInterface>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001116:	f000 f913 	bl	8001340 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <MX_USB_PCD_Init+0xb0>)
 800111c:	f00d fe5e 	bl	800eddc <USBD_Start>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001126:	f000 f90b 	bl	8001340 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200004d0 	.word	0x200004d0
 8001134:	200007b4 	.word	0x200007b4
 8001138:	40016000 	.word	0x40016000
 800113c:	200000d4 	.word	0x200000d4
 8001140:	20000038 	.word	0x20000038
 8001144:	200000b8 	.word	0x200000b8

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	@ 0x30
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800115e:	4b72      	ldr	r3, [pc, #456]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001164:	4a70      	ldr	r2, [pc, #448]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800116e:	4b6e      	ldr	r3, [pc, #440]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b6a      	ldr	r3, [pc, #424]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 800117e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001182:	4a69      	ldr	r2, [pc, #420]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800118c:	4b66      	ldr	r3, [pc, #408]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 800118e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	4b63      	ldr	r3, [pc, #396]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 800119c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a0:	4a61      	ldr	r2, [pc, #388]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011be:	4a5a      	ldr	r2, [pc, #360]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011c8:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011e6:	4b50      	ldr	r3, [pc, #320]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001204:	4b48      	ldr	r3, [pc, #288]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001212:	4b45      	ldr	r3, [pc, #276]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001218:	4a43      	ldr	r2, [pc, #268]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 800121a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001222:	4b41      	ldr	r3, [pc, #260]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001230:	2332      	movs	r3, #50	@ 0x32
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001240:	230b      	movs	r3, #11
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4838      	ldr	r0, [pc, #224]	@ (800132c <MX_GPIO_Init+0x1e4>)
 800124c:	f001 fb64 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001250:	2384      	movs	r3, #132	@ 0x84
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2302      	movs	r3, #2
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001260:	230b      	movs	r3, #11
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	4831      	ldr	r0, [pc, #196]	@ (8001330 <MX_GPIO_Init+0x1e8>)
 800126c:	f001 fb54 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001270:	2310      	movs	r3, #16
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	482b      	ldr	r0, [pc, #172]	@ (8001330 <MX_GPIO_Init+0x1e8>)
 8001284:	f001 fb48 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001288:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4825      	ldr	r0, [pc, #148]	@ (8001334 <MX_GPIO_Init+0x1ec>)
 800129e:	f001 fb3b 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b4:	230b      	movs	r3, #11
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	481d      	ldr	r0, [pc, #116]	@ (8001334 <MX_GPIO_Init+0x1ec>)
 80012c0:	f001 fb2a 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_GPIO_Init+0x1f0>)
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4819      	ldr	r0, [pc, #100]	@ (800133c <MX_GPIO_Init+0x1f4>)
 80012d8:	f001 fb1e 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80012dc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ee:	230b      	movs	r3, #11
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	@ (800133c <MX_GPIO_Init+0x1f4>)
 80012fa:	f001 fb0d 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80012fe:	23c0      	movs	r3, #192	@ 0xc0
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800130e:	2308      	movs	r3, #8
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_GPIO_Init+0x1ec>)
 800131a:	f001 fafd 	bl	8002918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131e:	bf00      	nop
 8001320:	3730      	adds	r7, #48	@ 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	44020c00 	.word	0x44020c00
 800132c:	42020800 	.word	0x42020800
 8001330:	42020000 	.word	0x42020000
 8001334:	42020400 	.word	0x42020400
 8001338:	10110000 	.word	0x10110000
 800133c:	42021800 	.word	0x42021800

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_HASH_MspInit+0x34>)
 8001366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136a:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <HAL_HASH_MspInit+0x34>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_HASH_MspInit+0x34>)
 8001376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	44020c00 	.word	0x44020c00

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0cc      	sub	sp, #304	@ 0x130
 8001398:	af00      	add	r7, sp, #0
 800139a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800139e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013a2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013bc:	4618      	mov	r0, r3
 80013be:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80013c2:	461a      	mov	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	f00f f931 	bl	801062c <memset>
  if(hi2c->Instance==I2C1)
 80013ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a33      	ldr	r2, [pc, #204]	@ (80014a4 <HAL_I2C_MspInit+0x110>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d15e      	bne.n	800149a <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013e0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80013e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013f8:	2200      	movs	r2, #0
 80013fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f004 f9f4 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800140e:	f7ff ff97 	bl	8001340 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001428:	f003 0202 	and.w	r2, r3, #2
 800142c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001430:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800143a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800143e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001440:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001444:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145a:	2304      	movs	r3, #4
 800145c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001464:	4619      	mov	r1, r3
 8001466:	4811      	ldr	r0, [pc, #68]	@ (80014ac <HAL_I2C_MspInit+0x118>)
 8001468:	f001 fa56 	bl	8002918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 800146e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001472:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001478:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_I2C_MspInit+0x114>)
 800147e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001482:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800148a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001494:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001498:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800149a:	bf00      	nop
 800149c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40005400 	.word	0x40005400
 80014a8:	44020c00 	.word	0x44020c00
 80014ac:	42020400 	.word	0x42020400

080014b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0c6      	sub	sp, #280	@ 0x118
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014be:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014c8:	4618      	mov	r0, r3
 80014ca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80014ce:	461a      	mov	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	f00f f8ab 	bl	801062c <memset>
  if(hrng->Instance==RNG)
 80014d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <HAL_RNG_MspInit+0xa8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d131      	bne.n	800154c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80014e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ec:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80014f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80014fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f96e 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800151a:	f7ff ff11 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_RNG_MspInit+0xac>)
 8001520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <HAL_RNG_MspInit+0xac>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_RNG_MspInit+0xac>)
 8001530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001534:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001538:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800153c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001546:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800154a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800154c:	bf00      	nop
 800154e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	420c0800 	.word	0x420c0800
 800155c:	44020c00 	.word	0x44020c00

08001560 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0c6      	sub	sp, #280	@ 0x118
 8001564:	af00      	add	r7, sp, #0
 8001566:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800156a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800156e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001578:	4618      	mov	r0, r3
 800157a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800157e:	461a      	mov	r2, r3
 8001580:	2100      	movs	r1, #0
 8001582:	f00f f853 	bl	801062c <memset>
  if(hrtc->Instance==RTC)
 8001586:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800158a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <HAL_RTC_MspInit+0xb8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d13a      	bne.n	800160e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001598:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800159c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80015a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f915 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80015cc:	f7ff feb8 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_RTC_MspInit+0xbc>)
 80015d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d6:	4a11      	ldr	r2, [pc, #68]	@ (800161c <HAL_RTC_MspInit+0xbc>)
 80015d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_RTC_MspInit+0xbc>)
 80015e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015e6:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_RTC_MspInit+0xbc>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_RTC_MspInit+0xbc>)
 80015f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015f6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80015fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001608:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800160c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	44007800 	.word	0x44007800
 800161c:	44020c00 	.word	0x44020c00

08001620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ce      	sub	sp, #312	@ 0x138
 8001624:	af00      	add	r7, sp, #0
 8001626:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800162a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800162e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001644:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001648:	4618      	mov	r0, r3
 800164a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800164e:	461a      	mov	r2, r3
 8001650:	2100      	movs	r1, #0
 8001652:	f00e ffeb 	bl	801062c <memset>
  if(hspi->Instance==SPI1)
 8001656:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800165a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a49      	ldr	r2, [pc, #292]	@ (8001788 <HAL_SPI_MspInit+0x168>)
 8001664:	4293      	cmp	r3, r2
 8001666:	f040 808a 	bne.w	800177e <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800166a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800166e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001672:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800167e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001682:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001686:	2200      	movs	r2, #0
 8001688:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	4618      	mov	r0, r3
 8001692:	f004 f8ad 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 800169c:	f7ff fe50 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a0:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016a6:	4a39      	ldr	r2, [pc, #228]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016ac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016b0:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80016ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016cc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d4:	4a2d      	ldr	r2, [pc, #180]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016de:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e4:	f003 0201 	and.w	r2, r3, #1
 80016e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016fa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 80016fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001702:	4a22      	ldr	r2, [pc, #136]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_SPI_MspInit+0x16c>)
 800170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001712:	f003 0208 	and.w	r2, r3, #8
 8001716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800171a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001724:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001728:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001742:	2305      	movs	r3, #5
 8001744:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800174c:	4619      	mov	r1, r3
 800174e:	4810      	ldr	r0, [pc, #64]	@ (8001790 <HAL_SPI_MspInit+0x170>)
 8001750:	f001 f8e2 	bl	8002918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176c:	2305      	movs	r3, #5
 800176e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001772:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001776:	4619      	mov	r1, r3
 8001778:	4806      	ldr	r0, [pc, #24]	@ (8001794 <HAL_SPI_MspInit+0x174>)
 800177a:	f001 f8cd 	bl	8002918 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013000 	.word	0x40013000
 800178c:	44020c00 	.word	0x44020c00
 8001790:	42020000 	.word	0x42020000
 8001794:	42020c00 	.word	0x42020c00

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0d2      	sub	sp, #328	@ 0x148
 800179c:	af00      	add	r7, sp, #0
 800179e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017a6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017c0:	4618      	mov	r0, r3
 80017c2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80017c6:	461a      	mov	r2, r3
 80017c8:	2100      	movs	r1, #0
 80017ca:	f00e ff2f 	bl	801062c <memset>
  if(huart->Instance==USART2)
 80017ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4ac7      	ldr	r2, [pc, #796]	@ (8001af8 <HAL_UART_MspInit+0x360>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	f040 808a 	bne.w	80018f6 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017e6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80017ea:	f04f 0202 	mov.w	r2, #2
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017fe:	2200      	movs	r2, #0
 8001800:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fff2 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001812:	f7ff fd95 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001816:	4bb9      	ldr	r3, [pc, #740]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001818:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800181c:	4ab7      	ldr	r2, [pc, #732]	@ (8001afc <HAL_UART_MspInit+0x364>)
 800181e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001822:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001826:	4bb5      	ldr	r3, [pc, #724]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800182c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001830:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001834:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800183e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001842:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4bad      	ldr	r3, [pc, #692]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184a:	4aac      	ldr	r2, [pc, #688]	@ (8001afc <HAL_UART_MspInit+0x364>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001854:	4ba9      	ldr	r3, [pc, #676]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001862:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800186c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001870:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	4ba2      	ldr	r3, [pc, #648]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001878:	4aa0      	ldr	r2, [pc, #640]	@ (8001afc <HAL_UART_MspInit+0x364>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001882:	4b9e      	ldr	r3, [pc, #632]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001888:	f003 0208 	and.w	r2, r3, #8
 800188c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001890:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800189a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800189e:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a0:	2308      	movs	r3, #8
 80018a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b8:	2307      	movs	r3, #7
 80018ba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80018c2:	4619      	mov	r1, r3
 80018c4:	488e      	ldr	r0, [pc, #568]	@ (8001b00 <HAL_UART_MspInit+0x368>)
 80018c6:	f001 f827 	bl	8002918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ca:	2320      	movs	r3, #32
 80018cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80018ec:	4619      	mov	r1, r3
 80018ee:	4885      	ldr	r0, [pc, #532]	@ (8001b04 <HAL_UART_MspInit+0x36c>)
 80018f0:	f001 f812 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018f4:	e0fb      	b.n	8001aee <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 80018f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a81      	ldr	r2, [pc, #516]	@ (8001b08 <HAL_UART_MspInit+0x370>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f040 808c 	bne.w	8001a22 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800190a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800190e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001912:	f04f 0204 	mov.w	r2, #4
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800191e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001922:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001926:	2200      	movs	r2, #0
 8001928:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192e:	4618      	mov	r0, r3
 8001930:	f003 ff5e 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800193a:	f7ff fd01 	bl	8001340 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800193e:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001940:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001944:	4a6d      	ldr	r2, [pc, #436]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800194e:	4b6b      	ldr	r3, [pc, #428]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001954:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001958:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800195c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001966:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800196a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	4b63      	ldr	r3, [pc, #396]	@ (8001afc <HAL_UART_MspInit+0x364>)
 800196e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001972:	4a62      	ldr	r2, [pc, #392]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800197c:	4b5f      	ldr	r3, [pc, #380]	@ (8001afc <HAL_UART_MspInit+0x364>)
 800197e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001982:	f003 0202 	and.w	r2, r3, #2
 8001986:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800198a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001994:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001998:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	4b58      	ldr	r3, [pc, #352]	@ (8001afc <HAL_UART_MspInit+0x364>)
 800199c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019a0:	4a56      	ldr	r2, [pc, #344]	@ (8001afc <HAL_UART_MspInit+0x364>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019aa:	4b54      	ldr	r3, [pc, #336]	@ (8001afc <HAL_UART_MspInit+0x364>)
 80019ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b0:	f003 0208 	and.w	r2, r3, #8
 80019b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019b8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019c6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019e2:	2307      	movs	r3, #7
 80019e4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80019ec:	4619      	mov	r1, r3
 80019ee:	4847      	ldr	r0, [pc, #284]	@ (8001b0c <HAL_UART_MspInit+0x374>)
 80019f0:	f000 ff92 	bl	8002918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a14:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001a18:	4619      	mov	r1, r3
 8001a1a:	483a      	ldr	r0, [pc, #232]	@ (8001b04 <HAL_UART_MspInit+0x36c>)
 8001a1c:	f000 ff7c 	bl	8002918 <HAL_GPIO_Init>
}
 8001a20:	e065      	b.n	8001aee <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 8001a22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a26:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a38      	ldr	r2, [pc, #224]	@ (8001b10 <HAL_UART_MspInit+0x378>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d15c      	bne.n	8001aee <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a38:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001a3c:	f04f 0220 	mov.w	r2, #32
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001a48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a50:	2200      	movs	r2, #0
 8001a52:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fec9 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001a64:	f7ff fc6c 	bl	8001340 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a6e:	4a23      	ldr	r2, [pc, #140]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001a70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a7e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001a82:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a86:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a94:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_UART_MspInit+0x364>)
 8001aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aac:	f003 0204 	and.w	r2, r3, #4
 8001ab0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ab4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001abe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ac2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac4:	23c0      	movs	r3, #192	@ 0xc0
 8001ac6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001adc:	2307      	movs	r3, #7
 8001ade:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480a      	ldr	r0, [pc, #40]	@ (8001b14 <HAL_UART_MspInit+0x37c>)
 8001aea:	f000 ff15 	bl	8002918 <HAL_GPIO_Init>
}
 8001aee:	bf00      	nop
 8001af0:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40004400 	.word	0x40004400
 8001afc:	44020c00 	.word	0x44020c00
 8001b00:	42020000 	.word	0x42020000
 8001b04:	42020c00 	.word	0x42020c00
 8001b08:	40004800 	.word	0x40004800
 8001b0c:	42020400 	.word	0x42020400
 8001b10:	40006400 	.word	0x40006400
 8001b14:	42020800 	.word	0x42020800

08001b18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0c6      	sub	sp, #280	@ 0x118
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b26:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b30:	4618      	mov	r0, r3
 8001b32:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001b36:	461a      	mov	r2, r3
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f00e fd77 	bl	801062c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001b3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <HAL_PCD_MspInit+0xbc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d13b      	bne.n	8001bc8 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b54:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0310 	mov.w	r3, #16
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001b64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b6c:	2230      	movs	r2, #48	@ 0x30
 8001b6e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fe3a 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001b82:	f7ff fbdd 	bl	8001340 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001b86:	f002 fea9 	bl	80048dc <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_PCD_MspInit+0xc0>)
 8001b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b90:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_PCD_MspInit+0xc0>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b96:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_PCD_MspInit+0xc0>)
 8001b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ba0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001ba4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ba8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bb6:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	204a      	movs	r0, #74	@ 0x4a
 8001bbe:	f000 fd4b 	bl	8002658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001bc2:	204a      	movs	r0, #74	@ 0x4a
 8001bc4:	f000 fd62 	bl	800268c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001bc8:	bf00      	nop
 8001bca:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40016000 	.word	0x40016000
 8001bd8:	44020c00 	.word	0x44020c00

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <NMI_Handler+0x4>

08001be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c32:	f000 fc15 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fa6e 	bl	8002120 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <USB_DRD_FS_IRQHandler+0x10>)
 8001c4e:	f001 fad7 	bl	8003200 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200004d0 	.word	0x200004d0

08001c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
  }

  return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fabb 	bl	800222c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
  }
  return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f00e fcae 	bl	80106c8 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200a0000 	.word	0x200a0000
 8001d98:	00000500 	.word	0x00000500
 8001d9c:	20000a90 	.word	0x20000a90
 8001da0:	200113b8 	.word	0x200113b8

08001da4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <SystemInit+0xdc>)
 8001dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db0:	4a33      	ldr	r2, [pc, #204]	@ (8001e80 <SystemInit+0xdc>)
 8001db2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001dba:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <SystemInit+0xe0>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	@ (8001e84 <SystemInit+0xe0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <SystemInit+0xe0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <SystemInit+0xe0>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	492c      	ldr	r1, [pc, #176]	@ (8001e84 <SystemInit+0xe0>)
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <SystemInit+0xe4>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <SystemInit+0xe0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001dde:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <SystemInit+0xe0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001de4:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <SystemInit+0xe0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001dea:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <SystemInit+0xe0>)
 8001dec:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <SystemInit+0xe8>)
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <SystemInit+0xe0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001df6:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <SystemInit+0xe0>)
 8001df8:	4a24      	ldr	r2, [pc, #144]	@ (8001e8c <SystemInit+0xe8>)
 8001dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <SystemInit+0xe0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <SystemInit+0xe0>)
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <SystemInit+0xe8>)
 8001e06:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <SystemInit+0xe0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <SystemInit+0xe0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <SystemInit+0xe0>)
 8001e14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <SystemInit+0xe0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <SystemInit+0xdc>)
 8001e22:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e26:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <SystemInit+0xec>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001e30:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001e38:	d003      	beq.n	8001e42 <SystemInit+0x9e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001e40:	d117      	bne.n	8001e72 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <SystemInit+0xec>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <SystemInit+0xec>)
 8001e50:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <SystemInit+0xf0>)
 8001e52:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <SystemInit+0xec>)
 8001e56:	4a10      	ldr	r2, [pc, #64]	@ (8001e98 <SystemInit+0xf4>)
 8001e58:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <SystemInit+0xec>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <SystemInit+0xec>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <SystemInit+0xec>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <SystemInit+0xec>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	61d3      	str	r3, [r2, #28]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	44020c00 	.word	0x44020c00
 8001e88:	eae2eae3 	.word	0xeae2eae3
 8001e8c:	01010280 	.word	0x01010280
 8001e90:	40022000 	.word	0x40022000
 8001e94:	08192a3b 	.word	0x08192a3b
 8001e98:	4c5d6e7f 	.word	0x4c5d6e7f

08001e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e9c:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea0:	f7ff ff80 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea4:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea6:	490d      	ldr	r1, [pc, #52]	@ (8001edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <LoopForever+0xe>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee8 <LoopForever+0x16>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eca:	f00e fc03 	bl	80106d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ece:	f7fe fd77 	bl	80009c0 <main>

08001ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   r0, =_estack
 8001ed4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001ee0:	0801183c 	.word	0x0801183c
  ldr r2, =_sbss
 8001ee4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001ee8:	200113b4 	.word	0x200113b4

08001eec <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC1_IRQHandler>
	...

08001ef0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	@ 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d009      	beq.n	8001f18 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <BSP_LED_Init+0x28>
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d003      	beq.n	8001f18 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f10:	f06f 0301 	mvn.w	r3, #1
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f16:	e055      	b.n	8001fc4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10f      	bne.n	8001f3e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f2e:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	e021      	b.n	8001f82 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001f44:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f4a:	4a21      	ldr	r2, [pc, #132]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f54:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	e00e      	b.n	8001f82 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f6a:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <BSP_LED_Init+0xe0>)
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <BSP_LED_Init+0xe4>)
 8001f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f8a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd8 <BSP_LED_Init+0xe8>)
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	f107 0218 	add.w	r2, r7, #24
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fcb6 	bl	8002918 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <BSP_LED_Init+0xe8>)
 8001fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <BSP_LED_Init+0xe4>)
 8001fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f000 fdfc 	bl	8002bbc <HAL_GPIO_WritePin>
  }

  return ret;
 8001fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3730      	adds	r7, #48	@ 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	44020c00 	.word	0x44020c00
 8001fd4:	080117c4 	.word	0x080117c4
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d009      	beq.n	8002004 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <BSP_LED_Toggle+0x28>
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d003      	beq.n	8002004 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ffc:	f06f 0301 	mvn.w	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e00b      	b.n	800201c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <BSP_LED_Toggle+0x4c>)
 8002008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4907      	ldr	r1, [pc, #28]	@ (800202c <BSP_LED_Toggle+0x50>)
 8002010:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 fde8 	bl	8002bec <HAL_GPIO_TogglePin>
  }

  return ret;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000000c 	.word	0x2000000c
 800202c:	080117c4 	.word	0x080117c4

08002030 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002040:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <BSP_PB_Init+0xd4>)
 8002042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002046:	4a2f      	ldr	r2, [pc, #188]	@ (8002104 <BSP_PB_Init+0xd4>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002050:	4b2c      	ldr	r3, [pc, #176]	@ (8002104 <BSP_PB_Init+0xd4>)
 8002052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800205e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002062:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002064:	2302      	movs	r3, #2
 8002066:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <BSP_PB_Init+0xd8>)
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fc47 	bl	8002918 <HAL_GPIO_Init>
 800208a:	e036      	b.n	80020fa <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <BSP_PB_Init+0xdc>)
 800208e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4a1d      	ldr	r2, [pc, #116]	@ (8002108 <BSP_PB_Init+0xd8>)
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	f107 020c 	add.w	r2, r7, #12
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fc3a 	bl	8002918 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <BSP_PB_Init+0xe0>)
 80020b0:	441a      	add	r2, r3
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4917      	ldr	r1, [pc, #92]	@ (8002114 <BSP_PB_Init+0xe4>)
 80020b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f000 fbcf 	bl	8002860 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <BSP_PB_Init+0xe0>)
 80020ce:	1898      	adds	r0, r3, r2
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4a11      	ldr	r2, [pc, #68]	@ (8002118 <BSP_PB_Init+0xe8>)
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	461a      	mov	r2, r3
 80020da:	2100      	movs	r1, #0
 80020dc:	f000 fb94 	bl	8002808 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80020e0:	2018      	movs	r0, #24
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <BSP_PB_Init+0xec>)
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	f000 fab3 	bl	8002658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80020f2:	2318      	movs	r3, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fac9 	bl	800268c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	44020c00 	.word	0x44020c00
 8002108:	20000018 	.word	0x20000018
 800210c:	10110000 	.word	0x10110000
 8002110:	20000a94 	.word	0x20000a94
 8002114:	080117cc 	.word	0x080117cc
 8002118:	2000001c 	.word	0x2000001c
 800211c:	20000020 	.word	0x20000020

08002120 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800212a:	79fa      	ldrb	r2, [r7, #7]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <BSP_PB_IRQHandler+0x28>)
 8002136:	4413      	add	r3, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fba5 	bl	8002888 <HAL_EXTI_IRQHandler>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000a94 	.word	0x20000a94

0800214c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800217a:	f06f 0301 	mvn.w	r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e018      	b.n	80021b4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2294      	movs	r2, #148	@ 0x94
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <BSP_COM_Init+0x5c>)
 800218c:	4413      	add	r3, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f870 	bl	8002274 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2294      	movs	r2, #148	@ 0x94
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <BSP_COM_Init+0x5c>)
 800219e:	4413      	add	r3, r2
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f80e 	bl	80021c4 <MX_USART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80021ae:	f06f 0303 	mvn.w	r3, #3
 80021b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80021b4:	68fb      	ldr	r3, [r7, #12]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000aa0 	.word	0x20000aa0

080021c4 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <MX_USART_Init+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	220c      	movs	r2, #12
 80021e2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	895b      	ldrh	r3, [r3, #10]
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	891b      	ldrh	r3, [r3, #8]
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	899b      	ldrh	r3, [r3, #12]
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002210:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f008 fffe 	bl	800b21a <HAL_UART_Init>
 800221e:	4603      	mov	r3, r0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000008 	.word	0x20000008

0800222c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <__io_putchar+0x30>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	2394      	movs	r3, #148	@ 0x94
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	4a07      	ldr	r2, [pc, #28]	@ (8002260 <__io_putchar+0x34>)
 8002242:	1898      	adds	r0, r3, r2
 8002244:	1d39      	adds	r1, r7, #4
 8002246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224a:	2201      	movs	r2, #1
 800224c:	f009 f835 	bl	800b2ba <HAL_UART_Transmit>
  return ch;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000b34 	.word	0x20000b34
 8002260:	20000aa0 	.word	0x20000aa0

08002264 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff ff6f 	bl	800214c <BSP_PB_Callback>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <COM1_MspInit+0xa8>)
 800227e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002282:	4a26      	ldr	r2, [pc, #152]	@ (800231c <COM1_MspInit+0xa8>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800228c:	4b23      	ldr	r3, [pc, #140]	@ (800231c <COM1_MspInit+0xa8>)
 800228e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <COM1_MspInit+0xa8>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a0:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <COM1_MspInit+0xa8>)
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <COM1_MspInit+0xa8>)
 80022ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80022b8:	4b18      	ldr	r3, [pc, #96]	@ (800231c <COM1_MspInit+0xa8>)
 80022ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022be:	4a17      	ldr	r2, [pc, #92]	@ (800231c <COM1_MspInit+0xa8>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <COM1_MspInit+0xa8>)
 80022ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80022d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80022e8:	2307      	movs	r3, #7
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	480b      	ldr	r0, [pc, #44]	@ (8002320 <COM1_MspInit+0xac>)
 80022f4:	f000 fb10 	bl	8002918 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80022f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002302:	2307      	movs	r3, #7
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4804      	ldr	r0, [pc, #16]	@ (8002320 <COM1_MspInit+0xac>)
 800230e:	f000 fb03 	bl	8002918 <HAL_GPIO_Init>
}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	@ 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	44020c00 	.word	0x44020c00
 8002320:	42020c00 	.word	0x42020c00

08002324 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f98a 	bl	8002642 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800232e:	f003 f8d5 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <HAL_Init+0x44>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	490b      	ldr	r1, [pc, #44]	@ (800236c <HAL_Init+0x48>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <HAL_Init+0x4c>)
 8002346:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002348:	2004      	movs	r0, #4
 800234a:	f000 f9cf 	bl	80026ec <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800234e:	200f      	movs	r0, #15
 8002350:	f000 f810 	bl	8002374 <HAL_InitTick>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e002      	b.n	8002364 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800235e:	f7fe fff5 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	44020c00 	.word	0x44020c00
 800236c:	080117ac 	.word	0x080117ac
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002380:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <HAL_InitTick+0xdc>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e05c      	b.n	8002446 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800238c:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <HAL_InitTick+0xe0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d10c      	bne.n	80023b2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002398:	4b2f      	ldr	r3, [pc, #188]	@ (8002458 <HAL_InitTick+0xe4>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <HAL_InitTick+0xdc>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e037      	b.n	8002422 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80023b2:	f000 f9f3 	bl	800279c <HAL_SYSTICK_GetCLKSourceConfig>
 80023b6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d023      	beq.n	8002406 <HAL_InitTick+0x92>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d82d      	bhi.n	8002420 <HAL_InitTick+0xac>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_InitTick+0x5e>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d00d      	beq.n	80023ec <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80023d0:	e026      	b.n	8002420 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80023d2:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <HAL_InitTick+0xe4>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <HAL_InitTick+0xdc>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80023e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	60fb      	str	r3, [r7, #12]
        break;
 80023ea:	e01a      	b.n	8002422 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_InitTick+0xdc>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80023fa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
        break;
 8002404:	e00d      	b.n	8002422 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_InitTick+0xdc>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002410:	fbb3 f3f2 	udiv	r3, r3, r2
 8002414:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	60fb      	str	r3, [r7, #12]
        break;
 800241e:	e000      	b.n	8002422 <HAL_InitTick+0xae>
        break;
 8002420:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f940 	bl	80026a8 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e009      	b.n	8002446 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002432:	2200      	movs	r2, #0
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	f04f 30ff 	mov.w	r0, #4294967295
 800243a:	f000 f90d 	bl	8002658 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800243e:	4a07      	ldr	r2, [pc, #28]	@ (800245c <HAL_InitTick+0xe8>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000028 	.word	0x20000028
 8002454:	e000e010 	.word	0xe000e010
 8002458:	20000004 	.word	0x20000004
 800245c:	20000024 	.word	0x20000024

08002460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000028 	.word	0x20000028
 8002484:	20000b38 	.word	0x20000b38

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000b38 	.word	0x20000b38

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000028 	.word	0x20000028

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	@ (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4907      	ldr	r1, [pc, #28]	@ (8002584 <__NVIC_EnableIRQ+0x38>)
 8002566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	@ (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	@ (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	@ 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	@ 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff4c 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002666:	f7ff ff63 	bl	8002530 <__NVIC_GetPriorityGrouping>
 800266a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7ff ffb3 	bl	80025dc <NVIC_EncodePriority>
 8002676:	4602      	mov	r2, r0
 8002678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff82 	bl	8002588 <__NVIC_SetPriority>
}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff56 	bl	800254c <__NVIC_EnableIRQ>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b8:	d301      	bcc.n	80026be <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00d      	b.n	80026da <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_SYSTICK_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80026c6:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_SYSTICK_Config+0x40>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_SYSTICK_Config+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <HAL_SYSTICK_Config+0x40>)
 80026d2:	f043 0303 	orr.w	r3, r3, #3
 80026d6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d844      	bhi.n	8002784 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002723 	.word	0x08002723
 8002704:	08002741 	.word	0x08002741
 8002708:	08002763 	.word	0x08002763
 800270c:	08002785 	.word	0x08002785
 8002710:	08002715 	.word	0x08002715
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002714:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1e      	ldr	r2, [pc, #120]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	6013      	str	r3, [r2, #0]
      break;
 8002720:	e031      	b.n	8002786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002722:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800272e:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002734:	4a18      	ldr	r2, [pc, #96]	@ (8002798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002736:	f023 030c 	bic.w	r3, r3, #12
 800273a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800273e:	e022      	b.n	8002786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800274c:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800274e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002752:	f023 030c 	bic.w	r3, r3, #12
 8002756:	4a10      	ldr	r2, [pc, #64]	@ (8002798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002760:	e011      	b.n	8002786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800276e:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002770:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002774:	f023 030c 	bic.w	r3, r3, #12
 8002778:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002782:	e000      	b.n	8002786 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002784:	bf00      	nop
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010
 8002798:	44020c00 	.word	0x44020c00

0800279c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80027a2:	4b17      	ldr	r3, [pc, #92]	@ (8002800 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80027ae:	2304      	movs	r3, #4
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	e01e      	b.n	80027f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80027b4:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80027b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d00f      	beq.n	80027e6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d80f      	bhi.n	80027ec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d003      	beq.n	80027e0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80027d8:	e008      	b.n	80027ec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
        break;
 80027de:	e008      	b.n	80027f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80027e0:	2301      	movs	r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
        break;
 80027e4:	e005      	b.n	80027f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80027e6:	2302      	movs	r3, #2
 80027e8:	607b      	str	r3, [r7, #4]
        break;
 80027ea:	e002      	b.n	80027f2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
        break;
 80027f0:	bf00      	nop
    }
  }
  return systick_source;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e010 	.word	0xe000e010
 8002804:	44020c00 	.word	0x44020c00

08002808 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	460b      	mov	r3, r1
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800281a:	7afb      	ldrb	r3, [r7, #11]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d011      	beq.n	8002844 <HAL_EXTI_RegisterCallback+0x3c>
 8002820:	2b02      	cmp	r3, #2
 8002822:	dc13      	bgt.n	800284c <HAL_EXTI_RegisterCallback+0x44>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_EXTI_RegisterCallback+0x26>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d007      	beq.n	800283c <HAL_EXTI_RegisterCallback+0x34>
 800282c:	e00e      	b.n	800284c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	609a      	str	r2, [r3, #8]
      break;
 800283a:	e00a      	b.n	8002852 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]
      break;
 8002842:	e006      	b.n	8002852 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	609a      	str	r2, [r3, #8]
      break;
 800284a:	e002      	b.n	8002852 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	75fb      	strb	r3, [r7, #23]
      break;
 8002850:	bf00      	nop
  }

  return status;
 8002852:	7dfb      	ldrb	r3, [r7, #23]
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e003      	b.n	800287c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2201      	movs	r2, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <HAL_EXTI_IRQHandler+0x88>)
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_EXTI_IRQHandler+0x8c>)
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4798      	blx	r3
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	4402200c 	.word	0x4402200c
 8002914:	44022010 	.word	0x44022010

08002918 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002926:	e136      	b.n	8002b96 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8128 	beq.w	8002b90 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x38>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b12      	cmp	r3, #18
 800294e:	d125      	bne.n	800299c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d00b      	beq.n	80029f0 <HAL_GPIO_Init+0xd8>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b12      	cmp	r3, #18
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4013      	ands	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4013      	ands	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d017      	beq.n	8002a8a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d07c      	beq.n	8002b90 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a96:	4a47      	ldr	r2, [pc, #284]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0a9a      	lsrs	r2, r3, #10
 8002abe:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb8 <HAL_GPIO_Init+0x2a0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	f002 0203 	and.w	r2, r2, #3
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	4093      	lsls	r3, r2
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002ad2:	4938      	ldr	r1, [pc, #224]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3318      	adds	r3, #24
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ae0:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002b04:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4013      	ands	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002b2e:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002b34:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4013      	ands	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002b5a:	4a16      	ldr	r2, [pc, #88]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002b88:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <HAL_GPIO_Init+0x29c>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	3301      	adds	r3, #1
 8002b94:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f47f aec1 	bne.w	8002928 <HAL_GPIO_Init+0x10>
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	44022000 	.word	0x44022000
 8002bb8:	002f7f7f 	.word	0x002f7f7f

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4013      	ands	r3, r2
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43d9      	mvns	r1, r3
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e02a      	b.n	8002c88 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fb88 	bl	800135c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8002c62:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e08d      	b.n	8002dbe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe fb6c 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	@ 0x24
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ce0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e006      	b.n	8002d18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d108      	bne.n	8002d32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	e007      	b.n	8002d42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d138      	bne.n	8002e4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e032      	b.n	8002e50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2224      	movs	r2, #36	@ 0x24
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d139      	bne.n	8002ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e033      	b.n	8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002eae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002f00:	230a      	movs	r3, #10
 8002f02:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002f04:	e002      	b.n	8002f0c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f9      	bne.n	8002f06 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f28:	b29b      	uxth	r3, r3
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002f42:	230a      	movs	r3, #10
 8002f44:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002f46:	e002      	b.n	8002f4e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6a:	b29b      	uxth	r3, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002f84:	230a      	movs	r3, #10
 8002f86:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002f88:	e002      	b.n	8002f90 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fac:	b29b      	uxth	r3, r3
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0f3      	b.n	80031b4 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe fd99 	bl	8001b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f008 ff59 	bl	800beaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7c1a      	ldrb	r2, [r3, #16]
 8003000:	f88d 2000 	strb.w	r2, [sp]
 8003004:	3304      	adds	r3, #4
 8003006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003008:	f008 ff1d 	bl	800be46 <USB_CoreInit>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0ca      	b.n	80031b4 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f008 ff55 	bl	800bed4 <USB_SetCurrentMode>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0bb      	b.n	80031b4 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e03f      	b.n	80030c2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	3315      	adds	r3, #21
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	3314      	adds	r3, #20
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3317      	adds	r3, #23
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	3324      	adds	r3, #36	@ 0x24
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3328      	adds	r3, #40	@ 0x28
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	3304      	adds	r3, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	3301      	adds	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d3ba      	bcc.n	8003042 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e044      	b.n	800315c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	3301      	adds	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	791b      	ldrb	r3, [r3, #4]
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3b5      	bcc.n	80030d2 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7c1a      	ldrb	r2, [r3, #16]
 800316e:	f88d 2000 	strb.w	r2, [sp]
 8003172:	3304      	adds	r3, #4
 8003174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003176:	f008 fed0 	bl	800bf1a <USB_DevInit>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e013      	b.n	80031b4 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7b1b      	ldrb	r3, [r3, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 fb6b 	bl	800487e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f00a fd29 	bl	800dc04 <USB_DevDisconnect>

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_PCD_Start+0x16>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e012      	b.n	80031f8 <HAL_PCD_Start+0x3c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f008 fe4f 	bl	800be82 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f00a fcfa 	bl	800dbe2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f00a fd0a 	bl	800dc26 <USB_ReadInterrupts>
 8003212:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 faf2 	bl	8003808 <PCD_EP_ISR_Handler>

    return;
 8003224:	e0de      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800323e:	400b      	ands	r3, r1
 8003240:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f00b fbb9 	bl	800e9ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003248:	2100      	movs	r1, #0
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8e1 	bl	8003412 <HAL_PCD_SetAddress>

    return;
 8003250:	e0c8      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800326a:	400b      	ands	r3, r1
 800326c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800326e:	e0b9      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8003288:	400b      	ands	r3, r1
 800328a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800328c:	e0aa      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d029      	beq.n	80032ec <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0204 	bic.w	r2, r2, #4
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0208 	bic.w	r2, r2, #8
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032ca:	2100      	movs	r1, #0
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f001 faf8 	bl	80048c2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f893 	bl	80033fe <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80032e6:	400b      	ands	r3, r1
 80032e8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80032ea:	e07b      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01c      	beq.n	8003330 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0208 	orr.w	r2, r2, #8
 8003304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8003314:	400b      	ands	r3, r1
 8003316:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0204 	orr.w	r2, r2, #4
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f85e 	bl	80033ea <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800332e:	e059      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d033      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8003348:	400b      	ands	r3, r1
 800334a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003352:	2b00      	cmp	r3, #0
 8003354:	d121      	bne.n	800339a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0204 	orr.w	r2, r2, #4
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003390:	2101      	movs	r1, #1
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f001 fa95 	bl	80048c2 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003398:	e024      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f825 	bl	80033ea <HAL_PCD_SuspendCallback>
    return;
 80033a0:	e020      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80033ba:	400b      	ands	r3, r1
 80033bc:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f00b faed 	bl	800e99e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033c4:	e00e      	b.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d009      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80033de:	400b      	ands	r3, r1
 80033e0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80033e2:	bf00      	nop
  }
}
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_PCD_SetAddress+0x1a>
 8003428:	2302      	movs	r3, #2
 800342a:	e012      	b.n	8003452 <HAL_PCD_SetAddress+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f00a fbba 	bl	800dbbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	4608      	mov	r0, r1
 8003464:	4611      	mov	r1, r2
 8003466:	461a      	mov	r2, r3
 8003468:	4603      	mov	r3, r0
 800346a:	70fb      	strb	r3, [r7, #3]
 800346c:	460b      	mov	r3, r1
 800346e:	803b      	strh	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347c:	2b00      	cmp	r3, #0
 800347e:	da0f      	bge.n	80034a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	3310      	adds	r3, #16
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	705a      	strb	r2, [r3, #1]
 800349e:	e00f      	b.n	80034c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 0207 	and.w	r2, r3, #7
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034cc:	883b      	ldrh	r3, [r7, #0]
 80034ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	78ba      	ldrb	r2, [r7, #2]
 80034da:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034dc:	78bb      	ldrb	r3, [r7, #2]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d102      	bne.n	80034e8 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_PCD_EP_Open+0x9c>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e00e      	b.n	8003514 <HAL_PCD_EP_Open+0xba>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	4618      	mov	r0, r3
 8003506:	f008 fd2b 	bl	800bf60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8003512:	7afb      	ldrb	r3, [r7, #11]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da0f      	bge.n	8003550 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 0207 	and.w	r2, r3, #7
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	3310      	adds	r3, #16
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	705a      	strb	r2, [r3, #1]
 800354e:	e00f      	b.n	8003570 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 0207 	and.w	r2, r3, #7
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	b2da      	uxtb	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_PCD_EP_Close+0x6e>
 8003586:	2302      	movs	r3, #2
 8003588:	e00e      	b.n	80035a8 <HAL_PCD_EP_Close+0x8c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68f9      	ldr	r1, [r7, #12]
 8003598:	4618      	mov	r0, r3
 800359a:	f009 f841 	bl	800c620 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	f003 0207 	and.w	r2, r3, #7
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	3304      	adds	r3, #4
 80035d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f2:	7afb      	ldrb	r3, [r7, #11]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	4618      	mov	r0, r3
 8003606:	f009 f995 	bl	800c934 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 0207 	and.w	r2, r3, #7
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	460b      	mov	r3, r1
 8003652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	7afb      	ldrb	r3, [r7, #11]
 8003656:	f003 0207 	and.w	r2, r3, #7
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	3310      	adds	r3, #16
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	3304      	adds	r3, #4
 800366a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2201      	movs	r2, #1
 8003690:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f009 f945 	bl	800c934 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	7912      	ldrb	r2, [r2, #4]
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e040      	b.n	8003754 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da0f      	bge.n	80036fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 0207 	and.w	r2, r3, #7
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	3310      	adds	r3, #16
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	705a      	strb	r2, [r3, #1]
 80036f8:	e00d      	b.n	8003716 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_PCD_EP_SetStall+0x82>
 8003732:	2302      	movs	r3, #2
 8003734:	e00e      	b.n	8003754 <HAL_PCD_EP_SetStall+0xa0>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	4618      	mov	r0, r3
 8003746:	f00a f95f 	bl	800da08 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	7912      	ldrb	r2, [r2, #4]
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e042      	b.n	8003800 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800377a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da0f      	bge.n	80037a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3310      	adds	r3, #16
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	3304      	adds	r3, #4
 8003798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	705a      	strb	r2, [r3, #1]
 80037a0:	e00f      	b.n	80037c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 0207 	and.w	r2, r3, #7
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_EP_ClrStall+0x86>
 80037de:	2302      	movs	r3, #2
 80037e0:	e00e      	b.n	8003800 <HAL_PCD_EP_ClrStall+0xa4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f00a f94f 	bl	800da94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	@ 0x38
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003810:	e326      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800381a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003826:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 8124 	bne.w	8003a78 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003830:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d13e      	bne.n	80038b8 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b89      	ldr	r3, [pc, #548]	@ (8003a68 <PCD_EP_ISR_Handler+0x260>)
 8003842:	4013      	ands	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003850:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3314      	adds	r3, #20
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003862:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003870:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	441a      	add	r2, r3
 800387c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003880:	2100      	movs	r1, #0
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f00b f871 	bl	800e96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7c5b      	ldrb	r3, [r3, #17]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 82e6 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x658>
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 82e1 	bne.w	8003e60 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7c5b      	ldrb	r3, [r3, #17]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	745a      	strb	r2, [r3, #17]
 80038b6:	e2d3      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80038be:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d027      	beq.n	8003922 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7ff fb09 	bl	8002ef4 <PCD_GET_EP_RX_CNT>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80038f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f00a fa01 	bl	800dd04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b58      	ldr	r3, [pc, #352]	@ (8003a6c <PCD_EP_ISR_Handler+0x264>)
 800390a:	4013      	ands	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003918:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f00a fff8 	bl	800e910 <HAL_PCD_SetupStageCallback>
 8003920:	e29e      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8003922:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003926:	2b00      	cmp	r3, #0
 8003928:	f280 829a 	bge.w	8003e60 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b4e      	ldr	r3, [pc, #312]	@ (8003a6c <PCD_EP_ISR_Handler+0x264>)
 8003934:	4013      	ands	r3, r2
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800393e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003942:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7ff fad0 	bl	8002ef4 <PCD_GET_EP_RX_CNT>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d019      	beq.n	8003998 <PCD_EP_ISR_Handler+0x190>
 8003964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	6959      	ldr	r1, [r3, #20]
 8003974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003976:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800397c:	b29b      	uxth	r3, r3
 800397e:	f00a f9c1 	bl	800dd04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	441a      	add	r2, r3
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003990:	2100      	movs	r1, #0
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f00a ffce 	bl	800e934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80039a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 825a 	bne.w	8003e60 <PCD_EP_ISR_Handler+0x658>
 80039ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039b6:	f000 8253 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 80039c0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80039c4:	6053      	str	r3, [r2, #4]
 80039c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <PCD_EP_ISR_Handler+0x1d4>
 80039ce:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 80039d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039d8:	6053      	str	r3, [r2, #4]
 80039da:	e02e      	b.n	8003a3a <PCD_EP_ISR_Handler+0x232>
 80039dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80039e2:	d814      	bhi.n	8003a0e <PCD_EP_ISR_Handler+0x206>
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <PCD_EP_ISR_Handler+0x1f6>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3301      	adds	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	069b      	lsls	r3, r3, #26
 8003a06:	491a      	ldr	r1, [pc, #104]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
 8003a0c:	e015      	b.n	8003a3a <PCD_EP_ISR_Handler+0x232>
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <PCD_EP_ISR_Handler+0x220>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	069b      	lsls	r3, r3, #26
 8003a30:	4313      	orrs	r3, r2
 8003a32:	4a0f      	ldr	r2, [pc, #60]	@ (8003a70 <PCD_EP_ISR_Handler+0x268>)
 8003a34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a38:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <PCD_EP_ISR_Handler+0x26c>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e1fb      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
 8003a68:	07ff8f0f 	.word	0x07ff8f0f
 8003a6c:	07ff0f8f 	.word	0x07ff0f8f
 8003a70:	40016400 	.word	0x40016400
 8003a74:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8003a8a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f280 80bd 	bge.w	8003c0e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8003d20 <PCD_EP_ISR_Handler+0x518>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003abe:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ac0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	7b1b      	ldrb	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d116      	bne.n	8003b0e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f7ff fa02 	bl	8002ef4 <PCD_GET_EP_RX_CNT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d067      	beq.n	8003bca <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b00:	6959      	ldr	r1, [r3, #20]
 8003b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b04:	88da      	ldrh	r2, [r3, #6]
 8003b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b08:	f00a f8fc 	bl	800dd04 <USB_ReadPMA>
 8003b0c:	e05d      	b.n	8003bca <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b10:	78db      	ldrb	r3, [r3, #3]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d108      	bne.n	8003b28 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b16:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f9ad 	bl	8003e7c <HAL_PCD_EP_DB_Receive>
 8003b22:	4603      	mov	r3, r0
 8003b24:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003b26:	e050      	b.n	8003bca <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <PCD_EP_ISR_Handler+0x51c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	441a      	add	r2, r3
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b56:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff f9db 	bl	8002f36 <PCD_GET_EP_DBUF0_CNT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003b84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01f      	beq.n	8003bca <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b90:	6959      	ldr	r1, [r3, #20]
 8003b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b94:	891a      	ldrh	r2, [r3, #8]
 8003b96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b98:	f00a f8b4 	bl	800dd04 <USB_ReadPMA>
 8003b9c:	e015      	b.n	8003bca <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f7ff f9e5 	bl	8002f78 <PCD_GET_EP_DBUF1_CNT>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbe:	6959      	ldr	r1, [r3, #20]
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc2:	895a      	ldrh	r2, [r3, #10]
 8003bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bc6:	f00a f89d 	bl	800dd04 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bd0:	441a      	add	r2, r3
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bdc:	441a      	add	r2, r3
 8003bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <PCD_EP_ISR_Handler+0x3ec>
 8003bea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d206      	bcs.n	8003c02 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f00a fe9a 	bl	800e934 <HAL_PCD_DataOutStageCallback>
 8003c00:	e005      	b.n	8003c0e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f008 fe93 	bl	800c934 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003c0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8123 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c1a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	3310      	adds	r3, #16
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b39      	ldr	r3, [pc, #228]	@ (8003d28 <PCD_EP_ISR_Handler+0x520>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c5a:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	78db      	ldrb	r3, [r3, #3]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 80b8 	bne.w	8003dd6 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6e:	7b1b      	ldrb	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80a9 	beq.w	8003dc8 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d055      	beq.n	8003d2c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d124      	bne.n	8003cd2 <PCD_EP_ISR_Handler+0x4ca>
 8003c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ca2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ca6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e07a      	b.n	8003dc8 <PCD_EP_ISR_Handler+0x5c0>
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d176      	bne.n	8003dc8 <PCD_EP_ISR_Handler+0x5c0>
 8003cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ce4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003d06:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e054      	b.n	8003dc8 <PCD_EP_ISR_Handler+0x5c0>
 8003d1e:	bf00      	nop
 8003d20:	07ff0f8f 	.word	0x07ff0f8f
 8003d24:	07ff8f8f 	.word	0x07ff8f8f
 8003d28:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d124      	bne.n	8003d7e <PCD_EP_ISR_Handler+0x576>
 8003d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d52:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	e024      	b.n	8003dc8 <PCD_EP_ISR_Handler+0x5c0>
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d120      	bne.n	8003dc8 <PCD_EP_ISR_Handler+0x5c0>
 8003d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003da0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da4:	b292      	uxth	r2, r2
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003db2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f00a fdcb 	bl	800e96a <HAL_PCD_DataInStageCallback>
 8003dd4:	e044      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003dd6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d139      	bne.n	8003e54 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df8:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d906      	bls.n	8003e12 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	619a      	str	r2, [r3, #24]
 8003e10:	e002      	b.n	8003e18 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f00a fd9f 	bl	800e96a <HAL_PCD_DataInStageCallback>
 8003e2c:	e018      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e34:	441a      	add	r2, r3
 8003e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3c:	69da      	ldr	r2, [r3, #28]
 8003e3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e40:	441a      	add	r2, r3
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f008 fd71 	bl	800c934 <USB_EPStartXfer>
 8003e52:	e005      	b.n	8003e60 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e56:	461a      	mov	r2, r3
 8003e58:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8e8 	bl	8004030 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f47f acd1 	bne.w	8003812 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3738      	adds	r7, #56	@ 0x38
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop

08003e7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d062      	beq.n	8003f5a <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7ff f849 	bl	8002f36 <PCD_GET_EP_DBUF0_CNT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	8bfb      	ldrh	r3, [r7, #30]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d306      	bcc.n	8003ec0 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	8bfb      	ldrh	r3, [r7, #30]
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	619a      	str	r2, [r3, #24]
 8003ebe:	e002      	b.n	8003ec6 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11b      	bne.n	8003f06 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b52      	ldr	r3, [pc, #328]	@ (8004028 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f04:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d017      	beq.n	8003f40 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b42      	ldr	r3, [pc, #264]	@ (800402c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f3e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003f40:	8bfb      	ldrh	r3, [r7, #30]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d06b      	beq.n	800401e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6959      	ldr	r1, [r3, #20]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	891a      	ldrh	r2, [r3, #8]
 8003f52:	8bfb      	ldrh	r3, [r7, #30]
 8003f54:	f009 fed6 	bl	800dd04 <USB_ReadPMA>
 8003f58:	e061      	b.n	800401e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7ff f807 	bl	8002f78 <PCD_GET_EP_DBUF1_CNT>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	8bfb      	ldrh	r3, [r7, #30]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d306      	bcc.n	8003f86 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	8bfb      	ldrh	r3, [r7, #30]
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	619a      	str	r2, [r3, #24]
 8003f84:	e002      	b.n	8003f8c <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11b      	bne.n	8003fcc <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	441a      	add	r2, r3
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fca:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d117      	bne.n	8004006 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b11      	ldr	r3, [pc, #68]	@ (800402c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004000:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004004:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8004006:	8bfb      	ldrh	r3, [r7, #30]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6959      	ldr	r1, [r3, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	895a      	ldrh	r2, [r3, #10]
 8004018:	8bfb      	ldrh	r3, [r7, #30]
 800401a:	f009 fe73 	bl	800dd04 <USB_ReadPMA>
    }
  }

  return count;
 800401e:	8bfb      	ldrh	r3, [r7, #30]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3728      	adds	r7, #40	@ 0x28
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	07ffbf8f 	.word	0x07ffbf8f
 800402c:	07ff8f8f 	.word	0x07ff8f8f

08004030 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08e      	sub	sp, #56	@ 0x38
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 81d5 	beq.w	80043f4 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe ff6e 	bl	8002f36 <PCD_GET_EP_DBUF0_CNT>
 800405a:	4603      	mov	r3, r0
 800405c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	8bfb      	ldrh	r3, [r7, #30]
 8004064:	429a      	cmp	r2, r3
 8004066:	d906      	bls.n	8004076 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	8bfb      	ldrh	r3, [r7, #30]
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	e002      	b.n	800407c <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 80c1 	bne.w	8004208 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d124      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0xa8>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ac:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e024      	b.n	8004122 <HAL_PCD_EP_DB_Transmit+0xf2>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d120      	bne.n	8004122 <HAL_PCD_EP_DB_Transmit+0xf2>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040fe:	b292      	uxth	r2, r2
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800410c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800411a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d124      	bne.n	8004174 <HAL_PCD_EP_DB_Transmit+0x144>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004134:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004144:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004148:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004158:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004168:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800416c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e024      	b.n	80041be <HAL_PCD_EP_DB_Transmit+0x18e>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d120      	bne.n	80041be <HAL_PCD_EP_DB_Transmit+0x18e>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800419a:	b292      	uxth	r2, r2
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80041a8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ba:	6852      	ldr	r2, [r2, #4]
 80041bc:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f00a fbd0 	bl	800e96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 82e5 	beq.w	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004420 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e2cb      	b.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b7f      	ldr	r3, [pc, #508]	@ (8004420 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004224:	4013      	ands	r3, r2
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800423c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004240:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 82a9 	bne.w	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	8bfb      	ldrh	r3, [r7, #30]
 8004254:	441a      	add	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	8bfb      	ldrh	r3, [r7, #30]
 8004260:	441a      	add	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d309      	bcc.n	8004286 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	621a      	str	r2, [r3, #32]
 8004284:	e014      	b.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 800428e:	8bfb      	ldrh	r3, [r7, #30]
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800429a:	e009      	b.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d16a      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x35e>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d112      	bne.n	8004308 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004300:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e06a      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	2b3e      	cmp	r3, #62	@ 0x3e
 800430c:	d81e      	bhi.n	800434c <HAL_PCD_EP_DB_Transmit+0x31c>
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	3301      	adds	r3, #1
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800432e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004336:	069a      	lsls	r2, r3, #26
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004342:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e048      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x3ae>
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_PCD_EP_DB_Transmit+0x332>
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	3b01      	subs	r3, #1
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800436c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	069b      	lsls	r3, r3, #26
 8004376:	431a      	orrs	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004382:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004386:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e027      	b.n	80043de <HAL_PCD_EP_DB_Transmit+0x3ae>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d123      	bne.n	80043de <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043b4:	b292      	uxth	r2, r2
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043c6:	6819      	ldr	r1, [r3, #0]
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	041a      	lsls	r2, r3, #16
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6959      	ldr	r1, [r3, #20]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	891a      	ldrh	r2, [r3, #8]
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f009 fc28 	bl	800dc42 <USB_WritePMA>
 80043f2:	e1d5      	b.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7fe fdba 	bl	8002f78 <PCD_GET_EP_DBUF1_CNT>
 8004404:	4603      	mov	r3, r0
 8004406:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	8bfb      	ldrh	r3, [r7, #30]
 800440e:	429a      	cmp	r2, r3
 8004410:	d308      	bcc.n	8004424 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	8bfb      	ldrh	r3, [r7, #30]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	619a      	str	r2, [r3, #24]
 800441e:	e004      	b.n	800442a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8004420:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 80c1 	bne.w	80045b6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d124      	bne.n	8004486 <HAL_PCD_EP_DB_Transmit+0x456>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004446:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800445a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800447a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800447e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e024      	b.n	80044d0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d120      	bne.n	80044d0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004498:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ac:	b292      	uxth	r2, r2
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80044ba:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d124      	bne.n	8004522 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044f6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004506:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004516:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800451a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	e024      	b.n	800456c <HAL_PCD_EP_DB_Transmit+0x53c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d120      	bne.n	800456c <HAL_PCD_EP_DB_Transmit+0x53c>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004534:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004544:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004548:	b292      	uxth	r2, r2
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004556:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004564:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004568:	6852      	ldr	r2, [r2, #4]
 800456a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f00a f9f9 	bl	800e96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 810e 	bne.w	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b95      	ldr	r3, [pc, #596]	@ (80047ec <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004596:	4013      	ands	r3, r2
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e0f4      	b.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d117      	bne.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b86      	ldr	r3, [pc, #536]	@ (80047ec <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	441a      	add	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ee:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	f040 80d2 	bne.w	80047a0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	8bfb      	ldrh	r3, [r7, #30]
 8004602:	441a      	add	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	8bfb      	ldrh	r3, [r7, #30]
 800460e:	441a      	add	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d309      	bcc.n	8004634 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	1ad2      	subs	r2, r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	621a      	str	r2, [r3, #32]
 8004632:	e014      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 800463c:	8bfb      	ldrh	r3, [r7, #30]
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004648:	e009      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d16a      	bne.n	800473c <HAL_PCD_EP_DB_Transmit+0x70c>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004670:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004680:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004684:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	2b00      	cmp	r3, #0
 800468e:	d112      	bne.n	80046b6 <HAL_PCD_EP_DB_Transmit+0x686>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800469a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e06a      	b.n	800478c <HAL_PCD_EP_DB_Transmit+0x75c>
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80046ba:	d81e      	bhi.n	80046fa <HAL_PCD_EP_DB_Transmit+0x6ca>
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	069a      	lsls	r2, r3, #26
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	e048      	b.n	800478c <HAL_PCD_EP_DB_Transmit+0x75c>
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	3b01      	subs	r3, #1
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800471a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	069b      	lsls	r3, r3, #26
 8004724:	431a      	orrs	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004734:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	e027      	b.n	800478c <HAL_PCD_EP_DB_Transmit+0x75c>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d123      	bne.n	800478c <HAL_PCD_EP_DB_Transmit+0x75c>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800474e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800475e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004762:	b292      	uxth	r2, r2
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004770:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	041a      	lsls	r2, r3, #16
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6959      	ldr	r1, [r3, #20]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	895a      	ldrh	r2, [r3, #10]
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	b29b      	uxth	r3, r3
 800479c:	f009 fa51 	bl	800dc42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	f083 0310 	eor.w	r3, r3, #16
 80047bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	f083 0320 	eor.w	r3, r3, #32
 80047c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	441a      	add	r2, r3
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3738      	adds	r7, #56	@ 0x38
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	07ff8f8f 	.word	0x07ff8f8f
 80047f0:	07ff8fbf 	.word	0x07ff8fbf

080047f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	4613      	mov	r3, r2
 8004804:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004806:	897b      	ldrh	r3, [r7, #10]
 8004808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004812:	897b      	ldrh	r3, [r7, #10]
 8004814:	f003 0207 	and.w	r2, r3, #7
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	3310      	adds	r3, #16
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e00a      	b.n	8004842 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800482c:	897a      	ldrh	r2, [r7, #10]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004842:	893b      	ldrh	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d107      	bne.n	8004858 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2200      	movs	r2, #0
 800484c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	b29a      	uxth	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	80da      	strh	r2, [r3, #6]
 8004856:	e00b      	b.n	8004870 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2201      	movs	r2, #1
 800485c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	b29a      	uxth	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	b29a      	uxth	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80048e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	44020800 	.word	0x44020800

080048fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f000 bc28 	b.w	8005160 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004910:	4b94      	ldr	r3, [pc, #592]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f003 0318 	and.w	r3, r3, #24
 8004918:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800491a:	4b92      	ldr	r3, [pc, #584]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05b      	beq.n	80049e8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x46>
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b18      	cmp	r3, #24
 800493a:	d114      	bne.n	8004966 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d111      	bne.n	8004966 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f000 bc08 	b.w	8005160 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004950:	4b84      	ldr	r3, [pc, #528]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	4981      	ldr	r1, [pc, #516]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004960:	4313      	orrs	r3, r2
 8004962:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004964:	e040      	b.n	80049e8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d023      	beq.n	80049b6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800496e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a7c      	ldr	r2, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fd fd85 	bl	8002488 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004982:	f7fd fd81 	bl	8002488 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e3e5      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004994:	4b73      	ldr	r3, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80049a0:	4b70      	ldr	r3, [pc, #448]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	496d      	ldr	r1, [pc, #436]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	618b      	str	r3, [r1, #24]
 80049b4:	e018      	b.n	80049e8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049b6:	4b6b      	ldr	r3, [pc, #428]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a6a      	ldr	r2, [pc, #424]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 80049bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd fd61 	bl	8002488 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80049ca:	f7fd fd5d 	bl	8002488 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e3c1      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80049dc:	4b61      	ldr	r3, [pc, #388]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f0      	bne.n	80049ca <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a0 	beq.w	8004b36 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_OscConfig+0x10c>
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b18      	cmp	r3, #24
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 8092 	bne.w	8004b36 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e3a4      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCC_OscConfig+0x132>
 8004a20:	4b50      	ldr	r3, [pc, #320]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a4f      	ldr	r2, [pc, #316]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e058      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1e4>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x160>
 8004a36:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b48      	ldr	r3, [pc, #288]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a47      	ldr	r2, [pc, #284]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b45      	ldr	r3, [pc, #276]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a44      	ldr	r2, [pc, #272]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e041      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1e4>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a64:	d112      	bne.n	8004a8c <HAL_RCC_OscConfig+0x190>
 8004a66:	4b3f      	ldr	r3, [pc, #252]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b3c      	ldr	r3, [pc, #240]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3b      	ldr	r2, [pc, #236]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b39      	ldr	r3, [pc, #228]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e029      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1e4>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004a94:	d112      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
 8004a96:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a32      	ldr	r2, [pc, #200]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	4b30      	ldr	r3, [pc, #192]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004aa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e011      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1e4>
 8004abc:	4b29      	ldr	r3, [pc, #164]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a28      	ldr	r2, [pc, #160]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b26      	ldr	r3, [pc, #152]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a25      	ldr	r2, [pc, #148]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4b23      	ldr	r3, [pc, #140]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a22      	ldr	r2, [pc, #136]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004ada:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fcce 	bl	8002488 <HAL_GetTick>
 8004aec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004af0:	f7fd fcca 	bl	8002488 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	@ 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e32e      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	4b18      	ldr	r3, [pc, #96]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x1f4>
 8004b0e:	e012      	b.n	8004b36 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fcba 	bl	8002488 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b18:	f7fd fcb6 	bl	8002488 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	@ 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e31a      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <HAL_RCC_OscConfig+0x268>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 809a 	beq.w	8004c78 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_RCC_OscConfig+0x25a>
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b18      	cmp	r3, #24
 8004b4e:	d149      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d146      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e2fe      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
 8004b62:	bf00      	nop
 8004b64:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d11c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004b6e:	4b9a      	ldr	r3, [pc, #616]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0218 	and.w	r2, r3, #24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d014      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004b7e:	4b96      	ldr	r3, [pc, #600]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 0218 	bic.w	r2, r3, #24
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	4993      	ldr	r1, [pc, #588]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004b90:	f000 fdd0 	bl	8005734 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b94:	4b91      	ldr	r3, [pc, #580]	@ (8004ddc <HAL_RCC_OscConfig+0x4e0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fd fbeb 	bl	8002374 <HAL_InitTick>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e2db      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fc6e 	bl	8002488 <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004bb0:	f7fd fc6a 	bl	8002488 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e2ce      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc2:	4b85      	ldr	r3, [pc, #532]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004bce:	4b82      	ldr	r3, [pc, #520]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	497e      	ldr	r1, [pc, #504]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004be2:	e049      	b.n	8004c78 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004bec:	4b7a      	ldr	r3, [pc, #488]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 0218 	bic.w	r2, r3, #24
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	4977      	ldr	r1, [pc, #476]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004bfe:	4b76      	ldr	r3, [pc, #472]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a75      	ldr	r2, [pc, #468]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd fc3d 	bl	8002488 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c12:	f7fd fc39 	bl	8002488 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e29d      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c24:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c30:	4b69      	ldr	r3, [pc, #420]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	4966      	ldr	r1, [pc, #408]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]
 8004c44:	e018      	b.n	8004c78 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c46:	4b64      	ldr	r3, [pc, #400]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a63      	ldr	r2, [pc, #396]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fd fc19 	bl	8002488 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c5a:	f7fd fc15 	bl	8002488 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e279      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d03c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01c      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8c:	4b52      	ldr	r3, [pc, #328]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c92:	4a51      	ldr	r2, [pc, #324]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fd fbf4 	bl	8002488 <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004ca4:	f7fd fbf0 	bl	8002488 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e254      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004cb6:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ef      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3a8>
 8004cc4:	e01b      	b.n	8004cfe <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc6:	4b44      	ldr	r3, [pc, #272]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ccc:	4a42      	ldr	r2, [pc, #264]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004cce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fbd7 	bl	8002488 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004cde:	f7fd fbd3 	bl	8002488 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e237      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004cf0:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1ef      	bne.n	8004cde <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80d2 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d0c:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <HAL_RCC_OscConfig+0x4e4>)
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d118      	bne.n	8004d4a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004d18:	4b31      	ldr	r3, [pc, #196]	@ (8004de0 <HAL_RCC_OscConfig+0x4e4>)
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <HAL_RCC_OscConfig+0x4e4>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d24:	f7fd fbb0 	bl	8002488 <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2c:	f7fd fbac 	bl	8002488 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e210      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d3e:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <HAL_RCC_OscConfig+0x4e4>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d108      	bne.n	8004d64 <HAL_RCC_OscConfig+0x468>
 8004d52:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d58:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d62:	e074      	b.n	8004e4e <HAL_RCC_OscConfig+0x552>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d118      	bne.n	8004d9e <HAL_RCC_OscConfig+0x4a2>
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d72:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d7c:	4b16      	ldr	r3, [pc, #88]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d82:	4a15      	ldr	r2, [pc, #84]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d92:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d9c:	e057      	b.n	8004e4e <HAL_RCC_OscConfig+0x552>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d11e      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4e8>
 8004da6:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dac:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004db6:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dbc:	4a06      	ldr	r2, [pc, #24]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004dc6:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dcc:	4a02      	ldr	r2, [pc, #8]	@ (8004dd8 <HAL_RCC_OscConfig+0x4dc>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004dd6:	e03a      	b.n	8004e4e <HAL_RCC_OscConfig+0x552>
 8004dd8:	44020c00 	.word	0x44020c00
 8004ddc:	20000024 	.word	0x20000024
 8004de0:	44020800 	.word	0x44020800
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b85      	cmp	r3, #133	@ 0x85
 8004dea:	d118      	bne.n	8004e1e <HAL_RCC_OscConfig+0x522>
 8004dec:	4ba2      	ldr	r3, [pc, #648]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004df2:	4aa1      	ldr	r2, [pc, #644]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004df4:	f043 0304 	orr.w	r3, r3, #4
 8004df8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e02:	4a9d      	ldr	r2, [pc, #628]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e0c:	4b9a      	ldr	r3, [pc, #616]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e12:	4a99      	ldr	r2, [pc, #612]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e1c:	e017      	b.n	8004e4e <HAL_RCC_OscConfig+0x552>
 8004e1e:	4b96      	ldr	r3, [pc, #600]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e24:	4a94      	ldr	r2, [pc, #592]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e2e:	4b92      	ldr	r3, [pc, #584]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e34:	4a90      	ldr	r2, [pc, #576]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e36:	f023 0304 	bic.w	r3, r3, #4
 8004e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e44:	4a8c      	ldr	r2, [pc, #560]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fd fb17 	bl	8002488 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fd fb13 	bl	8002488 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e175      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e74:	4b80      	ldr	r3, [pc, #512]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0ed      	beq.n	8004e5e <HAL_RCC_OscConfig+0x562>
 8004e82:	e015      	b.n	8004eb0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fb00 	bl	8002488 <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fd fafc 	bl	8002488 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e15e      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea2:	4b75      	ldr	r3, [pc, #468]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ed      	bne.n	8004e8c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d036      	beq.n	8004f2a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004eca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fd fada 	bl	8002488 <HAL_GetTick>
 8004ed4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004ed8:	f7fd fad6 	bl	8002488 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e13a      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004eea:	4b63      	ldr	r3, [pc, #396]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x5dc>
 8004ef6:	e018      	b.n	8004f2a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5e      	ldr	r2, [pc, #376]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004efe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7fd fac0 	bl	8002488 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f0c:	f7fd fabc 	bl	8002488 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e120      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f1e:	4b56      	ldr	r3, [pc, #344]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8115 	beq.w	800515e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b18      	cmp	r3, #24
 8004f38:	f000 80af 	beq.w	800509a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	f040 8086 	bne.w	8005052 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004f46:	4b4c      	ldr	r3, [pc, #304]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fd fa99 	bl	8002488 <HAL_GetTick>
 8004f56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004f5a:	f7fd fa95 	bl	8002488 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0f9      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f6c:	4b42      	ldr	r3, [pc, #264]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004f78:	4b3f      	ldr	r3, [pc, #252]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f80:	f023 0303 	bic.w	r3, r3, #3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f8c:	0212      	lsls	r2, r2, #8
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	4939      	ldr	r1, [pc, #228]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	025b      	lsls	r3, r3, #9
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fc6:	492c      	ldr	r1, [pc, #176]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	4a29      	ldr	r2, [pc, #164]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fdc:	4a26      	ldr	r2, [pc, #152]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004fe2:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	4a24      	ldr	r2, [pc, #144]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004fe8:	f043 0310 	orr.w	r3, r3, #16
 8004fec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004fee:	4b22      	ldr	r3, [pc, #136]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	f023 020c 	bic.w	r2, r3, #12
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	491f      	ldr	r1, [pc, #124]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005000:	4b1d      	ldr	r3, [pc, #116]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005004:	f023 0220 	bic.w	r2, r3, #32
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500c:	491a      	ldr	r1, [pc, #104]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005012:	4b19      	ldr	r3, [pc, #100]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800501e:	4b16      	ldr	r3, [pc, #88]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005024:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fd fa2d 	bl	8002488 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005032:	f7fd fa29 	bl	8002488 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e08d      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x736>
 8005050:	e085      	b.n	800515e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <HAL_RCC_OscConfig+0x77c>)
 8005058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800505c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fd fa13 	bl	8002488 <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005066:	f7fd fa0f 	bl	8002488 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d903      	bls.n	800507c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e073      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
 8005078:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800507c:	4b3a      	ldr	r3, [pc, #232]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ee      	bne.n	8005066 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005088:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	4a36      	ldr	r2, [pc, #216]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800508e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	6293      	str	r3, [r2, #40]	@ 0x28
 8005098:	e061      	b.n	800515e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800509a:	4b33      	ldr	r3, [pc, #204]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050a0:	4b31      	ldr	r3, [pc, #196]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 80050a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d031      	beq.n	8005112 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f003 0203 	and.w	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d12a      	bne.n	8005112 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d122      	bne.n	8005112 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d11a      	bne.n	8005112 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	0a5b      	lsrs	r3, r3, #9
 80050e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d111      	bne.n	8005112 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d108      	bne.n	8005112 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	0e1b      	lsrs	r3, r3, #24
 8005104:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e024      	b.n	8005160 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005116:	4b14      	ldr	r3, [pc, #80]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005124:	429a      	cmp	r2, r3
 8005126:	d01a      	beq.n	800515e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005128:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800512a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512c:	4a0e      	ldr	r2, [pc, #56]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800512e:	f023 0310 	bic.w	r3, r3, #16
 8005132:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd f9a8 	bl	8002488 <HAL_GetTick>
 8005138:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800513a:	bf00      	nop
 800513c:	f7fd f9a4 	bl	8002488 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4293      	cmp	r3, r2
 8005146:	d0f9      	beq.n	800513c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514c:	4a06      	ldr	r2, [pc, #24]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005152:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	4a04      	ldr	r2, [pc, #16]	@ (8005168 <HAL_RCC_OscConfig+0x86c>)
 8005158:	f043 0310 	orr.w	r3, r3, #16
 800515c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	44020c00 	.word	0x44020c00

0800516c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e19e      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005180:	4b83      	ldr	r3, [pc, #524]	@ (8005390 <HAL_RCC_ClockConfig+0x224>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d910      	bls.n	80051b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b80      	ldr	r3, [pc, #512]	@ (8005390 <HAL_RCC_ClockConfig+0x224>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 020f 	bic.w	r2, r3, #15
 8005196:	497e      	ldr	r1, [pc, #504]	@ (8005390 <HAL_RCC_ClockConfig+0x224>)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b7c      	ldr	r3, [pc, #496]	@ (8005390 <HAL_RCC_ClockConfig+0x224>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e186      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d012      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	4b74      	ldr	r3, [pc, #464]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d909      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80051ce:	4b71      	ldr	r3, [pc, #452]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	496d      	ldr	r1, [pc, #436]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d012      	beq.n	8005214 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	4b68      	ldr	r3, [pc, #416]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d909      	bls.n	8005214 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005200:	4b64      	ldr	r3, [pc, #400]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4961      	ldr	r1, [pc, #388]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005210:	4313      	orrs	r3, r2
 8005212:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d010      	beq.n	8005242 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	4b5b      	ldr	r3, [pc, #364]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800522c:	429a      	cmp	r2, r3
 800522e:	d908      	bls.n	8005242 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005230:	4b58      	ldr	r3, [pc, #352]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4955      	ldr	r1, [pc, #340]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 800523e:	4313      	orrs	r3, r2
 8005240:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	4b50      	ldr	r3, [pc, #320]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	429a      	cmp	r2, r3
 800525c:	d908      	bls.n	8005270 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800525e:	4b4d      	ldr	r3, [pc, #308]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 020f 	bic.w	r2, r3, #15
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	494a      	ldr	r1, [pc, #296]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 800526c:	4313      	orrs	r3, r2
 800526e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8093 	beq.w	80053a4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d107      	bne.n	8005296 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005286:	4b43      	ldr	r3, [pc, #268]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d121      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e113      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529e:	4b3d      	ldr	r3, [pc, #244]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d115      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e107      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80052b6:	4b37      	ldr	r3, [pc, #220]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0fb      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c6:	4b33      	ldr	r3, [pc, #204]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0f3      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80052d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	492c      	ldr	r1, [pc, #176]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e8:	f7fd f8ce 	bl	8002488 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d112      	bne.n	800531c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80052f8:	f7fd f8c6 	bl	8002488 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0d7      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800530e:	4b21      	ldr	r3, [pc, #132]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0318 	and.w	r3, r3, #24
 8005316:	2b18      	cmp	r3, #24
 8005318:	d1ee      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x18c>
 800531a:	e043      	b.n	80053a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d112      	bne.n	800534a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005324:	e00a      	b.n	800533c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005326:	f7fd f8af 	bl	8002488 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0c0      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800533c:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f003 0318 	and.w	r3, r3, #24
 8005344:	2b10      	cmp	r3, #16
 8005346:	d1ee      	bne.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
 8005348:	e02c      	b.n	80053a4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d122      	bne.n	8005398 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fd f898 	bl	8002488 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e0a9      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <HAL_RCC_ClockConfig+0x228>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f003 0318 	and.w	r3, r3, #24
 8005372:	2b08      	cmp	r3, #8
 8005374:	d1ee      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1e8>
 8005376:	e015      	b.n	80053a4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fd f886 	bl	8002488 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d906      	bls.n	8005398 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e097      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
 800538e:	bf00      	nop
 8005390:	40022000 	.word	0x40022000
 8005394:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005398:	4b4b      	ldr	r3, [pc, #300]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 0318 	and.w	r3, r3, #24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e9      	bne.n	8005378 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d010      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	4b44      	ldr	r3, [pc, #272]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	429a      	cmp	r2, r3
 80053be:	d208      	bcs.n	80053d2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80053c0:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f023 020f 	bic.w	r2, r3, #15
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	493e      	ldr	r1, [pc, #248]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053d2:	4b3e      	ldr	r3, [pc, #248]	@ (80054cc <HAL_RCC_ClockConfig+0x360>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d210      	bcs.n	8005402 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e0:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <HAL_RCC_ClockConfig+0x360>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f023 020f 	bic.w	r2, r3, #15
 80053e8:	4938      	ldr	r1, [pc, #224]	@ (80054cc <HAL_RCC_ClockConfig+0x360>)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f0:	4b36      	ldr	r3, [pc, #216]	@ (80054cc <HAL_RCC_ClockConfig+0x360>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e05d      	b.n	80054be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	4b2d      	ldr	r3, [pc, #180]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800541a:	429a      	cmp	r2, r3
 800541c:	d208      	bcs.n	8005430 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800541e:	4b2a      	ldr	r3, [pc, #168]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4927      	ldr	r1, [pc, #156]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	4b21      	ldr	r3, [pc, #132]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800544a:	429a      	cmp	r2, r3
 800544c:	d209      	bcs.n	8005462 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	491a      	ldr	r1, [pc, #104]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d012      	beq.n	8005494 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	4b15      	ldr	r3, [pc, #84]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800547c:	429a      	cmp	r2, r3
 800547e:	d209      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005480:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	490e      	ldr	r1, [pc, #56]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005494:	f000 f822 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_ClockConfig+0x35c>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	490b      	ldr	r1, [pc, #44]	@ (80054d0 <HAL_RCC_ClockConfig+0x364>)
 80054a4:	5ccb      	ldrb	r3, [r1, r3]
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <HAL_RCC_ClockConfig+0x368>)
 80054ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054ae:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <HAL_RCC_ClockConfig+0x36c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fc ff5e 	bl	8002374 <HAL_InitTick>
 80054b8:	4603      	mov	r3, r0
 80054ba:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80054bc:	7afb      	ldrb	r3, [r7, #11]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	44020c00 	.word	0x44020c00
 80054cc:	40022000 	.word	0x40022000
 80054d0:	080117ac 	.word	0x080117ac
 80054d4:	20000004 	.word	0x20000004
 80054d8:	20000024 	.word	0x20000024

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	@ 0x24
 80054e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80054e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 0318 	and.w	r3, r3, #24
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d102      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005718 <HAL_RCC_GetSysClockFreq+0x23c>)
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e107      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054f4:	4b87      	ldr	r3, [pc, #540]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f003 0318 	and.w	r3, r3, #24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d112      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005500:	4b84      	ldr	r3, [pc, #528]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800550c:	4b81      	ldr	r3, [pc, #516]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	4a81      	ldr	r2, [pc, #516]	@ (800571c <HAL_RCC_GetSysClockFreq+0x240>)
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	e0f1      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005520:	4b7e      	ldr	r3, [pc, #504]	@ (800571c <HAL_RCC_GetSysClockFreq+0x240>)
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e0ee      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005526:	4b7b      	ldr	r3, [pc, #492]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f003 0318 	and.w	r3, r3, #24
 800552e:	2b10      	cmp	r3, #16
 8005530:	d102      	bne.n	8005538 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005532:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x244>)
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e0e5      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005538:	4b76      	ldr	r3, [pc, #472]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 0318 	and.w	r3, r3, #24
 8005540:	2b18      	cmp	r3, #24
 8005542:	f040 80dd 	bne.w	8005700 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005546:	4b73      	ldr	r3, [pc, #460]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 8005548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005550:	4b70      	ldr	r3, [pc, #448]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	0a1b      	lsrs	r3, r3, #8
 8005556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800555c:	4b6d      	ldr	r3, [pc, #436]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005568:	4b6a      	ldr	r3, [pc, #424]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005580:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80b7 	beq.w	80056fa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0xbe>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d056      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x16a>
 8005598:	e077      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800559a:	4b5e      	ldr	r3, [pc, #376]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02d      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	4a5a      	ldr	r2, [pc, #360]	@ (800571c <HAL_RCC_GetSysClockFreq+0x240>)
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d0:	4b50      	ldr	r3, [pc, #320]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 80055d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x248>
 80055e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005600:	e065      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	ee07 3a90 	vmov	s15, r3
 8005608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005728 <HAL_RCC_GetSysClockFreq+0x24c>
 8005610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005614:	4b3f      	ldr	r3, [pc, #252]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 8005616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005624:	ed97 6a02 	vldr	s12, [r7, #8]
 8005628:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x248>
 800562c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005630:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005638:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800563c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005640:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005644:	e043      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005650:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800572c <HAL_RCC_GetSysClockFreq+0x250>
 8005654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005658:	4b2e      	ldr	r3, [pc, #184]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800565a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005668:	ed97 6a02 	vldr	s12, [r7, #8]
 800566c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x248>
 8005670:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005674:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005678:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800567c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005684:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005688:	e021      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005694:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005730 <HAL_RCC_GetSysClockFreq+0x254>
 8005698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569c:	4b1d      	ldr	r3, [pc, #116]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 800569e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x248>
 80056b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80056cc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80056ce:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x238>)
 80056d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d2:	0a5b      	lsrs	r3, r3, #9
 80056d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d8:	3301      	adds	r3, #1
 80056da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80056ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f2:	ee17 3a90 	vmov	r3, s15
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	e004      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e001      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005700:	4b06      	ldr	r3, [pc, #24]	@ (800571c <HAL_RCC_GetSysClockFreq+0x240>)
 8005702:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005704:	69fb      	ldr	r3, [r7, #28]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	@ 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	44020c00 	.word	0x44020c00
 8005718:	003d0900 	.word	0x003d0900
 800571c:	03d09000 	.word	0x03d09000
 8005720:	007a1200 	.word	0x007a1200
 8005724:	46000000 	.word	0x46000000
 8005728:	4c742400 	.word	0x4c742400
 800572c:	4af42400 	.word	0x4af42400
 8005730:	4a742400 	.word	0x4a742400

08005734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005738:	f7ff fed0 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005742:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005746:	4907      	ldr	r1, [pc, #28]	@ (8005764 <HAL_RCC_GetHCLKFreq+0x30>)
 8005748:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800574a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	4a05      	ldr	r2, [pc, #20]	@ (8005768 <HAL_RCC_GetHCLKFreq+0x34>)
 8005754:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <HAL_RCC_GetHCLKFreq+0x34>)
 8005758:	681b      	ldr	r3, [r3, #0]
}
 800575a:	4618      	mov	r0, r3
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	44020c00 	.word	0x44020c00
 8005764:	080117ac 	.word	0x080117ac
 8005768:	20000004 	.word	0x20000004

0800576c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005770:	f7ff ffe0 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	4904      	ldr	r1, [pc, #16]	@ (8005794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	44020c00 	.word	0x44020c00
 8005794:	080117bc 	.word	0x080117bc

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800579c:	f7ff ffca 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4904      	ldr	r1, [pc, #16]	@ (80057c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	44020c00 	.word	0x44020c00
 80057c0:	080117bc 	.word	0x080117bc

080057c4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80057c8:	f7ff ffb4 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	0b1b      	lsrs	r3, r3, #12
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	4904      	ldr	r1, [pc, #16]	@ (80057ec <HAL_RCC_GetPCLK3Freq+0x28>)
 80057da:	5ccb      	ldrb	r3, [r1, r3]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	44020c00 	.word	0x44020c00
 80057ec:	080117bc 	.word	0x080117bc

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80057f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f4:	b0d8      	sub	sp, #352	@ 0x160
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005802:	2300      	movs	r3, #0
 8005804:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005808:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005814:	2500      	movs	r5, #0
 8005816:	ea54 0305 	orrs.w	r3, r4, r5
 800581a:	d00b      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800581c:	4bcd      	ldr	r3, [pc, #820]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800581e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005822:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005826:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800582a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582c:	4ac9      	ldr	r2, [pc, #804]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800582e:	430b      	orrs	r3, r1
 8005830:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f002 0801 	and.w	r8, r2, #1
 8005840:	f04f 0900 	mov.w	r9, #0
 8005844:	ea58 0309 	orrs.w	r3, r8, r9
 8005848:	d042      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800584a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005850:	2b05      	cmp	r3, #5
 8005852:	d823      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005854:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	080058a5 	.word	0x080058a5
 8005860:	08005875 	.word	0x08005875
 8005864:	08005889 	.word	0x08005889
 8005868:	080058a5 	.word	0x080058a5
 800586c:	080058a5 	.word	0x080058a5
 8005870:	080058a5 	.word	0x080058a5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005878:	3308      	adds	r3, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f004 fee0 	bl	800a640 <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005886:	e00e      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800588c:	3330      	adds	r3, #48	@ 0x30
 800588e:	4618      	mov	r0, r3
 8005890:	f004 ff6e 	bl	800a770 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80058a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80058ae:	4ba9      	ldr	r3, [pc, #676]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058b4:	f023 0107 	bic.w	r1, r3, #7
 80058b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058be:	4aa5      	ldr	r2, [pc, #660]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f002 0a02 	and.w	sl, r2, #2
 80058dc:	f04f 0b00 	mov.w	fp, #0
 80058e0:	ea5a 030b 	orrs.w	r3, sl, fp
 80058e4:	f000 8088 	beq.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80058e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ee:	2b28      	cmp	r3, #40	@ 0x28
 80058f0:	d868      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	080059cd 	.word	0x080059cd
 80058fc:	080059c5 	.word	0x080059c5
 8005900:	080059c5 	.word	0x080059c5
 8005904:	080059c5 	.word	0x080059c5
 8005908:	080059c5 	.word	0x080059c5
 800590c:	080059c5 	.word	0x080059c5
 8005910:	080059c5 	.word	0x080059c5
 8005914:	080059c5 	.word	0x080059c5
 8005918:	0800599d 	.word	0x0800599d
 800591c:	080059c5 	.word	0x080059c5
 8005920:	080059c5 	.word	0x080059c5
 8005924:	080059c5 	.word	0x080059c5
 8005928:	080059c5 	.word	0x080059c5
 800592c:	080059c5 	.word	0x080059c5
 8005930:	080059c5 	.word	0x080059c5
 8005934:	080059c5 	.word	0x080059c5
 8005938:	080059b1 	.word	0x080059b1
 800593c:	080059c5 	.word	0x080059c5
 8005940:	080059c5 	.word	0x080059c5
 8005944:	080059c5 	.word	0x080059c5
 8005948:	080059c5 	.word	0x080059c5
 800594c:	080059c5 	.word	0x080059c5
 8005950:	080059c5 	.word	0x080059c5
 8005954:	080059c5 	.word	0x080059c5
 8005958:	080059cd 	.word	0x080059cd
 800595c:	080059c5 	.word	0x080059c5
 8005960:	080059c5 	.word	0x080059c5
 8005964:	080059c5 	.word	0x080059c5
 8005968:	080059c5 	.word	0x080059c5
 800596c:	080059c5 	.word	0x080059c5
 8005970:	080059c5 	.word	0x080059c5
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059cd 	.word	0x080059cd
 800597c:	080059c5 	.word	0x080059c5
 8005980:	080059c5 	.word	0x080059c5
 8005984:	080059c5 	.word	0x080059c5
 8005988:	080059c5 	.word	0x080059c5
 800598c:	080059c5 	.word	0x080059c5
 8005990:	080059c5 	.word	0x080059c5
 8005994:	080059c5 	.word	0x080059c5
 8005998:	080059cd 	.word	0x080059cd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800599c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a0:	3308      	adds	r3, #8
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fe4c 	bl	800a640 <RCCEx_PLL2_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80059ae:	e00e      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059b4:	3330      	adds	r3, #48	@ 0x30
 80059b6:	4618      	mov	r0, r3
 80059b8:	f004 feda 	bl	800a770 <RCCEx_PLL3_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80059c2:	e004      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059ca:	e000      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80059cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80059d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80059d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059dc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80059e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80059e8:	430b      	orrs	r3, r1
 80059ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f002 0304 	and.w	r3, r2, #4
 8005a04:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005a0e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005a12:	460b      	mov	r3, r1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	d04e      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a1e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005a22:	d02c      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005a24:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005a28:	d825      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a2e:	d028      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a34:	d81f      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a38:	d025      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a3c:	d81b      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d00f      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d817      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01f      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d113      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a52:	3308      	adds	r3, #8
 8005a54:	4618      	mov	r0, r3
 8005a56:	f004 fdf3 	bl	800a640 <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005a60:	e014      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a66:	3330      	adds	r3, #48	@ 0x30
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f004 fe81 	bl	800a770 <RCCEx_PLL3_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005a74:	e00a      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a7c:	e006      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005a7e:	bf00      	nop
 8005a80:	e004      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005a82:	bf00      	nop
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10c      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005a94:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a9a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005aac:	e003      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ab2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f002 0308 	and.w	r3, r2, #8
 8005ac2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005acc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d056      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005adc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005ae0:	d031      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005ae2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005ae6:	d82a      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aec:	d02d      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af2:	d824      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005af4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005af8:	d029      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005afa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005afe:	d81e      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b04:	d011      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0a:	d818      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d023      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b14:	d113      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f004 fd8f 	bl	800a640 <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005b28:	e017      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b2e:	3330      	adds	r3, #48	@ 0x30
 8005b30:	4618      	mov	r0, r3
 8005b32:	f004 fe1d 	bl	800a770 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005b3c:	e00d      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b44:	e009      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005b46:	bf00      	nop
 8005b48:	e007      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e005      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005b52:	bf00      	nop
 8005b54:	44020c00 	.word	0x44020c00
        break;
 8005b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005b62:	4bbb      	ldr	r3, [pc, #748]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b68:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b72:	4ab7      	ldr	r2, [pc, #732]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005b74:	430b      	orrs	r3, r1
 8005b76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f002 0310 	and.w	r3, r2, #16
 8005b90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005b94:	2300      	movs	r3, #0
 8005b96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005b9a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d053      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005baa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bae:	d031      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005bb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bb4:	d82a      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bba:	d02d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc0:	d824      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bc6:	d029      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005bc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bcc:	d81e      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd2:	d011      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd8:	d818      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d020      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be2:	d113      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be8:	3308      	adds	r3, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f004 fd28 	bl	800a640 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005bf6:	e014      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bfc:	3330      	adds	r3, #48	@ 0x30
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f004 fdb6 	bl	800a770 <RCCEx_PLL3_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c12:	e006      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005c2a:	4b89      	ldr	r3, [pc, #548]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3a:	4a85      	ldr	r2, [pc, #532]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c42:	e003      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f002 0320 	and.w	r3, r2, #32
 8005c58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005c62:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005c66:	460b      	mov	r3, r1
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	d053      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c72:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005c76:	d031      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005c78:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005c7c:	d82a      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c82:	d02d      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c88:	d824      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005c8a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005c8e:	d029      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005c90:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005c94:	d81e      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9a:	d011      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca0:	d818      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d020      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005caa:	d113      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f004 fcc4 	bl	800a640 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005cbe:	e014      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc4:	3330      	adds	r3, #48	@ 0x30
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f004 fd52 	bl	800a770 <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005cd2:	e00a      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cda:	e006      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005cf2:	4b57      	ldr	r3, [pc, #348]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cf8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d02:	4a53      	ldr	r2, [pc, #332]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005d20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005d2a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	d053      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005d3e:	d031      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005d40:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005d44:	d82a      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d4a:	d02d      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005d4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d50:	d824      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005d56:	d029      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005d5c:	d81e      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d62:	d011      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005d64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d68:	d818      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d020      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d72:	d113      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d78:	3308      	adds	r3, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f004 fc60 	bl	800a640 <RCCEx_PLL2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005d86:	e014      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8c:	3330      	adds	r3, #48	@ 0x30
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f004 fcee 	bl	800a770 <RCCEx_PLL3_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005da2:	e006      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005da4:	bf00      	nop
 8005da6:	e004      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005da8:	bf00      	nop
 8005daa:	e002      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005dac:	bf00      	nop
 8005dae:	e000      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10c      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005dba:	4b25      	ldr	r3, [pc, #148]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005dc0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005dd2:	e003      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dd8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005de8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005df2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005df6:	460b      	mov	r3, r1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d055      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e02:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e06:	d033      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005e08:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e0c:	d82c      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e12:	d02f      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005e14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e18:	d826      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e1e:	d02b      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005e20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e24:	d820      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e2a:	d013      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e30:	d81a      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d022      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e3a:	d115      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e40:	3308      	adds	r3, #8
 8005e42:	4618      	mov	r0, r3
 8005e44:	f004 fbfc 	bl	800a640 <RCCEx_PLL2_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005e4e:	e016      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005e50:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e58:	3330      	adds	r3, #48	@ 0x30
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f004 fc88 	bl	800a770 <RCCEx_PLL3_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005e66:	e00a      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e6e:	e006      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005e70:	bf00      	nop
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005e74:	bf00      	nop
 8005e76:	e002      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10c      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005e86:	4bbb      	ldr	r3, [pc, #748]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e8c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e96:	4ab7      	ldr	r2, [pc, #732]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e9e:	e003      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ea4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005eb4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005ebe:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d053      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ece:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ed2:	d031      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005ed4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ed8:	d82a      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005eda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ede:	d02d      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005ee0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ee4:	d824      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005ee6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005eea:	d029      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005eec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ef0:	d81e      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ef6:	d011      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005efc:	d818      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f06:	d113      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f004 fb96 	bl	800a640 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005f1a:	e014      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f20:	3330      	adds	r3, #48	@ 0x30
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fc24 	bl	800a770 <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f36:	e006      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f38:	bf00      	nop
 8005f3a:	e004      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005f4e:	4b89      	ldr	r3, [pc, #548]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f5e:	4a85      	ldr	r2, [pc, #532]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f60:	430b      	orrs	r3, r1
 8005f62:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005f7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005f86:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d055      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f98:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005f9c:	d031      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005f9e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005fa2:	d82a      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa8:	d02d      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fae:	d824      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005fb0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005fb4:	d029      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005fb6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005fba:	d81e      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc0:	d011      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc6:	d818      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005fcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd0:	d113      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f004 fb31 	bl	800a640 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005fe4:	e014      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fea:	3330      	adds	r3, #48	@ 0x30
 8005fec:	4618      	mov	r0, r3
 8005fee:	f004 fbbf 	bl	800a770 <RCCEx_PLL3_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005ff8:	e00a      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006000:	e006      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006002:	bf00      	nop
 8006004:	e004      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800600e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006010:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006018:	4b56      	ldr	r3, [pc, #344]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800601a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800601e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8006022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800602a:	4a52      	ldr	r2, [pc, #328]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800602c:	430b      	orrs	r3, r1
 800602e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006032:	e003      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006038:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800603c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006048:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006052:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	d044      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800605c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006064:	2b05      	cmp	r3, #5
 8006066:	d823      	bhi.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	080060b9 	.word	0x080060b9
 8006074:	08006089 	.word	0x08006089
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060b9 	.word	0x080060b9
 8006080:	080060b9 	.word	0x080060b9
 8006084:	080060b9 	.word	0x080060b9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800608c:	3308      	adds	r3, #8
 800608e:	4618      	mov	r0, r3
 8006090:	f004 fad6 	bl	800a640 <RCCEx_PLL2_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800609a:	e00e      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800609c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a0:	3330      	adds	r3, #48	@ 0x30
 80060a2:	4618      	mov	r0, r3
 80060a4:	f004 fb64 	bl	800a770 <RCCEx_PLL3_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80060ae:	e004      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060b6:	e000      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80060b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80060c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80060c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060c8:	f023 0107 	bic.w	r1, r3, #7
 80060cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d4:	4a27      	ldr	r2, [pc, #156]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80060d6:	430b      	orrs	r3, r1
 80060d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80060e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80060f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060fc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006100:	460b      	mov	r3, r1
 8006102:	4313      	orrs	r3, r2
 8006104:	d04f      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8006106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	2b50      	cmp	r3, #80	@ 0x50
 8006110:	d029      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006112:	2b50      	cmp	r3, #80	@ 0x50
 8006114:	d823      	bhi.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	d027      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d81f      	bhi.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800611e:	2b30      	cmp	r3, #48	@ 0x30
 8006120:	d025      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006122:	2b30      	cmp	r3, #48	@ 0x30
 8006124:	d81b      	bhi.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d00f      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d817      	bhi.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d022      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006132:	2b10      	cmp	r3, #16
 8006134:	d113      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006136:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800613a:	3308      	adds	r3, #8
 800613c:	4618      	mov	r0, r3
 800613e:	f004 fa7f 	bl	800a640 <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006148:	e017      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800614a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800614e:	3330      	adds	r3, #48	@ 0x30
 8006150:	4618      	mov	r0, r3
 8006152:	f004 fb0d 	bl	800a770 <RCCEx_PLL3_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800615c:	e00d      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006164:	e009      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006166:	bf00      	nop
 8006168:	e007      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800616a:	bf00      	nop
 800616c:	e005      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800616e:	bf00      	nop
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8006172:	bf00      	nop
 8006174:	44020c00 	.word	0x44020c00
        break;
 8006178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10d      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8006182:	4baf      	ldr	r3, [pc, #700]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006184:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006188:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800618c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006194:	4aaa      	ldr	r2, [pc, #680]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006196:	430b      	orrs	r3, r1
 8006198:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800619c:	e003      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80061b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061b6:	2300      	movs	r3, #0
 80061b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4313      	orrs	r3, r2
 80061c4:	d055      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80061c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80061d2:	d031      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80061d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80061d8:	d82a      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80061da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061de:	d02d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80061e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061e4:	d824      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80061e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061ea:	d029      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80061ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80061f0:	d81e      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80061f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061f6:	d011      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80061f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061fc:	d818      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d020      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006206:	d113      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800620c:	3308      	adds	r3, #8
 800620e:	4618      	mov	r0, r3
 8006210:	f004 fa16 	bl	800a640 <RCCEx_PLL2_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800621a:	e014      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800621c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006220:	3330      	adds	r3, #48	@ 0x30
 8006222:	4618      	mov	r0, r3
 8006224:	f004 faa4 	bl	800a770 <RCCEx_PLL3_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800622e:	e00a      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006236:	e006      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006238:	bf00      	nop
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800623c:	bf00      	nop
 800623e:	e002      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006240:	bf00      	nop
 8006242:	e000      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006246:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10d      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800624e:	4b7c      	ldr	r3, [pc, #496]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006254:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006260:	4a77      	ldr	r2, [pc, #476]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006262:	430b      	orrs	r3, r1
 8006264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006268:	e003      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800626e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800627e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006282:	2300      	movs	r3, #0
 8006284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006288:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d03d      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006292:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800629e:	d01b      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80062a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062a4:	d814      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80062a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062aa:	d017      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80062ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062b0:	d80e      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d014      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80062b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ba:	d109      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c0:	3330      	adds	r3, #48	@ 0x30
 80062c2:	4618      	mov	r0, r3
 80062c4:	f004 fa54 	bl	800a770 <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80062ce:	e008      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062d6:	e004      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80062e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80062ea:	4b55      	ldr	r3, [pc, #340]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80062ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062f0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80062f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fc:	4a50      	ldr	r2, [pc, #320]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80062fe:	430b      	orrs	r3, r1
 8006300:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800630a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800630e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800631a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006324:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d03d      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800632e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006336:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800633a:	d01b      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800633c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006340:	d814      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006342:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006346:	d017      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006348:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800634c:	d80e      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d014      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8006352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006356:	d109      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006358:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800635c:	3330      	adds	r3, #48	@ 0x30
 800635e:	4618      	mov	r0, r3
 8006360:	f004 fa06 	bl	800a770 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800636a:	e008      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006372:	e004      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006374:	bf00      	nop
 8006376:	e002      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800637c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10d      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006386:	4b2e      	ldr	r3, [pc, #184]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006388:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800638c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006398:	4a29      	ldr	r2, [pc, #164]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800639a:	430b      	orrs	r3, r1
 800639c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d040      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80063ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063d6:	d01b      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80063d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063dc:	d814      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80063de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e2:	d017      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80063e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e8:	d80e      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d014      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f2:	d109      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f8:	3330      	adds	r3, #48	@ 0x30
 80063fa:	4618      	mov	r0, r3
 80063fc:	f004 f9b8 	bl	800a770 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006406:	e008      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800640e:	e004      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006410:	bf00      	nop
 8006412:	e002      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006414:	bf00      	nop
 8006416:	e000      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800641e:	2b00      	cmp	r3, #0
 8006420:	d110      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006422:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006428:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800642c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006434:	4a02      	ldr	r2, [pc, #8]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006436:	430b      	orrs	r3, r1
 8006438:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800643c:	e006      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800643e:	bf00      	nop
 8006440:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006444:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006448:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800644c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	2100      	movs	r1, #0
 8006456:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800645a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006462:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d03d      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800646c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006470:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006474:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006478:	d01b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800647a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800647e:	d814      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006480:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006484:	d017      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006486:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800648a:	d80e      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d014      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006494:	d109      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800649a:	3330      	adds	r3, #48	@ 0x30
 800649c:	4618      	mov	r0, r3
 800649e:	f004 f967 	bl	800a770 <RCCEx_PLL3_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80064a8:	e008      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064b0:	e004      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80064b2:	bf00      	nop
 80064b4:	e002      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80064ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10d      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80064c4:	4bbe      	ldr	r3, [pc, #760]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80064c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064ca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80064ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064d6:	4aba      	ldr	r2, [pc, #744]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80064d8:	430b      	orrs	r3, r1
 80064da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80064e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d035      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800650c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006514:	d015      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800651a:	d80e      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006524:	d109      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006526:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800652a:	3330      	adds	r3, #48	@ 0x30
 800652c:	4618      	mov	r0, r3
 800652e:	f004 f91f 	bl	800a770 <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006538:	e006      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006548:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006550:	4b9b      	ldr	r3, [pc, #620]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006556:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800655a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006562:	4a97      	ldr	r2, [pc, #604]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006564:	430b      	orrs	r3, r1
 8006566:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800656a:	e003      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006570:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006574:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	2100      	movs	r1, #0
 800657e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800658a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	d00e      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006594:	4b8a      	ldr	r3, [pc, #552]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	4a89      	ldr	r2, [pc, #548]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800659a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800659e:	61d3      	str	r3, [r2, #28]
 80065a0:	4b87      	ldr	r3, [pc, #540]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065a2:	69d9      	ldr	r1, [r3, #28]
 80065a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80065ac:	4a84      	ldr	r2, [pc, #528]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065ae:	430b      	orrs	r3, r1
 80065b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065c8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d055      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80065d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80065de:	d031      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80065e0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80065e4:	d82a      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80065e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ea:	d02d      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f0:	d824      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80065f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f6:	d029      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80065f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065fc:	d81e      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80065fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006602:	d011      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006608:	d818      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d020      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800660e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006612:	d113      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006618:	3308      	adds	r3, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f004 f810 	bl	800a640 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006626:	e014      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800662c:	3330      	adds	r3, #48	@ 0x30
 800662e:	4618      	mov	r0, r3
 8006630:	f004 f89e 	bl	800a770 <RCCEx_PLL3_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800663a:	e00a      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006642:	e006      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006644:	bf00      	nop
 8006646:	e004      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006648:	bf00      	nop
 800664a:	e002      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800664c:	bf00      	nop
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006652:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10d      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800665a:	4b59      	ldr	r3, [pc, #356]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800665c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006660:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800666c:	4a54      	ldr	r2, [pc, #336]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800666e:	430b      	orrs	r3, r1
 8006670:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800667a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800667e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800668a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006694:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d055      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800669e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066aa:	d031      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80066ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066b0:	d82a      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80066b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b6:	d02d      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80066b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066bc:	d824      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80066be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066c2:	d029      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80066c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066c8:	d81e      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80066ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ce:	d011      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d4:	d818      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d020      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066de:	d113      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066e4:	3308      	adds	r3, #8
 80066e6:	4618      	mov	r0, r3
 80066e8:	f003 ffaa 	bl	800a640 <RCCEx_PLL2_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80066f2:	e014      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f8:	3330      	adds	r3, #48	@ 0x30
 80066fa:	4618      	mov	r0, r3
 80066fc:	f004 f838 	bl	800a770 <RCCEx_PLL3_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006706:	e00a      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800670e:	e006      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006710:	bf00      	nop
 8006712:	e004      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006714:	bf00      	nop
 8006716:	e002      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800671c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006726:	4b26      	ldr	r3, [pc, #152]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006728:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800672c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006734:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006738:	4a21      	ldr	r2, [pc, #132]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800673a:	430b      	orrs	r3, r1
 800673c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006740:	e003      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006742:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006746:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800674a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	2100      	movs	r1, #0
 8006754:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006764:	460b      	mov	r3, r1
 8006766:	4313      	orrs	r3, r2
 8006768:	d057      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800676a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800676e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006776:	d033      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800677c:	d82c      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800677e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006782:	d02f      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006788:	d826      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800678a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800678e:	d02b      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006794:	d820      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800679a:	d013      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800679c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a0:	d81a      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d022      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80067a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067aa:	d115      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067b0:	3308      	adds	r3, #8
 80067b2:	4618      	mov	r0, r3
 80067b4:	f003 ff44 	bl	800a640 <RCCEx_PLL2_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80067be:	e016      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80067c0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067c8:	3330      	adds	r3, #48	@ 0x30
 80067ca:	4618      	mov	r0, r3
 80067cc:	f003 ffd0 	bl	800a770 <RCCEx_PLL3_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80067d6:	e00a      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067de:	e006      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80067e0:	bf00      	nop
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80067ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10d      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80067f6:	4bbb      	ldr	r3, [pc, #748]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80067f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80067fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006804:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006808:	4ab6      	ldr	r2, [pc, #728]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800680a:	430b      	orrs	r3, r1
 800680c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006810:	e003      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006812:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006816:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800681a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	2100      	movs	r1, #0
 8006824:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006830:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006834:	460b      	mov	r3, r1
 8006836:	4313      	orrs	r3, r2
 8006838:	d055      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800683a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800683e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006842:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006846:	d031      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006848:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800684c:	d82a      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800684e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006852:	d02d      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8006854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006858:	d824      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800685a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800685e:	d029      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006860:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006864:	d81e      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800686a:	d011      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800686c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006870:	d818      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d020      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8006876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800687a:	d113      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800687c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006880:	3308      	adds	r3, #8
 8006882:	4618      	mov	r0, r3
 8006884:	f003 fedc 	bl	800a640 <RCCEx_PLL2_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800688e:	e014      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006894:	3330      	adds	r3, #48	@ 0x30
 8006896:	4618      	mov	r0, r3
 8006898:	f003 ff6a 	bl	800a770 <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80068a2:	e00a      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068aa:	e006      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80068ac:	bf00      	nop
 80068ae:	e004      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80068b0:	bf00      	nop
 80068b2:	e002      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80068b4:	bf00      	nop
 80068b6:	e000      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80068b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10d      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80068c2:	4b88      	ldr	r3, [pc, #544]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068c8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80068cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068d4:	4a83      	ldr	r2, [pc, #524]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068d6:	430b      	orrs	r3, r1
 80068d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80068dc:	e003      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80068e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	2100      	movs	r1, #0
 80068f0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80068f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d055      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006906:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800690a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800690e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006912:	d031      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006914:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006918:	d82a      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800691a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800691e:	d02d      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006924:	d824      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006926:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800692a:	d029      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800692c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006930:	d81e      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006936:	d011      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800693c:	d818      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006942:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006946:	d113      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694c:	3308      	adds	r3, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f003 fe76 	bl	800a640 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800695a:	e014      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800695c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006960:	3330      	adds	r3, #48	@ 0x30
 8006962:	4618      	mov	r0, r3
 8006964:	f003 ff04 	bl	800a770 <RCCEx_PLL3_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800696e:	e00a      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006976:	e006      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006978:	bf00      	nop
 800697a:	e004      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10d      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800698e:	4b55      	ldr	r3, [pc, #340]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006990:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006994:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069a0:	4a50      	ldr	r2, [pc, #320]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069a2:	430b      	orrs	r3, r1
 80069a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80069b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	2100      	movs	r1, #0
 80069bc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80069c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d055      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80069d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069de:	d031      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80069e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069e4:	d82a      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ea:	d02d      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f0:	d824      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80069f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069f6:	d029      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80069f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069fc:	d81e      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80069fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a02:	d011      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a08:	d818      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d020      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a12:	d113      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a18:	3308      	adds	r3, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f003 fe10 	bl	800a640 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006a26:	e014      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a2c:	3330      	adds	r3, #48	@ 0x30
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f003 fe9e 	bl	800a770 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a42:	e006      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a44:	bf00      	nop
 8006a46:	e004      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a48:	bf00      	nop
 8006a4a:	e002      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a4c:	bf00      	nop
 8006a4e:	e000      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10d      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006a5a:	4b22      	ldr	r3, [pc, #136]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a60:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006a74:	e003      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	d055      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aa2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006aa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006aaa:	d035      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ab0:	d82e      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ab6:	d031      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006abc:	d828      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006abe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac2:	d01b      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac8:	d822      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad2:	d009      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006ad4:	e01c      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad6:	4b03      	ldr	r3, [pc, #12]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	4a02      	ldr	r2, [pc, #8]	@ (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ae2:	e01c      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006ae4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aec:	3308      	adds	r3, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f003 fda6 	bl	800a640 <RCCEx_PLL2_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006afa:	e010      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b00:	3330      	adds	r3, #48	@ 0x30
 8006b02:	4618      	mov	r0, r3
 8006b04:	f003 fe34 	bl	800a770 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b0e:	e006      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b16:	e002      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006b18:	bf00      	nop
 8006b1a:	e000      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10d      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006b26:	4bc3      	ldr	r3, [pc, #780]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b38:	4abe      	ldr	r2, [pc, #760]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b40:	e003      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b64:	460b      	mov	r3, r1
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d051      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b76:	d033      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006b78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b7c:	d82c      	bhi.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006b7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006b82:	d02d      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006b84:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006b88:	d826      	bhi.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8e:	d019      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b94:	d820      	bhi.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006b9a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b9e:	d007      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006ba0:	e01a      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba6:	4aa3      	ldr	r2, [pc, #652]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006bae:	e018      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f003 fd42 	bl	800a640 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006bc2:	e00e      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bc8:	3330      	adds	r3, #48	@ 0x30
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f003 fdd0 	bl	800a770 <RCCEx_PLL3_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006bd6:	e004      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bde:	e000      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10d      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006bea:	4b92      	ldr	r3, [pc, #584]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bf0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006bfc:	4a8d      	ldr	r2, [pc, #564]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c04:	e003      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	d032      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006c2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d80f      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d211      	bcs.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d911      	bls.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d109      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c46:	3308      	adds	r3, #8
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f003 fcf9 	bl	800a640 <RCCEx_PLL2_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006c6c:	4b71      	ldr	r3, [pc, #452]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c72:	f023 0107 	bic.w	r1, r3, #7
 8006c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006c7e:	4a6d      	ldr	r2, [pc, #436]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c80:	430b      	orrs	r3, r1
 8006c82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6739      	str	r1, [r7, #112]	@ 0x70
 8006c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ca2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	d024      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d005      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cc2:	e002      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006cd2:	4b58      	ldr	r3, [pc, #352]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cd8:	f023 0108 	bic.w	r1, r3, #8
 8006cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ce4:	4a53      	ldr	r2, [pc, #332]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cf2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d04:	2300      	movs	r3, #0
 8006d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f000 80b9 	beq.w	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006d14:	4b48      	ldr	r3, [pc, #288]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	4a47      	ldr	r2, [pc, #284]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d20:	f7fb fbb2 	bl	8002488 <HAL_GetTick>
 8006d24:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006d28:	e00b      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2a:	f7fb fbad 	bl	8002488 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d903      	bls.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d40:	e005      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006d42:	4b3d      	ldr	r3, [pc, #244]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0ed      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006d4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 8093 	bne.w	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d58:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d62:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006d66:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d023      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006d6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d72:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006d76:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01b      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d88:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d8c:	4b29      	ldr	r3, [pc, #164]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d92:	4a28      	ldr	r2, [pc, #160]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9c:	4b25      	ldr	r3, [pc, #148]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006da2:	4a24      	ldr	r2, [pc, #144]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dac:	4a21      	ldr	r2, [pc, #132]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006db2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006db6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d019      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc2:	f7fb fb61 	bl	8002488 <HAL_GetTick>
 8006dc6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dca:	e00d      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dcc:	f7fb fb5c 	bl	8002488 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d903      	bls.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006de6:	e006      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de8:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ea      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006df6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d13a      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e0e:	d115      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006e10:	4b08      	ldr	r3, [pc, #32]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e1c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006e26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006e2a:	4a02      	ldr	r2, [pc, #8]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	61d3      	str	r3, [r2, #28]
 8006e30:	e00a      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006e32:	bf00      	nop
 8006e34:	44020c00 	.word	0x44020c00
 8006e38:	44020800 	.word	0x44020800
 8006e3c:	4b9f      	ldr	r3, [pc, #636]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	4a9e      	ldr	r2, [pc, #632]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e42:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e46:	61d3      	str	r3, [r2, #28]
 8006e48:	4b9c      	ldr	r3, [pc, #624]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e4e:	4a9b      	ldr	r2, [pc, #620]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006e58:	4b98      	ldr	r3, [pc, #608]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e5a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e62:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e6a:	4a94      	ldr	r2, [pc, #592]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006e72:	e008      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006e7c:	e003      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006e92:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e94:	2300      	movs	r3, #0
 8006e96:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d035      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ea6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006eaa:	2b30      	cmp	r3, #48	@ 0x30
 8006eac:	d014      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006eae:	2b30      	cmp	r3, #48	@ 0x30
 8006eb0:	d80e      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d012      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d80a      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d106      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec2:	4b7e      	ldr	r3, [pc, #504]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec6:	4a7d      	ldr	r2, [pc, #500]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ecc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ece:	e008      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ed6:	e004      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006eea:	4b74      	ldr	r3, [pc, #464]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ef0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ef8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006efc:	4a6f      	ldr	r2, [pc, #444]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006efe:	430b      	orrs	r3, r1
 8006f00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f04:	e003      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f20:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d033      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006f36:	2b40      	cmp	r3, #64	@ 0x40
 8006f38:	d007      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006f3a:	e010      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	4a5e      	ldr	r2, [pc, #376]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f46:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006f48:	e00d      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f4e:	3308      	adds	r3, #8
 8006f50:	4618      	mov	r0, r3
 8006f52:	f003 fb75 	bl	800a640 <RCCEx_PLL2_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10d      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006f6e:	4b53      	ldr	r3, [pc, #332]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f74:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f7c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006f80:	4a4e      	ldr	r2, [pc, #312]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f82:	430b      	orrs	r3, r1
 8006f84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f88:	e003      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fa4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4313      	orrs	r3, r2
 8006fac:	d033      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006fba:	2b80      	cmp	r3, #128	@ 0x80
 8006fbc:	d007      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006fbe:	e010      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	4a3d      	ldr	r2, [pc, #244]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006fcc:	e00d      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f003 fb33 	bl	800a640 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006fe0:	e003      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10d      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006ff2:	4b32      	ldr	r3, [pc, #200]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ff8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007000:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007004:	4a2d      	ldr	r2, [pc, #180]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007006:	430b      	orrs	r3, r1
 8007008:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007012:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007024:	2300      	movs	r3, #0
 8007026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007028:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d04a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007032:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800703a:	2b04      	cmp	r3, #4
 800703c:	d827      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800703e:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007059 	.word	0x08007059
 8007048:	08007067 	.word	0x08007067
 800704c:	0800707b 	.word	0x0800707b
 8007050:	08007097 	.word	0x08007097
 8007054:	08007097 	.word	0x08007097
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007058:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	4a17      	ldr	r2, [pc, #92]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800705e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007062:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007064:	e018      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007066:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800706a:	3308      	adds	r3, #8
 800706c:	4618      	mov	r0, r3
 800706e:	f003 fae7 	bl	800a640 <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007078:	e00e      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800707a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800707e:	3330      	adds	r3, #48	@ 0x30
 8007080:	4618      	mov	r0, r3
 8007082:	f003 fb75 	bl	800a770 <RCCEx_PLL3_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800708c:	e004      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007094:	e000      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8007096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007098:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070a6:	f023 0107 	bic.w	r1, r3, #7
 80070aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070b2:	4a02      	ldr	r2, [pc, #8]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070b4:	430b      	orrs	r3, r1
 80070b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80070ba:	e005      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80070bc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80070c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80070d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d6:	2300      	movs	r3, #0
 80070d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f000 8081 	beq.w	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80070e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d85f      	bhi.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	080071b3 	.word	0x080071b3
 8007100:	080071b3 	.word	0x080071b3
 8007104:	080071b3 	.word	0x080071b3
 8007108:	080071b3 	.word	0x080071b3
 800710c:	080071b3 	.word	0x080071b3
 8007110:	080071b3 	.word	0x080071b3
 8007114:	080071b3 	.word	0x080071b3
 8007118:	0800718b 	.word	0x0800718b
 800711c:	080071b3 	.word	0x080071b3
 8007120:	080071b3 	.word	0x080071b3
 8007124:	080071b3 	.word	0x080071b3
 8007128:	080071b3 	.word	0x080071b3
 800712c:	080071b3 	.word	0x080071b3
 8007130:	080071b3 	.word	0x080071b3
 8007134:	080071b3 	.word	0x080071b3
 8007138:	0800719f 	.word	0x0800719f
 800713c:	080071b3 	.word	0x080071b3
 8007140:	080071b3 	.word	0x080071b3
 8007144:	080071b3 	.word	0x080071b3
 8007148:	080071b3 	.word	0x080071b3
 800714c:	080071b3 	.word	0x080071b3
 8007150:	080071b3 	.word	0x080071b3
 8007154:	080071b3 	.word	0x080071b3
 8007158:	080071bb 	.word	0x080071bb
 800715c:	080071b3 	.word	0x080071b3
 8007160:	080071b3 	.word	0x080071b3
 8007164:	080071b3 	.word	0x080071b3
 8007168:	080071b3 	.word	0x080071b3
 800716c:	080071b3 	.word	0x080071b3
 8007170:	080071b3 	.word	0x080071b3
 8007174:	080071b3 	.word	0x080071b3
 8007178:	080071bb 	.word	0x080071bb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717c:	4bab      	ldr	r3, [pc, #684]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	4aaa      	ldr	r2, [pc, #680]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007186:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007188:	e018      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800718a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800718e:	3308      	adds	r3, #8
 8007190:	4618      	mov	r0, r3
 8007192:	f003 fa55 	bl	800a640 <RCCEx_PLL2_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800719c:	e00e      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800719e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a2:	3330      	adds	r3, #48	@ 0x30
 80071a4:	4618      	mov	r0, r3
 80071a6:	f003 fae3 	bl	800a770 <RCCEx_PLL3_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80071b0:	e004      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071b8:	e000      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80071ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80071c4:	4b99      	ldr	r3, [pc, #612]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80071c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071d6:	4a95      	ldr	r2, [pc, #596]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80071d8:	430b      	orrs	r3, r1
 80071da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071de:	e003      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80071e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071fe:	460b      	mov	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	d04e      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800720c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007210:	d02e      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007216:	d827      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007218:	2bc0      	cmp	r3, #192	@ 0xc0
 800721a:	d02b      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800721c:	2bc0      	cmp	r3, #192	@ 0xc0
 800721e:	d823      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007220:	2b80      	cmp	r3, #128	@ 0x80
 8007222:	d017      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d81f      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800722c:	2b40      	cmp	r3, #64	@ 0x40
 800722e:	d007      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007230:	e01a      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007232:	4b7e      	ldr	r3, [pc, #504]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007236:	4a7d      	ldr	r2, [pc, #500]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800723c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800723e:	e01a      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007244:	3308      	adds	r3, #8
 8007246:	4618      	mov	r0, r3
 8007248:	f003 f9fa 	bl	800a640 <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007252:	e010      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007258:	3330      	adds	r3, #48	@ 0x30
 800725a:	4618      	mov	r0, r3
 800725c:	f003 fa88 	bl	800a770 <RCCEx_PLL3_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800726e:	e002      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007276:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10d      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800727e:	4b6b      	ldr	r3, [pc, #428]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007284:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800728c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007290:	4a66      	ldr	r2, [pc, #408]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007292:	430b      	orrs	r3, r1
 8007294:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007298:	e003      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800729e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80072a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072b8:	460b      	mov	r3, r1
 80072ba:	4313      	orrs	r3, r2
 80072bc:	d055      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80072be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80072c6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80072ca:	d031      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80072cc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80072d0:	d82a      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d6:	d02d      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072dc:	d824      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80072de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072e2:	d029      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80072e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072e8:	d81e      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80072ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ee:	d011      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80072f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f4:	d818      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d020      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80072fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072fe:	d113      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007304:	3308      	adds	r3, #8
 8007306:	4618      	mov	r0, r3
 8007308:	f003 f99a 	bl	800a640 <RCCEx_PLL2_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007312:	e014      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007318:	3330      	adds	r3, #48	@ 0x30
 800731a:	4618      	mov	r0, r3
 800731c:	f003 fa28 	bl	800a770 <RCCEx_PLL3_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007326:	e00a      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800732e:	e006      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007330:	bf00      	nop
 8007332:	e004      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007334:	bf00      	nop
 8007336:	e002      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007338:	bf00      	nop
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800733c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10d      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007346:	4b39      	ldr	r3, [pc, #228]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800734c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007354:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007358:	4a34      	ldr	r2, [pc, #208]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800735a:	430b      	orrs	r3, r1
 800735c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007360:	e003      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007366:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800736a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007378:	2300      	movs	r3, #0
 800737a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800737c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007380:	460b      	mov	r3, r1
 8007382:	4313      	orrs	r3, r2
 8007384:	d058      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8007386:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800738a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800738e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007392:	d031      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8007394:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007398:	d82a      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800739a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800739e:	d02d      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80073a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073a4:	d824      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80073a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073aa:	d029      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80073ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073b0:	d81e      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80073b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b6:	d011      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073bc:	d818      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d020      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c6:	d113      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073cc:	3308      	adds	r3, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f003 f936 	bl	800a640 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80073da:	e014      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073e0:	3330      	adds	r3, #48	@ 0x30
 80073e2:	4618      	mov	r0, r3
 80073e4:	f003 f9c4 	bl	800a770 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80073ee:	e00a      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073f6:	e006      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80073f8:	bf00      	nop
 80073fa:	e004      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007406:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800740a:	2b00      	cmp	r3, #0
 800740c:	d110      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800740e:	4b07      	ldr	r3, [pc, #28]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007414:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800741c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007420:	4902      	ldr	r1, [pc, #8]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800742a:	bf00      	nop
 800742c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007434:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	2100      	movs	r1, #0
 8007442:	6239      	str	r1, [r7, #32]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
 800744a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800744e:	460b      	mov	r3, r1
 8007450:	4313      	orrs	r3, r2
 8007452:	d055      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8007454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800745c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007460:	d031      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8007462:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007466:	d82a      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800746c:	d02d      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800746e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007472:	d824      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007474:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007478:	d029      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800747a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800747e:	d81e      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007484:	d011      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8007486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800748a:	d818      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d020      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007494:	d113      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800749a:	3308      	adds	r3, #8
 800749c:	4618      	mov	r0, r3
 800749e:	f003 f8cf 	bl	800a640 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074a8:	e014      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ae:	3330      	adds	r3, #48	@ 0x30
 80074b0:	4618      	mov	r0, r3
 80074b2:	f003 f95d 	bl	800a770 <RCCEx_PLL3_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074bc:	e00a      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074c4:	e006      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80074c6:	bf00      	nop
 80074c8:	e004      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80074d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10d      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80074dc:	4b88      	ldr	r3, [pc, #544]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80074de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074e2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80074e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ee:	4984      	ldr	r1, [pc, #528]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	2100      	movs	r1, #0
 800750a:	61b9      	str	r1, [r7, #24]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007516:	460b      	mov	r3, r1
 8007518:	4313      	orrs	r3, r2
 800751a:	d03d      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800751c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007520:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007524:	2b03      	cmp	r3, #3
 8007526:	d81c      	bhi.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007528:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	0800756b 	.word	0x0800756b
 8007534:	08007541 	.word	0x08007541
 8007538:	0800754f 	.word	0x0800754f
 800753c:	0800756b 	.word	0x0800756b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007540:	4b6f      	ldr	r3, [pc, #444]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	4a6e      	ldr	r2, [pc, #440]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800754a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800754c:	e00e      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800754e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007552:	3308      	adds	r3, #8
 8007554:	4618      	mov	r0, r3
 8007556:	f003 f873 	bl	800a640 <RCCEx_PLL2_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007560:	e004      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007568:	e000      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800756a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10d      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007574:	4b62      	ldr	r3, [pc, #392]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800757a:	f023 0203 	bic.w	r2, r3, #3
 800757e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007582:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007586:	495e      	ldr	r1, [pc, #376]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007594:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	2100      	movs	r1, #0
 80075a2:	6139      	str	r1, [r7, #16]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d03a      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80075b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c0:	d00e      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80075c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c6:	d815      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d017      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80075cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d0:	d110      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d2:	4b4b      	ldr	r3, [pc, #300]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80075de:	e00e      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075e4:	3308      	adds	r3, #8
 80075e6:	4618      	mov	r0, r3
 80075e8:	f003 f82a 	bl	800a640 <RCCEx_PLL2_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80075f2:	e004      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075fa:	e000      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80075fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10d      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007606:	4b3e      	ldr	r3, [pc, #248]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800760c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007614:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007618:	4939      	ldr	r1, [pc, #228]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007626:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800762a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	2100      	movs	r1, #0
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	f003 0310 	and.w	r3, r3, #16
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007640:	460b      	mov	r3, r1
 8007642:	4313      	orrs	r3, r2
 8007644:	d038      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800764e:	2b30      	cmp	r3, #48	@ 0x30
 8007650:	d01b      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007652:	2b30      	cmp	r3, #48	@ 0x30
 8007654:	d815      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007656:	2b10      	cmp	r3, #16
 8007658:	d002      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800765a:	2b20      	cmp	r3, #32
 800765c:	d007      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800765e:	e010      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007660:	4b27      	ldr	r3, [pc, #156]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007664:	4a26      	ldr	r2, [pc, #152]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800766c:	e00e      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800766e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007672:	3330      	adds	r3, #48	@ 0x30
 8007674:	4618      	mov	r0, r3
 8007676:	f003 f87b 	bl	800a770 <RCCEx_PLL3_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007680:	e004      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007688:	e000      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800768a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800768c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10d      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007694:	4b1a      	ldr	r3, [pc, #104]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007696:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800769a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800769e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80076a6:	4916      	ldr	r1, [pc, #88]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80076ae:	e003      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	2100      	movs	r1, #0
 80076c2:	6039      	str	r1, [r7, #0]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	607b      	str	r3, [r7, #4]
 80076ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80076ce:	460b      	mov	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	d00c      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80076d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80076e6:	4906      	ldr	r1, [pc, #24]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80076ee:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80076f8:	46bd      	mov	sp, r7
 80076fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076fe:	bf00      	nop
 8007700:	44020c00 	.word	0x44020c00

08007704 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007704:	b480      	push	{r7}
 8007706:	b08b      	sub	sp, #44	@ 0x2c
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800770c:	4bae      	ldr	r3, [pc, #696]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800770e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007716:	4bac      	ldr	r3, [pc, #688]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007720:	4ba9      	ldr	r3, [pc, #676]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800772a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800772c:	4ba6      	ldr	r3, [pc, #664]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007730:	091b      	lsrs	r3, r3, #4
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007738:	4ba3      	ldr	r3, [pc, #652]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	08db      	lsrs	r3, r3, #3
 800773e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007750:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 8126 	beq.w	80079a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d053      	beq.n	800780a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d86f      	bhi.n	8007848 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d003      	beq.n	8007776 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d02b      	beq.n	80077cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007774:	e068      	b.n	8007848 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007776:	4b94      	ldr	r3, [pc, #592]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	08db      	lsrs	r3, r3, #3
 800777c:	f003 0303 	and.w	r3, r3, #3
 8007780:	4a92      	ldr	r2, [pc, #584]	@ (80079cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80077ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80077b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80077ca:	e068      	b.n	800789e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80079d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80077da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	ee07 3a90 	vmov	s15, r3
 80077e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80077ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80077f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007804:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007808:	e049      	b.n	800789e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80079d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a04 	vldr	s12, [r7, #16]
 800782a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007846:	e02a      	b.n	800789e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007848:	4b5f      	ldr	r3, [pc, #380]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	08db      	lsrs	r3, r3, #3
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	4a5e      	ldr	r2, [pc, #376]	@ (80079cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007880:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007898:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800789c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800789e:	4b4a      	ldr	r3, [pc, #296]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078aa:	d121      	bne.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80078ac:	4b46      	ldr	r3, [pc, #280]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80078b8:	4b43      	ldr	r3, [pc, #268]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078bc:	0a5b      	lsrs	r3, r3, #9
 80078be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80078ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80078d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e006      	b.n	80078f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e002      	b.n	80078f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078f6:	4b34      	ldr	r3, [pc, #208]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007902:	d121      	bne.n	8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007904:	4b30      	ldr	r3, [pc, #192]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d017      	beq.n	8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007910:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007926:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800792a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800792e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007936:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	e006      	b.n	800794e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	605a      	str	r2, [r3, #4]
 8007946:	e002      	b.n	800794e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800794e:	4b1e      	ldr	r3, [pc, #120]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800795a:	d121      	bne.n	80079a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800795c:	4b1a      	ldr	r3, [pc, #104]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d017      	beq.n	8007998 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007968:	4b17      	ldr	r3, [pc, #92]	@ (80079c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800796a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800796c:	0e1b      	lsrs	r3, r3, #24
 800796e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800797a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800797e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007982:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007996:	e010      	b.n	80079ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
}
 800799e:	e00c      	b.n	80079ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	609a      	str	r2, [r3, #8]
}
 80079a6:	e008      	b.n	80079ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
}
 80079ba:	bf00      	nop
 80079bc:	372c      	adds	r7, #44	@ 0x2c
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	44020c00 	.word	0x44020c00
 80079cc:	03d09000 	.word	0x03d09000
 80079d0:	46000000 	.word	0x46000000
 80079d4:	4a742400 	.word	0x4a742400
 80079d8:	4af42400 	.word	0x4af42400

080079dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80079dc:	b480      	push	{r7}
 80079de:	b08b      	sub	sp, #44	@ 0x2c
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80079e4:	4bae      	ldr	r3, [pc, #696]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80079ee:	4bac      	ldr	r3, [pc, #688]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80079f8:	4ba9      	ldr	r3, [pc, #676]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	0a1b      	lsrs	r3, r3, #8
 80079fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a02:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007a04:	4ba6      	ldr	r3, [pc, #664]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a10:	4ba3      	ldr	r3, [pc, #652]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a28:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8126 	beq.w	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d053      	beq.n	8007ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d86f      	bhi.n	8007b20 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d003      	beq.n	8007a4e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d02b      	beq.n	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007a4c:	e068      	b.n	8007b20 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a4e:	4b94      	ldr	r3, [pc, #592]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	4a92      	ldr	r2, [pc, #584]	@ (8007ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a86:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007aa2:	e068      	b.n	8007b76 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ac4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007adc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007ae0:	e049      	b.n	8007b76 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b02:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007b1e:	e02a      	b.n	8007b76 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b20:	4b5f      	ldr	r3, [pc, #380]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	08db      	lsrs	r3, r3, #3
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8007ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	ee07 3a90 	vmov	s15, r3
 8007b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b54:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b58:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007b74:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b76:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b82:	d121      	bne.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007b84:	4b46      	ldr	r3, [pc, #280]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d017      	beq.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b90:	4b43      	ldr	r3, [pc, #268]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	0a5b      	lsrs	r3, r3, #9
 8007b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007baa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e006      	b.n	8007bce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	e002      	b.n	8007bce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bce:	4b34      	ldr	r3, [pc, #208]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bda:	d121      	bne.n	8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007bdc:	4b30      	ldr	r3, [pc, #192]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d017      	beq.n	8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007be8:	4b2d      	ldr	r3, [pc, #180]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007bfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c0e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	e006      	b.n	8007c26 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	e002      	b.n	8007c26 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c26:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c32:	d121      	bne.n	8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007c34:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d017      	beq.n	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c40:	4b17      	ldr	r3, [pc, #92]	@ (8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c44:	0e1b      	lsrs	r3, r3, #24
 8007c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c56:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c66:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c6e:	e010      	b.n	8007c92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	609a      	str	r2, [r3, #8]
}
 8007c76:	e00c      	b.n	8007c92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
}
 8007c7e:	e008      	b.n	8007c92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	609a      	str	r2, [r3, #8]
}
 8007c92:	bf00      	nop
 8007c94:	372c      	adds	r7, #44	@ 0x2c
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	44020c00 	.word	0x44020c00
 8007ca4:	03d09000 	.word	0x03d09000
 8007ca8:	46000000 	.word	0x46000000
 8007cac:	4a742400 	.word	0x4a742400
 8007cb0:	4af42400 	.word	0x4af42400

08007cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b08b      	sub	sp, #44	@ 0x2c
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007cbc:	4bae      	ldr	r3, [pc, #696]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007cc6:	4bac      	ldr	r3, [pc, #688]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007cd0:	4ba9      	ldr	r3, [pc, #676]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cda:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007cdc:	4ba6      	ldr	r3, [pc, #664]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007ce8:	4ba3      	ldr	r3, [pc, #652]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cec:	08db      	lsrs	r3, r3, #3
 8007cee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	fb02 f303 	mul.w	r3, r2, r3
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d00:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 8126 	beq.w	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d053      	beq.n	8007dba <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d86f      	bhi.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d02b      	beq.n	8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007d24:	e068      	b.n	8007df8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d26:	4b94      	ldr	r3, [pc, #592]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	08db      	lsrs	r3, r3, #3
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	4a92      	ldr	r2, [pc, #584]	@ (8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d5e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007d7a:	e068      	b.n	8007e4e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	ee07 3a90 	vmov	s15, r3
 8007d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d98:	ed97 6a04 	vldr	s12, [r7, #16]
 8007d9c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007db8:	e049      	b.n	8007e4e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007dda:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007df6:	e02a      	b.n	8007e4e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007df8:	4b5f      	ldr	r3, [pc, #380]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	08db      	lsrs	r3, r3, #3
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	4a5e      	ldr	r2, [pc, #376]	@ (8007f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
 8007e08:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e30:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007e4c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e5a:	d121      	bne.n	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007e5c:	4b46      	ldr	r3, [pc, #280]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d017      	beq.n	8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007e68:	4b43      	ldr	r3, [pc, #268]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e6c:	0a5b      	lsrs	r3, r3, #9
 8007e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007e82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e006      	b.n	8007ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ea6:	4b34      	ldr	r3, [pc, #208]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb2:	d121      	bne.n	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007eb4:	4b30      	ldr	r3, [pc, #192]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007eda:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ee6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	e006      	b.n	8007efe <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	e002      	b.n	8007efe <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007efe:	4b1e      	ldr	r3, [pc, #120]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f0a:	d121      	bne.n	8007f50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d017      	beq.n	8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f18:	4b17      	ldr	r3, [pc, #92]	@ (8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f32:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007f46:	e010      	b.n	8007f6a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	609a      	str	r2, [r3, #8]
}
 8007f4e:	e00c      	b.n	8007f6a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
}
 8007f56:	e008      	b.n	8007f6a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	609a      	str	r2, [r3, #8]
}
 8007f6a:	bf00      	nop
 8007f6c:	372c      	adds	r7, #44	@ 0x2c
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	44020c00 	.word	0x44020c00
 8007f7c:	03d09000 	.word	0x03d09000
 8007f80:	46000000 	.word	0x46000000
 8007f84:	4a742400 	.word	0x4a742400
 8007f88:	4af42400 	.word	0x4af42400

08007f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b08f      	sub	sp, #60	@ 0x3c
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f9a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007f9e:	4321      	orrs	r1, r4
 8007fa0:	d150      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007fa2:	4b26      	ldr	r3, [pc, #152]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007fae:	4b23      	ldr	r3, [pc, #140]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d108      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fc2:	d104      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fca:	f002 bb2a 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007fce:	4b1b      	ldr	r3, [pc, #108]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fdc:	d108      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe4:	d104      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007fe6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fec:	f002 bb19 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007ff0:	4b12      	ldr	r3, [pc, #72]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ffc:	d119      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008004:	d115      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800800e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008012:	d30a      	bcc.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008014:	4b09      	ldr	r3, [pc, #36]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800801e:	4a08      	ldr	r2, [pc, #32]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008020:	fbb2 f3f3 	udiv	r3, r2, r3
 8008024:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008026:	f002 bafc 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800802e:	f002 baf8 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	637b      	str	r3, [r7, #52]	@ 0x34
 8008036:	f002 baf4 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800803a:	bf00      	nop
 800803c:	44020c00 	.word	0x44020c00
 8008040:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008044:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008048:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800804c:	ea50 0104 	orrs.w	r1, r0, r4
 8008050:	f001 8275 	beq.w	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8008054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008058:	2801      	cmp	r0, #1
 800805a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800805e:	f082 82dd 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008066:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800806a:	ea50 0104 	orrs.w	r1, r0, r4
 800806e:	f001 816c 	beq.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8008072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008076:	2801      	cmp	r0, #1
 8008078:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800807c:	f082 82ce 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008084:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008088:	ea50 0104 	orrs.w	r1, r0, r4
 800808c:	f001 8602 	beq.w	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008094:	2801      	cmp	r0, #1
 8008096:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800809a:	f082 82bf 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800809e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80080a6:	ea50 0104 	orrs.w	r1, r0, r4
 80080aa:	f001 854c 	beq.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80080ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080b2:	2801      	cmp	r0, #1
 80080b4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80080b8:	f082 82b0 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080c0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80080c4:	ea50 0104 	orrs.w	r1, r0, r4
 80080c8:	f001 849e 	beq.w	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80080cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080d0:	2801      	cmp	r0, #1
 80080d2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80080d6:	f082 82a1 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080de:	f1a1 0420 	sub.w	r4, r1, #32
 80080e2:	ea50 0104 	orrs.w	r1, r0, r4
 80080e6:	f001 83e8 	beq.w	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80080ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ee:	2801      	cmp	r0, #1
 80080f0:	f171 0120 	sbcs.w	r1, r1, #32
 80080f4:	f082 8292 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fc:	f1a1 0410 	sub.w	r4, r1, #16
 8008100:	ea50 0104 	orrs.w	r1, r0, r4
 8008104:	f002 8256 	beq.w	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800810c:	2801      	cmp	r0, #1
 800810e:	f171 0110 	sbcs.w	r1, r1, #16
 8008112:	f082 8283 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800811a:	f1a1 0408 	sub.w	r4, r1, #8
 800811e:	ea50 0104 	orrs.w	r1, r0, r4
 8008122:	f002 81cc 	beq.w	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812a:	2801      	cmp	r0, #1
 800812c:	f171 0108 	sbcs.w	r1, r1, #8
 8008130:	f082 8274 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008138:	1f0c      	subs	r4, r1, #4
 800813a:	ea50 0104 	orrs.w	r1, r0, r4
 800813e:	f001 8648 	beq.w	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8008142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008146:	2801      	cmp	r0, #1
 8008148:	f171 0104 	sbcs.w	r1, r1, #4
 800814c:	f082 8266 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008154:	1e8c      	subs	r4, r1, #2
 8008156:	ea50 0104 	orrs.w	r1, r0, r4
 800815a:	f002 8143 	beq.w	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800815e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008162:	2801      	cmp	r0, #1
 8008164:	f171 0102 	sbcs.w	r1, r1, #2
 8008168:	f082 8258 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800816c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008170:	1e4c      	subs	r4, r1, #1
 8008172:	ea50 0104 	orrs.w	r1, r0, r4
 8008176:	f002 80ce 	beq.w	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800817a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817e:	2801      	cmp	r0, #1
 8008180:	f171 0101 	sbcs.w	r1, r1, #1
 8008184:	f082 824a 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800818c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008190:	4321      	orrs	r1, r4
 8008192:	f002 8059 	beq.w	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800819a:	4cd9      	ldr	r4, [pc, #868]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800819c:	42a0      	cmp	r0, r4
 800819e:	f171 0100 	sbcs.w	r1, r1, #0
 80081a2:	f082 823b 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081aa:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80081ae:	4321      	orrs	r1, r4
 80081b0:	f001 87d9 	beq.w	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80081b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081b8:	4cd2      	ldr	r4, [pc, #840]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80081ba:	42a0      	cmp	r0, r4
 80081bc:	f171 0100 	sbcs.w	r1, r1, #0
 80081c0:	f082 822c 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80081cc:	4321      	orrs	r1, r4
 80081ce:	f001 8751 	beq.w	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80081d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d6:	4ccc      	ldr	r4, [pc, #816]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80081d8:	42a0      	cmp	r0, r4
 80081da:	f171 0100 	sbcs.w	r1, r1, #0
 80081de:	f082 821d 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80081ea:	4321      	orrs	r1, r4
 80081ec:	f001 869a 	beq.w	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80081f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081f4:	4cc5      	ldr	r4, [pc, #788]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80081f6:	42a0      	cmp	r0, r4
 80081f8:	f171 0100 	sbcs.w	r1, r1, #0
 80081fc:	f082 820e 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008204:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008208:	4321      	orrs	r1, r4
 800820a:	f001 8612 	beq.w	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800820e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008212:	4cbf      	ldr	r4, [pc, #764]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008214:	42a0      	cmp	r0, r4
 8008216:	f171 0100 	sbcs.w	r1, r1, #0
 800821a:	f082 81ff 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800821e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008222:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008226:	4321      	orrs	r1, r4
 8008228:	f002 817e 	beq.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800822c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008230:	4cb8      	ldr	r4, [pc, #736]	@ (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008232:	42a0      	cmp	r0, r4
 8008234:	f171 0100 	sbcs.w	r1, r1, #0
 8008238:	f082 81f0 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800823c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008240:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8008244:	4321      	orrs	r1, r4
 8008246:	f000 829e 	beq.w	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800824a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800824e:	4cb2      	ldr	r4, [pc, #712]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008250:	42a0      	cmp	r0, r4
 8008252:	f171 0100 	sbcs.w	r1, r1, #0
 8008256:	f082 81e1 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800825a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800825e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008262:	4321      	orrs	r1, r4
 8008264:	f000 826d 	beq.w	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800826c:	4cab      	ldr	r4, [pc, #684]	@ (800851c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800826e:	42a0      	cmp	r0, r4
 8008270:	f171 0100 	sbcs.w	r1, r1, #0
 8008274:	f082 81d2 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800827c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008280:	4321      	orrs	r1, r4
 8008282:	f001 800d 	beq.w	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800828a:	4ca5      	ldr	r4, [pc, #660]	@ (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800828c:	42a0      	cmp	r0, r4
 800828e:	f171 0100 	sbcs.w	r1, r1, #0
 8008292:	f082 81c3 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800829e:	4321      	orrs	r1, r4
 80082a0:	f000 81d0 	beq.w	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80082a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082a8:	4c9e      	ldr	r4, [pc, #632]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80082aa:	42a0      	cmp	r0, r4
 80082ac:	f171 0100 	sbcs.w	r1, r1, #0
 80082b0:	f082 81b4 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082b8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80082bc:	4321      	orrs	r1, r4
 80082be:	f000 8142 	beq.w	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80082c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082c6:	4c98      	ldr	r4, [pc, #608]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80082c8:	42a0      	cmp	r0, r4
 80082ca:	f171 0100 	sbcs.w	r1, r1, #0
 80082ce:	f082 81a5 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082d6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80082da:	4321      	orrs	r1, r4
 80082dc:	f001 824e 	beq.w	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80082e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082e4:	4c91      	ldr	r4, [pc, #580]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80082e6:	42a0      	cmp	r0, r4
 80082e8:	f171 0100 	sbcs.w	r1, r1, #0
 80082ec:	f082 8196 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082f4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80082f8:	4321      	orrs	r1, r4
 80082fa:	f001 8197 	beq.w	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80082fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008302:	4c8b      	ldr	r4, [pc, #556]	@ (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008304:	42a0      	cmp	r0, r4
 8008306:	f171 0100 	sbcs.w	r1, r1, #0
 800830a:	f082 8187 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800830e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008312:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008316:	4321      	orrs	r1, r4
 8008318:	f001 8154 	beq.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800831c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008320:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008324:	f171 0100 	sbcs.w	r1, r1, #0
 8008328:	f082 8178 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800832c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008330:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008334:	4321      	orrs	r1, r4
 8008336:	f001 80b7 	beq.w	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800833a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800833e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008342:	42a0      	cmp	r0, r4
 8008344:	f171 0100 	sbcs.w	r1, r1, #0
 8008348:	f082 8168 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800834c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008350:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008354:	4321      	orrs	r1, r4
 8008356:	f001 8064 	beq.w	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800835a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800835e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008362:	42a0      	cmp	r0, r4
 8008364:	f171 0100 	sbcs.w	r1, r1, #0
 8008368:	f082 8158 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800836c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008370:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008374:	4321      	orrs	r1, r4
 8008376:	f001 8011 	beq.w	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800837a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800837e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008382:	42a0      	cmp	r0, r4
 8008384:	f171 0100 	sbcs.w	r1, r1, #0
 8008388:	f082 8148 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800838c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008390:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8008394:	4321      	orrs	r1, r4
 8008396:	f000 871e 	beq.w	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800839a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800839e:	f241 0401 	movw	r4, #4097	@ 0x1001
 80083a2:	42a0      	cmp	r0, r4
 80083a4:	f171 0100 	sbcs.w	r1, r1, #0
 80083a8:	f082 8138 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083b0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80083b4:	4321      	orrs	r1, r4
 80083b6:	f000 86a8 	beq.w	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80083ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083be:	f640 0401 	movw	r4, #2049	@ 0x801
 80083c2:	42a0      	cmp	r0, r4
 80083c4:	f171 0100 	sbcs.w	r1, r1, #0
 80083c8:	f082 8128 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083d0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80083d4:	4321      	orrs	r1, r4
 80083d6:	f000 8632 	beq.w	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80083da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083de:	f240 4401 	movw	r4, #1025	@ 0x401
 80083e2:	42a0      	cmp	r0, r4
 80083e4:	f171 0100 	sbcs.w	r1, r1, #0
 80083e8:	f082 8118 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f0:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80083f4:	4321      	orrs	r1, r4
 80083f6:	f000 85b0 	beq.w	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80083fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fe:	f240 2401 	movw	r4, #513	@ 0x201
 8008402:	42a0      	cmp	r0, r4
 8008404:	f171 0100 	sbcs.w	r1, r1, #0
 8008408:	f082 8108 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800840c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008410:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008414:	4321      	orrs	r1, r4
 8008416:	f000 8535 	beq.w	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800841a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800841e:	f240 1401 	movw	r4, #257	@ 0x101
 8008422:	42a0      	cmp	r0, r4
 8008424:	f171 0100 	sbcs.w	r1, r1, #0
 8008428:	f082 80f8 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800842c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008430:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008434:	4321      	orrs	r1, r4
 8008436:	f000 84ba 	beq.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800843a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800843e:	2881      	cmp	r0, #129	@ 0x81
 8008440:	f171 0100 	sbcs.w	r1, r1, #0
 8008444:	f082 80ea 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800844c:	2821      	cmp	r0, #33	@ 0x21
 800844e:	f171 0100 	sbcs.w	r1, r1, #0
 8008452:	d26f      	bcs.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008458:	4301      	orrs	r1, r0
 800845a:	f002 80df 	beq.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800845e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008462:	1e42      	subs	r2, r0, #1
 8008464:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008468:	2a20      	cmp	r2, #32
 800846a:	f173 0100 	sbcs.w	r1, r3, #0
 800846e:	f082 80d5 	bcs.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008472:	2a1f      	cmp	r2, #31
 8008474:	f202 80d2 	bhi.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008478:	a101      	add	r1, pc, #4	@ (adr r1, 8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800847a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800847e:	bf00      	nop
 8008480:	080087e1 	.word	0x080087e1
 8008484:	080088ad 	.word	0x080088ad
 8008488:	0800a61d 	.word	0x0800a61d
 800848c:	0800896d 	.word	0x0800896d
 8008490:	0800a61d 	.word	0x0800a61d
 8008494:	0800a61d 	.word	0x0800a61d
 8008498:	0800a61d 	.word	0x0800a61d
 800849c:	08008a3d 	.word	0x08008a3d
 80084a0:	0800a61d 	.word	0x0800a61d
 80084a4:	0800a61d 	.word	0x0800a61d
 80084a8:	0800a61d 	.word	0x0800a61d
 80084ac:	0800a61d 	.word	0x0800a61d
 80084b0:	0800a61d 	.word	0x0800a61d
 80084b4:	0800a61d 	.word	0x0800a61d
 80084b8:	0800a61d 	.word	0x0800a61d
 80084bc:	08008b1f 	.word	0x08008b1f
 80084c0:	0800a61d 	.word	0x0800a61d
 80084c4:	0800a61d 	.word	0x0800a61d
 80084c8:	0800a61d 	.word	0x0800a61d
 80084cc:	0800a61d 	.word	0x0800a61d
 80084d0:	0800a61d 	.word	0x0800a61d
 80084d4:	0800a61d 	.word	0x0800a61d
 80084d8:	0800a61d 	.word	0x0800a61d
 80084dc:	0800a61d 	.word	0x0800a61d
 80084e0:	0800a61d 	.word	0x0800a61d
 80084e4:	0800a61d 	.word	0x0800a61d
 80084e8:	0800a61d 	.word	0x0800a61d
 80084ec:	0800a61d 	.word	0x0800a61d
 80084f0:	0800a61d 	.word	0x0800a61d
 80084f4:	0800a61d 	.word	0x0800a61d
 80084f8:	0800a61d 	.word	0x0800a61d
 80084fc:	08008bf5 	.word	0x08008bf5
 8008500:	80000001 	.word	0x80000001
 8008504:	40000001 	.word	0x40000001
 8008508:	20000001 	.word	0x20000001
 800850c:	10000001 	.word	0x10000001
 8008510:	08000001 	.word	0x08000001
 8008514:	04000001 	.word	0x04000001
 8008518:	00800001 	.word	0x00800001
 800851c:	00400001 	.word	0x00400001
 8008520:	00200001 	.word	0x00200001
 8008524:	00100001 	.word	0x00100001
 8008528:	00080001 	.word	0x00080001
 800852c:	00040001 	.word	0x00040001
 8008530:	00020001 	.word	0x00020001
 8008534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008538:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800853c:	430b      	orrs	r3, r1
 800853e:	f000 83c4 	beq.w	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008542:	f002 b86b 	b.w	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008546:	4ba1      	ldr	r3, [pc, #644]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800854c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008550:	633b      	str	r3, [r7, #48]	@ 0x30
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008558:	d036      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008560:	d86b      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008568:	d02b      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008570:	d863      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008578:	d01b      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008580:	d85b      	bhi.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800858e:	d008      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008590:	e053      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008592:	f107 0320 	add.w	r3, r7, #32
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff f8b4 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085a0:	e04e      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a2:	f107 0314 	add.w	r3, r7, #20
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fa18 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085b0:	e046      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fb7c 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085c0:	e03e      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80085c2:	4b83      	ldr	r3, [pc, #524]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085c6:	e03b      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085c8:	4b80      	ldr	r3, [pc, #512]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80085d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085d4:	4b7d      	ldr	r3, [pc, #500]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d10c      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80085e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085e6:	4b79      	ldr	r3, [pc, #484]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	08db      	lsrs	r3, r3, #3
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	4a78      	ldr	r2, [pc, #480]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f8:	e01e      	b.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085fa:	4b74      	ldr	r3, [pc, #464]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008606:	d106      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860e:	d102      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008610:	4b71      	ldr	r3, [pc, #452]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008612:	637b      	str	r3, [r7, #52]	@ 0x34
 8008614:	e010      	b.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008616:	4b6d      	ldr	r3, [pc, #436]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800861e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008622:	d106      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800862a:	d102      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800862c:	4b6b      	ldr	r3, [pc, #428]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008630:	e002      	b.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008636:	e003      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008638:	e002      	b.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800863e:	bf00      	nop
          }
        }
        break;
 8008640:	f001 bfef 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008644:	4b61      	ldr	r3, [pc, #388]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800864a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800864e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008656:	d036      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800865e:	d86b      	bhi.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008666:	d02b      	beq.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800866e:	d863      	bhi.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008676:	d01b      	beq.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800867e:	d85b      	bhi.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800868c:	d008      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800868e:	e053      	b.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008690:	f107 0320 	add.w	r3, r7, #32
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff f835 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800869e:	e04e      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a0:	f107 0314 	add.w	r3, r7, #20
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff f999 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086ae:	e046      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fafd 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086be:	e03e      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80086c0:	4b43      	ldr	r3, [pc, #268]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80086c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086c4:	e03b      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086c6:	4b41      	ldr	r3, [pc, #260]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086d2:	4b3e      	ldr	r3, [pc, #248]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d10c      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80086de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086e4:	4b39      	ldr	r3, [pc, #228]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	4a39      	ldr	r2, [pc, #228]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f6:	e01e      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086f8:	4b34      	ldr	r3, [pc, #208]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008704:	d106      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870c:	d102      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800870e:	4b32      	ldr	r3, [pc, #200]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
 8008712:	e010      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008714:	4b2d      	ldr	r3, [pc, #180]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008720:	d106      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008728:	d102      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800872a:	4b2c      	ldr	r3, [pc, #176]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
 800872e:	e002      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008734:	e003      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008736:	e002      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800873c:	bf00      	nop
          }
        }
        break;
 800873e:	f001 bf70 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008742:	4b22      	ldr	r3, [pc, #136]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008744:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008754:	f107 0320 	add.w	r3, r7, #32
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe ffd3 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008762:	f001 bf5e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	2b40      	cmp	r3, #64	@ 0x40
 800876a:	d108      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff f933 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800877a:	f001 bf52 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008782:	f001 bf4e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008786:	4b11      	ldr	r3, [pc, #68]	@ (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800878c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008790:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	d108      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008798:	f107 0320 	add.w	r3, r7, #32
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe ffb1 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087a6:	f001 bf3c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2b80      	cmp	r3, #128	@ 0x80
 80087ae:	d108      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff f911 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087be:	f001 bf30 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c6:	f001 bf2c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087ca:	bf00      	nop
 80087cc:	44020c00 	.word	0x44020c00
 80087d0:	00bb8000 	.word	0x00bb8000
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	003d0900 	.word	0x003d0900
 80087dc:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80087e0:	4b9d      	ldr	r3, [pc, #628]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80087e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80087f2:	f7fc ffd1 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 80087f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80087f8:	f001 bf13 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80087fc:	4b96      	ldr	r3, [pc, #600]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008804:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008808:	d10a      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	2b01      	cmp	r3, #1
 800880e:	d107      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff f8e1 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
 800881e:	e043      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008820:	4b8d      	ldr	r3, [pc, #564]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882c:	d10a      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	2b02      	cmp	r3, #2
 8008832:	d107      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fa3b 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	637b      	str	r3, [r7, #52]	@ 0x34
 8008842:	e031      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008844:	4b84      	ldr	r3, [pc, #528]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b02      	cmp	r3, #2
 800884e:	d10c      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008852:	2b03      	cmp	r3, #3
 8008854:	d109      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008856:	4b80      	ldr	r3, [pc, #512]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	08db      	lsrs	r3, r3, #3
 800885c:	f003 0303 	and.w	r3, r3, #3
 8008860:	4a7e      	ldr	r2, [pc, #504]	@ (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008862:	fa22 f303 	lsr.w	r3, r2, r3
 8008866:	637b      	str	r3, [r7, #52]	@ 0x34
 8008868:	e01e      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800886a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008876:	d105      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887a:	2b04      	cmp	r3, #4
 800887c:	d102      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800887e:	4b78      	ldr	r3, [pc, #480]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
 8008882:	e011      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008884:	4b74      	ldr	r3, [pc, #464]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b02      	cmp	r3, #2
 8008890:	d106      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	2b05      	cmp	r3, #5
 8008896:	d103      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	e003      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a4:	f001 bebd 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088a8:	f001 bebb 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80088ac:	4b6a      	ldr	r3, [pc, #424]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088be:	f7fc ff55 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 80088c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80088c4:	f001 bead 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80088c8:	4b63      	ldr	r3, [pc, #396]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088d4:	d10a      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d107      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff f87b 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ea:	e03d      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	2b10      	cmp	r3, #16
 80088f0:	d108      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f9dc 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008900:	f001 be8f 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008904:	4b54      	ldr	r3, [pc, #336]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b02      	cmp	r3, #2
 800890e:	d10c      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	2b18      	cmp	r3, #24
 8008914:	d109      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008916:	4b50      	ldr	r3, [pc, #320]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a4e      	ldr	r2, [pc, #312]	@ (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
 8008928:	e01e      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800892a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008936:	d105      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2b20      	cmp	r3, #32
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800893e:	4b48      	ldr	r3, [pc, #288]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
 8008942:	e011      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008944:	4b44      	ldr	r3, [pc, #272]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	d106      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	2b28      	cmp	r3, #40	@ 0x28
 8008956:	d103      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	e003      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008964:	f001 be5d 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008968:	f001 be5b 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800896c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800896e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008972:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008976:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800897e:	f7fc fef5 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008982:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008984:	f001 be4d 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008988:	4b33      	ldr	r3, [pc, #204]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008994:	d10a      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff f81b 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089aa:	e045      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80089ac:	4b2a      	ldr	r3, [pc, #168]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b8:	d10a      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	2b80      	cmp	r3, #128	@ 0x80
 80089be:	d107      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c0:	f107 0308 	add.w	r3, r7, #8
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff f975 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ce:	e033      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80089d0:	4b21      	ldr	r3, [pc, #132]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d10c      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2bc0      	cmp	r3, #192	@ 0xc0
 80089e0:	d109      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	08db      	lsrs	r3, r3, #3
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	4a1b      	ldr	r2, [pc, #108]	@ (8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80089ee:	fa22 f303 	lsr.w	r3, r2, r3
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f4:	e020      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80089f6:	4b18      	ldr	r3, [pc, #96]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a02:	d106      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0a:	d102      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008a0c:	4b14      	ldr	r3, [pc, #80]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a10:	e012      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008a12:	4b11      	ldr	r3, [pc, #68]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d107      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008a26:	d103      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2e:	e003      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a34:	f001 bdf5 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a38:	f001 bdf3 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008a3c:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a42:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008a46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a4e:	f7fc fe8d 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008a52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a54:	f001 bde5 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a58:	44020c00 	.word	0x44020c00
 8008a5c:	03d09000 	.word	0x03d09000
 8008a60:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008a64:	4ba0      	ldr	r3, [pc, #640]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a70:	d10b      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a78:	d107      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a7a:	f107 0314 	add.w	r3, r7, #20
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe ffac 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a88:	e047      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008a8a:	4b97      	ldr	r3, [pc, #604]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a96:	d10b      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a9e:	d107      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa0:	f107 0308 	add.w	r3, r7, #8
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff f905 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aae:	e034      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008ab0:	4b8d      	ldr	r3, [pc, #564]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d10d      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ac2:	d109      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ac4:	4b88      	ldr	r3, [pc, #544]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	08db      	lsrs	r3, r3, #3
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	4a87      	ldr	r2, [pc, #540]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad6:	e020      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008ad8:	4b83      	ldr	r3, [pc, #524]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae4:	d106      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aec:	d102      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008aee:	4b80      	ldr	r3, [pc, #512]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af2:	e012      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008af4:	4b7c      	ldr	r3, [pc, #496]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d107      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008b08:	d103      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b10:	e003      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b16:	f001 bd84 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b1a:	f001 bd82 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008b1e:	4b72      	ldr	r3, [pc, #456]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b24:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b28:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d104      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b30:	f7fc fe1c 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008b34:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b36:	f001 bd74 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008b3a:	4b6b      	ldr	r3, [pc, #428]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b46:	d10b      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b50:	f107 0314 	add.w	r3, r7, #20
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe ff41 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5e:	e047      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008b60:	4b61      	ldr	r3, [pc, #388]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6c:	d10b      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b74:	d107      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b76:	f107 0308 	add.w	r3, r7, #8
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff f89a 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	e034      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008b86:	4b58      	ldr	r3, [pc, #352]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d10d      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b98:	d109      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b9a:	4b53      	ldr	r3, [pc, #332]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	08db      	lsrs	r3, r3, #3
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	4a51      	ldr	r2, [pc, #324]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8008baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bac:	e020      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008bae:	4b4e      	ldr	r3, [pc, #312]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bba:	d106      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bc2:	d102      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc8:	e012      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008bca:	4b47      	ldr	r3, [pc, #284]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d107      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008bde:	d103      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be6:	e003      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bec:	f001 bd19 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bf0:	f001 bd17 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008bfa:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008bfe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fc fdb1 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008c0a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c0c:	f001 bd09 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008c10:	4b35      	ldr	r3, [pc, #212]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1c:	d10b      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c24:	d107      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c26:	f107 0314 	add.w	r3, r7, #20
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fed6 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c34:	e047      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008c36:	4b2c      	ldr	r3, [pc, #176]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c42:	d10b      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4a:	d107      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4c:	f107 0308 	add.w	r3, r7, #8
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff f82f 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5a:	e034      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008c5c:	4b22      	ldr	r3, [pc, #136]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d10d      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008c6e:	d109      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c82:	e020      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008c84:	4b18      	ldr	r3, [pc, #96]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c90:	d106      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c98:	d102      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008c9a:	4b15      	ldr	r3, [pc, #84]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c9e:	e012      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008ca0:	4b11      	ldr	r3, [pc, #68]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d107      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008cb4:	d103      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e003      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc2:	f001 bcae 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cc6:	f001 bcac 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008cca:	4b07      	ldr	r3, [pc, #28]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008cd0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008cd4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cdc:	f7fc fd46 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008ce0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ce2:	f001 bc9e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ce6:	bf00      	nop
 8008ce8:	44020c00 	.word	0x44020c00
 8008cec:	03d09000 	.word	0x03d09000
 8008cf0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d00:	d10b      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d08:	d107      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0a:	f107 0314 	add.w	r3, r7, #20
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fe64 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d18:	e047      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008d1a:	4b97      	ldr	r3, [pc, #604]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d26:	d10b      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d30:	f107 0308 	add.w	r3, r7, #8
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe ffbd 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d3e:	e034      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008d40:	4b8d      	ldr	r3, [pc, #564]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d10d      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008d52:	d109      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d54:	4b88      	ldr	r3, [pc, #544]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	08db      	lsrs	r3, r3, #3
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	4a87      	ldr	r2, [pc, #540]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d66:	e020      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008d68:	4b83      	ldr	r3, [pc, #524]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d74:	d106      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7c:	d102      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008d7e:	4b80      	ldr	r3, [pc, #512]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d82:	e012      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008d84:	4b7c      	ldr	r3, [pc, #496]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d107      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008d98:	d103      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da0:	e003      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008da6:	f001 bc3c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008daa:	f001 bc3a 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008dae:	4b72      	ldr	r3, [pc, #456]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008db4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008db8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fc fcd4 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008dc4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dc6:	f001 bc2c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008dca:	4b6b      	ldr	r3, [pc, #428]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd6:	d10b      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dde:	d107      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de0:	f107 0314 	add.w	r3, r7, #20
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fdf9 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dee:	e047      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008df0:	4b61      	ldr	r3, [pc, #388]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dfc:	d10b      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e04:	d107      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe ff52 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e14:	e034      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008e16:	4b58      	ldr	r3, [pc, #352]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d10d      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e28:	d109      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e2a:	4b53      	ldr	r3, [pc, #332]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	08db      	lsrs	r3, r3, #3
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	4a51      	ldr	r2, [pc, #324]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008e36:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e3c:	e020      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4a:	d106      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e52:	d102      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008e54:	4b4a      	ldr	r3, [pc, #296]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e58:	e012      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008e5a:	4b47      	ldr	r3, [pc, #284]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d107      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e6e:	d103      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e7c:	f001 bbd1 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e80:	f001 bbcf 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008e84:	4b3c      	ldr	r3, [pc, #240]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e96:	f7fc fc69 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008e9a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e9c:	f001 bbc1 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008ea0:	4b35      	ldr	r3, [pc, #212]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eac:	d10b      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eb4:	d107      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fd8e 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec4:	e047      	b.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed2:	d10b      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008eda:	d107      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fee7 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eea:	e034      	b.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008eec:	4b22      	ldr	r3, [pc, #136]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d10d      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008efe:	d109      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	08db      	lsrs	r3, r3, #3
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f12:	e020      	b.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008f14:	4b18      	ldr	r3, [pc, #96]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f20:	d106      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f28:	d102      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008f2a:	4b15      	ldr	r3, [pc, #84]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f2e:	e012      	b.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008f30:	4b11      	ldr	r3, [pc, #68]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f44:	d103      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4c:	e003      	b.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f52:	f001 bb66 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f56:	f001 bb64 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008f5a:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f60:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008f64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10b      	bne.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f6c:	f7fc fbfe 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8008f70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f72:	f001 bb56 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f76:	bf00      	nop
 8008f78:	44020c00 	.word	0x44020c00
 8008f7c:	03d09000 	.word	0x03d09000
 8008f80:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008f84:	4ba1      	ldr	r3, [pc, #644]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f90:	d10b      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f98:	d107      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f9a:	f107 0314 	add.w	r3, r7, #20
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fd1c 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa8:	e047      	b.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008faa:	4b98      	ldr	r3, [pc, #608]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fb6:	d10b      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc0:	f107 0308 	add.w	r3, r7, #8
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe fe75 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fce:	e034      	b.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d10d      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008fe2:	d109      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fe4:	4b89      	ldr	r3, [pc, #548]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	4a88      	ldr	r2, [pc, #544]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff6:	e020      	b.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008ff8:	4b84      	ldr	r3, [pc, #528]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009004:	d106      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900c:	d102      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800900e:	4b81      	ldr	r3, [pc, #516]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009010:	637b      	str	r3, [r7, #52]	@ 0x34
 8009012:	e012      	b.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8009014:	4b7d      	ldr	r3, [pc, #500]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b02      	cmp	r3, #2
 8009020:	d107      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8009028:	d103      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800902a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009030:	e003      	b.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009036:	f001 baf4 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800903a:	f001 baf2 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800903e:	4b73      	ldr	r3, [pc, #460]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009040:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009050:	f7fc fb8c 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8009054:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8009056:	f001 bae4 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800905a:	4b6c      	ldr	r3, [pc, #432]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009066:	d10a      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	2b01      	cmp	r3, #1
 800906c:	d107      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906e:	f107 0314 	add.w	r3, r7, #20
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fcb2 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	637b      	str	r3, [r7, #52]	@ 0x34
 800907c:	e043      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800907e:	4b63      	ldr	r3, [pc, #396]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800908a:	d10a      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	2b02      	cmp	r3, #2
 8009090:	d107      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fe0c 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a0:	e031      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80090a2:	4b5a      	ldr	r3, [pc, #360]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d10c      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d109      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090b4:	4b55      	ldr	r3, [pc, #340]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	4a54      	ldr	r2, [pc, #336]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c6:	e01e      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80090c8:	4b50      	ldr	r3, [pc, #320]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d4:	d105      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d102      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80090dc:	4b4d      	ldr	r3, [pc, #308]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e0:	e011      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80090e2:	4b4a      	ldr	r3, [pc, #296]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d106      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d103      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80090f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fc:	e003      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009102:	f001 ba8e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009106:	f001 ba8c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800910a:	4b40      	ldr	r3, [pc, #256]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800910c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009114:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	2b00      	cmp	r3, #0
 800911a:	d104      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800911c:	f7fc fb26 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8009120:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8009122:	f001 ba7e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009126:	4b39      	ldr	r3, [pc, #228]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800912e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009132:	d10a      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009136:	2b10      	cmp	r3, #16
 8009138:	d107      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913a:	f107 0314 	add.w	r3, r7, #20
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fc4c 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	637b      	str	r3, [r7, #52]	@ 0x34
 8009148:	e043      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800914a:	4b30      	ldr	r3, [pc, #192]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009156:	d10a      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	2b20      	cmp	r3, #32
 800915c:	d107      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800915e:	f107 0308 	add.w	r3, r7, #8
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fda6 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	637b      	str	r3, [r7, #52]	@ 0x34
 800916c:	e031      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800916e:	4b27      	ldr	r3, [pc, #156]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b02      	cmp	r3, #2
 8009178:	d10c      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	2b30      	cmp	r3, #48	@ 0x30
 800917e:	d109      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009180:	4b22      	ldr	r3, [pc, #136]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	08db      	lsrs	r3, r3, #3
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	4a21      	ldr	r2, [pc, #132]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800918c:	fa22 f303 	lsr.w	r3, r2, r3
 8009190:	637b      	str	r3, [r7, #52]	@ 0x34
 8009192:	e01e      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009194:	4b1d      	ldr	r3, [pc, #116]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800919c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a0:	d105      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	2b40      	cmp	r3, #64	@ 0x40
 80091a6:	d102      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80091a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80091aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ac:	e011      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80091ae:	4b17      	ldr	r3, [pc, #92]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d106      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80091bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091be:	2b50      	cmp	r3, #80	@ 0x50
 80091c0:	d103      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80091c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c8:	e003      	b.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ce:	f001 ba28 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091d2:	f001 ba26 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80091d6:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d104      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091e8:	f7fc faec 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 80091ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80091ee:	f001 ba18 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80091f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091f8:	d10e      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091fa:	f107 0314 	add.w	r3, r7, #20
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fbec 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009208:	f001 ba0b 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800920c:	44020c00 	.word	0x44020c00
 8009210:	03d09000 	.word	0x03d09000
 8009214:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800921e:	d108      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009220:	f107 0308 	add.w	r3, r7, #8
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe fd45 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800922e:	f001 b9f8 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009232:	4ba4      	ldr	r3, [pc, #656]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b02      	cmp	r3, #2
 800923c:	d10d      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009244:	d109      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009246:	4b9f      	ldr	r3, [pc, #636]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	08db      	lsrs	r3, r3, #3
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	4a9d      	ldr	r2, [pc, #628]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009252:	fa22 f303 	lsr.w	r3, r2, r3
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34
 8009258:	e020      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800925a:	4b9a      	ldr	r3, [pc, #616]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009266:	d106      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800926e:	d102      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009270:	4b96      	ldr	r3, [pc, #600]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
 8009274:	e012      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009276:	4b93      	ldr	r3, [pc, #588]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b02      	cmp	r3, #2
 8009282:	d107      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800928a:	d103      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800928c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009290:	637b      	str	r3, [r7, #52]	@ 0x34
 8009292:	e003      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009298:	f001 b9c3 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800929c:	f001 b9c1 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80092a0:	4b88      	ldr	r3, [pc, #544]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80092b2:	f7fc fa3f 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 80092b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80092b8:	f001 b9b3 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d104      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80092c2:	f7fc f90b 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 80092c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092c8:	f001 b9ab 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d108      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092d2:	f107 0314 	add.w	r3, r7, #20
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fb80 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092e0:	f001 b99f 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80092e4:	4b77      	ldr	r3, [pc, #476]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f0:	d105      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d102      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80092f8:	4b75      	ldr	r3, [pc, #468]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80092fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fc:	e023      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80092fe:	4b71      	ldr	r3, [pc, #452]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b02      	cmp	r3, #2
 8009308:	d10c      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	2b04      	cmp	r3, #4
 800930e:	d109      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009310:	4b6c      	ldr	r3, [pc, #432]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	08db      	lsrs	r3, r3, #3
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	4a6b      	ldr	r2, [pc, #428]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
 8009322:	e010      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009324:	4b67      	ldr	r3, [pc, #412]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800932c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009330:	d105      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2b05      	cmp	r3, #5
 8009336:	d102      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009338:	4b64      	ldr	r3, [pc, #400]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
 800933c:	e003      	b.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009342:	f001 b96e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009346:	f001 b96c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800934a:	4b5e      	ldr	r3, [pc, #376]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800934c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009356:	4b5b      	ldr	r3, [pc, #364]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b02      	cmp	r3, #2
 8009362:	d106      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009366:	2b00      	cmp	r3, #0
 8009368:	d103      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800936a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009370:	e012      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009372:	4b54      	ldr	r3, [pc, #336]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800937c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009380:	d106      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	2b08      	cmp	r3, #8
 8009386:	d103      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009388:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
 800938e:	e003      	b.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009394:	f001 b945 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009398:	f001 b943 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800939c:	4b49      	ldr	r3, [pc, #292]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800939e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093ae:	f7fc f9dd 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 80093b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80093b4:	f001 b935 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093be:	d108      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fc75 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ce:	f001 b928 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80093d2:	4b3c      	ldr	r3, [pc, #240]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d10d      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093e4:	d109      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093e6:	4b37      	ldr	r3, [pc, #220]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	08db      	lsrs	r3, r3, #3
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	4a35      	ldr	r2, [pc, #212]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80093f2:	fa22 f303 	lsr.w	r3, r2, r3
 80093f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f8:	e011      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80093fa:	4b32      	ldr	r3, [pc, #200]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009406:	d106      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800940e:	d102      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009410:	4b2e      	ldr	r3, [pc, #184]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
 8009414:	e003      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800941a:	f001 b902 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800941e:	f001 b900 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009422:	4b28      	ldr	r3, [pc, #160]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009428:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800942c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009434:	f7fc f99a 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8009438:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800943a:	f001 b8f2 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009444:	d108      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009446:	f107 0308 	add.w	r3, r7, #8
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fc32 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009454:	f001 b8e5 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009458:	4b1a      	ldr	r3, [pc, #104]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b02      	cmp	r3, #2
 8009462:	d10d      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800946a:	d109      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800946c:	4b15      	ldr	r3, [pc, #84]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	08db      	lsrs	r3, r3, #3
 8009472:	f003 0303 	and.w	r3, r3, #3
 8009476:	4a14      	ldr	r2, [pc, #80]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009478:	fa22 f303 	lsr.w	r3, r2, r3
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34
 800947e:	e011      	b.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009480:	4b10      	ldr	r3, [pc, #64]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009490:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009494:	d102      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009496:	4b0d      	ldr	r3, [pc, #52]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009498:	637b      	str	r3, [r7, #52]	@ 0x34
 800949a:	e003      	b.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094a0:	f001 b8bf 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094a4:	f001 b8bd 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80094a8:	4b06      	ldr	r3, [pc, #24]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80094b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10c      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80094ba:	f7fc f983 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 80094be:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80094c0:	f001 b8af 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094c4:	44020c00 	.word	0x44020c00
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	003d0900 	.word	0x003d0900
 80094d0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094da:	d108      	bne.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094dc:	f107 0308 	add.w	r3, r7, #8
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe fbe7 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ea:	f001 b89a 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80094ee:	4b9f      	ldr	r3, [pc, #636]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d10d      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009500:	d109      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009502:	4b9a      	ldr	r3, [pc, #616]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	4a98      	ldr	r2, [pc, #608]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800950e:	fa22 f303 	lsr.w	r3, r2, r3
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
 8009514:	e011      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009516:	4b95      	ldr	r3, [pc, #596]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800951e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009522:	d106      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800952a:	d102      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800952c:	4b91      	ldr	r3, [pc, #580]	@ (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800952e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009530:	e003      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009536:	f001 b874 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800953a:	f001 b872 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800953e:	4b8b      	ldr	r3, [pc, #556]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009544:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009548:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009550:	f7fc f938 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 8009554:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009556:	f001 b864 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009560:	d108      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fba4 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009570:	f001 b857 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009574:	4b7d      	ldr	r3, [pc, #500]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0302 	and.w	r3, r3, #2
 800957c:	2b02      	cmp	r3, #2
 800957e:	d10d      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009586:	d109      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009588:	4b78      	ldr	r3, [pc, #480]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	08db      	lsrs	r3, r3, #3
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	4a77      	ldr	r2, [pc, #476]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009594:	fa22 f303 	lsr.w	r3, r2, r3
 8009598:	637b      	str	r3, [r7, #52]	@ 0x34
 800959a:	e011      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800959c:	4b73      	ldr	r3, [pc, #460]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a8:	d106      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80095b0:	d102      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80095b2:	4b70      	ldr	r3, [pc, #448]	@ (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80095b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b6:	e003      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095bc:	f001 b831 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095c0:	f001 b82f 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80095c4:	4b69      	ldr	r3, [pc, #420]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095ca:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80095ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095d6:	f7fc f8c9 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 80095da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80095dc:	f001 b821 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80095e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095e6:	d108      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fb61 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095f6:	f001 b814 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80095fa:	4b5c      	ldr	r3, [pc, #368]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b02      	cmp	r3, #2
 8009604:	d10e      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800960c:	d10a      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800960e:	4b57      	ldr	r3, [pc, #348]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	08db      	lsrs	r3, r3, #3
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	4a55      	ldr	r2, [pc, #340]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800961a:	fa22 f303 	lsr.w	r3, r2, r3
 800961e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009620:	f000 bfff 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009628:	f000 bffb 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800962c:	4b4f      	ldr	r3, [pc, #316]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800962e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009632:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800963e:	d056      	beq.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009646:	f200 808b 	bhi.w	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009650:	d03e      	beq.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009658:	f200 8082 	bhi.w	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800965c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009662:	d027      	beq.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800966a:	d879      	bhi.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009672:	d017      	beq.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800967a:	d871      	bhi.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800967c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967e:	2b00      	cmp	r3, #0
 8009680:	d004      	beq.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009688:	d004      	beq.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800968a:	e069      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800968c:	f7fc f89a 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 8009690:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009692:	e068      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009694:	f107 0314 	add.w	r3, r7, #20
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe f99f 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a2:	e060      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096a4:	f107 0308 	add.w	r3, r7, #8
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fb03 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096b2:	e058      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80096b4:	4b2d      	ldr	r3, [pc, #180]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d103      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80096c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096c8:	e04d      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096ce:	e04a      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80096d0:	4b26      	ldr	r3, [pc, #152]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096de:	d103      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80096e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096e6:	e03e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096ec:	e03b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096ee:	4b1f      	ldr	r3, [pc, #124]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096fa:	4b1c      	ldr	r3, [pc, #112]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b02      	cmp	r3, #2
 8009704:	d10c      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800970c:	4b17      	ldr	r3, [pc, #92]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	08db      	lsrs	r3, r3, #3
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	4a16      	ldr	r2, [pc, #88]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
 800971e:	e01e      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009720:	4b12      	ldr	r3, [pc, #72]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800972c:	d106      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009734:	d102      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009736:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009738:	637b      	str	r3, [r7, #52]	@ 0x34
 800973a:	e010      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800973c:	4b0b      	ldr	r3, [pc, #44]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009750:	d102      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009752:	4b09      	ldr	r3, [pc, #36]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
 8009756:	e002      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800975c:	e003      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009764:	bf00      	nop
          }
        }
        break;
 8009766:	f000 bf5c 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800976a:	bf00      	nop
 800976c:	44020c00 	.word	0x44020c00
 8009770:	03d09000 	.word	0x03d09000
 8009774:	003d0900 	.word	0x003d0900
 8009778:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800977c:	4b9e      	ldr	r3, [pc, #632]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800977e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009782:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009786:	633b      	str	r3, [r7, #48]	@ 0x30
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800978e:	d056      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009796:	f200 808b 	bhi.w	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a0:	d03e      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a8:	f200 8082 	bhi.w	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097b2:	d027      	beq.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097ba:	d879      	bhi.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80097bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097c2:	d017      	beq.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ca:	d871      	bhi.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d004      	beq.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097d8:	d004      	beq.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80097da:	e069      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80097dc:	f7fb ffc6 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 80097e0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80097e2:	e068      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097e4:	f107 0314 	add.w	r3, r7, #20
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe f8f7 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097f2:	e060      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097f4:	f107 0308 	add.w	r3, r7, #8
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fa5b 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009802:	e058      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009804:	4b7c      	ldr	r3, [pc, #496]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b02      	cmp	r3, #2
 8009810:	d103      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009818:	e04d      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800981e:	e04a      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009820:	4b75      	ldr	r3, [pc, #468]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800982a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800982e:	d103      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009830:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009836:	e03e      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800983c:	e03b      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800983e:	4b6e      	ldr	r3, [pc, #440]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009844:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009848:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800984a:	4b6b      	ldr	r3, [pc, #428]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b02      	cmp	r3, #2
 8009854:	d10c      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800985c:	4b66      	ldr	r3, [pc, #408]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	08db      	lsrs	r3, r3, #3
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	4a65      	ldr	r2, [pc, #404]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009868:	fa22 f303 	lsr.w	r3, r2, r3
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
 800986e:	e01e      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009870:	4b61      	ldr	r3, [pc, #388]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800987c:	d106      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009884:	d102      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009886:	4b5e      	ldr	r3, [pc, #376]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
 800988a:	e010      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800988c:	4b5a      	ldr	r3, [pc, #360]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009898:	d106      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800989a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098a0:	d102      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098a2:	4b58      	ldr	r3, [pc, #352]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80098a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a6:	e002      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098ac:	e003      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80098ae:	e002      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098b4:	bf00      	nop
          }
        }
        break;
 80098b6:	f000 beb4 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80098ba:	4b4f      	ldr	r3, [pc, #316]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80098c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80098c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098cc:	d056      	beq.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098d4:	f200 808b 	bhi.w	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098de:	d03e      	beq.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80098e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098e6:	f200 8082 	bhi.w	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098f0:	d027      	beq.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098f8:	d879      	bhi.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009900:	d017      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009908:	d871      	bhi.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009916:	d004      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009918:	e069      	b.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800991a:	f7fb ff53 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 800991e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009920:	e068      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009922:	f107 0314 	add.w	r3, r7, #20
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe f858 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009930:	e060      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe f9bc 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009940:	e058      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009942:	4b2d      	ldr	r3, [pc, #180]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b02      	cmp	r3, #2
 800994e:	d103      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009954:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009956:	e04d      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800995c:	e04a      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800995e:	4b26      	ldr	r3, [pc, #152]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800996c:	d103      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800996e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009972:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009974:	e03e      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800997a:	e03b      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800997c:	4b1e      	ldr	r3, [pc, #120]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800997e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009982:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009986:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009988:	4b1b      	ldr	r3, [pc, #108]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b02      	cmp	r3, #2
 8009992:	d10c      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800999a:	4b17      	ldr	r3, [pc, #92]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	08db      	lsrs	r3, r3, #3
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	4a15      	ldr	r2, [pc, #84]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80099a6:	fa22 f303 	lsr.w	r3, r2, r3
 80099aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ac:	e01e      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099ae:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ba:	d106      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c2:	d102      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80099c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80099c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c8:	e010      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099ca:	4b0b      	ldr	r3, [pc, #44]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d6:	d106      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80099d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099de:	d102      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099e0:	4b08      	ldr	r3, [pc, #32]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80099e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099ea:	e003      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80099ec:	e002      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099f2:	bf00      	nop
          }
        }
        break;
 80099f4:	f000 be15 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099f8:	44020c00 	.word	0x44020c00
 80099fc:	03d09000 	.word	0x03d09000
 8009a00:	003d0900 	.word	0x003d0900
 8009a04:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009a08:	4b9e      	ldr	r3, [pc, #632]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009a0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009a0e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009a1a:	d056      	beq.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009a22:	f200 808b 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a2c:	d03e      	beq.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a34:	f200 8082 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a3e:	d027      	beq.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a46:	d879      	bhi.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a4e:	d017      	beq.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a56:	d871      	bhi.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a64:	d004      	beq.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009a66:	e069      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009a68:	f7fb feac 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 8009a6c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009a6e:	e068      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a70:	f107 0314 	add.w	r3, r7, #20
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fd ffb1 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a7e:	e060      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe f915 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a8e:	e058      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009a90:	4b7c      	ldr	r3, [pc, #496]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d103      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009aa4:	e04d      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aaa:	e04a      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009aac:	4b75      	ldr	r3, [pc, #468]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aba:	d103      	bne.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009abc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ac0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ac2:	e03e      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ac8:	e03b      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aca:	4b6e      	ldr	r3, [pc, #440]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ad0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d10c      	bne.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d109      	bne.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ae8:	4b66      	ldr	r3, [pc, #408]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	08db      	lsrs	r3, r3, #3
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	4a65      	ldr	r2, [pc, #404]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009af4:	fa22 f303 	lsr.w	r3, r2, r3
 8009af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009afa:	e01e      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009afc:	4b61      	ldr	r3, [pc, #388]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b08:	d106      	bne.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b10:	d102      	bne.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b12:	4b5e      	ldr	r3, [pc, #376]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b16:	e010      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b18:	4b5a      	ldr	r3, [pc, #360]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b24:	d106      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b2c:	d102      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b2e:	4b58      	ldr	r3, [pc, #352]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b32:	e002      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b38:	e003      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009b3a:	e002      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b40:	bf00      	nop
          }
        }
        break;
 8009b42:	f000 bd6e 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009b46:	4b4f      	ldr	r3, [pc, #316]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009b4c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009b58:	d056      	beq.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009b60:	f200 808b 	bhi.w	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b6a:	d03e      	beq.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b72:	f200 8082 	bhi.w	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b7c:	d027      	beq.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b84:	d879      	bhi.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b8c:	d017      	beq.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b94:	d871      	bhi.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ba2:	d004      	beq.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009ba4:	e069      	b.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009ba6:	f7fb fe0d 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 8009baa:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009bac:	e068      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bae:	f107 0314 	add.w	r3, r7, #20
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fd ff12 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bbc:	e060      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe f876 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bcc:	e058      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009bce:	4b2d      	ldr	r3, [pc, #180]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d103      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009be2:	e04d      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009be8:	e04a      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009bea:	4b26      	ldr	r3, [pc, #152]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bf8:	d103      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009bfa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009bfe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c00:	e03e      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c06:	e03b      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c08:	4b1e      	ldr	r3, [pc, #120]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c12:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c14:	4b1b      	ldr	r3, [pc, #108]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d10c      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d109      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c26:	4b17      	ldr	r3, [pc, #92]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	08db      	lsrs	r3, r3, #3
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	4a15      	ldr	r2, [pc, #84]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009c32:	fa22 f303 	lsr.w	r3, r2, r3
 8009c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c38:	e01e      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c3a:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c46:	d106      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c4e:	d102      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c50:	4b0e      	ldr	r3, [pc, #56]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c54:	e010      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c56:	4b0b      	ldr	r3, [pc, #44]	@ (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c62:	d106      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c6a:	d102      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c6c:	4b08      	ldr	r3, [pc, #32]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c70:	e002      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c76:	e003      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009c78:	e002      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c7e:	bf00      	nop
          }
        }
        break;
 8009c80:	f000 bccf 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c84:	44020c00 	.word	0x44020c00
 8009c88:	03d09000 	.word	0x03d09000
 8009c8c:	003d0900 	.word	0x003d0900
 8009c90:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009c94:	4b9e      	ldr	r3, [pc, #632]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009c96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009c9a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ca6:	d056      	beq.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cae:	f200 808b 	bhi.w	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cb8:	d03e      	beq.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc0:	f200 8082 	bhi.w	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cca:	d027      	beq.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cd2:	d879      	bhi.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cda:	d017      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ce2:	d871      	bhi.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d004      	beq.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cf0:	d004      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009cf2:	e069      	b.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009cf4:	f7fb fd66 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 8009cf8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009cfa:	e068      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fd fe6b 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d0a:	e060      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d0c:	f107 0308 	add.w	r3, r7, #8
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd ffcf 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d1a:	e058      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d103      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009d30:	e04d      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d36:	e04a      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009d38:	4b75      	ldr	r3, [pc, #468]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d46:	d103      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009d48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009d4e:	e03e      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d54:	e03b      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d56:	4b6e      	ldr	r3, [pc, #440]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d5c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d60:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d62:	4b6b      	ldr	r3, [pc, #428]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d10c      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d109      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d74:	4b66      	ldr	r3, [pc, #408]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	08db      	lsrs	r3, r3, #3
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	4a65      	ldr	r2, [pc, #404]	@ (8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d86:	e01e      	b.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d88:	4b61      	ldr	r3, [pc, #388]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d94:	d106      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d9c:	d102      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da2:	e010      	b.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009da4:	4b5a      	ldr	r3, [pc, #360]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009db0:	d106      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009db8:	d102      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009dba:	4b58      	ldr	r3, [pc, #352]	@ (8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dbe:	e002      	b.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dc4:	e003      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009dc6:	e002      	b.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dcc:	bf00      	nop
          }
        }
        break;
 8009dce:	f000 bc28 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ddc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009dde:	4b4c      	ldr	r3, [pc, #304]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dea:	d106      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d103      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009df2:	4b4a      	ldr	r3, [pc, #296]	@ (8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009df6:	f000 bc14 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e00:	d108      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e02:	f107 0320 	add.w	r3, r7, #32
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fd fc7c 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e10:	f000 bc07 	b.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1a:	d107      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e1c:	f107 0314 	add.w	r3, r7, #20
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fd fddb 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e2a:	e3fa      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e30:	e3f7      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009e32:	4b37      	ldr	r3, [pc, #220]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d861      	bhi.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009e44:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4a:	bf00      	nop
 8009e4c:	08009e61 	.word	0x08009e61
 8009e50:	08009e71 	.word	0x08009e71
 8009e54:	08009e81 	.word	0x08009e81
 8009e58:	08009e91 	.word	0x08009e91
 8009e5c:	08009e97 	.word	0x08009e97
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e60:	f107 0320 	add.w	r3, r7, #32
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fd fc4d 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e6e:	e04e      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e70:	f107 0314 	add.w	r3, r7, #20
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fd fdb1 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e7e:	e046      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e80:	f107 0308 	add.w	r3, r7, #8
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fd ff15 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e8e:	e03e      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009e90:	4b23      	ldr	r3, [pc, #140]	@ (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009e92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e94:	e03b      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e96:	4b1e      	ldr	r3, [pc, #120]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e9c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d10c      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009eb4:	4b16      	ldr	r3, [pc, #88]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	08db      	lsrs	r3, r3, #3
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	4a15      	ldr	r2, [pc, #84]	@ (8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec6:	e01e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ec8:	4b11      	ldr	r3, [pc, #68]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed4:	d106      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009edc:	d102      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ede:	4b0e      	ldr	r3, [pc, #56]	@ (8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee2:	e010      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ef0:	d106      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef8:	d102      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009efa:	4b08      	ldr	r3, [pc, #32]	@ (8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efe:	e002      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009f04:	e003      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009f06:	e002      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f0c:	bf00      	nop
          }
        }
        break;
 8009f0e:	e388      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f10:	44020c00 	.word	0x44020c00
 8009f14:	03d09000 	.word	0x03d09000
 8009f18:	003d0900 	.word	0x003d0900
 8009f1c:	007a1200 	.word	0x007a1200
 8009f20:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009f24:	4ba9      	ldr	r3, [pc, #676]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	f200 809a 	bhi.w	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009f38:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3e:	bf00      	nop
 8009f40:	08009fc5 	.word	0x08009fc5
 8009f44:	0800a06d 	.word	0x0800a06d
 8009f48:	0800a06d 	.word	0x0800a06d
 8009f4c:	0800a06d 	.word	0x0800a06d
 8009f50:	0800a06d 	.word	0x0800a06d
 8009f54:	0800a06d 	.word	0x0800a06d
 8009f58:	0800a06d 	.word	0x0800a06d
 8009f5c:	0800a06d 	.word	0x0800a06d
 8009f60:	08009fd5 	.word	0x08009fd5
 8009f64:	0800a06d 	.word	0x0800a06d
 8009f68:	0800a06d 	.word	0x0800a06d
 8009f6c:	0800a06d 	.word	0x0800a06d
 8009f70:	0800a06d 	.word	0x0800a06d
 8009f74:	0800a06d 	.word	0x0800a06d
 8009f78:	0800a06d 	.word	0x0800a06d
 8009f7c:	0800a06d 	.word	0x0800a06d
 8009f80:	08009fe5 	.word	0x08009fe5
 8009f84:	0800a06d 	.word	0x0800a06d
 8009f88:	0800a06d 	.word	0x0800a06d
 8009f8c:	0800a06d 	.word	0x0800a06d
 8009f90:	0800a06d 	.word	0x0800a06d
 8009f94:	0800a06d 	.word	0x0800a06d
 8009f98:	0800a06d 	.word	0x0800a06d
 8009f9c:	0800a06d 	.word	0x0800a06d
 8009fa0:	08009ff5 	.word	0x08009ff5
 8009fa4:	0800a06d 	.word	0x0800a06d
 8009fa8:	0800a06d 	.word	0x0800a06d
 8009fac:	0800a06d 	.word	0x0800a06d
 8009fb0:	0800a06d 	.word	0x0800a06d
 8009fb4:	0800a06d 	.word	0x0800a06d
 8009fb8:	0800a06d 	.word	0x0800a06d
 8009fbc:	0800a06d 	.word	0x0800a06d
 8009fc0:	08009ffb 	.word	0x08009ffb
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fc4:	f107 0320 	add.w	r3, r7, #32
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fd fb9b 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fd2:	e04e      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fd4:	f107 0314 	add.w	r3, r7, #20
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fd fcff 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fe2:	e046      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe4:	f107 0308 	add.w	r3, r7, #8
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fd fe63 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ff2:	e03e      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009ff4:	4b76      	ldr	r3, [pc, #472]	@ (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ff8:	e03b      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ffa:	4b74      	ldr	r3, [pc, #464]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a000:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a004:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a006:	4b71      	ldr	r3, [pc, #452]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d10c      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a018:	4b6c      	ldr	r3, [pc, #432]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	08db      	lsrs	r3, r3, #3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	4a6c      	ldr	r2, [pc, #432]	@ (800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02a:	e01e      	b.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a02c:	4b67      	ldr	r3, [pc, #412]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a038:	d106      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a040:	d102      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a042:	4b65      	ldr	r3, [pc, #404]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	e010      	b.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a048:	4b60      	ldr	r3, [pc, #384]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a054:	d106      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a05c:	d102      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a05e:	4b5f      	ldr	r3, [pc, #380]	@ (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a060:	637b      	str	r3, [r7, #52]	@ 0x34
 800a062:	e002      	b.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a068:	e003      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a06a:	e002      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a070:	bf00      	nop
          }
        }
        break;
 800a072:	e2d6      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a074:	4b55      	ldr	r3, [pc, #340]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a07a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a07e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a086:	d031      	beq.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a08e:	d866      	bhi.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	2bc0      	cmp	r3, #192	@ 0xc0
 800a094:	d027      	beq.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	2bc0      	cmp	r3, #192	@ 0xc0
 800a09a:	d860      	bhi.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	2b80      	cmp	r3, #128	@ 0x80
 800a0a0:	d019      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a4:	2b80      	cmp	r3, #128	@ 0x80
 800a0a6:	d85a      	bhi.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	2b40      	cmp	r3, #64	@ 0x40
 800a0b2:	d008      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a0b4:	e053      	b.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b6:	f107 0320 	add.w	r3, r7, #32
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fd fb22 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0c4:	e04e      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c6:	f107 0314 	add.w	r3, r7, #20
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fd fc86 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0d4:	e046      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fd fdea 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0e4:	e03e      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a0e6:	4b3a      	ldr	r3, [pc, #232]	@ (800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a0e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0ea:	e03b      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ec:	4b37      	ldr	r3, [pc, #220]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0f8:	4b34      	ldr	r3, [pc, #208]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b02      	cmp	r3, #2
 800a102:	d10c      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a10a:	4b30      	ldr	r3, [pc, #192]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	08db      	lsrs	r3, r3, #3
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	4a2f      	ldr	r2, [pc, #188]	@ (800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a116:	fa22 f303 	lsr.w	r3, r2, r3
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a11c:	e01e      	b.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a11e:	4b2b      	ldr	r3, [pc, #172]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a12a:	d106      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a132:	d102      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a134:	4b28      	ldr	r3, [pc, #160]	@ (800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a136:	637b      	str	r3, [r7, #52]	@ 0x34
 800a138:	e010      	b.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a13a:	4b24      	ldr	r3, [pc, #144]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a146:	d106      	bne.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a14e:	d102      	bne.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a150:	4b22      	ldr	r3, [pc, #136]	@ (800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a152:	637b      	str	r3, [r7, #52]	@ 0x34
 800a154:	e002      	b.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a15a:	e003      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a15c:	e002      	b.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a162:	bf00      	nop
          }
        }
        break;
 800a164:	e25d      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a166:	4b19      	ldr	r3, [pc, #100]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a16c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a170:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a178:	f7fb fb0e 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 800a17c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a17e:	e250      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a180:	4b12      	ldr	r3, [pc, #72]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a18c:	d10b      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a194:	d107      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a196:	f107 0314 	add.w	r3, r7, #20
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fd fc1e 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a4:	e04f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a1a6:	4b09      	ldr	r3, [pc, #36]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1b2:	d115      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ba:	d111      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fd fd77 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ca:	e03c      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a1cc:	44020c00 	.word	0x44020c00
 800a1d0:	00bb8000 	.word	0x00bb8000
 800a1d4:	03d09000 	.word	0x03d09000
 800a1d8:	003d0900 	.word	0x003d0900
 800a1dc:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a1e0:	4b94      	ldr	r3, [pc, #592]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d10d      	bne.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a1f2:	d109      	bne.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1f4:	4b8f      	ldr	r3, [pc, #572]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	08db      	lsrs	r3, r3, #3
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	4a8e      	ldr	r2, [pc, #568]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
 800a204:	637b      	str	r3, [r7, #52]	@ 0x34
 800a206:	e01e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a208:	4b8a      	ldr	r3, [pc, #552]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a214:	d106      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a21c:	d102      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a21e:	4b87      	ldr	r3, [pc, #540]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a220:	637b      	str	r3, [r7, #52]	@ 0x34
 800a222:	e010      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a224:	4b83      	ldr	r3, [pc, #524]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a22c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a230:	d106      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a238:	d102      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a23a:	4b81      	ldr	r3, [pc, #516]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	e002      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a244:	e1ed      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a246:	e1ec      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a248:	4b7a      	ldr	r3, [pc, #488]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a24a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a24e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a252:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	2b00      	cmp	r3, #0
 800a258:	d103      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a25a:	f7fb fab3 	bl	80057c4 <HAL_RCC_GetPCLK3Freq>
 800a25e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a260:	e1df      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a262:	4b74      	ldr	r3, [pc, #464]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a26a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a26e:	d10b      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a276:	d107      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a278:	f107 0314 	add.w	r3, r7, #20
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fd fbad 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	637b      	str	r3, [r7, #52]	@ 0x34
 800a286:	e045      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a288:	4b6a      	ldr	r3, [pc, #424]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a294:	d10b      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a29c:	d107      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a29e:	f107 0308 	add.w	r3, r7, #8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fd fd06 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ac:	e032      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a2ae:	4b61      	ldr	r3, [pc, #388]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d10d      	bne.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2c0:	d109      	bne.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2c2:	4b5c      	ldr	r3, [pc, #368]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	08db      	lsrs	r3, r3, #3
 800a2c8:	f003 0303 	and.w	r3, r3, #3
 800a2cc:	4a5a      	ldr	r2, [pc, #360]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d4:	e01e      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a2d6:	4b57      	ldr	r3, [pc, #348]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e2:	d106      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2ea:	d102      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a2ec:	4b53      	ldr	r3, [pc, #332]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a2ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f0:	e010      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a2f2:	4b50      	ldr	r3, [pc, #320]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2fe:	d106      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a302:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a306:	d102      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a308:	4b4d      	ldr	r3, [pc, #308]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a30a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a30c:	e002      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a30e:	2300      	movs	r3, #0
 800a310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a312:	e186      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a314:	e185      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a316:	4b47      	ldr	r3, [pc, #284]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a31c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a320:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	2b00      	cmp	r3, #0
 800a326:	d103      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a328:	f7fb fa36 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 800a32c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a32e:	e178      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a330:	4b40      	ldr	r3, [pc, #256]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a338:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a33c:	d10b      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a344:	d107      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a346:	f107 0314 	add.w	r3, r7, #20
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fd fb46 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
 800a354:	e045      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a356:	4b37      	ldr	r3, [pc, #220]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a35e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a362:	d10b      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36a:	d107      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a36c:	f107 0308 	add.w	r3, r7, #8
 800a370:	4618      	mov	r0, r3
 800a372:	f7fd fc9f 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	637b      	str	r3, [r7, #52]	@ 0x34
 800a37a:	e032      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a37c:	4b2d      	ldr	r3, [pc, #180]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b02      	cmp	r3, #2
 800a386:	d10d      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a38e:	d109      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a390:	4b28      	ldr	r3, [pc, #160]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	08db      	lsrs	r3, r3, #3
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	4a27      	ldr	r2, [pc, #156]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a39c:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3a2:	e01e      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a3a4:	4b23      	ldr	r3, [pc, #140]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3b0:	d106      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3b8:	d102      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a3ba:	4b20      	ldr	r3, [pc, #128]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a3bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3be:	e010      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a3c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3cc:	d106      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a3d4:	d102      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a3d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3da:	e002      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3e0:	e11f      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3e2:	e11e      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a3e4:	4b13      	ldr	r3, [pc, #76]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d85f      	bhi.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fc:	0800a40d 	.word	0x0800a40d
 800a400:	0800a415 	.word	0x0800a415
 800a404:	0800a425 	.word	0x0800a425
 800a408:	0800a445 	.word	0x0800a445

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a40c:	f7fb f992 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 800a410:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a412:	e053      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a414:	f107 0320 	add.w	r3, r7, #32
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd f973 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a422:	e04b      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a424:	f107 0314 	add.w	r3, r7, #20
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fd fad7 	bl	80079dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a432:	e043      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a434:	44020c00 	.word	0x44020c00
 800a438:	03d09000 	.word	0x03d09000
 800a43c:	003d0900 	.word	0x003d0900
 800a440:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a444:	4b79      	ldr	r3, [pc, #484]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a44a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a44e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a450:	4b76      	ldr	r3, [pc, #472]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d10c      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d109      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a462:	4b72      	ldr	r3, [pc, #456]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	08db      	lsrs	r3, r3, #3
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	4a70      	ldr	r2, [pc, #448]	@ (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a46e:	fa22 f303 	lsr.w	r3, r2, r3
 800a472:	637b      	str	r3, [r7, #52]	@ 0x34
 800a474:	e01e      	b.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a476:	4b6d      	ldr	r3, [pc, #436]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a47e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a482:	d106      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a48a:	d102      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a48c:	4b69      	ldr	r3, [pc, #420]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a48e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a490:	e010      	b.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a492:	4b66      	ldr	r3, [pc, #408]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a49a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a49e:	d106      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4a6:	d102      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a4a8:	4b63      	ldr	r3, [pc, #396]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ac:	e002      	b.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a4b2:	e003      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a4b4:	e002      	b.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4ba:	bf00      	nop
          }
        }
        break;
 800a4bc:	e0b1      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a4be:	4b5b      	ldr	r3, [pc, #364]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a4c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a4ca:	4b58      	ldr	r3, [pc, #352]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d106      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d103      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4e4:	e01f      	b.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a4e6:	4b51      	ldr	r3, [pc, #324]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4f4:	d106      	bne.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	2b40      	cmp	r3, #64	@ 0x40
 800a4fa:	d103      	bne.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a4fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a500:	637b      	str	r3, [r7, #52]	@ 0x34
 800a502:	e010      	b.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a504:	4b49      	ldr	r3, [pc, #292]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a50c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a510:	d106      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	2b80      	cmp	r3, #128	@ 0x80
 800a516:	d103      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a518:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a51e:	e002      	b.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a524:	e07d      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a526:	e07c      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a528:	4b40      	ldr	r3, [pc, #256]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a52a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a52e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a532:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a534:	4b3d      	ldr	r3, [pc, #244]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a53c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a540:	d105      	bne.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a548:	4b3c      	ldr	r3, [pc, #240]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a54a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a54c:	e031      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a54e:	4b37      	ldr	r3, [pc, #220]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a55a:	d10a      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	2b10      	cmp	r3, #16
 800a560:	d107      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a562:	f107 0320 	add.w	r3, r7, #32
 800a566:	4618      	mov	r0, r3
 800a568:	f7fd f8cc 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a570:	e01f      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a572:	4b2e      	ldr	r3, [pc, #184]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d106      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	2b20      	cmp	r3, #32
 800a584:	d103      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a58c:	e011      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a58e:	4b27      	ldr	r3, [pc, #156]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a59c:	d106      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	2b30      	cmp	r3, #48	@ 0x30
 800a5a2:	d103      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a5a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5aa:	e002      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a5b0:	e037      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5b2:	e036      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	2b10      	cmp	r3, #16
 800a5c4:	d107      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5c6:	f107 0320 	add.w	r3, r7, #32
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fd f89a 	bl	8007704 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a5d4:	e025      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a5d6:	4b15      	ldr	r3, [pc, #84]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e2:	d10a      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d107      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fd fb60 	bl	8007cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f8:	e00f      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a606:	d105      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60a:	2b30      	cmp	r3, #48	@ 0x30
 800a60c:	d102      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a60e:	4b0b      	ldr	r3, [pc, #44]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a610:	637b      	str	r3, [r7, #52]	@ 0x34
 800a612:	e002      	b.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a618:	e003      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a61a:	e002      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a61c:	2300      	movs	r3, #0
 800a61e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a620:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a624:	4618      	mov	r0, r3
 800a626:	373c      	adds	r7, #60	@ 0x3c
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd90      	pop	{r4, r7, pc}
 800a62c:	44020c00 	.word	0x44020c00
 800a630:	03d09000 	.word	0x03d09000
 800a634:	003d0900 	.word	0x003d0900
 800a638:	007a1200 	.word	0x007a1200
 800a63c:	02dc6c00 	.word	0x02dc6c00

0800a640 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a648:	4b48      	ldr	r3, [pc, #288]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a47      	ldr	r2, [pc, #284]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a64e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a652:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a654:	f7f7 ff18 	bl	8002488 <HAL_GetTick>
 800a658:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a65a:	e008      	b.n	800a66e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a65c:	f7f7 ff14 	bl	8002488 <HAL_GetTick>
 800a660:	4602      	mov	r2, r0
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	2b02      	cmp	r3, #2
 800a668:	d901      	bls.n	800a66e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e07a      	b.n	800a764 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a66e:	4b3f      	ldr	r3, [pc, #252]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f0      	bne.n	800a65c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a67a:	4b3c      	ldr	r3, [pc, #240]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6811      	ldr	r1, [r2, #0]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6852      	ldr	r2, [r2, #4]
 800a68e:	0212      	lsls	r2, r2, #8
 800a690:	430a      	orrs	r2, r1
 800a692:	4936      	ldr	r1, [pc, #216]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a694:	4313      	orrs	r3, r2
 800a696:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	025b      	lsls	r3, r3, #9
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	041b      	lsls	r3, r3, #16
 800a6b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	061b      	lsls	r3, r3, #24
 800a6c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6c8:	4928      	ldr	r1, [pc, #160]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a6ce:	4b27      	ldr	r3, [pc, #156]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	f023 020c 	bic.w	r2, r3, #12
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	4924      	ldr	r1, [pc, #144]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a6e0:	4b22      	ldr	r3, [pc, #136]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	f023 0220 	bic.w	r2, r3, #32
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	491f      	ldr	r1, [pc, #124]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a6f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fa:	491c      	ldr	r1, [pc, #112]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a700:	4b1a      	ldr	r3, [pc, #104]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a704:	4a19      	ldr	r2, [pc, #100]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a706:	f023 0310 	bic.w	r3, r3, #16
 800a70a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a70c:	4b17      	ldr	r3, [pc, #92]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a710:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a714:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6a12      	ldr	r2, [r2, #32]
 800a71c:	00d2      	lsls	r2, r2, #3
 800a71e:	4913      	ldr	r1, [pc, #76]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a720:	4313      	orrs	r3, r2
 800a722:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a724:	4b11      	ldr	r3, [pc, #68]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a728:	4a10      	ldr	r2, [pc, #64]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a72a:	f043 0310 	orr.w	r3, r3, #16
 800a72e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a730:	4b0e      	ldr	r3, [pc, #56]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a0d      	ldr	r2, [pc, #52]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a73a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a73c:	f7f7 fea4 	bl	8002488 <HAL_GetTick>
 800a740:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a742:	e008      	b.n	800a756 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a744:	f7f7 fea0 	bl	8002488 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d901      	bls.n	800a756 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e006      	b.n	800a764 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a756:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <RCCEx_PLL2_Config+0x12c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0f0      	beq.n	800a744 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a762:	2300      	movs	r3, #0

}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	44020c00 	.word	0x44020c00

0800a770 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a778:	4b48      	ldr	r3, [pc, #288]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a47      	ldr	r2, [pc, #284]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a77e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a782:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a784:	f7f7 fe80 	bl	8002488 <HAL_GetTick>
 800a788:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a78a:	e008      	b.n	800a79e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a78c:	f7f7 fe7c 	bl	8002488 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	2b02      	cmp	r3, #2
 800a798:	d901      	bls.n	800a79e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e07a      	b.n	800a894 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a79e:	4b3f      	ldr	r3, [pc, #252]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f0      	bne.n	800a78c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a7aa:	4b3c      	ldr	r3, [pc, #240]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a7b2:	f023 0303 	bic.w	r3, r3, #3
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6811      	ldr	r1, [r2, #0]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6852      	ldr	r2, [r2, #4]
 800a7be:	0212      	lsls	r2, r2, #8
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	4936      	ldr	r1, [pc, #216]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	630b      	str	r3, [r1, #48]	@ 0x30
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	025b      	lsls	r3, r3, #9
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	061b      	lsls	r3, r3, #24
 800a7f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a7f8:	4928      	ldr	r1, [pc, #160]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a7fe:	4b27      	ldr	r3, [pc, #156]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a802:	f023 020c 	bic.w	r2, r3, #12
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	4924      	ldr	r1, [pc, #144]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a810:	4b22      	ldr	r3, [pc, #136]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a814:	f023 0220 	bic.w	r2, r3, #32
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	491f      	ldr	r1, [pc, #124]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a822:	4b1e      	ldr	r3, [pc, #120]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82a:	491c      	ldr	r1, [pc, #112]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a830:	4b1a      	ldr	r3, [pc, #104]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a834:	4a19      	ldr	r2, [pc, #100]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a836:	f023 0310 	bic.w	r3, r3, #16
 800a83a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a83c:	4b17      	ldr	r3, [pc, #92]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a83e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a840:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a844:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	6a12      	ldr	r2, [r2, #32]
 800a84c:	00d2      	lsls	r2, r2, #3
 800a84e:	4913      	ldr	r1, [pc, #76]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a850:	4313      	orrs	r3, r2
 800a852:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a854:	4b11      	ldr	r3, [pc, #68]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a858:	4a10      	ldr	r2, [pc, #64]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a85a:	f043 0310 	orr.w	r3, r3, #16
 800a85e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a860:	4b0e      	ldr	r3, [pc, #56]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a0d      	ldr	r2, [pc, #52]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a86a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a86c:	f7f7 fe0c 	bl	8002488 <HAL_GetTick>
 800a870:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a872:	e008      	b.n	800a886 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a874:	f7f7 fe08 	bl	8002488 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d901      	bls.n	800a886 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e006      	b.n	800a894 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a886:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <RCCEx_PLL3_Config+0x12c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0f0      	beq.n	800a874 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	44020c00 	.word	0x44020c00

0800a8a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e08c      	b.n	800a9cc <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	7a5b      	ldrb	r3, [r3, #9]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d105      	bne.n	800a8c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7f6 fdf4 	bl	80014b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0204 	bic.w	r2, r2, #4
 800a8dc:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6859      	ldr	r1, [r3, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4b3b      	ldr	r3, [pc, #236]	@ (800a9d4 <HAL_RNG_Init+0x134>)
 800a8e8:	430b      	orrs	r3, r1
 800a8ea:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a8f4:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a37      	ldr	r2, [pc, #220]	@ (800a9d8 <HAL_RNG_Init+0x138>)
 800a8fc:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a90c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a90e:	f7f7 fdbb 	bl	8002488 <HAL_GetTick>
 800a912:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a914:	e016      	b.n	800a944 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a916:	f7f7 fdb7 	bl	8002488 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b04      	cmp	r3, #4
 800a922:	d90f      	bls.n	800a944 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a932:	d107      	bne.n	800a944 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e043      	b.n	800a9cc <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a952:	d0e0      	beq.n	800a916 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0204 	orr.w	r2, r2, #4
 800a962:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a96e:	2b40      	cmp	r3, #64	@ 0x40
 800a970:	d104      	bne.n	800a97c <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2204      	movs	r2, #4
 800a976:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e027      	b.n	800a9cc <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a97c:	f7f7 fd84 	bl	8002488 <HAL_GetTick>
 800a980:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a982:	e015      	b.n	800a9b0 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a984:	f7f7 fd80 	bl	8002488 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d90e      	bls.n	800a9b0 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d007      	beq.n	800a9b0 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e00d      	b.n	800a9cc <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d1e2      	bne.n	800a984 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	40f00e00 	.word	0x40f00e00
 800a9d8:	0003af66 	.word	0x0003af66

0800a9dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d071      	beq.n	800aad2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7f6 fdac 	bl	8001560 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aa10:	4b32      	ldr	r3, [pc, #200]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0310 	and.w	r3, r3, #16
 800aa18:	2b10      	cmp	r3, #16
 800aa1a:	d051      	beq.n	800aac0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa1c:	4b2f      	ldr	r3, [pc, #188]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa1e:	22ca      	movs	r2, #202	@ 0xca
 800aa20:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa22:	4b2e      	ldr	r3, [pc, #184]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa24:	2253      	movs	r2, #83	@ 0x53
 800aa26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f9a3 	bl	800ad74 <RTC_EnterInitMode>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d13f      	bne.n	800aab8 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800aa38:	4b28      	ldr	r3, [pc, #160]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	4a27      	ldr	r2, [pc, #156]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa3e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800aa42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa46:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800aa48:	4b24      	ldr	r3, [pc, #144]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6859      	ldr	r1, [r3, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	4319      	orrs	r1, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	491f      	ldr	r1, [pc, #124]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	041b      	lsls	r3, r3, #16
 800aa6c:	491b      	ldr	r1, [pc, #108]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800aa72:	4b1a      	ldr	r3, [pc, #104]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa82:	430b      	orrs	r3, r1
 800aa84:	4915      	ldr	r1, [pc, #84]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f9ae 	bl	800adec <RTC_ExitInitMode>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10e      	bne.n	800aab8 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800aa9a:	4b10      	ldr	r3, [pc, #64]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a19      	ldr	r1, [r3, #32]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	4319      	orrs	r1, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	430b      	orrs	r3, r1
 800aab2:	490a      	ldr	r1, [pc, #40]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aab8:	4b08      	ldr	r3, [pc, #32]	@ (800aadc <HAL_RTC_Init+0x100>)
 800aaba:	22ff      	movs	r2, #255	@ 0xff
 800aabc:	625a      	str	r2, [r3, #36]	@ 0x24
 800aabe:	e001      	b.n	800aac4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d103      	bne.n	800aad2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	44007800 	.word	0x44007800

0800aae0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aae0:	b590      	push	{r4, r7, lr}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_RTC_SetTime+0x1a>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e07e      	b.n	800abf8 <HAL_RTC_SetTime+0x118>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2202      	movs	r2, #2
 800ab06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab0a:	4b3d      	ldr	r3, [pc, #244]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800ab0c:	22ca      	movs	r2, #202	@ 0xca
 800ab0e:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab10:	4b3b      	ldr	r3, [pc, #236]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800ab12:	2253      	movs	r2, #83	@ 0x53
 800ab14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 f92c 	bl	800ad74 <RTC_EnterInitMode>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ab20:	7cfb      	ldrb	r3, [r7, #19]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d159      	bne.n	800abda <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800ab26:	4b36      	ldr	r3, [pc, #216]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab32:	d04d      	beq.n	800abd0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d125      	bne.n	800ab86 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ab3a:	4b31      	ldr	r3, [pc, #196]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d102      	bne.n	800ab4c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 f989 	bl	800ae68 <RTC_ByteToBcd2>
 800ab56:	4603      	mov	r3, r0
 800ab58:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 f982 	bl	800ae68 <RTC_ByteToBcd2>
 800ab64:	4603      	mov	r3, r0
 800ab66:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab68:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	789b      	ldrb	r3, [r3, #2]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f97a 	bl	800ae68 <RTC_ByteToBcd2>
 800ab74:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab76:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	78db      	ldrb	r3, [r3, #3]
 800ab7e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e017      	b.n	800abb6 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ab86:	4b1e      	ldr	r3, [pc, #120]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d102      	bne.n	800ab98 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2200      	movs	r2, #0
 800ab96:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	785b      	ldrb	r3, [r3, #1]
 800aba2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aba4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abaa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	78db      	ldrb	r3, [r3, #3]
 800abb0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800abb6:	4a12      	ldr	r2, [pc, #72]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800abbe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800abc2:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800abc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	4a0d      	ldr	r2, [pc, #52]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800abca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abce:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 f90b 	bl	800adec <RTC_ExitInitMode>
 800abd6:	4603      	mov	r3, r0
 800abd8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abda:	4b09      	ldr	r3, [pc, #36]	@ (800ac00 <HAL_RTC_SetTime+0x120>)
 800abdc:	22ff      	movs	r2, #255	@ 0xff
 800abde:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800abe0:	7cfb      	ldrb	r3, [r7, #19]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800abf6:	7cfb      	ldrb	r3, [r7, #19]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	371c      	adds	r7, #28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd90      	pop	{r4, r7, pc}
 800ac00:	44007800 	.word	0x44007800

0800ac04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac04:	b590      	push	{r4, r7, lr}
 800ac06:	b087      	sub	sp, #28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_RTC_SetDate+0x1a>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e071      	b.n	800ad02 <HAL_RTC_SetDate+0xfe>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10e      	bne.n	800ac52 <HAL_RTC_SetDate+0x4e>
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	f003 0310 	and.w	r3, r3, #16
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d008      	beq.n	800ac52 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	f023 0310 	bic.w	r3, r3, #16
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	330a      	adds	r3, #10
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11c      	bne.n	800ac92 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	78db      	ldrb	r3, [r3, #3]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f903 	bl	800ae68 <RTC_ByteToBcd2>
 800ac62:	4603      	mov	r3, r0
 800ac64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 f8fc 	bl	800ae68 <RTC_ByteToBcd2>
 800ac70:	4603      	mov	r3, r0
 800ac72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	789b      	ldrb	r3, [r3, #2]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f8f4 	bl	800ae68 <RTC_ByteToBcd2>
 800ac80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ac82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
 800ac90:	e00e      	b.n	800acb0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	78db      	ldrb	r3, [r3, #3]
 800ac96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	785b      	ldrb	r3, [r3, #1]
 800ac9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ac9e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800aca4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800acac:	4313      	orrs	r3, r2
 800acae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acb0:	4b16      	ldr	r3, [pc, #88]	@ (800ad0c <HAL_RTC_SetDate+0x108>)
 800acb2:	22ca      	movs	r2, #202	@ 0xca
 800acb4:	625a      	str	r2, [r3, #36]	@ 0x24
 800acb6:	4b15      	ldr	r3, [pc, #84]	@ (800ad0c <HAL_RTC_SetDate+0x108>)
 800acb8:	2253      	movs	r2, #83	@ 0x53
 800acba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 f859 	bl	800ad74 <RTC_EnterInitMode>
 800acc2:	4603      	mov	r3, r0
 800acc4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800acc6:	7cfb      	ldrb	r3, [r7, #19]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800accc:	4a0f      	ldr	r2, [pc, #60]	@ (800ad0c <HAL_RTC_SetDate+0x108>)
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800acd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800acd8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f000 f886 	bl	800adec <RTC_ExitInitMode>
 800ace0:	4603      	mov	r3, r0
 800ace2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ace4:	4b09      	ldr	r3, [pc, #36]	@ (800ad0c <HAL_RTC_SetDate+0x108>)
 800ace6:	22ff      	movs	r2, #255	@ 0xff
 800ace8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800acea:	7cfb      	ldrb	r3, [r7, #19]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ad00:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd90      	pop	{r4, r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	44007800 	.word	0x44007800

0800ad10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ad18:	4b15      	ldr	r3, [pc, #84]	@ (800ad70 <HAL_RTC_WaitForSynchro+0x60>)
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	4a14      	ldr	r2, [pc, #80]	@ (800ad70 <HAL_RTC_WaitForSynchro+0x60>)
 800ad1e:	f023 0320 	bic.w	r3, r3, #32
 800ad22:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ad24:	f7f7 fbb0 	bl	8002488 <HAL_GetTick>
 800ad28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ad2a:	e013      	b.n	800ad54 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad2c:	f7f7 fbac 	bl	8002488 <HAL_GetTick>
 800ad30:	4602      	mov	r2, r0
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad3a:	d90b      	bls.n	800ad54 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ad3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad70 <HAL_RTC_WaitForSynchro+0x60>)
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f003 0320 	and.w	r3, r3, #32
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10c      	bne.n	800ad62 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2203      	movs	r2, #3
 800ad4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e008      	b.n	800ad66 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ad54:	4b06      	ldr	r3, [pc, #24]	@ (800ad70 <HAL_RTC_WaitForSynchro+0x60>)
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0e5      	beq.n	800ad2c <HAL_RTC_WaitForSynchro+0x1c>
 800ad60:	e000      	b.n	800ad64 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ad62:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	44007800 	.word	0x44007800

0800ad74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ad80:	4b19      	ldr	r3, [pc, #100]	@ (800ade8 <RTC_EnterInitMode+0x74>)
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d128      	bne.n	800adde <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ad8c:	4b16      	ldr	r3, [pc, #88]	@ (800ade8 <RTC_EnterInitMode+0x74>)
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	4a15      	ldr	r2, [pc, #84]	@ (800ade8 <RTC_EnterInitMode+0x74>)
 800ad92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad96:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ad98:	f7f7 fb76 	bl	8002488 <HAL_GetTick>
 800ad9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ad9e:	e013      	b.n	800adc8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ada0:	f7f7 fb72 	bl	8002488 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800adae:	d90b      	bls.n	800adc8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800adb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <RTC_EnterInitMode+0x74>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10f      	bne.n	800addc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2203      	movs	r2, #3
 800adc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800adc8:	4b07      	ldr	r3, [pc, #28]	@ (800ade8 <RTC_EnterInitMode+0x74>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	d104      	bne.n	800adde <RTC_EnterInitMode+0x6a>
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	2b03      	cmp	r3, #3
 800add8:	d1e2      	bne.n	800ada0 <RTC_EnterInitMode+0x2c>
 800adda:	e000      	b.n	800adde <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800addc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800adde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	44007800 	.word	0x44007800

0800adec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800adf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	4a19      	ldr	r2, [pc, #100]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800adfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae02:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ae04:	4b17      	ldr	r3, [pc, #92]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	f003 0320 	and.w	r3, r3, #32
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10c      	bne.n	800ae2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff ff7d 	bl	800ad10 <HAL_RTC_WaitForSynchro>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01e      	beq.n	800ae5a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2203      	movs	r2, #3
 800ae20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	e017      	b.n	800ae5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	4a0d      	ldr	r2, [pc, #52]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800ae30:	f023 0320 	bic.w	r3, r3, #32
 800ae34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7ff ff6a 	bl	800ad10 <HAL_RTC_WaitForSynchro>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae4e:	4b05      	ldr	r3, [pc, #20]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	4a04      	ldr	r2, [pc, #16]	@ (800ae64 <RTC_ExitInitMode+0x78>)
 800ae54:	f043 0320 	orr.w	r3, r3, #32
 800ae58:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	44007800 	.word	0x44007800

0800ae68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ae7a:	e005      	b.n	800ae88 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	3b0a      	subs	r3, #10
 800ae86:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	d8f6      	bhi.n	800ae7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	7afb      	ldrb	r3, [r7, #11]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	b2db      	uxtb	r3, r3
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	4910      	ldr	r1, [pc, #64]	@ (800aefc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	431a      	orrs	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	490c      	ldr	r1, [pc, #48]	@ (800af00 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800aed4:	4b0a      	ldr	r3, [pc, #40]	@ (800af00 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	6919      	ldr	r1, [r3, #16]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	041b      	lsls	r3, r3, #16
 800aee6:	430b      	orrs	r3, r1
 800aee8:	4905      	ldr	r1, [pc, #20]	@ (800af00 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800aeea:	4313      	orrs	r3, r2
 800aeec:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	44007800 	.word	0x44007800
 800af00:	44007c00 	.word	0x44007c00

0800af04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e162      	b.n	800b1dc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a70      	ldr	r2, [pc, #448]	@ (800b0dc <HAL_SPI_Init+0x1d8>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d018      	beq.n	800af52 <HAL_SPI_Init+0x4e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a6e      	ldr	r2, [pc, #440]	@ (800b0e0 <HAL_SPI_Init+0x1dc>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d013      	beq.n	800af52 <HAL_SPI_Init+0x4e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a6d      	ldr	r2, [pc, #436]	@ (800b0e4 <HAL_SPI_Init+0x1e0>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d00e      	beq.n	800af52 <HAL_SPI_Init+0x4e>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a6b      	ldr	r2, [pc, #428]	@ (800b0e8 <HAL_SPI_Init+0x1e4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d009      	beq.n	800af52 <HAL_SPI_Init+0x4e>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a6a      	ldr	r2, [pc, #424]	@ (800b0ec <HAL_SPI_Init+0x1e8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d004      	beq.n	800af52 <HAL_SPI_Init+0x4e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a68      	ldr	r2, [pc, #416]	@ (800b0f0 <HAL_SPI_Init+0x1ec>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	e000      	b.n	800af54 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800af52:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a5f      	ldr	r2, [pc, #380]	@ (800b0dc <HAL_SPI_Init+0x1d8>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d018      	beq.n	800af96 <HAL_SPI_Init+0x92>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a5d      	ldr	r2, [pc, #372]	@ (800b0e0 <HAL_SPI_Init+0x1dc>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d013      	beq.n	800af96 <HAL_SPI_Init+0x92>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a5c      	ldr	r2, [pc, #368]	@ (800b0e4 <HAL_SPI_Init+0x1e0>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00e      	beq.n	800af96 <HAL_SPI_Init+0x92>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a5a      	ldr	r2, [pc, #360]	@ (800b0e8 <HAL_SPI_Init+0x1e4>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d009      	beq.n	800af96 <HAL_SPI_Init+0x92>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a59      	ldr	r2, [pc, #356]	@ (800b0ec <HAL_SPI_Init+0x1e8>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d004      	beq.n	800af96 <HAL_SPI_Init+0x92>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a57      	ldr	r2, [pc, #348]	@ (800b0f0 <HAL_SPI_Init+0x1ec>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d105      	bne.n	800afa2 <HAL_SPI_Init+0x9e>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	2b0f      	cmp	r3, #15
 800af9c:	d901      	bls.n	800afa2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e11c      	b.n	800b1dc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f91e 	bl	800b1e4 <SPI_GetPacketSize>
 800afa8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a4b      	ldr	r2, [pc, #300]	@ (800b0dc <HAL_SPI_Init+0x1d8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d018      	beq.n	800afe6 <HAL_SPI_Init+0xe2>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a49      	ldr	r2, [pc, #292]	@ (800b0e0 <HAL_SPI_Init+0x1dc>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d013      	beq.n	800afe6 <HAL_SPI_Init+0xe2>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a48      	ldr	r2, [pc, #288]	@ (800b0e4 <HAL_SPI_Init+0x1e0>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00e      	beq.n	800afe6 <HAL_SPI_Init+0xe2>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a46      	ldr	r2, [pc, #280]	@ (800b0e8 <HAL_SPI_Init+0x1e4>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d009      	beq.n	800afe6 <HAL_SPI_Init+0xe2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a45      	ldr	r2, [pc, #276]	@ (800b0ec <HAL_SPI_Init+0x1e8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d004      	beq.n	800afe6 <HAL_SPI_Init+0xe2>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a43      	ldr	r2, [pc, #268]	@ (800b0f0 <HAL_SPI_Init+0x1ec>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d102      	bne.n	800afec <HAL_SPI_Init+0xe8>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b08      	cmp	r3, #8
 800afea:	d820      	bhi.n	800b02e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aff0:	4a40      	ldr	r2, [pc, #256]	@ (800b0f4 <HAL_SPI_Init+0x1f0>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d018      	beq.n	800b028 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a3f      	ldr	r2, [pc, #252]	@ (800b0f8 <HAL_SPI_Init+0x1f4>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d013      	beq.n	800b028 <HAL_SPI_Init+0x124>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a3d      	ldr	r2, [pc, #244]	@ (800b0fc <HAL_SPI_Init+0x1f8>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d00e      	beq.n	800b028 <HAL_SPI_Init+0x124>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a3c      	ldr	r2, [pc, #240]	@ (800b100 <HAL_SPI_Init+0x1fc>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d009      	beq.n	800b028 <HAL_SPI_Init+0x124>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a3a      	ldr	r2, [pc, #232]	@ (800b104 <HAL_SPI_Init+0x200>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d004      	beq.n	800b028 <HAL_SPI_Init+0x124>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a39      	ldr	r2, [pc, #228]	@ (800b108 <HAL_SPI_Init+0x204>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d104      	bne.n	800b032 <HAL_SPI_Init+0x12e>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b10      	cmp	r3, #16
 800b02c:	d901      	bls.n	800b032 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e0d4      	b.n	800b1dc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7f6 faea 	bl	8001620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0201 	bic.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b06e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b078:	d119      	bne.n	800b0ae <HAL_SPI_Init+0x1aa>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b082:	d103      	bne.n	800b08c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10c      	bne.n	800b0ae <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b09c:	d107      	bne.n	800b0ae <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d028      	beq.n	800b10c <HAL_SPI_Init+0x208>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	2b06      	cmp	r3, #6
 800b0c0:	d924      	bls.n	800b10c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	e020      	b.n	800b11c <HAL_SPI_Init+0x218>
 800b0da:	bf00      	nop
 800b0dc:	40014c00 	.word	0x40014c00
 800b0e0:	50014c00 	.word	0x50014c00
 800b0e4:	44002000 	.word	0x44002000
 800b0e8:	54002000 	.word	0x54002000
 800b0ec:	40015000 	.word	0x40015000
 800b0f0:	50015000 	.word	0x50015000
 800b0f4:	40013000 	.word	0x40013000
 800b0f8:	50013000 	.word	0x50013000
 800b0fc:	40003800 	.word	0x40003800
 800b100:	50003800 	.word	0x50003800
 800b104:	40003c00 	.word	0x40003c00
 800b108:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b11a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b124:	431a      	orrs	r2, r3
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	431a      	orrs	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b12e:	ea42 0103 	orr.w	r1, r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	430a      	orrs	r2, r1
 800b13c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a1b      	ldr	r3, [r3, #32]
 800b164:	431a      	orrs	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	431a      	orrs	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b170:	431a      	orrs	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	431a      	orrs	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b17c:	431a      	orrs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b182:	431a      	orrs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b188:	ea42 0103 	orr.w	r1, r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	430a      	orrs	r2, r1
 800b196:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0201 	bic.w	r2, r2, #1
 800b1a6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f0:	095b      	lsrs	r3, r3, #5
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	3307      	adds	r3, #7
 800b202:	08db      	lsrs	r3, r3, #3
 800b204:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e042      	b.n	800b2b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b232:	2b00      	cmp	r3, #0
 800b234:	d106      	bne.n	800b244 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7f6 faaa 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2224      	movs	r2, #36	@ 0x24
 800b248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f022 0201 	bic.w	r2, r2, #1
 800b25a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fab5 	bl	800b7d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f8c4 	bl	800b3f8 <UART_SetConfig>
 800b270:	4603      	mov	r3, r0
 800b272:	2b01      	cmp	r3, #1
 800b274:	d101      	bne.n	800b27a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e01b      	b.n	800b2b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b288:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b298:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f042 0201 	orr.w	r2, r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fb34 	bl	800b918 <UART_CheckIdleState>
 800b2b0:	4603      	mov	r3, r0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b08a      	sub	sp, #40	@ 0x28
 800b2be:	af02      	add	r7, sp, #8
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	603b      	str	r3, [r7, #0]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	f040 808b 	bne.w	800b3ec <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <HAL_UART_Transmit+0x28>
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e083      	b.n	800b3ee <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2f0:	2b80      	cmp	r3, #128	@ 0x80
 800b2f2:	d107      	bne.n	800b304 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689a      	ldr	r2, [r3, #8]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b302:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2221      	movs	r2, #33	@ 0x21
 800b310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b314:	f7f7 f8b8 	bl	8002488 <HAL_GetTick>
 800b318:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	88fa      	ldrh	r2, [r7, #6]
 800b31e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	88fa      	ldrh	r2, [r7, #6]
 800b326:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b332:	d108      	bne.n	800b346 <HAL_UART_Transmit+0x8c>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e003      	b.n	800b34e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b34e:	e030      	b.n	800b3b2 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2200      	movs	r2, #0
 800b358:	2180      	movs	r1, #128	@ 0x80
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 fb86 	bl	800ba6c <UART_WaitOnFlagUntilTimeout>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2220      	movs	r2, #32
 800b36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e03d      	b.n	800b3ee <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10b      	bne.n	800b390 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b386:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	3302      	adds	r3, #2
 800b38c:	61bb      	str	r3, [r7, #24]
 800b38e:	e007      	b.n	800b3a0 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	3301      	adds	r3, #1
 800b39e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1c8      	bne.n	800b350 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	2140      	movs	r1, #64	@ 0x40
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 fb4f 	bl	800ba6c <UART_WaitOnFlagUntilTimeout>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e006      	b.n	800b3ee <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e000      	b.n	800b3ee <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b3ec:	2302      	movs	r3, #2
  }
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3720      	adds	r7, #32
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3fc:	b094      	sub	sp, #80	@ 0x50
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	4b78      	ldr	r3, [pc, #480]	@ (800b5f0 <UART_SetConfig+0x1f8>)
 800b40e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	431a      	orrs	r2, r3
 800b41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	431a      	orrs	r2, r3
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	69db      	ldr	r3, [r3, #28]
 800b424:	4313      	orrs	r3, r2
 800b426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4971      	ldr	r1, [pc, #452]	@ (800b5f4 <UART_SetConfig+0x1fc>)
 800b430:	4019      	ands	r1, r3
 800b432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b438:	430b      	orrs	r3, r1
 800b43a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	68d9      	ldr	r1, [r3, #12]
 800b44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	ea40 0301 	orr.w	r3, r0, r1
 800b452:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	4b64      	ldr	r3, [pc, #400]	@ (800b5f0 <UART_SetConfig+0x1f8>)
 800b460:	429a      	cmp	r2, r3
 800b462:	d009      	beq.n	800b478 <UART_SetConfig+0x80>
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	4b63      	ldr	r3, [pc, #396]	@ (800b5f8 <UART_SetConfig+0x200>)
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d004      	beq.n	800b478 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b470:	6a1a      	ldr	r2, [r3, #32]
 800b472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b474:	4313      	orrs	r3, r2
 800b476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b482:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b48c:	430b      	orrs	r3, r1
 800b48e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b496:	f023 000f 	bic.w	r0, r3, #15
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	ea40 0301 	orr.w	r3, r0, r1
 800b4a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	4b53      	ldr	r3, [pc, #332]	@ (800b5fc <UART_SetConfig+0x204>)
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d102      	bne.n	800b4b8 <UART_SetConfig+0xc0>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4b6:	e066      	b.n	800b586 <UART_SetConfig+0x18e>
 800b4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	4b50      	ldr	r3, [pc, #320]	@ (800b600 <UART_SetConfig+0x208>)
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d102      	bne.n	800b4c8 <UART_SetConfig+0xd0>
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4c6:	e05e      	b.n	800b586 <UART_SetConfig+0x18e>
 800b4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b604 <UART_SetConfig+0x20c>)
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d102      	bne.n	800b4d8 <UART_SetConfig+0xe0>
 800b4d2:	2304      	movs	r3, #4
 800b4d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4d6:	e056      	b.n	800b586 <UART_SetConfig+0x18e>
 800b4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	4b4a      	ldr	r3, [pc, #296]	@ (800b608 <UART_SetConfig+0x210>)
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d102      	bne.n	800b4e8 <UART_SetConfig+0xf0>
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4e6:	e04e      	b.n	800b586 <UART_SetConfig+0x18e>
 800b4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	4b47      	ldr	r3, [pc, #284]	@ (800b60c <UART_SetConfig+0x214>)
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d102      	bne.n	800b4f8 <UART_SetConfig+0x100>
 800b4f2:	2310      	movs	r3, #16
 800b4f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4f6:	e046      	b.n	800b586 <UART_SetConfig+0x18e>
 800b4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	4b44      	ldr	r3, [pc, #272]	@ (800b610 <UART_SetConfig+0x218>)
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d102      	bne.n	800b508 <UART_SetConfig+0x110>
 800b502:	2320      	movs	r3, #32
 800b504:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b506:	e03e      	b.n	800b586 <UART_SetConfig+0x18e>
 800b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	4b41      	ldr	r3, [pc, #260]	@ (800b614 <UART_SetConfig+0x21c>)
 800b50e:	429a      	cmp	r2, r3
 800b510:	d102      	bne.n	800b518 <UART_SetConfig+0x120>
 800b512:	2340      	movs	r3, #64	@ 0x40
 800b514:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b516:	e036      	b.n	800b586 <UART_SetConfig+0x18e>
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	4b3e      	ldr	r3, [pc, #248]	@ (800b618 <UART_SetConfig+0x220>)
 800b51e:	429a      	cmp	r2, r3
 800b520:	d102      	bne.n	800b528 <UART_SetConfig+0x130>
 800b522:	2380      	movs	r3, #128	@ 0x80
 800b524:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b526:	e02e      	b.n	800b586 <UART_SetConfig+0x18e>
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	4b3b      	ldr	r3, [pc, #236]	@ (800b61c <UART_SetConfig+0x224>)
 800b52e:	429a      	cmp	r2, r3
 800b530:	d103      	bne.n	800b53a <UART_SetConfig+0x142>
 800b532:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b536:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b538:	e025      	b.n	800b586 <UART_SetConfig+0x18e>
 800b53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	4b38      	ldr	r3, [pc, #224]	@ (800b620 <UART_SetConfig+0x228>)
 800b540:	429a      	cmp	r2, r3
 800b542:	d103      	bne.n	800b54c <UART_SetConfig+0x154>
 800b544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b54a:	e01c      	b.n	800b586 <UART_SetConfig+0x18e>
 800b54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	4b34      	ldr	r3, [pc, #208]	@ (800b624 <UART_SetConfig+0x22c>)
 800b552:	429a      	cmp	r2, r3
 800b554:	d103      	bne.n	800b55e <UART_SetConfig+0x166>
 800b556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b55a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b55c:	e013      	b.n	800b586 <UART_SetConfig+0x18e>
 800b55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b31      	ldr	r3, [pc, #196]	@ (800b628 <UART_SetConfig+0x230>)
 800b564:	429a      	cmp	r2, r3
 800b566:	d103      	bne.n	800b570 <UART_SetConfig+0x178>
 800b568:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b56c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b56e:	e00a      	b.n	800b586 <UART_SetConfig+0x18e>
 800b570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	4b1e      	ldr	r3, [pc, #120]	@ (800b5f0 <UART_SetConfig+0x1f8>)
 800b576:	429a      	cmp	r2, r3
 800b578:	d103      	bne.n	800b582 <UART_SetConfig+0x18a>
 800b57a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b57e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b580:	e001      	b.n	800b586 <UART_SetConfig+0x18e>
 800b582:	2300      	movs	r3, #0
 800b584:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b19      	ldr	r3, [pc, #100]	@ (800b5f0 <UART_SetConfig+0x1f8>)
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d005      	beq.n	800b59c <UART_SetConfig+0x1a4>
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	4b18      	ldr	r3, [pc, #96]	@ (800b5f8 <UART_SetConfig+0x200>)
 800b596:	429a      	cmp	r2, r3
 800b598:	f040 8094 	bne.w	800b6c4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b59c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b59e:	2200      	movs	r2, #0
 800b5a0:	623b      	str	r3, [r7, #32]
 800b5a2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b5a8:	f7fc fcf0 	bl	8007f8c <HAL_RCCEx_GetPeriphCLKFreq>
 800b5ac:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 80f7 	beq.w	800b7a4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b62c <UART_SetConfig+0x234>)
 800b5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5c8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	4413      	add	r3, r2
 800b5d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d305      	bcc.n	800b5e6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d924      	bls.n	800b630 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b5ec:	e069      	b.n	800b6c2 <UART_SetConfig+0x2ca>
 800b5ee:	bf00      	nop
 800b5f0:	44002400 	.word	0x44002400
 800b5f4:	cfff69f3 	.word	0xcfff69f3
 800b5f8:	54002400 	.word	0x54002400
 800b5fc:	40013800 	.word	0x40013800
 800b600:	40004400 	.word	0x40004400
 800b604:	40004800 	.word	0x40004800
 800b608:	40004c00 	.word	0x40004c00
 800b60c:	40005000 	.word	0x40005000
 800b610:	40006400 	.word	0x40006400
 800b614:	40007800 	.word	0x40007800
 800b618:	40007c00 	.word	0x40007c00
 800b61c:	40008000 	.word	0x40008000
 800b620:	40006800 	.word	0x40006800
 800b624:	40006c00 	.word	0x40006c00
 800b628:	40008400 	.word	0x40008400
 800b62c:	080117d0 	.word	0x080117d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b632:	2200      	movs	r2, #0
 800b634:	61bb      	str	r3, [r7, #24]
 800b636:	61fa      	str	r2, [r7, #28]
 800b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b63c:	4a64      	ldr	r2, [pc, #400]	@ (800b7d0 <UART_SetConfig+0x3d8>)
 800b63e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b642:	b29b      	uxth	r3, r3
 800b644:	2200      	movs	r2, #0
 800b646:	613b      	str	r3, [r7, #16]
 800b648:	617a      	str	r2, [r7, #20]
 800b64a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b64e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b652:	f7f4 fe23 	bl	800029c <__aeabi_uldivmod>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4610      	mov	r0, r2
 800b65c:	4619      	mov	r1, r3
 800b65e:	f04f 0200 	mov.w	r2, #0
 800b662:	f04f 0300 	mov.w	r3, #0
 800b666:	020b      	lsls	r3, r1, #8
 800b668:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b66c:	0202      	lsls	r2, r0, #8
 800b66e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b670:	6849      	ldr	r1, [r1, #4]
 800b672:	0849      	lsrs	r1, r1, #1
 800b674:	2000      	movs	r0, #0
 800b676:	460c      	mov	r4, r1
 800b678:	4605      	mov	r5, r0
 800b67a:	eb12 0804 	adds.w	r8, r2, r4
 800b67e:	eb43 0905 	adc.w	r9, r3, r5
 800b682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	60bb      	str	r3, [r7, #8]
 800b68a:	60fa      	str	r2, [r7, #12]
 800b68c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b690:	4640      	mov	r0, r8
 800b692:	4649      	mov	r1, r9
 800b694:	f7f4 fe02 	bl	800029c <__aeabi_uldivmod>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4613      	mov	r3, r2
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6a6:	d308      	bcc.n	800b6ba <UART_SetConfig+0x2c2>
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6ae:	d204      	bcs.n	800b6ba <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b6b6:	60da      	str	r2, [r3, #12]
 800b6b8:	e003      	b.n	800b6c2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b6c0:	e070      	b.n	800b7a4 <UART_SetConfig+0x3ac>
 800b6c2:	e06f      	b.n	800b7a4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6cc:	d13c      	bne.n	800b748 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b6ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b6da:	f7fc fc57 	bl	8007f8c <HAL_RCCEx_GetPeriphCLKFreq>
 800b6de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d05e      	beq.n	800b7a4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ea:	4a39      	ldr	r2, [pc, #228]	@ (800b7d0 <UART_SetConfig+0x3d8>)
 800b6ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6f8:	005a      	lsls	r2, r3, #1
 800b6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	085b      	lsrs	r3, r3, #1
 800b700:	441a      	add	r2, r3
 800b702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b70e:	2b0f      	cmp	r3, #15
 800b710:	d916      	bls.n	800b740 <UART_SetConfig+0x348>
 800b712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b718:	d212      	bcs.n	800b740 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	f023 030f 	bic.w	r3, r3, #15
 800b722:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b726:	085b      	lsrs	r3, r3, #1
 800b728:	b29b      	uxth	r3, r3
 800b72a:	f003 0307 	and.w	r3, r3, #7
 800b72e:	b29a      	uxth	r2, r3
 800b730:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b732:	4313      	orrs	r3, r2
 800b734:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b73c:	60da      	str	r2, [r3, #12]
 800b73e:	e031      	b.n	800b7a4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b746:	e02d      	b.n	800b7a4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b74a:	2200      	movs	r2, #0
 800b74c:	469a      	mov	sl, r3
 800b74e:	4693      	mov	fp, r2
 800b750:	4650      	mov	r0, sl
 800b752:	4659      	mov	r1, fp
 800b754:	f7fc fc1a 	bl	8007f8c <HAL_RCCEx_GetPeriphCLKFreq>
 800b758:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b75a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d021      	beq.n	800b7a4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b764:	4a1a      	ldr	r2, [pc, #104]	@ (800b7d0 <UART_SetConfig+0x3d8>)
 800b766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b76a:	461a      	mov	r2, r3
 800b76c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b76e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	085b      	lsrs	r3, r3, #1
 800b778:	441a      	add	r2, r3
 800b77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b782:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b786:	2b0f      	cmp	r3, #15
 800b788:	d909      	bls.n	800b79e <UART_SetConfig+0x3a6>
 800b78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b78c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b790:	d205      	bcs.n	800b79e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b794:	b29a      	uxth	r2, r3
 800b796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60da      	str	r2, [r3, #12]
 800b79c:	e002      	b.n	800b7a4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7bc:	2200      	movs	r2, #0
 800b7be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b7c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3750      	adds	r7, #80	@ 0x50
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7ce:	bf00      	nop
 800b7d0:	080117d0 	.word	0x080117d0

0800b7d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e0:	f003 0308 	and.w	r3, r3, #8
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00a      	beq.n	800b7fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00a      	beq.n	800b820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	430a      	orrs	r2, r1
 800b81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b824:	f003 0302 	and.w	r3, r3, #2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	430a      	orrs	r2, r1
 800b840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00a      	beq.n	800b886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d01a      	beq.n	800b8ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	430a      	orrs	r2, r1
 800b8c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8d2:	d10a      	bne.n	800b8ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	605a      	str	r2, [r3, #4]
  }
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b098      	sub	sp, #96	@ 0x60
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b928:	f7f6 fdae 	bl	8002488 <HAL_GetTick>
 800b92c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0308 	and.w	r3, r3, #8
 800b938:	2b08      	cmp	r3, #8
 800b93a:	d12f      	bne.n	800b99c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b93c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b944:	2200      	movs	r2, #0
 800b946:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f88e 	bl	800ba6c <UART_WaitOnFlagUntilTimeout>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d022      	beq.n	800b99c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	e853 3f00 	ldrex	r3, [r3]
 800b962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b96a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	461a      	mov	r2, r3
 800b972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b974:	647b      	str	r3, [r7, #68]	@ 0x44
 800b976:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b97a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b97c:	e841 2300 	strex	r3, r2, [r1]
 800b980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1e6      	bne.n	800b956 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2220      	movs	r2, #32
 800b98c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	e063      	b.n	800ba64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0304 	and.w	r3, r3, #4
 800b9a6:	2b04      	cmp	r3, #4
 800b9a8:	d149      	bne.n	800ba3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f857 	bl	800ba6c <UART_WaitOnFlagUntilTimeout>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d03c      	beq.n	800ba3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e6      	bne.n	800b9c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	e853 3f00 	ldrex	r3, [r3]
 800ba04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f023 0301 	bic.w	r3, r3, #1
 800ba0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3308      	adds	r3, #8
 800ba14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba16:	61fa      	str	r2, [r7, #28]
 800ba18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	69b9      	ldr	r1, [r7, #24]
 800ba1c:	69fa      	ldr	r2, [r7, #28]
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	617b      	str	r3, [r7, #20]
   return(result);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e5      	bne.n	800b9f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2220      	movs	r2, #32
 800ba2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e012      	b.n	800ba64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2220      	movs	r2, #32
 800ba42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3758      	adds	r7, #88	@ 0x58
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba7c:	e04f      	b.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba84:	d04b      	beq.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba86:	f7f6 fcff 	bl	8002488 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d302      	bcc.n	800ba9c <UART_WaitOnFlagUntilTimeout+0x30>
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e04e      	b.n	800bb3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 0304 	and.w	r3, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d037      	beq.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	2b80      	cmp	r3, #128	@ 0x80
 800bab2:	d034      	beq.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2b40      	cmp	r3, #64	@ 0x40
 800bab8:	d031      	beq.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	69db      	ldr	r3, [r3, #28]
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d110      	bne.n	800baea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2208      	movs	r2, #8
 800bace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 f838 	bl	800bb46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2208      	movs	r2, #8
 800bada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e029      	b.n	800bb3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800baf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baf8:	d111      	bne.n	800bb1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f81e 	bl	800bb46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e00f      	b.n	800bb3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	69da      	ldr	r2, [r3, #28]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	4013      	ands	r3, r2
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	bf0c      	ite	eq
 800bb2e:	2301      	moveq	r3, #1
 800bb30:	2300      	movne	r3, #0
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	461a      	mov	r2, r3
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d0a0      	beq.n	800ba7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b095      	sub	sp, #84	@ 0x54
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e6      	bne.n	800bb4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3308      	adds	r3, #8
 800bb86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb96:	f023 0301 	bic.w	r3, r3, #1
 800bb9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3308      	adds	r3, #8
 800bba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbac:	e841 2300 	strex	r3, r2, [r1]
 800bbb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1e3      	bne.n	800bb80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d118      	bne.n	800bbf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f023 0310 	bic.w	r3, r3, #16
 800bbd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbde:	61bb      	str	r3, [r7, #24]
 800bbe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	6979      	ldr	r1, [r7, #20]
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	613b      	str	r3, [r7, #16]
   return(result);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e6      	bne.n	800bbc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc06:	bf00      	nop
 800bc08:	3754      	adds	r7, #84	@ 0x54
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e027      	b.n	800bc78 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2224      	movs	r2, #36	@ 0x24
 800bc34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f022 0201 	bic.w	r2, r2, #1
 800bc4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d101      	bne.n	800bc9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc98:	2302      	movs	r3, #2
 800bc9a:	e02d      	b.n	800bcf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2224      	movs	r2, #36	@ 0x24
 800bca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 0201 	bic.w	r2, r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f84f 	bl	800bd7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d101      	bne.n	800bd18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd14:	2302      	movs	r3, #2
 800bd16:	e02d      	b.n	800bd74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2224      	movs	r2, #36	@ 0x24
 800bd24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f022 0201 	bic.w	r2, r2, #1
 800bd3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	430a      	orrs	r2, r1
 800bd52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f811 	bl	800bd7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d108      	bne.n	800bd9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd9c:	e031      	b.n	800be02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd9e:	2308      	movs	r3, #8
 800bda0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bda2:	2308      	movs	r3, #8
 800bda4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	0e5b      	lsrs	r3, r3, #25
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	0f5b      	lsrs	r3, r3, #29
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	f003 0307 	and.w	r3, r3, #7
 800bdc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdc6:	7bbb      	ldrb	r3, [r7, #14]
 800bdc8:	7b3a      	ldrb	r2, [r7, #12]
 800bdca:	4911      	ldr	r1, [pc, #68]	@ (800be10 <UARTEx_SetNbDataToProcess+0x94>)
 800bdcc:	5c8a      	ldrb	r2, [r1, r2]
 800bdce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdd2:	7b3a      	ldrb	r2, [r7, #12]
 800bdd4:	490f      	ldr	r1, [pc, #60]	@ (800be14 <UARTEx_SetNbDataToProcess+0x98>)
 800bdd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
 800bde6:	7b7a      	ldrb	r2, [r7, #13]
 800bde8:	4909      	ldr	r1, [pc, #36]	@ (800be10 <UARTEx_SetNbDataToProcess+0x94>)
 800bdea:	5c8a      	ldrb	r2, [r1, r2]
 800bdec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bdf0:	7b7a      	ldrb	r2, [r7, #13]
 800bdf2:	4908      	ldr	r1, [pc, #32]	@ (800be14 <UARTEx_SetNbDataToProcess+0x98>)
 800bdf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be02:	bf00      	nop
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	080117e8 	.word	0x080117e8
 800be14:	080117f0 	.word	0x080117f0

0800be18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be30:	f043 0201 	orr.w	r2, r3, #1
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800be46:	b084      	sub	sp, #16
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	f107 001c 	add.w	r0, r7, #28
 800be54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e008      	b.n	800be74 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff ffd8 	bl	800be18 <USB_CoreReset>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800be72:	7bfb      	ldrb	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be7e:	b004      	add	sp, #16
 800be80:	4770      	bx	lr

0800be82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800be82:	b480      	push	{r7}
 800be84:	b085      	sub	sp, #20
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be90:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800beaa:	b480      	push	{r7}
 800beac:	b085      	sub	sp, #20
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800beb2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800beb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	43db      	mvns	r3, r3
 800bec0:	401a      	ands	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	641a      	str	r2, [r3, #64]	@ 0x40
 800bef2:	e00b      	b.n	800bf0c <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bef4:	78fb      	ldrb	r3, [r7, #3]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d106      	bne.n	800bf08 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800befe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	641a      	str	r2, [r3, #64]	@ 0x40
 800bf06:	e001      	b.n	800bf0c <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e000      	b.n	800bf0e <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	f107 001c 	add.w	r0, r7, #28
 800bf28:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf36:	f023 0201 	bic.w	r2, r3, #1
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bf3e:	2100      	movs	r1, #0
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff ffc7 	bl	800bed4 <USB_SetCurrentMode>
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf5c:	b004      	add	sp, #16
 800bf5e:	4770      	bx	lr

0800bf60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b09f      	sub	sp, #124	@ 0x7c
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	4ba0      	ldr	r3, [pc, #640]	@ (800c200 <USB_ActivateEndpoint+0x2a0>)
 800bf7e:	4013      	ands	r3, r2
 800bf80:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	78db      	ldrb	r3, [r3, #3]
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d819      	bhi.n	800bfbe <USB_ActivateEndpoint+0x5e>
 800bf8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf90 <USB_ActivateEndpoint+0x30>)
 800bf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf90:	0800bfa1 	.word	0x0800bfa1
 800bf94:	0800bfb5 	.word	0x0800bfb5
 800bf98:	0800bfc7 	.word	0x0800bfc7
 800bf9c:	0800bfab 	.word	0x0800bfab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bfa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bfa6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bfa8:	e00e      	b.n	800bfc8 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bfaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfac:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bfb0:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bfb2:	e009      	b.n	800bfc8 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bfb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bfba:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bfbc:	e004      	b.n	800bfc8 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800bfc4:	e000      	b.n	800bfc8 <USB_ActivateEndpoint+0x68>
      break;
 800bfc6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	441a      	add	r2, r3
 800bfd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfdc:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	4b86      	ldr	r3, [pc, #536]	@ (800c204 <USB_ActivateEndpoint+0x2a4>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	7812      	ldrb	r2, [r2, #0]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	441a      	add	r2, r3
 800c000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c00a:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	7b1b      	ldrb	r3, [r3, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f040 8177 	bne.w	800c304 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d079      	beq.n	800c112 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c028:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c038:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c03c:	0c12      	lsrs	r2, r2, #16
 800c03e:	0412      	lsls	r2, r2, #16
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c04c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c050:	6819      	ldr	r1, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	88db      	ldrh	r3, [r3, #6]
 800c056:	089b      	lsrs	r3, r3, #2
 800c058:	b29b      	uxth	r3, r3
 800c05a:	009a      	lsls	r2, r3, #2
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c06a:	430a      	orrs	r2, r1
 800c06c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	61bb      	str	r3, [r7, #24]
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c082:	2b00      	cmp	r3, #0
 800c084:	d013      	beq.n	800c0ae <USB_ActivateEndpoint+0x14e>
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4413      	add	r3, r2
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b5c      	ldr	r3, [pc, #368]	@ (800c204 <USB_ActivateEndpoint+0x2a4>)
 800c094:	4013      	ands	r3, r2
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	441a      	add	r2, r3
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	78db      	ldrb	r3, [r3, #3]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d018      	beq.n	800c0e8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	4b51      	ldr	r3, [pc, #324]	@ (800c208 <USB_ActivateEndpoint+0x2a8>)
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f083 0320 	eor.w	r3, r3, #32
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	441a      	add	r2, r3
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e4:	6013      	str	r3, [r2, #0]
 800c0e6:	e28c      	b.n	800c602 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	4b44      	ldr	r3, [pc, #272]	@ (800c208 <USB_ActivateEndpoint+0x2a8>)
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	613b      	str	r3, [r7, #16]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	441a      	add	r2, r3
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	e277      	b.n	800c602 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c11c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c12c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c130:	0c12      	lsrs	r2, r2, #16
 800c132:	0412      	lsls	r2, r2, #16
 800c134:	605a      	str	r2, [r3, #4]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c140:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c144:	6859      	ldr	r1, [r3, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	88db      	ldrh	r3, [r3, #6]
 800c14a:	089b      	lsrs	r3, r3, #2
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	009a      	lsls	r2, r3, #2
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c15a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c15e:	430a      	orrs	r2, r1
 800c160:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c16c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c17c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c180:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c184:	605a      	str	r2, [r3, #4]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d112      	bne.n	800c1b4 <USB_ActivateEndpoint+0x254>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c198:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c1b0:	605a      	str	r2, [r3, #4]
 800c1b2:	e04d      	b.n	800c250 <USB_ActivateEndpoint+0x2f0>
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1ba:	d827      	bhi.n	800c20c <USB_ActivateEndpoint+0x2ac>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	085b      	lsrs	r3, r3, #1
 800c1c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d002      	beq.n	800c1d6 <USB_ActivateEndpoint+0x276>
 800c1d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	00db      	lsls	r3, r3, #3
 800c1dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1e4:	6859      	ldr	r1, [r3, #4]
 800c1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1e8:	069a      	lsls	r2, r3, #26
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	e028      	b.n	800c250 <USB_ActivateEndpoint+0x2f0>
 800c1fe:	bf00      	nop
 800c200:	07ff898f 	.word	0x07ff898f
 800c204:	07ff8f8f 	.word	0x07ff8f8f
 800c208:	07ff8fbf 	.word	0x07ff8fbf
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	095b      	lsrs	r3, r3, #5
 800c212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	f003 031f 	and.w	r3, r3, #31
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <USB_ActivateEndpoint+0x2c6>
 800c220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c222:	3b01      	subs	r3, #1
 800c224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c238:	069b      	lsls	r3, r3, #26
 800c23a:	431a      	orrs	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c246:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c24a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c24e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d013      	beq.n	800c290 <USB_ActivateEndpoint+0x330>
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	4b9c      	ldr	r3, [pc, #624]	@ (800c4e8 <USB_ActivateEndpoint+0x588>)
 800c276:	4013      	ands	r3, r2
 800c278:	627b      	str	r3, [r7, #36]	@ 0x24
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	441a      	add	r2, r3
 800c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c286:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c28e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d11c      	bne.n	800c2d2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	4b91      	ldr	r3, [pc, #580]	@ (800c4ec <USB_ActivateEndpoint+0x58c>)
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2b0:	61fb      	str	r3, [r7, #28]
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2b8:	61fb      	str	r3, [r7, #28]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	441a      	add	r2, r3
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	e197      	b.n	800c602 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4b83      	ldr	r3, [pc, #524]	@ (800c4ec <USB_ActivateEndpoint+0x58c>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	623b      	str	r3, [r7, #32]
 800c2e4:	6a3b      	ldr	r3, [r7, #32]
 800c2e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2ea:	623b      	str	r3, [r7, #32]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	441a      	add	r2, r3
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	e17e      	b.n	800c602 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	78db      	ldrb	r3, [r3, #3]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d114      	bne.n	800c336 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	4b73      	ldr	r3, [pc, #460]	@ (800c4e8 <USB_ActivateEndpoint+0x588>)
 800c31a:	4013      	ands	r3, r2
 800c31c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	441a      	add	r2, r3
 800c328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c32a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	e013      	b.n	800c35e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b6b      	ldr	r3, [pc, #428]	@ (800c4f0 <USB_ActivateEndpoint+0x590>)
 800c344:	4013      	ands	r3, r2
 800c346:	667b      	str	r3, [r7, #100]	@ 0x64
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	441a      	add	r2, r3
 800c352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c35c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c368:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c378:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c37c:	0c12      	lsrs	r2, r2, #16
 800c37e:	0412      	lsls	r2, r2, #16
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c38c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c390:	6819      	ldr	r1, [r3, #0]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	891b      	ldrh	r3, [r3, #8]
 800c396:	089b      	lsrs	r3, r3, #2
 800c398:	b29b      	uxth	r3, r3
 800c39a:	009a      	lsls	r2, r3, #2
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3cc:	0c12      	lsrs	r2, r2, #16
 800c3ce:	0412      	lsls	r2, r2, #16
 800c3d0:	605a      	str	r2, [r3, #4]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3e0:	6859      	ldr	r1, [r3, #4]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	895b      	ldrh	r3, [r3, #10]
 800c3e6:	089b      	lsrs	r3, r3, #2
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	009a      	lsls	r2, r3, #2
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	785b      	ldrb	r3, [r3, #1]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d178      	bne.n	800c4f8 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	643b      	str	r3, [r7, #64]	@ 0x40
 800c414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d013      	beq.n	800c446 <USB_ActivateEndpoint+0x4e6>
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4e8 <USB_ActivateEndpoint+0x588>)
 800c42c:	4013      	ands	r3, r2
 800c42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	441a      	add	r2, r3
 800c43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c444:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d013      	beq.n	800c486 <USB_ActivateEndpoint+0x526>
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	4b1f      	ldr	r3, [pc, #124]	@ (800c4e8 <USB_ActivateEndpoint+0x588>)
 800c46c:	4013      	ands	r3, r2
 800c46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	441a      	add	r2, r3
 800c47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c480:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c484:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	4b16      	ldr	r3, [pc, #88]	@ (800c4ec <USB_ActivateEndpoint+0x58c>)
 800c494:	4013      	ands	r3, r2
 800c496:	633b      	str	r3, [r7, #48]	@ 0x30
 800c498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c49e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	441a      	add	r2, r3
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4bc:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f4 <USB_ActivateEndpoint+0x594>)
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	441a      	add	r2, r3
 800c4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	e08c      	b.n	800c602 <USB_ActivateEndpoint+0x6a2>
 800c4e8:	07ff8f8f 	.word	0x07ff8f8f
 800c4ec:	07ffbf8f 	.word	0x07ffbf8f
 800c4f0:	07ff8e8f 	.word	0x07ff8e8f
 800c4f4:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d013      	beq.n	800c538 <USB_ActivateEndpoint+0x5d8>
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	4b3d      	ldr	r3, [pc, #244]	@ (800c614 <USB_ActivateEndpoint+0x6b4>)
 800c51e:	4013      	ands	r3, r2
 800c520:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	441a      	add	r2, r3
 800c52c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c52e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c536:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	657b      	str	r3, [r7, #84]	@ 0x54
 800c546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d013      	beq.n	800c578 <USB_ActivateEndpoint+0x618>
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	4b2d      	ldr	r3, [pc, #180]	@ (800c614 <USB_ActivateEndpoint+0x6b4>)
 800c55e:	4013      	ands	r3, r2
 800c560:	653b      	str	r3, [r7, #80]	@ 0x50
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	441a      	add	r2, r3
 800c56c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c56e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c572:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c576:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	78db      	ldrb	r3, [r3, #3]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d018      	beq.n	800c5b2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	4b22      	ldr	r3, [pc, #136]	@ (800c618 <USB_ActivateEndpoint+0x6b8>)
 800c58e:	4013      	ands	r3, r2
 800c590:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c594:	f083 0320 	eor.w	r3, r3, #32
 800c598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	441a      	add	r2, r3
 800c5a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ae:	6013      	str	r3, [r2, #0]
 800c5b0:	e013      	b.n	800c5da <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b16      	ldr	r3, [pc, #88]	@ (800c618 <USB_ActivateEndpoint+0x6b8>)
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	441a      	add	r2, r3
 800c5ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5d8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c61c <USB_ActivateEndpoint+0x6bc>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	441a      	add	r2, r3
 800c5f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c600:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c602:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c606:	4618      	mov	r0, r3
 800c608:	377c      	adds	r7, #124	@ 0x7c
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	07ff8f8f 	.word	0x07ff8f8f
 800c618:	07ff8fbf 	.word	0x07ff8fbf
 800c61c:	07ffbf8f 	.word	0x07ffbf8f

0800c620 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c620:	b480      	push	{r7}
 800c622:	b097      	sub	sp, #92	@ 0x5c
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	7b1b      	ldrb	r3, [r3, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d16d      	bne.n	800c70e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	785b      	ldrb	r3, [r3, #1]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d034      	beq.n	800c6a4 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d013      	beq.n	800c67a <USB_DeactivateEndpoint+0x5a>
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	4b6d      	ldr	r3, [pc, #436]	@ (800c814 <USB_DeactivateEndpoint+0x1f4>)
 800c660:	4013      	ands	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	441a      	add	r2, r3
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c674:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c678:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	4b64      	ldr	r3, [pc, #400]	@ (800c818 <USB_DeactivateEndpoint+0x1f8>)
 800c688:	4013      	ands	r3, r2
 800c68a:	60bb      	str	r3, [r7, #8]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	441a      	add	r2, r3
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c69c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a0:	6013      	str	r3, [r2, #0]
 800c6a2:	e139      	b.n	800c918 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	61fb      	str	r3, [r7, #28]
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d013      	beq.n	800c6e4 <USB_DeactivateEndpoint+0xc4>
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	4b52      	ldr	r3, [pc, #328]	@ (800c814 <USB_DeactivateEndpoint+0x1f4>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	61bb      	str	r3, [r7, #24]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6e2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	4b4a      	ldr	r3, [pc, #296]	@ (800c81c <USB_DeactivateEndpoint+0x1fc>)
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	441a      	add	r2, r3
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	e104      	b.n	800c918 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	785b      	ldrb	r3, [r3, #1]
 800c712:	2b00      	cmp	r3, #0
 800c714:	f040 8084 	bne.w	800c820 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4413      	add	r3, r2
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d013      	beq.n	800c758 <USB_DeactivateEndpoint+0x138>
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	4b35      	ldr	r3, [pc, #212]	@ (800c814 <USB_DeactivateEndpoint+0x1f4>)
 800c73e:	4013      	ands	r3, r2
 800c740:	637b      	str	r3, [r7, #52]	@ 0x34
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	441a      	add	r2, r3
 800c74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c74e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c756:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	633b      	str	r3, [r7, #48]	@ 0x30
 800c766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d013      	beq.n	800c798 <USB_DeactivateEndpoint+0x178>
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	4b25      	ldr	r3, [pc, #148]	@ (800c814 <USB_DeactivateEndpoint+0x1f4>)
 800c77e:	4013      	ands	r3, r2
 800c780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	441a      	add	r2, r3
 800c78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c78e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c792:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c796:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c814 <USB_DeactivateEndpoint+0x1f4>)
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	441a      	add	r2, r3
 800c7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7be:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4b13      	ldr	r3, [pc, #76]	@ (800c81c <USB_DeactivateEndpoint+0x1fc>)
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	441a      	add	r2, r3
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	4b08      	ldr	r3, [pc, #32]	@ (800c818 <USB_DeactivateEndpoint+0x1f8>)
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	623b      	str	r3, [r7, #32]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	441a      	add	r2, r3
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	e082      	b.n	800c918 <USB_DeactivateEndpoint+0x2f8>
 800c812:	bf00      	nop
 800c814:	07ff8f8f 	.word	0x07ff8f8f
 800c818:	07ff8fbf 	.word	0x07ff8fbf
 800c81c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d013      	beq.n	800c860 <USB_DeactivateEndpoint+0x240>
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	4b38      	ldr	r3, [pc, #224]	@ (800c928 <USB_DeactivateEndpoint+0x308>)
 800c846:	4013      	ands	r3, r2
 800c848:	653b      	str	r3, [r7, #80]	@ 0x50
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	441a      	add	r2, r3
 800c854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	4413      	add	r3, r2
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c874:	2b00      	cmp	r3, #0
 800c876:	d013      	beq.n	800c8a0 <USB_DeactivateEndpoint+0x280>
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	4b28      	ldr	r3, [pc, #160]	@ (800c928 <USB_DeactivateEndpoint+0x308>)
 800c886:	4013      	ands	r3, r2
 800c888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	441a      	add	r2, r3
 800c894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c89a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c89e:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	4b1e      	ldr	r3, [pc, #120]	@ (800c928 <USB_DeactivateEndpoint+0x308>)
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	441a      	add	r2, r3
 800c8bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8c6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	4b15      	ldr	r3, [pc, #84]	@ (800c92c <USB_DeactivateEndpoint+0x30c>)
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	441a      	add	r2, r3
 800c8e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ee:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c930 <USB_DeactivateEndpoint+0x310>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	441a      	add	r2, r3
 800c90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c90e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c916:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	375c      	adds	r7, #92	@ 0x5c
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	07ff8f8f 	.word	0x07ff8f8f
 800c92c:	07ff8fbf 	.word	0x07ff8fbf
 800c930:	07ffbf8f 	.word	0x07ffbf8f

0800c934 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b096      	sub	sp, #88	@ 0x58
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	2b01      	cmp	r3, #1
 800c944:	f040 84ed 	bne.w	800d322 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	699a      	ldr	r2, [r3, #24]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	429a      	cmp	r2, r3
 800c952:	d903      	bls.n	800c95c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	657b      	str	r3, [r7, #84]	@ 0x54
 800c95a:	e002      	b.n	800c962 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	7b1b      	ldrb	r3, [r3, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d12e      	bne.n	800c9c8 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	6959      	ldr	r1, [r3, #20]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	88da      	ldrh	r2, [r3, #6]
 800c972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c974:	b29b      	uxth	r3, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 f963 	bl	800dc42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	00db      	lsls	r3, r3, #3
 800c982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c986:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c996:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c99a:	b292      	uxth	r2, r2
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9ac:	6819      	ldr	r1, [r3, #0]
 800c9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9b0:	041a      	lsls	r2, r3, #16
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	00db      	lsls	r3, r3, #3
 800c9b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9c0:	430a      	orrs	r2, r1
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	f000 bc90 	b.w	800d2e8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	78db      	ldrb	r3, [r3, #3]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	f040 8332 	bne.w	800d036 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	6a1a      	ldr	r2, [r3, #32]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	f240 82e4 	bls.w	800cfa8 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	4ba4      	ldr	r3, [pc, #656]	@ (800cc80 <USB_EPStartXfer+0x34c>)
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	613b      	str	r3, [r7, #16]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	441a      	add	r2, r3
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca06:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	6a1a      	ldr	r2, [r3, #32]
 800ca0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 8161 	beq.w	800ccec <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d16a      	bne.n	800cb08 <USB_EPStartXfer+0x1d4>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca50:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca54:	605a      	str	r2, [r3, #4]
 800ca56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d112      	bne.n	800ca82 <USB_EPStartXfer+0x14e>
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca7e:	605a      	str	r2, [r3, #4]
 800ca80:	e06a      	b.n	800cb58 <USB_EPStartXfer+0x224>
 800ca82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca84:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca86:	d81e      	bhi.n	800cac6 <USB_EPStartXfer+0x192>
 800ca88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca8a:	085b      	lsrs	r3, r3, #1
 800ca8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <USB_EPStartXfer+0x16a>
 800ca98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caac:	6859      	ldr	r1, [r3, #4]
 800caae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cab0:	069a      	lsls	r2, r3, #26
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cabc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cac0:	430a      	orrs	r2, r1
 800cac2:	605a      	str	r2, [r3, #4]
 800cac4:	e048      	b.n	800cb58 <USB_EPStartXfer+0x224>
 800cac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cac8:	095b      	lsrs	r3, r3, #5
 800caca:	653b      	str	r3, [r7, #80]	@ 0x50
 800cacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cace:	f003 031f 	and.w	r3, r3, #31
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d102      	bne.n	800cadc <USB_EPStartXfer+0x1a8>
 800cad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cad8:	3b01      	subs	r3, #1
 800cada:	653b      	str	r3, [r7, #80]	@ 0x50
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cae6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caee:	069b      	lsls	r3, r3, #26
 800caf0:	431a      	orrs	r2, r3
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	00db      	lsls	r3, r3, #3
 800caf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cafc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb04:	605a      	str	r2, [r3, #4]
 800cb06:	e027      	b.n	800cb58 <USB_EPStartXfer+0x224>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	785b      	ldrb	r3, [r3, #1]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d123      	bne.n	800cb58 <USB_EPStartXfer+0x224>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb2e:	b292      	uxth	r2, r2
 800cb30:	605a      	str	r2, [r3, #4]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb40:	6859      	ldr	r1, [r3, #4]
 800cb42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb44:	041a      	lsls	r2, r3, #16
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb54:	430a      	orrs	r2, r1
 800cb56:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	895b      	ldrh	r3, [r3, #10]
 800cb5c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	6959      	ldr	r1, [r3, #20]
 800cb62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	8b7a      	ldrh	r2, [r7, #26]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 f86a 	bl	800dc42 <USB_WritePMA>
            ep->xfer_buff += len;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	695a      	ldr	r2, [r3, #20]
 800cb72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb74:	441a      	add	r2, r3
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	6a1a      	ldr	r2, [r3, #32]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d906      	bls.n	800cb94 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	6a1a      	ldr	r2, [r3, #32]
 800cb8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb8c:	1ad2      	subs	r2, r2, r3
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	621a      	str	r2, [r3, #32]
 800cb92:	e005      	b.n	800cba0 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	6a1b      	ldr	r3, [r3, #32]
 800cb98:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	785b      	ldrb	r3, [r3, #1]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d16d      	bne.n	800cc84 <USB_EPStartXfer+0x350>
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbc6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d112      	bne.n	800cbf8 <USB_EPStartXfer+0x2c4>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbf0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	e06d      	b.n	800ccd4 <USB_EPStartXfer+0x3a0>
 800cbf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbfa:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbfc:	d81e      	bhi.n	800cc3c <USB_EPStartXfer+0x308>
 800cbfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc00:	085b      	lsrs	r3, r3, #1
 800cc02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <USB_EPStartXfer+0x2e0>
 800cc0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc10:	3301      	adds	r3, #1
 800cc12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc22:	6819      	ldr	r1, [r3, #0]
 800cc24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc26:	069a      	lsls	r2, r3, #26
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc36:	430a      	orrs	r2, r1
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	e04b      	b.n	800ccd4 <USB_EPStartXfer+0x3a0>
 800cc3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc3e:	095b      	lsrs	r3, r3, #5
 800cc40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc44:	f003 031f 	and.w	r3, r3, #31
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d102      	bne.n	800cc52 <USB_EPStartXfer+0x31e>
 800cc4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc64:	069b      	lsls	r3, r3, #26
 800cc66:	431a      	orrs	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	e02a      	b.n	800ccd4 <USB_EPStartXfer+0x3a0>
 800cc7e:	bf00      	nop
 800cc80:	07ff8f8f 	.word	0x07ff8f8f
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	785b      	ldrb	r3, [r3, #1]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d123      	bne.n	800ccd4 <USB_EPStartXfer+0x3a0>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cca6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccaa:	b292      	uxth	r2, r2
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	00db      	lsls	r3, r3, #3
 800ccb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccbc:	6819      	ldr	r1, [r3, #0]
 800ccbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc0:	041a      	lsls	r2, r3, #16
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cccc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccd0:	430a      	orrs	r2, r1
 800ccd2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	891b      	ldrh	r3, [r3, #8]
 800ccd8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	6959      	ldr	r1, [r3, #20]
 800ccde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8b7a      	ldrh	r2, [r7, #26]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 ffac 	bl	800dc42 <USB_WritePMA>
 800ccea:	e2fd      	b.n	800d2e8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	785b      	ldrb	r3, [r3, #1]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d16a      	bne.n	800cdca <USB_EPStartXfer+0x496>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd12:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d112      	bne.n	800cd44 <USB_EPStartXfer+0x410>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	e06a      	b.n	800ce1a <USB_EPStartXfer+0x4e6>
 800cd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd46:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd48:	d81e      	bhi.n	800cd88 <USB_EPStartXfer+0x454>
 800cd4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd4c:	085b      	lsrs	r3, r3, #1
 800cd4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d002      	beq.n	800cd60 <USB_EPStartXfer+0x42c>
 800cd5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd6e:	6819      	ldr	r1, [r3, #0]
 800cd70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd72:	069a      	lsls	r2, r3, #26
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd82:	430a      	orrs	r2, r1
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	e048      	b.n	800ce1a <USB_EPStartXfer+0x4e6>
 800cd88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd8a:	095b      	lsrs	r3, r3, #5
 800cd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d102      	bne.n	800cd9e <USB_EPStartXfer+0x46a>
 800cd98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cda8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdb0:	069b      	lsls	r3, r3, #26
 800cdb2:	431a      	orrs	r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	e027      	b.n	800ce1a <USB_EPStartXfer+0x4e6>
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d123      	bne.n	800ce1a <USB_EPStartXfer+0x4e6>
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdf0:	b292      	uxth	r2, r2
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce02:	6819      	ldr	r1, [r3, #0]
 800ce04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce06:	041a      	lsls	r2, r3, #16
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	00db      	lsls	r3, r3, #3
 800ce0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce16:	430a      	orrs	r2, r1
 800ce18:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	891b      	ldrh	r3, [r3, #8]
 800ce1e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	6959      	ldr	r1, [r3, #20]
 800ce24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	8b7a      	ldrh	r2, [r7, #26]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 ff09 	bl	800dc42 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	695a      	ldr	r2, [r3, #20]
 800ce34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce36:	441a      	add	r2, r3
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	6a1a      	ldr	r2, [r3, #32]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d906      	bls.n	800ce56 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	6a1a      	ldr	r2, [r3, #32]
 800ce4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce4e:	1ad2      	subs	r2, r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	621a      	str	r2, [r3, #32]
 800ce54:	e005      	b.n	800ce62 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	785b      	ldrb	r3, [r3, #1]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d16a      	bne.n	800cf40 <USB_EPStartXfer+0x60c>
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce88:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce8c:	605a      	str	r2, [r3, #4]
 800ce8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d112      	bne.n	800ceba <USB_EPStartXfer+0x586>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceb2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ceb6:	605a      	str	r2, [r3, #4]
 800ceb8:	e06a      	b.n	800cf90 <USB_EPStartXfer+0x65c>
 800ceba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cebc:	2b3e      	cmp	r3, #62	@ 0x3e
 800cebe:	d81e      	bhi.n	800cefe <USB_EPStartXfer+0x5ca>
 800cec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cec2:	085b      	lsrs	r3, r3, #1
 800cec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <USB_EPStartXfer+0x5a2>
 800ced0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ced2:	3301      	adds	r3, #1
 800ced4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cee4:	6859      	ldr	r1, [r3, #4]
 800cee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee8:	069a      	lsls	r2, r3, #26
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cef8:	430a      	orrs	r2, r1
 800cefa:	605a      	str	r2, [r3, #4]
 800cefc:	e048      	b.n	800cf90 <USB_EPStartXfer+0x65c>
 800cefe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf00:	095b      	lsrs	r3, r3, #5
 800cf02:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf06:	f003 031f 	and.w	r3, r3, #31
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d102      	bne.n	800cf14 <USB_EPStartXfer+0x5e0>
 800cf0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf10:	3b01      	subs	r3, #1
 800cf12:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf26:	069b      	lsls	r3, r3, #26
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf38:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf3c:	605a      	str	r2, [r3, #4]
 800cf3e:	e027      	b.n	800cf90 <USB_EPStartXfer+0x65c>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	785b      	ldrb	r3, [r3, #1]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d123      	bne.n	800cf90 <USB_EPStartXfer+0x65c>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf66:	b292      	uxth	r2, r2
 800cf68:	605a      	str	r2, [r3, #4]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf78:	6859      	ldr	r1, [r3, #4]
 800cf7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf7c:	041a      	lsls	r2, r3, #16
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	895b      	ldrh	r3, [r3, #10]
 800cf94:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6959      	ldr	r1, [r3, #20]
 800cf9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	8b7a      	ldrh	r2, [r7, #26]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fe4e 	bl	800dc42 <USB_WritePMA>
 800cfa6:	e19f      	b.n	800d2e8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	6a1b      	ldr	r3, [r3, #32]
 800cfac:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4ba0      	ldr	r3, [pc, #640]	@ (800d23c <USB_EPStartXfer+0x908>)
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	617b      	str	r3, [r7, #20]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	441a      	add	r2, r3
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfd4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cff0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cff4:	b292      	uxth	r2, r2
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d002:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d006:	6819      	ldr	r1, [r3, #0]
 800d008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d00a:	041a      	lsls	r2, r3, #16
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d016:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d01a:	430a      	orrs	r2, r1
 800d01c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	891b      	ldrh	r3, [r3, #8]
 800d022:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	6959      	ldr	r1, [r3, #20]
 800d028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	8b7a      	ldrh	r2, [r7, #26]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fe07 	bl	800dc42 <USB_WritePMA>
 800d034:	e158      	b.n	800d2e8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	6a1a      	ldr	r2, [r3, #32]
 800d03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d03c:	1ad2      	subs	r2, r2, r3
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 80a3 	beq.w	800d19e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	785b      	ldrb	r3, [r3, #1]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d16a      	bne.n	800d136 <USB_EPStartXfer+0x802>
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d06a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d07a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d07e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d082:	605a      	str	r2, [r3, #4]
 800d084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d086:	2b00      	cmp	r3, #0
 800d088:	d112      	bne.n	800d0b0 <USB_EPStartXfer+0x77c>
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d094:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d098:	685a      	ldr	r2, [r3, #4]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d0ac:	605a      	str	r2, [r3, #4]
 800d0ae:	e06a      	b.n	800d186 <USB_EPStartXfer+0x852>
 800d0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0b4:	d81e      	bhi.n	800d0f4 <USB_EPStartXfer+0x7c0>
 800d0b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0b8:	085b      	lsrs	r3, r3, #1
 800d0ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0be:	f003 0301 	and.w	r3, r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <USB_EPStartXfer+0x798>
 800d0c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0da:	6859      	ldr	r1, [r3, #4]
 800d0dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0de:	069a      	lsls	r2, r3, #26
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	605a      	str	r2, [r3, #4]
 800d0f2:	e048      	b.n	800d186 <USB_EPStartXfer+0x852>
 800d0f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f6:	095b      	lsrs	r3, r3, #5
 800d0f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0fc:	f003 031f 	and.w	r3, r3, #31
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <USB_EPStartXfer+0x7d6>
 800d104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d106:	3b01      	subs	r3, #1
 800d108:	643b      	str	r3, [r7, #64]	@ 0x40
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d114:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d11c:	069b      	lsls	r3, r3, #26
 800d11e:	431a      	orrs	r2, r3
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d12a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d12e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d132:	605a      	str	r2, [r3, #4]
 800d134:	e027      	b.n	800d186 <USB_EPStartXfer+0x852>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	785b      	ldrb	r3, [r3, #1]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d123      	bne.n	800d186 <USB_EPStartXfer+0x852>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d148:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	00db      	lsls	r3, r3, #3
 800d154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d158:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d15c:	b292      	uxth	r2, r2
 800d15e:	605a      	str	r2, [r3, #4]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d16a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d16e:	6859      	ldr	r1, [r3, #4]
 800d170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d172:	041a      	lsls	r2, r3, #16
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d17e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d182:	430a      	orrs	r2, r1
 800d184:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	895b      	ldrh	r3, [r3, #10]
 800d18a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	6959      	ldr	r1, [r3, #20]
 800d190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d192:	b29b      	uxth	r3, r3
 800d194:	8b7a      	ldrh	r2, [r7, #26]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fd53 	bl	800dc42 <USB_WritePMA>
 800d19c:	e0a4      	b.n	800d2e8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	785b      	ldrb	r3, [r3, #1]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d16d      	bne.n	800d282 <USB_EPStartXfer+0x94e>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	00db      	lsls	r3, r3, #3
 800d1bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1c4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d112      	bne.n	800d1f6 <USB_EPStartXfer+0x8c2>
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	e06d      	b.n	800d2d2 <USB_EPStartXfer+0x99e>
 800d1f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1fa:	d821      	bhi.n	800d240 <USB_EPStartXfer+0x90c>
 800d1fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1fe:	085b      	lsrs	r3, r3, #1
 800d200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d002      	beq.n	800d212 <USB_EPStartXfer+0x8de>
 800d20c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d20e:	3301      	adds	r3, #1
 800d210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d21c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d220:	6819      	ldr	r1, [r3, #0]
 800d222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d224:	069a      	lsls	r2, r3, #26
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d234:	430a      	orrs	r2, r1
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	e04b      	b.n	800d2d2 <USB_EPStartXfer+0x99e>
 800d23a:	bf00      	nop
 800d23c:	07ff8e8f 	.word	0x07ff8e8f
 800d240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d242:	095b      	lsrs	r3, r3, #5
 800d244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d248:	f003 031f 	and.w	r3, r3, #31
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d102      	bne.n	800d256 <USB_EPStartXfer+0x922>
 800d250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d252:	3b01      	subs	r3, #1
 800d254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d268:	069b      	lsls	r3, r3, #26
 800d26a:	431a      	orrs	r2, r3
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	00db      	lsls	r3, r3, #3
 800d272:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d276:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d27a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d27e:	601a      	str	r2, [r3, #0]
 800d280:	e027      	b.n	800d2d2 <USB_EPStartXfer+0x99e>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	785b      	ldrb	r3, [r3, #1]
 800d286:	2b01      	cmp	r3, #1
 800d288:	d123      	bne.n	800d2d2 <USB_EPStartXfer+0x99e>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	00db      	lsls	r3, r3, #3
 800d290:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d294:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2a8:	b292      	uxth	r2, r2
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ba:	6819      	ldr	r1, [r3, #0]
 800d2bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2be:	041a      	lsls	r2, r3, #16
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	891b      	ldrh	r3, [r3, #8]
 800d2d6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	6959      	ldr	r1, [r3, #20]
 800d2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	8b7a      	ldrh	r2, [r7, #26]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fcad 	bl	800dc42 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	4b8b      	ldr	r3, [pc, #556]	@ (800d524 <USB_EPStartXfer+0xbf0>)
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f083 0310 	eor.w	r3, r3, #16
 800d300:	60fb      	str	r3, [r7, #12]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f083 0320 	eor.w	r3, r3, #32
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	441a      	add	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	e36b      	b.n	800d9fa <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	7b1b      	ldrb	r3, [r3, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f040 8081 	bne.w	800d42e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	699a      	ldr	r2, [r3, #24]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	429a      	cmp	r2, r3
 800d336:	d909      	bls.n	800d34c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	691b      	ldr	r3, [r3, #16]
 800d33c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d344:	1ad2      	subs	r2, r2, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	619a      	str	r2, [r3, #24]
 800d34a:	e005      	b.n	800d358 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	699b      	ldr	r3, [r3, #24]
 800d350:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2200      	movs	r2, #0
 800d356:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	00db      	lsls	r3, r3, #3
 800d35e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d362:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d372:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d376:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d37a:	605a      	str	r2, [r3, #4]
 800d37c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d112      	bne.n	800d3a8 <USB_EPStartXfer+0xa74>
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d38c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d390:	685a      	ldr	r2, [r3, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d39c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d3a4:	605a      	str	r2, [r3, #4]
 800d3a6:	e30c      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
 800d3a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3ac:	d81e      	bhi.n	800d3ec <USB_EPStartXfer+0xab8>
 800d3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3b0:	085b      	lsrs	r3, r3, #1
 800d3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <USB_EPStartXfer+0xa90>
 800d3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	00db      	lsls	r3, r3, #3
 800d3ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3d2:	6859      	ldr	r1, [r3, #4]
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d6:	069a      	lsls	r2, r3, #26
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3e6:	430a      	orrs	r2, r1
 800d3e8:	605a      	str	r2, [r3, #4]
 800d3ea:	e2ea      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
 800d3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ee:	095b      	lsrs	r3, r3, #5
 800d3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3f4:	f003 031f 	and.w	r3, r3, #31
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <USB_EPStartXfer+0xace>
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fe:	3b01      	subs	r3, #1
 800d400:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d40c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d414:	069b      	lsls	r3, r3, #26
 800d416:	431a      	orrs	r2, r3
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d422:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d426:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d42a:	605a      	str	r2, [r3, #4]
 800d42c:	e2c9      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	78db      	ldrb	r3, [r3, #3]
 800d432:	2b02      	cmp	r3, #2
 800d434:	f040 8176 	bne.w	800d724 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	785b      	ldrb	r3, [r3, #1]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d173      	bne.n	800d528 <USB_EPStartXfer+0xbf4>
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d44a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	00db      	lsls	r3, r3, #3
 800d456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d45a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d45e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d112      	bne.n	800d492 <USB_EPStartXfer+0xb5e>
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d476:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	00db      	lsls	r3, r3, #3
 800d482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d486:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d48a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	e073      	b.n	800d57a <USB_EPStartXfer+0xc46>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	2b3e      	cmp	r3, #62	@ 0x3e
 800d498:	d820      	bhi.n	800d4dc <USB_EPStartXfer+0xba8>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	085b      	lsrs	r3, r3, #1
 800d4a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <USB_EPStartXfer+0xb80>
 800d4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4c2:	6819      	ldr	r1, [r3, #0]
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4c6:	069a      	lsls	r2, r3, #26
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4d6:	430a      	orrs	r2, r1
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	e04e      	b.n	800d57a <USB_EPStartXfer+0xc46>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	095b      	lsrs	r3, r3, #5
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	f003 031f 	and.w	r3, r3, #31
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <USB_EPStartXfer+0xbc2>
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d500:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d508:	069b      	lsls	r3, r3, #26
 800d50a:	431a      	orrs	r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d516:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d51a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	e02b      	b.n	800d57a <USB_EPStartXfer+0xc46>
 800d522:	bf00      	nop
 800d524:	07ff8fbf 	.word	0x07ff8fbf
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d124      	bne.n	800d57a <USB_EPStartXfer+0xc46>
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d53a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d54a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d54e:	b292      	uxth	r2, r2
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d55c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d560:	6819      	ldr	r1, [r3, #0]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	041a      	lsls	r2, r3, #16
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d572:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d576:	430a      	orrs	r2, r1
 800d578:	601a      	str	r2, [r3, #0]
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d170      	bne.n	800d664 <USB_EPStartXfer+0xd30>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d58c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d59c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5a0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d5a4:	605a      	str	r2, [r3, #4]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d112      	bne.n	800d5d4 <USB_EPStartXfer+0xca0>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	00db      	lsls	r3, r3, #3
 800d5b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	00db      	lsls	r3, r3, #3
 800d5c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d5d0:	605a      	str	r2, [r3, #4]
 800d5d2:	e070      	b.n	800d6b6 <USB_EPStartXfer+0xd82>
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5da:	d820      	bhi.n	800d61e <USB_EPStartXfer+0xcea>
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	085b      	lsrs	r3, r3, #1
 800d5e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <USB_EPStartXfer+0xcc2>
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	00db      	lsls	r3, r3, #3
 800d5fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d600:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d604:	6859      	ldr	r1, [r3, #4]
 800d606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d608:	069a      	lsls	r2, r3, #26
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	00db      	lsls	r3, r3, #3
 800d610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d614:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d618:	430a      	orrs	r2, r1
 800d61a:	605a      	str	r2, [r3, #4]
 800d61c:	e04b      	b.n	800d6b6 <USB_EPStartXfer+0xd82>
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	095b      	lsrs	r3, r3, #5
 800d624:	633b      	str	r3, [r7, #48]	@ 0x30
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	f003 031f 	and.w	r3, r3, #31
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <USB_EPStartXfer+0xd04>
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	3b01      	subs	r3, #1
 800d636:	633b      	str	r3, [r7, #48]	@ 0x30
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d642:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64a:	069b      	lsls	r3, r3, #26
 800d64c:	431a      	orrs	r2, r3
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d658:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d65c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d660:	605a      	str	r2, [r3, #4]
 800d662:	e028      	b.n	800d6b6 <USB_EPStartXfer+0xd82>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d124      	bne.n	800d6b6 <USB_EPStartXfer+0xd82>
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	00db      	lsls	r3, r3, #3
 800d672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d676:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	00db      	lsls	r3, r3, #3
 800d682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d68a:	b292      	uxth	r2, r2
 800d68c:	605a      	str	r2, [r3, #4]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d698:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d69c:	6859      	ldr	r1, [r3, #4]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	041a      	lsls	r2, r3, #16
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6b2:	430a      	orrs	r2, r1
 800d6b4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	69db      	ldr	r3, [r3, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 8181 	beq.w	800d9c2 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d6ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d6d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <USB_EPStartXfer+0xdae>
 800d6d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d6da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10b      	bne.n	800d6fa <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d6e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d6e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f040 816a 	bne.w	800d9c2 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d6ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f040 8164 	bne.w	800d9c2 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	4b98      	ldr	r3, [pc, #608]	@ (800d968 <USB_EPStartXfer+0x1034>)
 800d708:	4013      	ands	r3, r2
 800d70a:	623b      	str	r3, [r7, #32]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	441a      	add	r2, r3
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d71c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	e14e      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	78db      	ldrb	r3, [r3, #3]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	f040 8148 	bne.w	800d9be <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	699a      	ldr	r2, [r3, #24]
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	429a      	cmp	r2, r3
 800d738:	d909      	bls.n	800d74e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	699a      	ldr	r2, [r3, #24]
 800d744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d746:	1ad2      	subs	r2, r2, r3
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	619a      	str	r2, [r3, #24]
 800d74c:	e005      	b.n	800d75a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	2200      	movs	r2, #0
 800d758:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	785b      	ldrb	r3, [r3, #1]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d16a      	bne.n	800d838 <USB_EPStartXfer+0xf04>
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d76c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d77c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d780:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d112      	bne.n	800d7b2 <USB_EPStartXfer+0xe7e>
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d796:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d7ae:	601a      	str	r2, [r3, #0]
 800d7b0:	e06a      	b.n	800d888 <USB_EPStartXfer+0xf54>
 800d7b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7b6:	d81e      	bhi.n	800d7f6 <USB_EPStartXfer+0xec2>
 800d7b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ba:	085b      	lsrs	r3, r3, #1
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <USB_EPStartXfer+0xe9a>
 800d7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	00db      	lsls	r3, r3, #3
 800d7d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e0:	069a      	lsls	r2, r3, #26
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7f0:	430a      	orrs	r2, r1
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e048      	b.n	800d888 <USB_EPStartXfer+0xf54>
 800d7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7f8:	095b      	lsrs	r3, r3, #5
 800d7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7fe:	f003 031f 	and.w	r3, r3, #31
 800d802:	2b00      	cmp	r3, #0
 800d804:	d102      	bne.n	800d80c <USB_EPStartXfer+0xed8>
 800d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d808:	3b01      	subs	r3, #1
 800d80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d816:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81e:	069b      	lsls	r3, r3, #26
 800d820:	431a      	orrs	r2, r3
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	00db      	lsls	r3, r3, #3
 800d828:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d82c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d830:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	e027      	b.n	800d888 <USB_EPStartXfer+0xf54>
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d123      	bne.n	800d888 <USB_EPStartXfer+0xf54>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	00db      	lsls	r3, r3, #3
 800d846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d84a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d85a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d85e:	b292      	uxth	r2, r2
 800d860:	601a      	str	r2, [r3, #0]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d86c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d870:	6819      	ldr	r1, [r3, #0]
 800d872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d874:	041a      	lsls	r2, r3, #16
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d884:	430a      	orrs	r2, r1
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	785b      	ldrb	r3, [r3, #1]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d16d      	bne.n	800d96c <USB_EPStartXfer+0x1038>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d89a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ae:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d8b2:	605a      	str	r2, [r3, #4]
 800d8b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d112      	bne.n	800d8e0 <USB_EPStartXfer+0xfac>
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8c8:	685a      	ldr	r2, [r3, #4]
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d8dc:	605a      	str	r2, [r3, #4]
 800d8de:	e070      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
 800d8e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8e4:	d81e      	bhi.n	800d924 <USB_EPStartXfer+0xff0>
 800d8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e8:	085b      	lsrs	r3, r3, #1
 800d8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <USB_EPStartXfer+0xfc8>
 800d8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	00db      	lsls	r3, r3, #3
 800d902:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d906:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d90a:	6859      	ldr	r1, [r3, #4]
 800d90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90e:	069a      	lsls	r2, r3, #26
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d91a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d91e:	430a      	orrs	r2, r1
 800d920:	605a      	str	r2, [r3, #4]
 800d922:	e04e      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
 800d924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d926:	095b      	lsrs	r3, r3, #5
 800d928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d92c:	f003 031f 	and.w	r3, r3, #31
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <USB_EPStartXfer+0x1006>
 800d934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d936:	3b01      	subs	r3, #1
 800d938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	00db      	lsls	r3, r3, #3
 800d940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d944:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d948:	685a      	ldr	r2, [r3, #4]
 800d94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94c:	069b      	lsls	r3, r3, #26
 800d94e:	431a      	orrs	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d95a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d95e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d962:	605a      	str	r2, [r3, #4]
 800d964:	e02d      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
 800d966:	bf00      	nop
 800d968:	07ff8f8f 	.word	0x07ff8f8f
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	785b      	ldrb	r3, [r3, #1]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d126      	bne.n	800d9c2 <USB_EPStartXfer+0x108e>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d97e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	00db      	lsls	r3, r3, #3
 800d98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d98e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d992:	b292      	uxth	r2, r2
 800d994:	605a      	str	r2, [r3, #4]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9a4:	6859      	ldr	r1, [r3, #4]
 800d9a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9a8:	041a      	lsls	r2, r3, #16
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	605a      	str	r2, [r3, #4]
 800d9bc:	e001      	b.n	800d9c2 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e01c      	b.n	800d9fc <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <USB_EPStartXfer+0x10d0>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	61fb      	str	r3, [r7, #28]
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d9da:	61fb      	str	r3, [r7, #28]
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	441a      	add	r2, r3
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3758      	adds	r7, #88	@ 0x58
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	07ffbf8f 	.word	0x07ffbf8f

0800da08 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	785b      	ldrb	r3, [r3, #1]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d018      	beq.n	800da4c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	4b19      	ldr	r3, [pc, #100]	@ (800da8c <USB_EPSetStall+0x84>)
 800da28:	4013      	ands	r3, r2
 800da2a:	60bb      	str	r3, [r7, #8]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	f083 0310 	eor.w	r3, r3, #16
 800da32:	60bb      	str	r3, [r7, #8]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	441a      	add	r2, r3
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da48:	6013      	str	r3, [r2, #0]
 800da4a:	e017      	b.n	800da7c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4413      	add	r3, r2
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <USB_EPSetStall+0x88>)
 800da5a:	4013      	ands	r3, r2
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	441a      	add	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	07ff8fbf 	.word	0x07ff8fbf
 800da90:	07ffbf8f 	.word	0x07ffbf8f

0800da94 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800da94:	b480      	push	{r7}
 800da96:	b089      	sub	sp, #36	@ 0x24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	7b1b      	ldrb	r3, [r3, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d17c      	bne.n	800dba0 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	785b      	ldrb	r3, [r3, #1]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d03c      	beq.n	800db28 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	4413      	add	r3, r2
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d013      	beq.n	800daee <USB_EPClearStall+0x5a>
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	4b37      	ldr	r3, [pc, #220]	@ (800dbb0 <USB_EPClearStall+0x11c>)
 800dad4:	4013      	ands	r3, r2
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	441a      	add	r2, r3
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dae8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800daec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	78db      	ldrb	r3, [r3, #3]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d054      	beq.n	800dba0 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	4b2c      	ldr	r3, [pc, #176]	@ (800dbb4 <USB_EPClearStall+0x120>)
 800db04:	4013      	ands	r3, r2
 800db06:	60bb      	str	r3, [r7, #8]
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	f083 0320 	eor.w	r3, r3, #32
 800db0e:	60bb      	str	r3, [r7, #8]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	441a      	add	r2, r3
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	e03b      	b.n	800dba0 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	61fb      	str	r3, [r7, #28]
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d013      	beq.n	800db68 <USB_EPClearStall+0xd4>
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b18      	ldr	r3, [pc, #96]	@ (800dbb0 <USB_EPClearStall+0x11c>)
 800db4e:	4013      	ands	r3, r2
 800db50:	61bb      	str	r3, [r7, #24]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	441a      	add	r2, r3
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800db62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db66:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	4b10      	ldr	r3, [pc, #64]	@ (800dbb8 <USB_EPClearStall+0x124>)
 800db76:	4013      	ands	r3, r2
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800db80:	617b      	str	r3, [r7, #20]
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800db88:	617b      	str	r3, [r7, #20]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	441a      	add	r2, r3
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db9e:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3724      	adds	r7, #36	@ 0x24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	07ff8f8f 	.word	0x07ff8f8f
 800dbb4:	07ff8fbf 	.word	0x07ff8fbf
 800dbb8:	07ffbf8f 	.word	0x07ffbf8f

0800dbbc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d102      	bne.n	800dbd4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2280      	movs	r2, #128	@ 0x80
 800dbd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbee:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc10:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dc34:	68fb      	ldr	r3, [r7, #12]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b08b      	sub	sp, #44	@ 0x2c
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	461a      	mov	r2, r3
 800dc50:	460b      	mov	r3, r1
 800dc52:	80fb      	strh	r3, [r7, #6]
 800dc54:	4613      	mov	r3, r2
 800dc56:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dc58:	88bb      	ldrh	r3, [r7, #4]
 800dc5a:	3303      	adds	r3, #3
 800dc5c:	089b      	lsrs	r3, r3, #2
 800dc5e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dc60:	88bb      	ldrh	r3, [r7, #4]
 800dc62:	f003 0303 	and.w	r3, r3, #3
 800dc66:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800dc6c:	8afb      	ldrh	r3, [r7, #22]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d002      	beq.n	800dc78 <USB_WritePMA+0x36>
  {
    NbWords--;
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dc78:	88fb      	ldrh	r3, [r7, #6]
 800dc7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc82:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	623b      	str	r3, [r7, #32]
 800dc88:	e015      	b.n	800dcb6 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	3304      	adds	r3, #4
 800dc96:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3301      	adds	r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	3301      	adds	r3, #1
 800dca8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	3301      	adds	r3, #1
 800dcae:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	623b      	str	r3, [r7, #32]
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1e6      	bne.n	800dc8a <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800dcbc:	8afb      	ldrh	r3, [r7, #22]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d01a      	beq.n	800dcf8 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	461a      	mov	r2, r3
 800dccc:	6a3b      	ldr	r3, [r7, #32]
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	623b      	str	r3, [r7, #32]
      pBuf++;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	3301      	adds	r3, #1
 800dce4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800dce6:	8afb      	ldrh	r3, [r7, #22]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800dcec:	8afb      	ldrh	r3, [r7, #22]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e9      	bne.n	800dcc6 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcf6:	601a      	str	r2, [r3, #0]
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	372c      	adds	r7, #44	@ 0x2c
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b08b      	sub	sp, #44	@ 0x2c
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	4611      	mov	r1, r2
 800dd10:	461a      	mov	r2, r3
 800dd12:	460b      	mov	r3, r1
 800dd14:	80fb      	strh	r3, [r7, #6]
 800dd16:	4613      	mov	r3, r2
 800dd18:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dd1a:	88bb      	ldrh	r3, [r7, #4]
 800dd1c:	3303      	adds	r3, #3
 800dd1e:	089b      	lsrs	r3, r3, #2
 800dd20:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dd22:	88bb      	ldrh	r3, [r7, #4]
 800dd24:	f003 0303 	and.w	r3, r3, #3
 800dd28:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd38:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800dd3a:	8b7b      	ldrh	r3, [r7, #26]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	3b01      	subs	r3, #1
 800dd44:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd4a:	e015      	b.n	800dd78 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800dd4c:	6a3b      	ldr	r3, [r7, #32]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	3304      	adds	r3, #4
 800dd58:	623b      	str	r3, [r7, #32]
    pBuf++;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	3301      	adds	r3, #1
 800dd64:	617b      	str	r3, [r7, #20]
    pBuf++;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800dd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd74:	3b01      	subs	r3, #1
 800dd76:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1e6      	bne.n	800dd4c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800dd7e:	8b7b      	ldrh	r3, [r7, #26]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d017      	beq.n	800ddb4 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	fa22 f303 	lsr.w	r3, r2, r3
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	701a      	strb	r2, [r3, #0]
      count++;
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9e:	3301      	adds	r3, #1
 800dda0:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	3301      	adds	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800dda8:	8b7b      	ldrh	r3, [r7, #26]
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800ddae:	8b7b      	ldrh	r3, [r7, #26]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1ea      	bne.n	800dd8a <USB_ReadPMA+0x86>
  }
}
 800ddb4:	bf00      	nop
 800ddb6:	372c      	adds	r7, #44	@ 0x2c
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ddcc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ddd0:	f000 ff5a 	bl	800ec88 <USBD_static_malloc>
 800ddd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d109      	bne.n	800ddf0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	32b0      	adds	r2, #176	@ 0xb0
 800dde6:	2100      	movs	r1, #0
 800dde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ddec:	2302      	movs	r3, #2
 800ddee:	e0d4      	b.n	800df9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ddf0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f002 fc18 	bl	801062c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	32b0      	adds	r2, #176	@ 0xb0
 800de06:	68f9      	ldr	r1, [r7, #12]
 800de08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	32b0      	adds	r2, #176	@ 0xb0
 800de16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7c1b      	ldrb	r3, [r3, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d138      	bne.n	800de9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de28:	4b5e      	ldr	r3, [pc, #376]	@ (800dfa4 <USBD_CDC_Init+0x1e4>)
 800de2a:	7819      	ldrb	r1, [r3, #0]
 800de2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de30:	2202      	movs	r2, #2
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fe2f 	bl	800ea96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de38:	4b5a      	ldr	r3, [pc, #360]	@ (800dfa4 <USBD_CDC_Init+0x1e4>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	f003 020f 	and.w	r2, r3, #15
 800de40:	6879      	ldr	r1, [r7, #4]
 800de42:	4613      	mov	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	440b      	add	r3, r1
 800de4c:	3324      	adds	r3, #36	@ 0x24
 800de4e:	2201      	movs	r2, #1
 800de50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de52:	4b55      	ldr	r3, [pc, #340]	@ (800dfa8 <USBD_CDC_Init+0x1e8>)
 800de54:	7819      	ldrb	r1, [r3, #0]
 800de56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de5a:	2202      	movs	r2, #2
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fe1a 	bl	800ea96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de62:	4b51      	ldr	r3, [pc, #324]	@ (800dfa8 <USBD_CDC_Init+0x1e8>)
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	f003 020f 	and.w	r2, r3, #15
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	440b      	add	r3, r1
 800de76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800de7a:	2201      	movs	r2, #1
 800de7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de7e:	4b4b      	ldr	r3, [pc, #300]	@ (800dfac <USBD_CDC_Init+0x1ec>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	f003 020f 	and.w	r2, r3, #15
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	4613      	mov	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	440b      	add	r3, r1
 800de92:	3326      	adds	r3, #38	@ 0x26
 800de94:	2210      	movs	r2, #16
 800de96:	801a      	strh	r2, [r3, #0]
 800de98:	e035      	b.n	800df06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de9a:	4b42      	ldr	r3, [pc, #264]	@ (800dfa4 <USBD_CDC_Init+0x1e4>)
 800de9c:	7819      	ldrb	r1, [r3, #0]
 800de9e:	2340      	movs	r3, #64	@ 0x40
 800dea0:	2202      	movs	r2, #2
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fdf7 	bl	800ea96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dea8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfa4 <USBD_CDC_Init+0x1e4>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	f003 020f 	and.w	r2, r3, #15
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	4613      	mov	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	440b      	add	r3, r1
 800debc:	3324      	adds	r3, #36	@ 0x24
 800debe:	2201      	movs	r2, #1
 800dec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dec2:	4b39      	ldr	r3, [pc, #228]	@ (800dfa8 <USBD_CDC_Init+0x1e8>)
 800dec4:	7819      	ldrb	r1, [r3, #0]
 800dec6:	2340      	movs	r3, #64	@ 0x40
 800dec8:	2202      	movs	r2, #2
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fde3 	bl	800ea96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ded0:	4b35      	ldr	r3, [pc, #212]	@ (800dfa8 <USBD_CDC_Init+0x1e8>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	f003 020f 	and.w	r2, r3, #15
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	440b      	add	r3, r1
 800dee4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dee8:	2201      	movs	r2, #1
 800deea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800deec:	4b2f      	ldr	r3, [pc, #188]	@ (800dfac <USBD_CDC_Init+0x1ec>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f003 020f 	and.w	r2, r3, #15
 800def4:	6879      	ldr	r1, [r7, #4]
 800def6:	4613      	mov	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	440b      	add	r3, r1
 800df00:	3326      	adds	r3, #38	@ 0x26
 800df02:	2210      	movs	r2, #16
 800df04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df06:	4b29      	ldr	r3, [pc, #164]	@ (800dfac <USBD_CDC_Init+0x1ec>)
 800df08:	7819      	ldrb	r1, [r3, #0]
 800df0a:	2308      	movs	r3, #8
 800df0c:	2203      	movs	r2, #3
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 fdc1 	bl	800ea96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df14:	4b25      	ldr	r3, [pc, #148]	@ (800dfac <USBD_CDC_Init+0x1ec>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	f003 020f 	and.w	r2, r3, #15
 800df1c:	6879      	ldr	r1, [r7, #4]
 800df1e:	4613      	mov	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	440b      	add	r3, r1
 800df28:	3324      	adds	r3, #36	@ 0x24
 800df2a:	2201      	movs	r2, #1
 800df2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	33b0      	adds	r3, #176	@ 0xb0
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800df60:	2b00      	cmp	r3, #0
 800df62:	d101      	bne.n	800df68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800df64:	2302      	movs	r3, #2
 800df66:	e018      	b.n	800df9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	7c1b      	ldrb	r3, [r3, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10a      	bne.n	800df86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df70:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa8 <USBD_CDC_Init+0x1e8>)
 800df72:	7819      	ldrb	r1, [r3, #0]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fe54 	bl	800ec2c <USBD_LL_PrepareReceive>
 800df84:	e008      	b.n	800df98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df86:	4b08      	ldr	r3, [pc, #32]	@ (800dfa8 <USBD_CDC_Init+0x1e8>)
 800df88:	7819      	ldrb	r1, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df90:	2340      	movs	r3, #64	@ 0x40
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fe4a 	bl	800ec2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	200000b3 	.word	0x200000b3
 800dfa8:	200000b4 	.word	0x200000b4
 800dfac:	200000b5 	.word	0x200000b5

0800dfb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dfbc:	4b3a      	ldr	r3, [pc, #232]	@ (800e0a8 <USBD_CDC_DeInit+0xf8>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fd87 	bl	800ead6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dfc8:	4b37      	ldr	r3, [pc, #220]	@ (800e0a8 <USBD_CDC_DeInit+0xf8>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	f003 020f 	and.w	r2, r3, #15
 800dfd0:	6879      	ldr	r1, [r7, #4]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	440b      	add	r3, r1
 800dfdc:	3324      	adds	r3, #36	@ 0x24
 800dfde:	2200      	movs	r2, #0
 800dfe0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dfe2:	4b32      	ldr	r3, [pc, #200]	@ (800e0ac <USBD_CDC_DeInit+0xfc>)
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fd74 	bl	800ead6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dfee:	4b2f      	ldr	r3, [pc, #188]	@ (800e0ac <USBD_CDC_DeInit+0xfc>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f003 020f 	and.w	r2, r3, #15
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	4613      	mov	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	440b      	add	r3, r1
 800e002:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e006:	2200      	movs	r2, #0
 800e008:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e00a:	4b29      	ldr	r3, [pc, #164]	@ (800e0b0 <USBD_CDC_DeInit+0x100>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	4619      	mov	r1, r3
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fd60 	bl	800ead6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e016:	4b26      	ldr	r3, [pc, #152]	@ (800e0b0 <USBD_CDC_DeInit+0x100>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	f003 020f 	and.w	r2, r3, #15
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	440b      	add	r3, r1
 800e02a:	3324      	adds	r3, #36	@ 0x24
 800e02c:	2200      	movs	r2, #0
 800e02e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e030:	4b1f      	ldr	r3, [pc, #124]	@ (800e0b0 <USBD_CDC_DeInit+0x100>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	f003 020f 	and.w	r2, r3, #15
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	4613      	mov	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	440b      	add	r3, r1
 800e044:	3326      	adds	r3, #38	@ 0x26
 800e046:	2200      	movs	r2, #0
 800e048:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	32b0      	adds	r2, #176	@ 0xb0
 800e054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01f      	beq.n	800e09c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	33b0      	adds	r3, #176	@ 0xb0
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	32b0      	adds	r2, #176	@ 0xb0
 800e07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 fe10 	bl	800eca4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	32b0      	adds	r2, #176	@ 0xb0
 800e08e:	2100      	movs	r1, #0
 800e090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200000b3 	.word	0x200000b3
 800e0ac:	200000b4 	.word	0x200000b4
 800e0b0:	200000b5 	.word	0x200000b5

0800e0b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	32b0      	adds	r2, #176	@ 0xb0
 800e0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e0bf      	b.n	800e264 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d050      	beq.n	800e192 <USBD_CDC_Setup+0xde>
 800e0f0:	2b20      	cmp	r3, #32
 800e0f2:	f040 80af 	bne.w	800e254 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	88db      	ldrh	r3, [r3, #6]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d03a      	beq.n	800e174 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	b25b      	sxtb	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	da1b      	bge.n	800e140 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	33b0      	adds	r3, #176	@ 0xb0
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e11e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	88d2      	ldrh	r2, [r2, #6]
 800e124:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	88db      	ldrh	r3, [r3, #6]
 800e12a:	2b07      	cmp	r3, #7
 800e12c:	bf28      	it	cs
 800e12e:	2307      	movcs	r3, #7
 800e130:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	89fa      	ldrh	r2, [r7, #14]
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f002 f8a6 	bl	801028a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e13e:	e090      	b.n	800e262 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	785a      	ldrb	r2, [r3, #1]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	88db      	ldrh	r3, [r3, #6]
 800e14e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e150:	d803      	bhi.n	800e15a <USBD_CDC_Setup+0xa6>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	88db      	ldrh	r3, [r3, #6]
 800e156:	b2da      	uxtb	r2, r3
 800e158:	e000      	b.n	800e15c <USBD_CDC_Setup+0xa8>
 800e15a:	2240      	movs	r2, #64	@ 0x40
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e162:	6939      	ldr	r1, [r7, #16]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e16a:	461a      	mov	r2, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f002 f8b8 	bl	80102e2 <USBD_CtlPrepareRx>
      break;
 800e172:	e076      	b.n	800e262 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	33b0      	adds	r3, #176	@ 0xb0
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	7850      	ldrb	r0, [r2, #1]
 800e18a:	2200      	movs	r2, #0
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	4798      	blx	r3
      break;
 800e190:	e067      	b.n	800e262 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	785b      	ldrb	r3, [r3, #1]
 800e196:	2b0b      	cmp	r3, #11
 800e198:	d851      	bhi.n	800e23e <USBD_CDC_Setup+0x18a>
 800e19a:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a0 <USBD_CDC_Setup+0xec>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e1d1 	.word	0x0800e1d1
 800e1a4:	0800e24d 	.word	0x0800e24d
 800e1a8:	0800e23f 	.word	0x0800e23f
 800e1ac:	0800e23f 	.word	0x0800e23f
 800e1b0:	0800e23f 	.word	0x0800e23f
 800e1b4:	0800e23f 	.word	0x0800e23f
 800e1b8:	0800e23f 	.word	0x0800e23f
 800e1bc:	0800e23f 	.word	0x0800e23f
 800e1c0:	0800e23f 	.word	0x0800e23f
 800e1c4:	0800e23f 	.word	0x0800e23f
 800e1c8:	0800e1fb 	.word	0x0800e1fb
 800e1cc:	0800e225 	.word	0x0800e225
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d107      	bne.n	800e1ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1dc:	f107 030a 	add.w	r3, r7, #10
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f002 f850 	bl	801028a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1ea:	e032      	b.n	800e252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f001 fecd 	bl	800ff8e <USBD_CtlError>
            ret = USBD_FAIL;
 800e1f4:	2303      	movs	r3, #3
 800e1f6:	75fb      	strb	r3, [r7, #23]
          break;
 800e1f8:	e02b      	b.n	800e252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b03      	cmp	r3, #3
 800e204:	d107      	bne.n	800e216 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e206:	f107 030d 	add.w	r3, r7, #13
 800e20a:	2201      	movs	r2, #1
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f002 f83b 	bl	801028a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e214:	e01d      	b.n	800e252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f001 feb8 	bl	800ff8e <USBD_CtlError>
            ret = USBD_FAIL;
 800e21e:	2303      	movs	r3, #3
 800e220:	75fb      	strb	r3, [r7, #23]
          break;
 800e222:	e016      	b.n	800e252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b03      	cmp	r3, #3
 800e22e:	d00f      	beq.n	800e250 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f001 feab 	bl	800ff8e <USBD_CtlError>
            ret = USBD_FAIL;
 800e238:	2303      	movs	r3, #3
 800e23a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e23c:	e008      	b.n	800e250 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f001 fea4 	bl	800ff8e <USBD_CtlError>
          ret = USBD_FAIL;
 800e246:	2303      	movs	r3, #3
 800e248:	75fb      	strb	r3, [r7, #23]
          break;
 800e24a:	e002      	b.n	800e252 <USBD_CDC_Setup+0x19e>
          break;
 800e24c:	bf00      	nop
 800e24e:	e008      	b.n	800e262 <USBD_CDC_Setup+0x1ae>
          break;
 800e250:	bf00      	nop
      }
      break;
 800e252:	e006      	b.n	800e262 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f001 fe99 	bl	800ff8e <USBD_CtlError>
      ret = USBD_FAIL;
 800e25c:	2303      	movs	r3, #3
 800e25e:	75fb      	strb	r3, [r7, #23]
      break;
 800e260:	bf00      	nop
  }

  return (uint8_t)ret;
 800e262:	7dfb      	ldrb	r3, [r7, #23]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	460b      	mov	r3, r1
 800e276:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e27e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	32b0      	adds	r2, #176	@ 0xb0
 800e28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e292:	2303      	movs	r3, #3
 800e294:	e065      	b.n	800e362 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	32b0      	adds	r2, #176	@ 0xb0
 800e2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2a6:	78fb      	ldrb	r3, [r7, #3]
 800e2a8:	f003 020f 	and.w	r2, r3, #15
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	440b      	add	r3, r1
 800e2b8:	3318      	adds	r3, #24
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d02f      	beq.n	800e320 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e2c0:	78fb      	ldrb	r3, [r7, #3]
 800e2c2:	f003 020f 	and.w	r2, r3, #15
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	440b      	add	r3, r1
 800e2d2:	3318      	adds	r3, #24
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	78fb      	ldrb	r3, [r7, #3]
 800e2d8:	f003 010f 	and.w	r1, r3, #15
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	460b      	mov	r3, r1
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	440b      	add	r3, r1
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	4403      	add	r3, r0
 800e2e8:	3324      	adds	r3, #36	@ 0x24
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2f0:	fb01 f303 	mul.w	r3, r1, r3
 800e2f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d112      	bne.n	800e320 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e2fa:	78fb      	ldrb	r3, [r7, #3]
 800e2fc:	f003 020f 	and.w	r2, r3, #15
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	440b      	add	r3, r1
 800e30c:	3318      	adds	r3, #24
 800e30e:	2200      	movs	r2, #0
 800e310:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e312:	78f9      	ldrb	r1, [r7, #3]
 800e314:	2300      	movs	r3, #0
 800e316:	2200      	movs	r2, #0
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fc6c 	bl	800ebf6 <USBD_LL_Transmit>
 800e31e:	e01f      	b.n	800e360 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2200      	movs	r2, #0
 800e324:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	33b0      	adds	r3, #176	@ 0xb0
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4413      	add	r3, r2
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d010      	beq.n	800e360 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	33b0      	adds	r3, #176	@ 0xb0
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b084      	sub	sp, #16
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	32b0      	adds	r2, #176	@ 0xb0
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	32b0      	adds	r2, #176	@ 0xb0
 800e390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e398:	2303      	movs	r3, #3
 800e39a:	e01a      	b.n	800e3d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e39c:	78fb      	ldrb	r3, [r7, #3]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 fc5e 	bl	800ec62 <USBD_LL_GetRxDataSize>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	33b0      	adds	r3, #176	@ 0xb0
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b084      	sub	sp, #16
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	32b0      	adds	r2, #176	@ 0xb0
 800e3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	e024      	b.n	800e446 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	33b0      	adds	r3, #176	@ 0xb0
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d019      	beq.n	800e444 <USBD_CDC_EP0_RxReady+0x6a>
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e416:	2bff      	cmp	r3, #255	@ 0xff
 800e418:	d014      	beq.n	800e444 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	33b0      	adds	r3, #176	@ 0xb0
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e432:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e43a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	22ff      	movs	r2, #255	@ 0xff
 800e440:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
	...

0800e450 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e458:	2182      	movs	r1, #130	@ 0x82
 800e45a:	4818      	ldr	r0, [pc, #96]	@ (800e4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e45c:	f000 ff61 	bl	800f322 <USBD_GetEpDesc>
 800e460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e462:	2101      	movs	r1, #1
 800e464:	4815      	ldr	r0, [pc, #84]	@ (800e4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e466:	f000 ff5c 	bl	800f322 <USBD_GetEpDesc>
 800e46a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e46c:	2181      	movs	r1, #129	@ 0x81
 800e46e:	4813      	ldr	r0, [pc, #76]	@ (800e4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e470:	f000 ff57 	bl	800f322 <USBD_GetEpDesc>
 800e474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d002      	beq.n	800e482 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2210      	movs	r2, #16
 800e480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d006      	beq.n	800e496 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e490:	711a      	strb	r2, [r3, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d006      	beq.n	800e4aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4a4:	711a      	strb	r2, [r3, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2243      	movs	r2, #67	@ 0x43
 800e4ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e4b0:	4b02      	ldr	r3, [pc, #8]	@ (800e4bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3718      	adds	r7, #24
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20000070 	.word	0x20000070

0800e4c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4c8:	2182      	movs	r1, #130	@ 0x82
 800e4ca:	4818      	ldr	r0, [pc, #96]	@ (800e52c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4cc:	f000 ff29 	bl	800f322 <USBD_GetEpDesc>
 800e4d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	4815      	ldr	r0, [pc, #84]	@ (800e52c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4d6:	f000 ff24 	bl	800f322 <USBD_GetEpDesc>
 800e4da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4dc:	2181      	movs	r1, #129	@ 0x81
 800e4de:	4813      	ldr	r0, [pc, #76]	@ (800e52c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4e0:	f000 ff1f 	bl	800f322 <USBD_GetEpDesc>
 800e4e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	2210      	movs	r2, #16
 800e4f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d006      	beq.n	800e506 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	711a      	strb	r2, [r3, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f042 0202 	orr.w	r2, r2, #2
 800e504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d006      	beq.n	800e51a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	711a      	strb	r2, [r3, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f042 0202 	orr.w	r2, r2, #2
 800e518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2243      	movs	r2, #67	@ 0x43
 800e51e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e520:	4b02      	ldr	r3, [pc, #8]	@ (800e52c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e522:	4618      	mov	r0, r3
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20000070 	.word	0x20000070

0800e530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e538:	2182      	movs	r1, #130	@ 0x82
 800e53a:	4818      	ldr	r0, [pc, #96]	@ (800e59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e53c:	f000 fef1 	bl	800f322 <USBD_GetEpDesc>
 800e540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e542:	2101      	movs	r1, #1
 800e544:	4815      	ldr	r0, [pc, #84]	@ (800e59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e546:	f000 feec 	bl	800f322 <USBD_GetEpDesc>
 800e54a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e54c:	2181      	movs	r1, #129	@ 0x81
 800e54e:	4813      	ldr	r0, [pc, #76]	@ (800e59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e550:	f000 fee7 	bl	800f322 <USBD_GetEpDesc>
 800e554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2210      	movs	r2, #16
 800e560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d006      	beq.n	800e576 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e570:	711a      	strb	r2, [r3, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d006      	beq.n	800e58a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e584:	711a      	strb	r2, [r3, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2243      	movs	r2, #67	@ 0x43
 800e58e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e590:	4b02      	ldr	r3, [pc, #8]	@ (800e59c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e592:	4618      	mov	r0, r3
 800e594:	3718      	adds	r7, #24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20000070 	.word	0x20000070

0800e5a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	220a      	movs	r2, #10
 800e5ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e5ae:	4b03      	ldr	r3, [pc, #12]	@ (800e5bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	2000002c 	.word	0x2000002c

0800e5c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	e009      	b.n	800e5e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	33b0      	adds	r3, #176	@ 0xb0
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	683a      	ldr	r2, [r7, #0]
 800e5e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	32b0      	adds	r2, #176	@ 0xb0
 800e60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e60e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d101      	bne.n	800e61a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e616:	2303      	movs	r3, #3
 800e618:	e008      	b.n	800e62c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	371c      	adds	r7, #28
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	32b0      	adds	r2, #176	@ 0xb0
 800e64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d101      	bne.n	800e65c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e658:	2303      	movs	r3, #3
 800e65a:	e004      	b.n	800e666 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3714      	adds	r7, #20
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
	...

0800e674 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	32b0      	adds	r2, #176	@ 0xb0
 800e686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	32b0      	adds	r2, #176	@ 0xb0
 800e696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e018      	b.n	800e6d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7c1b      	ldrb	r3, [r3, #16]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10a      	bne.n	800e6c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800e6dc <USBD_CDC_ReceivePacket+0x68>)
 800e6ac:	7819      	ldrb	r1, [r3, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e6b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fab7 	bl	800ec2c <USBD_LL_PrepareReceive>
 800e6be:	e008      	b.n	800e6d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6c0:	4b06      	ldr	r3, [pc, #24]	@ (800e6dc <USBD_CDC_ReceivePacket+0x68>)
 800e6c2:	7819      	ldrb	r1, [r3, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e6ca:	2340      	movs	r3, #64	@ 0x40
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 faad 	bl	800ec2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	200000b4 	.word	0x200000b4

0800e6e0 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4905      	ldr	r1, [pc, #20]	@ (800e6fc <TEMPLATE_Init+0x1c>)
 800e6e8:	4805      	ldr	r0, [pc, #20]	@ (800e700 <TEMPLATE_Init+0x20>)
 800e6ea:	f7ff ff83 	bl	800e5f4 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e6ee:	4905      	ldr	r1, [pc, #20]	@ (800e704 <TEMPLATE_Init+0x24>)
 800e6f0:	4803      	ldr	r0, [pc, #12]	@ (800e700 <TEMPLATE_Init+0x20>)
 800e6f2:	f7ff ffa1 	bl	800e638 <USBD_CDC_SetRxBuffer>
      return (0);
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20000d3c 	.word	0x20000d3c
 800e700:	200007b4 	.word	0x200007b4
 800e704:	20000b3c 	.word	0x20000b3c

0800e708 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e708:	b480      	push	{r7}
 800e70a:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	4603      	mov	r3, r0
 800e720:	6039      	str	r1, [r7, #0]
 800e722:	71fb      	strb	r3, [r7, #7]
 800e724:	4613      	mov	r3, r2
 800e726:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	2b23      	cmp	r3, #35	@ 0x23
 800e72c:	f200 8098 	bhi.w	800e860 <TEMPLATE_Control+0x148>
 800e730:	a201      	add	r2, pc, #4	@ (adr r2, 800e738 <TEMPLATE_Control+0x20>)
 800e732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e736:	bf00      	nop
 800e738:	0800e861 	.word	0x0800e861
 800e73c:	0800e861 	.word	0x0800e861
 800e740:	0800e861 	.word	0x0800e861
 800e744:	0800e861 	.word	0x0800e861
 800e748:	0800e861 	.word	0x0800e861
 800e74c:	0800e861 	.word	0x0800e861
 800e750:	0800e861 	.word	0x0800e861
 800e754:	0800e861 	.word	0x0800e861
 800e758:	0800e861 	.word	0x0800e861
 800e75c:	0800e861 	.word	0x0800e861
 800e760:	0800e861 	.word	0x0800e861
 800e764:	0800e861 	.word	0x0800e861
 800e768:	0800e861 	.word	0x0800e861
 800e76c:	0800e861 	.word	0x0800e861
 800e770:	0800e861 	.word	0x0800e861
 800e774:	0800e861 	.word	0x0800e861
 800e778:	0800e861 	.word	0x0800e861
 800e77c:	0800e861 	.word	0x0800e861
 800e780:	0800e861 	.word	0x0800e861
 800e784:	0800e861 	.word	0x0800e861
 800e788:	0800e861 	.word	0x0800e861
 800e78c:	0800e861 	.word	0x0800e861
 800e790:	0800e861 	.word	0x0800e861
 800e794:	0800e861 	.word	0x0800e861
 800e798:	0800e861 	.word	0x0800e861
 800e79c:	0800e861 	.word	0x0800e861
 800e7a0:	0800e861 	.word	0x0800e861
 800e7a4:	0800e861 	.word	0x0800e861
 800e7a8:	0800e861 	.word	0x0800e861
 800e7ac:	0800e861 	.word	0x0800e861
 800e7b0:	0800e861 	.word	0x0800e861
 800e7b4:	0800e861 	.word	0x0800e861
 800e7b8:	0800e7c9 	.word	0x0800e7c9
 800e7bc:	0800e80d 	.word	0x0800e80d
 800e7c0:	0800e861 	.word	0x0800e861
 800e7c4:	0800e861 	.word	0x0800e861
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	021b      	lsls	r3, r3, #8
 800e7d6:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	3302      	adds	r3, #2
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e7e0:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	3303      	adds	r3, #3
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	061b      	lsls	r3, r3, #24
 800e7ea:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4b20      	ldr	r3, [pc, #128]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e7f0:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	791a      	ldrb	r2, [r3, #4]
 800e7f6:	4b1e      	ldr	r3, [pc, #120]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e7f8:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	795a      	ldrb	r2, [r3, #5]
 800e7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e800:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	799a      	ldrb	r2, [r3, #6]
 800e806:	4b1a      	ldr	r3, [pc, #104]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e808:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e80a:	e02a      	b.n	800e862 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e80c:	4b18      	ldr	r3, [pc, #96]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	b2da      	uxtb	r2, r3
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e816:	4b16      	ldr	r3, [pc, #88]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	0a1a      	lsrs	r2, r3, #8
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	3301      	adds	r3, #1
 800e820:	b2d2      	uxtb	r2, r2
 800e822:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e824:	4b12      	ldr	r3, [pc, #72]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	0c1a      	lsrs	r2, r3, #16
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	3302      	adds	r3, #2
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e832:	4b0f      	ldr	r3, [pc, #60]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	0e1a      	lsrs	r2, r3, #24
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	3303      	adds	r3, #3
 800e83c:	b2d2      	uxtb	r2, r2
 800e83e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	3304      	adds	r3, #4
 800e844:	4a0a      	ldr	r2, [pc, #40]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e846:	7912      	ldrb	r2, [r2, #4]
 800e848:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	3305      	adds	r3, #5
 800e84e:	4a08      	ldr	r2, [pc, #32]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e850:	7952      	ldrb	r2, [r2, #5]
 800e852:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	3306      	adds	r3, #6
 800e858:	4a05      	ldr	r2, [pc, #20]	@ (800e870 <TEMPLATE_Control+0x158>)
 800e85a:	7992      	ldrb	r2, [r2, #6]
 800e85c:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e85e:	e000      	b.n	800e862 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e860:	bf00      	nop
  }

  return (0);
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	200000cc 	.word	0x200000cc

0800e874 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
    // Don't overflow buffer
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	4b17      	ldr	r3, [pc, #92]	@ (800e8e0 <TEMPLATE_Receive+0x6c>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4413      	add	r3, r2
 800e888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e88c:	d215      	bcs.n	800e8ba <TEMPLATE_Receive+0x46>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800e88e:	4b14      	ldr	r3, [pc, #80]	@ (800e8e0 <TEMPLATE_Receive+0x6c>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a14      	ldr	r2, [pc, #80]	@ (800e8e4 <TEMPLATE_Receive+0x70>)
 800e894:	1898      	adds	r0, r3, r2
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	6879      	ldr	r1, [r7, #4]
 800e89e:	f001 ff40 	bl	8010722 <memcpy>
        usb_rx_index += *Len;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800e8e0 <TEMPLATE_Receive+0x6c>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	4a0c      	ldr	r2, [pc, #48]	@ (800e8e0 <TEMPLATE_Receive+0x6c>)
 800e8ae:	6013      	str	r3, [r2, #0]
        return USBD_FAIL;
    }

    // Optional: check for custom end-of-transmission pattern
    // For now, just simulate end if host sends less than 64 bytes
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b3f      	cmp	r3, #63	@ 0x3f
 800e8b6:	d80b      	bhi.n	800e8d0 <TEMPLATE_Receive+0x5c>
 800e8b8:	e007      	b.n	800e8ca <TEMPLATE_Receive+0x56>
        usb_rx_index = 0;
 800e8ba:	4b09      	ldr	r3, [pc, #36]	@ (800e8e0 <TEMPLATE_Receive+0x6c>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800e8c0:	4809      	ldr	r0, [pc, #36]	@ (800e8e8 <TEMPLATE_Receive+0x74>)
 800e8c2:	f7f1 ff99 	bl	80007f8 <log_error>
        return USBD_FAIL;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	e006      	b.n	800e8d8 <TEMPLATE_Receive+0x64>
    {
        usb_rx_complete = true;
 800e8ca:	4b08      	ldr	r3, [pc, #32]	@ (800e8ec <TEMPLATE_Receive+0x78>)
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e8d0:	4807      	ldr	r0, [pc, #28]	@ (800e8f0 <TEMPLATE_Receive+0x7c>)
 800e8d2:	f7ff fecf 	bl	800e674 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	20010f3c 	.word	0x20010f3c
 800e8e4:	20000f3c 	.word	0x20000f3c
 800e8e8:	08011750 	.word	0x08011750
 800e8ec:	20010f40 	.word	0x20010f40
 800e8f0:	200007b4 	.word	0x200007b4

0800e8f4 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	4613      	mov	r3, r2
 800e900:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e902:	2300      	movs	r3, #0

}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f000 faa5 	bl	800ee76 <USBD_LL_SetupStage>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	460b      	mov	r3, r1
 800e93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e946:	78fa      	ldrb	r2, [r7, #3]
 800e948:	6879      	ldr	r1, [r7, #4]
 800e94a:	4613      	mov	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4413      	add	r3, r2
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	440b      	add	r3, r1
 800e954:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	78fb      	ldrb	r3, [r7, #3]
 800e95c:	4619      	mov	r1, r3
 800e95e:	f000 fadf 	bl	800ef20 <USBD_LL_DataOutStage>
}
 800e962:	bf00      	nop
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b082      	sub	sp, #8
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	460b      	mov	r3, r1
 800e974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e97c:	78fa      	ldrb	r2, [r7, #3]
 800e97e:	6879      	ldr	r1, [r7, #4]
 800e980:	4613      	mov	r3, r2
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	4413      	add	r3, r2
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	440b      	add	r3, r1
 800e98a:	3328      	adds	r3, #40	@ 0x28
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	78fb      	ldrb	r3, [r7, #3]
 800e990:	4619      	mov	r1, r3
 800e992:	f000 fb78 	bl	800f086 <USBD_LL_DataInStage>
}
 800e996:	bf00      	nop
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f000 fc7e 	bl	800f2ae <USBD_LL_SOF>
}
 800e9b2:	bf00      	nop
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b084      	sub	sp, #16
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	79db      	ldrb	r3, [r3, #7]
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d001      	beq.n	800e9d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e9ce:	f7f2 fcb7 	bl	8001340 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e9d8:	7bfa      	ldrb	r2, [r7, #15]
 800e9da:	4611      	mov	r1, r2
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 fc56 	bl	800f28e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 fbfe 	bl	800f1ea <USBD_LL_Reset>
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a19      	ldr	r2, [pc, #100]	@ (800ea68 <USBD_LL_Init+0x70>)
 800ea04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea0e:	2340      	movs	r3, #64	@ 0x40
 800ea10:	2200      	movs	r2, #0
 800ea12:	2100      	movs	r1, #0
 800ea14:	f7f5 feee 	bl	80047f4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea1e:	2380      	movs	r3, #128	@ 0x80
 800ea20:	2200      	movs	r2, #0
 800ea22:	2180      	movs	r1, #128	@ 0x80
 800ea24:	f7f5 fee6 	bl	80047f4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea2e:	23c0      	movs	r3, #192	@ 0xc0
 800ea30:	2200      	movs	r2, #0
 800ea32:	2181      	movs	r1, #129	@ 0x81
 800ea34:	f7f5 fede 	bl	80047f4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea42:	2200      	movs	r2, #0
 800ea44:	2101      	movs	r1, #1
 800ea46:	f7f5 fed5 	bl	80047f4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea50:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800ea54:	2200      	movs	r2, #0
 800ea56:	2182      	movs	r1, #130	@ 0x82
 800ea58:	f7f5 fecc 	bl	80047f4 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	200004d0 	.word	0x200004d0

0800ea6c <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f4 fb9e 	bl	80031bc <HAL_PCD_Start>
 800ea80:	4603      	mov	r3, r0
 800ea82:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 f916 	bl	800ecb8 <USBD_Get_USB_Status>
 800ea8c:	4603      	mov	r3, r0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	4608      	mov	r0, r1
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	70fb      	strb	r3, [r7, #3]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70bb      	strb	r3, [r7, #2]
 800eaac:	4613      	mov	r3, r2
 800eaae:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eab6:	78bb      	ldrb	r3, [r7, #2]
 800eab8:	883a      	ldrh	r2, [r7, #0]
 800eaba:	78f9      	ldrb	r1, [r7, #3]
 800eabc:	f7f4 fccd 	bl	800345a <HAL_PCD_EP_Open>
 800eac0:	4603      	mov	r3, r0
 800eac2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 f8f6 	bl	800ecb8 <USBD_Get_USB_Status>
 800eacc:	4603      	mov	r3, r0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b084      	sub	sp, #16
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
 800eade:	460b      	mov	r3, r1
 800eae0:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eae8:	78fa      	ldrb	r2, [r7, #3]
 800eaea:	4611      	mov	r1, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f4 fd15 	bl	800351c <HAL_PCD_EP_Close>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eaf6:	7bfb      	ldrb	r3, [r7, #15]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 f8dd 	bl	800ecb8 <USBD_Get_USB_Status>
 800eafe:	4603      	mov	r3, r0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb1a:	78fa      	ldrb	r2, [r7, #3]
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7f4 fdc8 	bl	80036b4 <HAL_PCD_EP_SetStall>
 800eb24:	4603      	mov	r3, r0
 800eb26:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 f8c4 	bl	800ecb8 <USBD_Get_USB_Status>
 800eb30:	4603      	mov	r3, r0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b084      	sub	sp, #16
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	4611      	mov	r1, r2
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f4 fe03 	bl	800375c <HAL_PCD_EP_ClrStall>
 800eb56:	4603      	mov	r3, r0
 800eb58:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 f8ab 	bl	800ecb8 <USBD_Get_USB_Status>
 800eb62:	4603      	mov	r3, r0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	460b      	mov	r3, r1
 800eb76:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb7e:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800eb80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	da0b      	bge.n	800eba0 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb88:	78fb      	ldrb	r3, [r7, #3]
 800eb8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eb8e:	68f9      	ldr	r1, [r7, #12]
 800eb90:	4613      	mov	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	440b      	add	r3, r1
 800eb9a:	3316      	adds	r3, #22
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	e00b      	b.n	800ebb8 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eba6:	68f9      	ldr	r1, [r7, #12]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	00db      	lsls	r3, r3, #3
 800ebb0:	440b      	add	r3, r1
 800ebb2:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800ebb6:	781b      	ldrb	r3, [r3, #0]
      }
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebd6:	78fa      	ldrb	r2, [r7, #3]
 800ebd8:	4611      	mov	r1, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f4 fc19 	bl	8003412 <HAL_PCD_SetAddress>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 f866 	bl	800ecb8 <USBD_Get_USB_Status>
 800ebec:	4603      	mov	r3, r0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b086      	sub	sp, #24
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	60f8      	str	r0, [r7, #12]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
 800ec02:	460b      	mov	r3, r1
 800ec04:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec0c:	7af9      	ldrb	r1, [r7, #11]
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	f7f4 fd17 	bl	8003644 <HAL_PCD_EP_Transmit>
 800ec16:	4603      	mov	r3, r0
 800ec18:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ec1a:	7dfb      	ldrb	r3, [r7, #23]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 f84b 	bl	800ecb8 <USBD_Get_USB_Status>
 800ec22:	4603      	mov	r3, r0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3718      	adds	r7, #24
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	607a      	str	r2, [r7, #4]
 800ec36:	603b      	str	r3, [r7, #0]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec42:	7af9      	ldrb	r1, [r7, #11]
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	f7f4 fcb2 	bl	80035b0 <HAL_PCD_EP_Receive>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f000 f830 	bl	800ecb8 <USBD_Get_USB_Status>
 800ec58:	4603      	mov	r3, r0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b082      	sub	sp, #8
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec74:	78fa      	ldrb	r2, [r7, #3]
 800ec76:	4611      	mov	r1, r2
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7f4 fccb 	bl	8003614 <HAL_PCD_EP_GetRxCount>
 800ec7e:	4603      	mov	r3, r0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800ec90:	4b03      	ldr	r3, [pc, #12]	@ (800eca0 <USBD_static_malloc+0x18>)
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	20010f44 	.word	0x20010f44

0800eca4 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	2b03      	cmp	r3, #3
 800ecca:	d817      	bhi.n	800ecfc <USBD_Get_USB_Status+0x44>
 800eccc:	a201      	add	r2, pc, #4	@ (adr r2, 800ecd4 <USBD_Get_USB_Status+0x1c>)
 800ecce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd2:	bf00      	nop
 800ecd4:	0800ece5 	.word	0x0800ece5
 800ecd8:	0800eceb 	.word	0x0800eceb
 800ecdc:	0800ecf1 	.word	0x0800ecf1
 800ece0:	0800ecf7 	.word	0x0800ecf7
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800ece4:	2300      	movs	r3, #0
 800ece6:	73fb      	strb	r3, [r7, #15]
             break;
 800ece8:	e00b      	b.n	800ed02 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800ecea:	2303      	movs	r3, #3
 800ecec:	73fb      	strb	r3, [r7, #15]
             break;
 800ecee:	e008      	b.n	800ed02 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	73fb      	strb	r3, [r7, #15]
             break;
 800ecf4:	e005      	b.n	800ed02 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	73fb      	strb	r3, [r7, #15]
             break;
 800ecfa:	e002      	b.n	800ed02 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	73fb      	strb	r3, [r7, #15]
             break;
 800ed00:	bf00      	nop
      }
      return usb_status;
 800ed02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3714      	adds	r7, #20
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed24:	2303      	movs	r3, #3
 800ed26:	e01f      	b.n	800ed68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d003      	beq.n	800ed4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2201      	movs	r2, #1
 800ed52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	79fa      	ldrb	r2, [r7, #7]
 800ed5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7ff fe4b 	bl	800e9f8 <USBD_LL_Init>
 800ed62:	4603      	mov	r3, r0
 800ed64:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed84:	2303      	movs	r3, #3
 800ed86:	e025      	b.n	800edd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	32ae      	adds	r2, #174	@ 0xae
 800ed9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00f      	beq.n	800edc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	32ae      	adds	r2, #174	@ 0xae
 800edae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb4:	f107 020e 	add.w	r2, r7, #14
 800edb8:	4610      	mov	r0, r2
 800edba:	4798      	blx	r3
 800edbc:	4602      	mov	r2, r0
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800edd2:	2300      	movs	r3, #0
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff fe41 	bl	800ea6c <USBD_LL_Start>
 800edea:	4603      	mov	r3, r0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800edfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	460b      	mov	r3, r1
 800ee14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee16:	2300      	movs	r3, #0
 800ee18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d009      	beq.n	800ee38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	78fa      	ldrb	r2, [r7, #3]
 800ee2e:	4611      	mov	r1, r2
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	4798      	blx	r3
 800ee34:	4603      	mov	r3, r0
 800ee36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b084      	sub	sp, #16
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	78fa      	ldrb	r2, [r7, #3]
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	4798      	blx	r3
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b084      	sub	sp, #16
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f001 f846 	bl	800ff1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eeaa:	f003 031f 	and.w	r3, r3, #31
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	d01a      	beq.n	800eee8 <USBD_LL_SetupStage+0x72>
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d822      	bhi.n	800eefc <USBD_LL_SetupStage+0x86>
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <USBD_LL_SetupStage+0x4a>
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d00a      	beq.n	800eed4 <USBD_LL_SetupStage+0x5e>
 800eebe:	e01d      	b.n	800eefc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fa9d 	bl	800f408 <USBD_StdDevReq>
 800eece:	4603      	mov	r3, r0
 800eed0:	73fb      	strb	r3, [r7, #15]
      break;
 800eed2:	e020      	b.n	800ef16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fb05 	bl	800f4ec <USBD_StdItfReq>
 800eee2:	4603      	mov	r3, r0
 800eee4:	73fb      	strb	r3, [r7, #15]
      break;
 800eee6:	e016      	b.n	800ef16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eeee:	4619      	mov	r1, r3
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 fb67 	bl	800f5c4 <USBD_StdEPReq>
 800eef6:	4603      	mov	r3, r0
 800eef8:	73fb      	strb	r3, [r7, #15]
      break;
 800eefa:	e00c      	b.n	800ef16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	4619      	mov	r1, r3
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7ff fdfc 	bl	800eb08 <USBD_LL_StallEP>
 800ef10:	4603      	mov	r3, r0
 800ef12:	73fb      	strb	r3, [r7, #15]
      break;
 800ef14:	bf00      	nop
  }

  return ret;
 800ef16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	607a      	str	r2, [r7, #4]
 800ef2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ef32:	7afb      	ldrb	r3, [r7, #11]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d16e      	bne.n	800f016 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ef3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	f040 8098 	bne.w	800f07c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	689a      	ldr	r2, [r3, #8]
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d913      	bls.n	800ef80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	689a      	ldr	r2, [r3, #8]
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	1ad2      	subs	r2, r2, r3
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	68da      	ldr	r2, [r3, #12]
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	bf28      	it	cs
 800ef72:	4613      	movcs	r3, r2
 800ef74:	461a      	mov	r2, r3
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f001 f9cf 	bl	801031c <USBD_CtlContinueRx>
 800ef7e:	e07d      	b.n	800f07c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef86:	f003 031f 	and.w	r3, r3, #31
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d014      	beq.n	800efb8 <USBD_LL_DataOutStage+0x98>
 800ef8e:	2b02      	cmp	r3, #2
 800ef90:	d81d      	bhi.n	800efce <USBD_LL_DataOutStage+0xae>
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d002      	beq.n	800ef9c <USBD_LL_DataOutStage+0x7c>
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d003      	beq.n	800efa2 <USBD_LL_DataOutStage+0x82>
 800ef9a:	e018      	b.n	800efce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	75bb      	strb	r3, [r7, #22]
            break;
 800efa0:	e018      	b.n	800efd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	4619      	mov	r1, r3
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f000 f99e 	bl	800f2ee <USBD_CoreFindIF>
 800efb2:	4603      	mov	r3, r0
 800efb4:	75bb      	strb	r3, [r7, #22]
            break;
 800efb6:	e00d      	b.n	800efd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	4619      	mov	r1, r3
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 f9a0 	bl	800f308 <USBD_CoreFindEP>
 800efc8:	4603      	mov	r3, r0
 800efca:	75bb      	strb	r3, [r7, #22]
            break;
 800efcc:	e002      	b.n	800efd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800efce:	2300      	movs	r3, #0
 800efd0:	75bb      	strb	r3, [r7, #22]
            break;
 800efd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800efd4:	7dbb      	ldrb	r3, [r7, #22]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d119      	bne.n	800f00e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d113      	bne.n	800f00e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800efe6:	7dba      	ldrb	r2, [r7, #22]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	32ae      	adds	r2, #174	@ 0xae
 800efec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00b      	beq.n	800f00e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eff6:	7dba      	ldrb	r2, [r7, #22]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800effe:	7dba      	ldrb	r2, [r7, #22]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	32ae      	adds	r2, #174	@ 0xae
 800f004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f001 f995 	bl	801033e <USBD_CtlSendStatus>
 800f014:	e032      	b.n	800f07c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f016:	7afb      	ldrb	r3, [r7, #11]
 800f018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	4619      	mov	r1, r3
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f000 f971 	bl	800f308 <USBD_CoreFindEP>
 800f026:	4603      	mov	r3, r0
 800f028:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f02a:	7dbb      	ldrb	r3, [r7, #22]
 800f02c:	2bff      	cmp	r3, #255	@ 0xff
 800f02e:	d025      	beq.n	800f07c <USBD_LL_DataOutStage+0x15c>
 800f030:	7dbb      	ldrb	r3, [r7, #22]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d122      	bne.n	800f07c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	2b03      	cmp	r3, #3
 800f040:	d117      	bne.n	800f072 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f042:	7dba      	ldrb	r2, [r7, #22]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	32ae      	adds	r2, #174	@ 0xae
 800f048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00f      	beq.n	800f072 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f052:	7dba      	ldrb	r2, [r7, #22]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f05a:	7dba      	ldrb	r2, [r7, #22]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	32ae      	adds	r2, #174	@ 0xae
 800f060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	7afa      	ldrb	r2, [r7, #11]
 800f068:	4611      	mov	r1, r2
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	4798      	blx	r3
 800f06e:	4603      	mov	r3, r0
 800f070:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	e000      	b.n	800f07e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3718      	adds	r7, #24
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b086      	sub	sp, #24
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	60f8      	str	r0, [r7, #12]
 800f08e:	460b      	mov	r3, r1
 800f090:	607a      	str	r2, [r7, #4]
 800f092:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f094:	7afb      	ldrb	r3, [r7, #11]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d16f      	bne.n	800f17a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3314      	adds	r3, #20
 800f09e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	d15a      	bne.n	800f160 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	689a      	ldr	r2, [r3, #8]
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d914      	bls.n	800f0e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	689a      	ldr	r2, [r3, #8]
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	1ad2      	subs	r2, r2, r3
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6879      	ldr	r1, [r7, #4]
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f001 f8f7 	bl	80102c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f7ff fda7 	bl	800ec2c <USBD_LL_PrepareReceive>
 800f0de:	e03f      	b.n	800f160 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	68da      	ldr	r2, [r3, #12]
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d11c      	bne.n	800f126 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d316      	bcc.n	800f126 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f102:	429a      	cmp	r2, r3
 800f104:	d20f      	bcs.n	800f126 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f106:	2200      	movs	r2, #0
 800f108:	2100      	movs	r1, #0
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f001 f8d8 	bl	80102c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f118:	2300      	movs	r3, #0
 800f11a:	2200      	movs	r2, #0
 800f11c:	2100      	movs	r1, #0
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff fd84 	bl	800ec2c <USBD_LL_PrepareReceive>
 800f124:	e01c      	b.n	800f160 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	2b03      	cmp	r3, #3
 800f130:	d10f      	bne.n	800f152 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d009      	beq.n	800f152 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f152:	2180      	movs	r1, #128	@ 0x80
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f7ff fcd7 	bl	800eb08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f001 f902 	bl	8010364 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d03a      	beq.n	800f1e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f7ff fe42 	bl	800edf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f178:	e032      	b.n	800f1e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f17a:	7afb      	ldrb	r3, [r7, #11]
 800f17c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f180:	b2db      	uxtb	r3, r3
 800f182:	4619      	mov	r1, r3
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f000 f8bf 	bl	800f308 <USBD_CoreFindEP>
 800f18a:	4603      	mov	r3, r0
 800f18c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f18e:	7dfb      	ldrb	r3, [r7, #23]
 800f190:	2bff      	cmp	r3, #255	@ 0xff
 800f192:	d025      	beq.n	800f1e0 <USBD_LL_DataInStage+0x15a>
 800f194:	7dfb      	ldrb	r3, [r7, #23]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d122      	bne.n	800f1e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d11c      	bne.n	800f1e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f1a6:	7dfa      	ldrb	r2, [r7, #23]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	32ae      	adds	r2, #174	@ 0xae
 800f1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d014      	beq.n	800f1e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f1b6:	7dfa      	ldrb	r2, [r7, #23]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f1be:	7dfa      	ldrb	r2, [r7, #23]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	32ae      	adds	r2, #174	@ 0xae
 800f1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	7afa      	ldrb	r2, [r7, #11]
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	4798      	blx	r3
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f1d6:	7dbb      	ldrb	r3, [r7, #22]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d001      	beq.n	800f1e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f1dc:	7dbb      	ldrb	r3, [r7, #22]
 800f1de:	e000      	b.n	800f1e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3718      	adds	r7, #24
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b084      	sub	sp, #16
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f222:	2b00      	cmp	r3, #0
 800f224:	d014      	beq.n	800f250 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00e      	beq.n	800f250 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	6852      	ldr	r2, [r2, #4]
 800f23e:	b2d2      	uxtb	r2, r2
 800f240:	4611      	mov	r1, r2
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	4798      	blx	r3
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f24c:	2303      	movs	r3, #3
 800f24e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f250:	2340      	movs	r3, #64	@ 0x40
 800f252:	2200      	movs	r2, #0
 800f254:	2100      	movs	r1, #0
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff fc1d 	bl	800ea96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2240      	movs	r2, #64	@ 0x40
 800f268:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f26c:	2340      	movs	r3, #64	@ 0x40
 800f26e:	2200      	movs	r2, #0
 800f270:	2180      	movs	r1, #128	@ 0x80
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff fc0f 	bl	800ea96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2201      	movs	r2, #1
 800f27c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2240      	movs	r2, #64	@ 0x40
 800f282:	621a      	str	r2, [r3, #32]

  return ret;
 800f284:	7bfb      	ldrb	r3, [r7, #15]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f28e:	b480      	push	{r7}
 800f290:	b083      	sub	sp, #12
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	460b      	mov	r3, r1
 800f298:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	78fa      	ldrb	r2, [r7, #3]
 800f29e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	2b03      	cmp	r3, #3
 800f2c0:	d110      	bne.n	800f2e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00b      	beq.n	800f2e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2d2:	69db      	ldr	r3, [r3, #28]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d005      	beq.n	800f2e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2de:	69db      	ldr	r3, [r3, #28]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f2e4:	2300      	movs	r3, #0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	460b      	mov	r3, r1
 800f312:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f314:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b086      	sub	sp, #24
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	460b      	mov	r3, r1
 800f32c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	885b      	ldrh	r3, [r3, #2]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	7812      	ldrb	r2, [r2, #0]
 800f344:	4293      	cmp	r3, r2
 800f346:	d91f      	bls.n	800f388 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f34e:	e013      	b.n	800f378 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f350:	f107 030a 	add.w	r3, r7, #10
 800f354:	4619      	mov	r1, r3
 800f356:	6978      	ldr	r0, [r7, #20]
 800f358:	f000 f81b 	bl	800f392 <USBD_GetNextDesc>
 800f35c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	785b      	ldrb	r3, [r3, #1]
 800f362:	2b05      	cmp	r3, #5
 800f364:	d108      	bne.n	800f378 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	789b      	ldrb	r3, [r3, #2]
 800f36e:	78fa      	ldrb	r2, [r7, #3]
 800f370:	429a      	cmp	r2, r3
 800f372:	d008      	beq.n	800f386 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f374:	2300      	movs	r3, #0
 800f376:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	885b      	ldrh	r3, [r3, #2]
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	897b      	ldrh	r3, [r7, #10]
 800f380:	429a      	cmp	r2, r3
 800f382:	d8e5      	bhi.n	800f350 <USBD_GetEpDesc+0x2e>
 800f384:	e000      	b.n	800f388 <USBD_GetEpDesc+0x66>
          break;
 800f386:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f388:	693b      	ldr	r3, [r7, #16]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f392:	b480      	push	{r7}
 800f394:	b085      	sub	sp, #20
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	7812      	ldrb	r2, [r2, #0]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	b087      	sub	sp, #28
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f3e8:	8a3b      	ldrh	r3, [r7, #16]
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	b21a      	sxth	r2, r3
 800f3ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	b21b      	sxth	r3, r3
 800f3f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	371c      	adds	r7, #28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
	...

0800f408 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f412:	2300      	movs	r3, #0
 800f414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f41e:	2b40      	cmp	r3, #64	@ 0x40
 800f420:	d005      	beq.n	800f42e <USBD_StdDevReq+0x26>
 800f422:	2b40      	cmp	r3, #64	@ 0x40
 800f424:	d857      	bhi.n	800f4d6 <USBD_StdDevReq+0xce>
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00f      	beq.n	800f44a <USBD_StdDevReq+0x42>
 800f42a:	2b20      	cmp	r3, #32
 800f42c:	d153      	bne.n	800f4d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	32ae      	adds	r2, #174	@ 0xae
 800f438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	4798      	blx	r3
 800f444:	4603      	mov	r3, r0
 800f446:	73fb      	strb	r3, [r7, #15]
      break;
 800f448:	e04a      	b.n	800f4e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	785b      	ldrb	r3, [r3, #1]
 800f44e:	2b09      	cmp	r3, #9
 800f450:	d83b      	bhi.n	800f4ca <USBD_StdDevReq+0xc2>
 800f452:	a201      	add	r2, pc, #4	@ (adr r2, 800f458 <USBD_StdDevReq+0x50>)
 800f454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f458:	0800f4ad 	.word	0x0800f4ad
 800f45c:	0800f4c1 	.word	0x0800f4c1
 800f460:	0800f4cb 	.word	0x0800f4cb
 800f464:	0800f4b7 	.word	0x0800f4b7
 800f468:	0800f4cb 	.word	0x0800f4cb
 800f46c:	0800f48b 	.word	0x0800f48b
 800f470:	0800f481 	.word	0x0800f481
 800f474:	0800f4cb 	.word	0x0800f4cb
 800f478:	0800f4a3 	.word	0x0800f4a3
 800f47c:	0800f495 	.word	0x0800f495
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f480:	6839      	ldr	r1, [r7, #0]
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fa3c 	bl	800f900 <USBD_GetDescriptor>
          break;
 800f488:	e024      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fba1 	bl	800fbd4 <USBD_SetAddress>
          break;
 800f492:	e01f      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fbe0 	bl	800fc5c <USBD_SetConfig>
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]
          break;
 800f4a0:	e018      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 fc83 	bl	800fdb0 <USBD_GetConfig>
          break;
 800f4aa:	e013      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fcb4 	bl	800fe1c <USBD_GetStatus>
          break;
 800f4b4:	e00e      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fce3 	bl	800fe84 <USBD_SetFeature>
          break;
 800f4be:	e009      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 fd07 	bl	800fed6 <USBD_ClrFeature>
          break;
 800f4c8:	e004      	b.n	800f4d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fd5e 	bl	800ff8e <USBD_CtlError>
          break;
 800f4d2:	bf00      	nop
      }
      break;
 800f4d4:	e004      	b.n	800f4e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fd58 	bl	800ff8e <USBD_CtlError>
      break;
 800f4de:	bf00      	nop
  }

  return ret;
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop

0800f4ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f502:	2b40      	cmp	r3, #64	@ 0x40
 800f504:	d005      	beq.n	800f512 <USBD_StdItfReq+0x26>
 800f506:	2b40      	cmp	r3, #64	@ 0x40
 800f508:	d852      	bhi.n	800f5b0 <USBD_StdItfReq+0xc4>
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <USBD_StdItfReq+0x26>
 800f50e:	2b20      	cmp	r3, #32
 800f510:	d14e      	bne.n	800f5b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	3b01      	subs	r3, #1
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d840      	bhi.n	800f5a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	889b      	ldrh	r3, [r3, #4]
 800f524:	b2db      	uxtb	r3, r3
 800f526:	2b01      	cmp	r3, #1
 800f528:	d836      	bhi.n	800f598 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	889b      	ldrh	r3, [r3, #4]
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	4619      	mov	r1, r3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff fedb 	bl	800f2ee <USBD_CoreFindIF>
 800f538:	4603      	mov	r3, r0
 800f53a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f53c:	7bbb      	ldrb	r3, [r7, #14]
 800f53e:	2bff      	cmp	r3, #255	@ 0xff
 800f540:	d01d      	beq.n	800f57e <USBD_StdItfReq+0x92>
 800f542:	7bbb      	ldrb	r3, [r7, #14]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d11a      	bne.n	800f57e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f548:	7bba      	ldrb	r2, [r7, #14]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	32ae      	adds	r2, #174	@ 0xae
 800f54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00f      	beq.n	800f578 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f558:	7bba      	ldrb	r2, [r7, #14]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f560:	7bba      	ldrb	r2, [r7, #14]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	32ae      	adds	r2, #174	@ 0xae
 800f566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	4798      	blx	r3
 800f572:	4603      	mov	r3, r0
 800f574:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f576:	e004      	b.n	800f582 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f578:	2303      	movs	r3, #3
 800f57a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f57c:	e001      	b.n	800f582 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f57e:	2303      	movs	r3, #3
 800f580:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	88db      	ldrh	r3, [r3, #6]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d110      	bne.n	800f5ac <USBD_StdItfReq+0xc0>
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10d      	bne.n	800f5ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fed4 	bl	801033e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f596:	e009      	b.n	800f5ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fcf7 	bl	800ff8e <USBD_CtlError>
          break;
 800f5a0:	e004      	b.n	800f5ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 fcf2 	bl	800ff8e <USBD_CtlError>
          break;
 800f5aa:	e000      	b.n	800f5ae <USBD_StdItfReq+0xc2>
          break;
 800f5ac:	bf00      	nop
      }
      break;
 800f5ae:	e004      	b.n	800f5ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fceb 	bl	800ff8e <USBD_CtlError>
      break;
 800f5b8:	bf00      	nop
  }

  return ret;
 800f5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	889b      	ldrh	r3, [r3, #4]
 800f5d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5e0:	2b40      	cmp	r3, #64	@ 0x40
 800f5e2:	d007      	beq.n	800f5f4 <USBD_StdEPReq+0x30>
 800f5e4:	2b40      	cmp	r3, #64	@ 0x40
 800f5e6:	f200 817f 	bhi.w	800f8e8 <USBD_StdEPReq+0x324>
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d02a      	beq.n	800f644 <USBD_StdEPReq+0x80>
 800f5ee:	2b20      	cmp	r3, #32
 800f5f0:	f040 817a 	bne.w	800f8e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f5f4:	7bbb      	ldrb	r3, [r7, #14]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7ff fe85 	bl	800f308 <USBD_CoreFindEP>
 800f5fe:	4603      	mov	r3, r0
 800f600:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f602:	7b7b      	ldrb	r3, [r7, #13]
 800f604:	2bff      	cmp	r3, #255	@ 0xff
 800f606:	f000 8174 	beq.w	800f8f2 <USBD_StdEPReq+0x32e>
 800f60a:	7b7b      	ldrb	r3, [r7, #13]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f040 8170 	bne.w	800f8f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f612:	7b7a      	ldrb	r2, [r7, #13]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f61a:	7b7a      	ldrb	r2, [r7, #13]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	32ae      	adds	r2, #174	@ 0xae
 800f620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f000 8163 	beq.w	800f8f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f62c:	7b7a      	ldrb	r2, [r7, #13]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	32ae      	adds	r2, #174	@ 0xae
 800f632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	4798      	blx	r3
 800f63e:	4603      	mov	r3, r0
 800f640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f642:	e156      	b.n	800f8f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	785b      	ldrb	r3, [r3, #1]
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d008      	beq.n	800f65e <USBD_StdEPReq+0x9a>
 800f64c:	2b03      	cmp	r3, #3
 800f64e:	f300 8145 	bgt.w	800f8dc <USBD_StdEPReq+0x318>
 800f652:	2b00      	cmp	r3, #0
 800f654:	f000 809b 	beq.w	800f78e <USBD_StdEPReq+0x1ca>
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d03c      	beq.n	800f6d6 <USBD_StdEPReq+0x112>
 800f65c:	e13e      	b.n	800f8dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b02      	cmp	r3, #2
 800f668:	d002      	beq.n	800f670 <USBD_StdEPReq+0xac>
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d016      	beq.n	800f69c <USBD_StdEPReq+0xd8>
 800f66e:	e02c      	b.n	800f6ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f670:	7bbb      	ldrb	r3, [r7, #14]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00d      	beq.n	800f692 <USBD_StdEPReq+0xce>
 800f676:	7bbb      	ldrb	r3, [r7, #14]
 800f678:	2b80      	cmp	r3, #128	@ 0x80
 800f67a:	d00a      	beq.n	800f692 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f67c:	7bbb      	ldrb	r3, [r7, #14]
 800f67e:	4619      	mov	r1, r3
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7ff fa41 	bl	800eb08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f686:	2180      	movs	r1, #128	@ 0x80
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7ff fa3d 	bl	800eb08 <USBD_LL_StallEP>
 800f68e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f690:	e020      	b.n	800f6d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f692:	6839      	ldr	r1, [r7, #0]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 fc7a 	bl	800ff8e <USBD_CtlError>
              break;
 800f69a:	e01b      	b.n	800f6d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	885b      	ldrh	r3, [r3, #2]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10e      	bne.n	800f6c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f6a4:	7bbb      	ldrb	r3, [r7, #14]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00b      	beq.n	800f6c2 <USBD_StdEPReq+0xfe>
 800f6aa:	7bbb      	ldrb	r3, [r7, #14]
 800f6ac:	2b80      	cmp	r3, #128	@ 0x80
 800f6ae:	d008      	beq.n	800f6c2 <USBD_StdEPReq+0xfe>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	88db      	ldrh	r3, [r3, #6]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d104      	bne.n	800f6c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6b8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7ff fa23 	bl	800eb08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fe3b 	bl	801033e <USBD_CtlSendStatus>

              break;
 800f6c8:	e004      	b.n	800f6d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fc5e 	bl	800ff8e <USBD_CtlError>
              break;
 800f6d2:	bf00      	nop
          }
          break;
 800f6d4:	e107      	b.n	800f8e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d002      	beq.n	800f6e8 <USBD_StdEPReq+0x124>
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d016      	beq.n	800f714 <USBD_StdEPReq+0x150>
 800f6e6:	e04b      	b.n	800f780 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00d      	beq.n	800f70a <USBD_StdEPReq+0x146>
 800f6ee:	7bbb      	ldrb	r3, [r7, #14]
 800f6f0:	2b80      	cmp	r3, #128	@ 0x80
 800f6f2:	d00a      	beq.n	800f70a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6f4:	7bbb      	ldrb	r3, [r7, #14]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7ff fa05 	bl	800eb08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6fe:	2180      	movs	r1, #128	@ 0x80
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7ff fa01 	bl	800eb08 <USBD_LL_StallEP>
 800f706:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f708:	e040      	b.n	800f78c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fc3e 	bl	800ff8e <USBD_CtlError>
              break;
 800f712:	e03b      	b.n	800f78c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	885b      	ldrh	r3, [r3, #2]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d136      	bne.n	800f78a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f71c:	7bbb      	ldrb	r3, [r7, #14]
 800f71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f722:	2b00      	cmp	r3, #0
 800f724:	d004      	beq.n	800f730 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f726:	7bbb      	ldrb	r3, [r7, #14]
 800f728:	4619      	mov	r1, r3
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff fa05 	bl	800eb3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fe04 	bl	801033e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f736:	7bbb      	ldrb	r3, [r7, #14]
 800f738:	4619      	mov	r1, r3
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7ff fde4 	bl	800f308 <USBD_CoreFindEP>
 800f740:	4603      	mov	r3, r0
 800f742:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f744:	7b7b      	ldrb	r3, [r7, #13]
 800f746:	2bff      	cmp	r3, #255	@ 0xff
 800f748:	d01f      	beq.n	800f78a <USBD_StdEPReq+0x1c6>
 800f74a:	7b7b      	ldrb	r3, [r7, #13]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d11c      	bne.n	800f78a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f750:	7b7a      	ldrb	r2, [r7, #13]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f758:	7b7a      	ldrb	r2, [r7, #13]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	32ae      	adds	r2, #174	@ 0xae
 800f75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d010      	beq.n	800f78a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f768:	7b7a      	ldrb	r2, [r7, #13]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	32ae      	adds	r2, #174	@ 0xae
 800f76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	4798      	blx	r3
 800f77a:	4603      	mov	r3, r0
 800f77c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f77e:	e004      	b.n	800f78a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fc03 	bl	800ff8e <USBD_CtlError>
              break;
 800f788:	e000      	b.n	800f78c <USBD_StdEPReq+0x1c8>
              break;
 800f78a:	bf00      	nop
          }
          break;
 800f78c:	e0ab      	b.n	800f8e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b02      	cmp	r3, #2
 800f798:	d002      	beq.n	800f7a0 <USBD_StdEPReq+0x1dc>
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d032      	beq.n	800f804 <USBD_StdEPReq+0x240>
 800f79e:	e097      	b.n	800f8d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7a0:	7bbb      	ldrb	r3, [r7, #14]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d007      	beq.n	800f7b6 <USBD_StdEPReq+0x1f2>
 800f7a6:	7bbb      	ldrb	r3, [r7, #14]
 800f7a8:	2b80      	cmp	r3, #128	@ 0x80
 800f7aa:	d004      	beq.n	800f7b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f7ac:	6839      	ldr	r1, [r7, #0]
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fbed 	bl	800ff8e <USBD_CtlError>
                break;
 800f7b4:	e091      	b.n	800f8da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	da0b      	bge.n	800f7d6 <USBD_StdEPReq+0x212>
 800f7be:	7bbb      	ldrb	r3, [r7, #14]
 800f7c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	3310      	adds	r3, #16
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	e00b      	b.n	800f7ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7d6:	7bbb      	ldrb	r3, [r7, #14]
 800f7d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7dc:	4613      	mov	r3, r2
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fd44 	bl	801028a <USBD_CtlSendData>
              break;
 800f802:	e06a      	b.n	800f8da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	da11      	bge.n	800f830 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f80c:	7bbb      	ldrb	r3, [r7, #14]
 800f80e:	f003 020f 	and.w	r2, r3, #15
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	4613      	mov	r3, r2
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	440b      	add	r3, r1
 800f81e:	3324      	adds	r3, #36	@ 0x24
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d117      	bne.n	800f856 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fbb0 	bl	800ff8e <USBD_CtlError>
                  break;
 800f82e:	e054      	b.n	800f8da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f830:	7bbb      	ldrb	r3, [r7, #14]
 800f832:	f003 020f 	and.w	r2, r3, #15
 800f836:	6879      	ldr	r1, [r7, #4]
 800f838:	4613      	mov	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4413      	add	r3, r2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	440b      	add	r3, r1
 800f842:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d104      	bne.n	800f856 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fb9d 	bl	800ff8e <USBD_CtlError>
                  break;
 800f854:	e041      	b.n	800f8da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	da0b      	bge.n	800f876 <USBD_StdEPReq+0x2b2>
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f864:	4613      	mov	r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4413      	add	r3, r2
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	3310      	adds	r3, #16
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	4413      	add	r3, r2
 800f872:	3304      	adds	r3, #4
 800f874:	e00b      	b.n	800f88e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f876:	7bbb      	ldrb	r3, [r7, #14]
 800f878:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f87c:	4613      	mov	r3, r2
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	4413      	add	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	4413      	add	r3, r2
 800f88c:	3304      	adds	r3, #4
 800f88e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f890:	7bbb      	ldrb	r3, [r7, #14]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <USBD_StdEPReq+0x2d8>
 800f896:	7bbb      	ldrb	r3, [r7, #14]
 800f898:	2b80      	cmp	r3, #128	@ 0x80
 800f89a:	d103      	bne.n	800f8a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	e00e      	b.n	800f8c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff f95f 	bl	800eb6c <USBD_LL_IsStallEP>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d003      	beq.n	800f8bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	e002      	b.n	800f8c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fcde 	bl	801028a <USBD_CtlSendData>
              break;
 800f8ce:	e004      	b.n	800f8da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f8d0:	6839      	ldr	r1, [r7, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fb5b 	bl	800ff8e <USBD_CtlError>
              break;
 800f8d8:	bf00      	nop
          }
          break;
 800f8da:	e004      	b.n	800f8e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f8dc:	6839      	ldr	r1, [r7, #0]
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 fb55 	bl	800ff8e <USBD_CtlError>
          break;
 800f8e4:	bf00      	nop
      }
      break;
 800f8e6:	e005      	b.n	800f8f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f8e8:	6839      	ldr	r1, [r7, #0]
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fb4f 	bl	800ff8e <USBD_CtlError>
      break;
 800f8f0:	e000      	b.n	800f8f4 <USBD_StdEPReq+0x330>
      break;
 800f8f2:	bf00      	nop
  }

  return ret;
 800f8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
	...

0800f900 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f90a:	2300      	movs	r3, #0
 800f90c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f90e:	2300      	movs	r3, #0
 800f910:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f912:	2300      	movs	r3, #0
 800f914:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	885b      	ldrh	r3, [r3, #2]
 800f91a:	0a1b      	lsrs	r3, r3, #8
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	3b01      	subs	r3, #1
 800f920:	2b06      	cmp	r3, #6
 800f922:	f200 8128 	bhi.w	800fb76 <USBD_GetDescriptor+0x276>
 800f926:	a201      	add	r2, pc, #4	@ (adr r2, 800f92c <USBD_GetDescriptor+0x2c>)
 800f928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92c:	0800f949 	.word	0x0800f949
 800f930:	0800f961 	.word	0x0800f961
 800f934:	0800f9a1 	.word	0x0800f9a1
 800f938:	0800fb77 	.word	0x0800fb77
 800f93c:	0800fb77 	.word	0x0800fb77
 800f940:	0800fb17 	.word	0x0800fb17
 800f944:	0800fb43 	.word	0x0800fb43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	7c12      	ldrb	r2, [r2, #16]
 800f954:	f107 0108 	add.w	r1, r7, #8
 800f958:	4610      	mov	r0, r2
 800f95a:	4798      	blx	r3
 800f95c:	60f8      	str	r0, [r7, #12]
      break;
 800f95e:	e112      	b.n	800fb86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7c1b      	ldrb	r3, [r3, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d10d      	bne.n	800f984 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f970:	f107 0208 	add.w	r2, r7, #8
 800f974:	4610      	mov	r0, r2
 800f976:	4798      	blx	r3
 800f978:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	3301      	adds	r3, #1
 800f97e:	2202      	movs	r2, #2
 800f980:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f982:	e100      	b.n	800fb86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f98c:	f107 0208 	add.w	r2, r7, #8
 800f990:	4610      	mov	r0, r2
 800f992:	4798      	blx	r3
 800f994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	3301      	adds	r3, #1
 800f99a:	2202      	movs	r2, #2
 800f99c:	701a      	strb	r2, [r3, #0]
      break;
 800f99e:	e0f2      	b.n	800fb86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	885b      	ldrh	r3, [r3, #2]
 800f9a4:	b2db      	uxtb	r3, r3
 800f9a6:	2b05      	cmp	r3, #5
 800f9a8:	f200 80ac 	bhi.w	800fb04 <USBD_GetDescriptor+0x204>
 800f9ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f9b4 <USBD_GetDescriptor+0xb4>)
 800f9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b2:	bf00      	nop
 800f9b4:	0800f9cd 	.word	0x0800f9cd
 800f9b8:	0800fa01 	.word	0x0800fa01
 800f9bc:	0800fa35 	.word	0x0800fa35
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa9d 	.word	0x0800fa9d
 800f9c8:	0800fad1 	.word	0x0800fad1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	7c12      	ldrb	r2, [r2, #16]
 800f9e4:	f107 0108 	add.w	r1, r7, #8
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	4798      	blx	r3
 800f9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9ee:	e091      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9f0:	6839      	ldr	r1, [r7, #0]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 facb 	bl	800ff8e <USBD_CtlError>
            err++;
 800f9f8:	7afb      	ldrb	r3, [r7, #11]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f9fe:	e089      	b.n	800fb14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00b      	beq.n	800fa24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	7c12      	ldrb	r2, [r2, #16]
 800fa18:	f107 0108 	add.w	r1, r7, #8
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	4798      	blx	r3
 800fa20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa22:	e077      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fab1 	bl	800ff8e <USBD_CtlError>
            err++;
 800fa2c:	7afb      	ldrb	r3, [r7, #11]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	72fb      	strb	r3, [r7, #11]
          break;
 800fa32:	e06f      	b.n	800fb14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d00b      	beq.n	800fa58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	7c12      	ldrb	r2, [r2, #16]
 800fa4c:	f107 0108 	add.w	r1, r7, #8
 800fa50:	4610      	mov	r0, r2
 800fa52:	4798      	blx	r3
 800fa54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa56:	e05d      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 fa97 	bl	800ff8e <USBD_CtlError>
            err++;
 800fa60:	7afb      	ldrb	r3, [r7, #11]
 800fa62:	3301      	adds	r3, #1
 800fa64:	72fb      	strb	r3, [r7, #11]
          break;
 800fa66:	e055      	b.n	800fb14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00b      	beq.n	800fa8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	7c12      	ldrb	r2, [r2, #16]
 800fa80:	f107 0108 	add.w	r1, r7, #8
 800fa84:	4610      	mov	r0, r2
 800fa86:	4798      	blx	r3
 800fa88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa8a:	e043      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fa7d 	bl	800ff8e <USBD_CtlError>
            err++;
 800fa94:	7afb      	ldrb	r3, [r7, #11]
 800fa96:	3301      	adds	r3, #1
 800fa98:	72fb      	strb	r3, [r7, #11]
          break;
 800fa9a:	e03b      	b.n	800fb14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faa2:	695b      	ldr	r3, [r3, #20]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00b      	beq.n	800fac0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	7c12      	ldrb	r2, [r2, #16]
 800fab4:	f107 0108 	add.w	r1, r7, #8
 800fab8:	4610      	mov	r0, r2
 800faba:	4798      	blx	r3
 800fabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fabe:	e029      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fac0:	6839      	ldr	r1, [r7, #0]
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fa63 	bl	800ff8e <USBD_CtlError>
            err++;
 800fac8:	7afb      	ldrb	r3, [r7, #11]
 800faca:	3301      	adds	r3, #1
 800facc:	72fb      	strb	r3, [r7, #11]
          break;
 800face:	e021      	b.n	800fb14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fad6:	699b      	ldr	r3, [r3, #24]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00b      	beq.n	800faf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fae2:	699b      	ldr	r3, [r3, #24]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	7c12      	ldrb	r2, [r2, #16]
 800fae8:	f107 0108 	add.w	r1, r7, #8
 800faec:	4610      	mov	r0, r2
 800faee:	4798      	blx	r3
 800faf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faf2:	e00f      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 fa49 	bl	800ff8e <USBD_CtlError>
            err++;
 800fafc:	7afb      	ldrb	r3, [r7, #11]
 800fafe:	3301      	adds	r3, #1
 800fb00:	72fb      	strb	r3, [r7, #11]
          break;
 800fb02:	e007      	b.n	800fb14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 fa41 	bl	800ff8e <USBD_CtlError>
          err++;
 800fb0c:	7afb      	ldrb	r3, [r7, #11]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fb12:	bf00      	nop
      }
      break;
 800fb14:	e037      	b.n	800fb86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	7c1b      	ldrb	r3, [r3, #16]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d109      	bne.n	800fb32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb26:	f107 0208 	add.w	r2, r7, #8
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	4798      	blx	r3
 800fb2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb30:	e029      	b.n	800fb86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fb32:	6839      	ldr	r1, [r7, #0]
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fa2a 	bl	800ff8e <USBD_CtlError>
        err++;
 800fb3a:	7afb      	ldrb	r3, [r7, #11]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	72fb      	strb	r3, [r7, #11]
      break;
 800fb40:	e021      	b.n	800fb86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	7c1b      	ldrb	r3, [r3, #16]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d10d      	bne.n	800fb66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb52:	f107 0208 	add.w	r2, r7, #8
 800fb56:	4610      	mov	r0, r2
 800fb58:	4798      	blx	r3
 800fb5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	2207      	movs	r2, #7
 800fb62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb64:	e00f      	b.n	800fb86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fa10 	bl	800ff8e <USBD_CtlError>
        err++;
 800fb6e:	7afb      	ldrb	r3, [r7, #11]
 800fb70:	3301      	adds	r3, #1
 800fb72:	72fb      	strb	r3, [r7, #11]
      break;
 800fb74:	e007      	b.n	800fb86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 fa08 	bl	800ff8e <USBD_CtlError>
      err++;
 800fb7e:	7afb      	ldrb	r3, [r7, #11]
 800fb80:	3301      	adds	r3, #1
 800fb82:	72fb      	strb	r3, [r7, #11]
      break;
 800fb84:	bf00      	nop
  }

  if (err != 0U)
 800fb86:	7afb      	ldrb	r3, [r7, #11]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d11e      	bne.n	800fbca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	88db      	ldrh	r3, [r3, #6]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d016      	beq.n	800fbc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fb94:	893b      	ldrh	r3, [r7, #8]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00e      	beq.n	800fbb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	88da      	ldrh	r2, [r3, #6]
 800fb9e:	893b      	ldrh	r3, [r7, #8]
 800fba0:	4293      	cmp	r3, r2
 800fba2:	bf28      	it	cs
 800fba4:	4613      	movcs	r3, r2
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fbaa:	893b      	ldrh	r3, [r7, #8]
 800fbac:	461a      	mov	r2, r3
 800fbae:	68f9      	ldr	r1, [r7, #12]
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 fb6a 	bl	801028a <USBD_CtlSendData>
 800fbb6:	e009      	b.n	800fbcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fbb8:	6839      	ldr	r1, [r7, #0]
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 f9e7 	bl	800ff8e <USBD_CtlError>
 800fbc0:	e004      	b.n	800fbcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fbbb 	bl	801033e <USBD_CtlSendStatus>
 800fbc8:	e000      	b.n	800fbcc <USBD_GetDescriptor+0x2cc>
    return;
 800fbca:	bf00      	nop
  }
}
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop

0800fbd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	889b      	ldrh	r3, [r3, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d131      	bne.n	800fc4a <USBD_SetAddress+0x76>
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	88db      	ldrh	r3, [r3, #6]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d12d      	bne.n	800fc4a <USBD_SetAddress+0x76>
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	885b      	ldrh	r3, [r3, #2]
 800fbf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800fbf4:	d829      	bhi.n	800fc4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	885b      	ldrh	r3, [r3, #2]
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	2b03      	cmp	r3, #3
 800fc0c:	d104      	bne.n	800fc18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 f9bc 	bl	800ff8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc16:	e01d      	b.n	800fc54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	7bfa      	ldrb	r2, [r7, #15]
 800fc1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc20:	7bfb      	ldrb	r3, [r7, #15]
 800fc22:	4619      	mov	r1, r3
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7fe ffcd 	bl	800ebc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fb87 	bl	801033e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fc30:	7bfb      	ldrb	r3, [r7, #15]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d004      	beq.n	800fc40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2202      	movs	r2, #2
 800fc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc3e:	e009      	b.n	800fc54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2201      	movs	r2, #1
 800fc44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc48:	e004      	b.n	800fc54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f99e 	bl	800ff8e <USBD_CtlError>
  }
}
 800fc52:	bf00      	nop
 800fc54:	bf00      	nop
 800fc56:	3710      	adds	r7, #16
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc66:	2300      	movs	r3, #0
 800fc68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	885b      	ldrh	r3, [r3, #2]
 800fc6e:	b2da      	uxtb	r2, r3
 800fc70:	4b4e      	ldr	r3, [pc, #312]	@ (800fdac <USBD_SetConfig+0x150>)
 800fc72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fc74:	4b4d      	ldr	r3, [pc, #308]	@ (800fdac <USBD_SetConfig+0x150>)
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d905      	bls.n	800fc88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fc7c:	6839      	ldr	r1, [r7, #0]
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 f985 	bl	800ff8e <USBD_CtlError>
    return USBD_FAIL;
 800fc84:	2303      	movs	r3, #3
 800fc86:	e08c      	b.n	800fda2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d002      	beq.n	800fc9a <USBD_SetConfig+0x3e>
 800fc94:	2b03      	cmp	r3, #3
 800fc96:	d029      	beq.n	800fcec <USBD_SetConfig+0x90>
 800fc98:	e075      	b.n	800fd86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fc9a:	4b44      	ldr	r3, [pc, #272]	@ (800fdac <USBD_SetConfig+0x150>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d020      	beq.n	800fce4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fca2:	4b42      	ldr	r3, [pc, #264]	@ (800fdac <USBD_SetConfig+0x150>)
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fcac:	4b3f      	ldr	r3, [pc, #252]	@ (800fdac <USBD_SetConfig+0x150>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f7ff f8a9 	bl	800ee0a <USBD_SetClassConfig>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fcbc:	7bfb      	ldrb	r3, [r7, #15]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d008      	beq.n	800fcd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fcc2:	6839      	ldr	r1, [r7, #0]
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 f962 	bl	800ff8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2202      	movs	r2, #2
 800fcce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fcd2:	e065      	b.n	800fda0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 fb32 	bl	801033e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2203      	movs	r2, #3
 800fcde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fce2:	e05d      	b.n	800fda0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fb2a 	bl	801033e <USBD_CtlSendStatus>
      break;
 800fcea:	e059      	b.n	800fda0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fcec:	4b2f      	ldr	r3, [pc, #188]	@ (800fdac <USBD_SetConfig+0x150>)
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d112      	bne.n	800fd1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fcfc:	4b2b      	ldr	r3, [pc, #172]	@ (800fdac <USBD_SetConfig+0x150>)
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	461a      	mov	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd06:	4b29      	ldr	r3, [pc, #164]	@ (800fdac <USBD_SetConfig+0x150>)
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7ff f898 	bl	800ee42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fb13 	bl	801033e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd18:	e042      	b.n	800fda0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fd1a:	4b24      	ldr	r3, [pc, #144]	@ (800fdac <USBD_SetConfig+0x150>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d02a      	beq.n	800fd7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	4619      	mov	r1, r3
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7ff f886 	bl	800ee42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fd36:	4b1d      	ldr	r3, [pc, #116]	@ (800fdac <USBD_SetConfig+0x150>)
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd40:	4b1a      	ldr	r3, [pc, #104]	@ (800fdac <USBD_SetConfig+0x150>)
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7ff f85f 	bl	800ee0a <USBD_SetClassConfig>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fd50:	7bfb      	ldrb	r3, [r7, #15]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00f      	beq.n	800fd76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fd56:	6839      	ldr	r1, [r7, #0]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 f918 	bl	800ff8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	4619      	mov	r1, r3
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7ff f86b 	bl	800ee42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2202      	movs	r2, #2
 800fd70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fd74:	e014      	b.n	800fda0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fae1 	bl	801033e <USBD_CtlSendStatus>
      break;
 800fd7c:	e010      	b.n	800fda0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fadd 	bl	801033e <USBD_CtlSendStatus>
      break;
 800fd84:	e00c      	b.n	800fda0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f900 	bl	800ff8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd8e:	4b07      	ldr	r3, [pc, #28]	@ (800fdac <USBD_SetConfig+0x150>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff f854 	bl	800ee42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	73fb      	strb	r3, [r7, #15]
      break;
 800fd9e:	bf00      	nop
  }

  return ret;
 800fda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	20011164 	.word	0x20011164

0800fdb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	88db      	ldrh	r3, [r3, #6]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d004      	beq.n	800fdcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fdc2:	6839      	ldr	r1, [r7, #0]
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 f8e2 	bl	800ff8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fdca:	e023      	b.n	800fe14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	dc02      	bgt.n	800fdde <USBD_GetConfig+0x2e>
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dc03      	bgt.n	800fde4 <USBD_GetConfig+0x34>
 800fddc:	e015      	b.n	800fe0a <USBD_GetConfig+0x5a>
 800fdde:	2b03      	cmp	r3, #3
 800fde0:	d00b      	beq.n	800fdfa <USBD_GetConfig+0x4a>
 800fde2:	e012      	b.n	800fe0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	3308      	adds	r3, #8
 800fdee:	2201      	movs	r2, #1
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fa49 	bl	801028a <USBD_CtlSendData>
        break;
 800fdf8:	e00c      	b.n	800fe14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	2201      	movs	r2, #1
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fa41 	bl	801028a <USBD_CtlSendData>
        break;
 800fe08:	e004      	b.n	800fe14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fe0a:	6839      	ldr	r1, [r7, #0]
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f8be 	bl	800ff8e <USBD_CtlError>
        break;
 800fe12:	bf00      	nop
}
 800fe14:	bf00      	nop
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	3b01      	subs	r3, #1
 800fe30:	2b02      	cmp	r3, #2
 800fe32:	d81e      	bhi.n	800fe72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	88db      	ldrh	r3, [r3, #6]
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d004      	beq.n	800fe46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fe3c:	6839      	ldr	r1, [r7, #0]
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f8a5 	bl	800ff8e <USBD_CtlError>
        break;
 800fe44:	e01a      	b.n	800fe7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d005      	beq.n	800fe62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	f043 0202 	orr.w	r2, r3, #2
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	330c      	adds	r3, #12
 800fe66:	2202      	movs	r2, #2
 800fe68:	4619      	mov	r1, r3
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 fa0d 	bl	801028a <USBD_CtlSendData>
      break;
 800fe70:	e004      	b.n	800fe7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 f88a 	bl	800ff8e <USBD_CtlError>
      break;
 800fe7a:	bf00      	nop
  }
}
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	885b      	ldrh	r3, [r3, #2]
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d107      	bne.n	800fea6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 fa4d 	bl	801033e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fea4:	e013      	b.n	800fece <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	885b      	ldrh	r3, [r3, #2]
 800feaa:	2b02      	cmp	r3, #2
 800feac:	d10b      	bne.n	800fec6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	889b      	ldrh	r3, [r3, #4]
 800feb2:	0a1b      	lsrs	r3, r3, #8
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 fa3d 	bl	801033e <USBD_CtlSendStatus>
}
 800fec4:	e003      	b.n	800fece <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 f860 	bl	800ff8e <USBD_CtlError>
}
 800fece:	bf00      	nop
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b082      	sub	sp, #8
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	3b01      	subs	r3, #1
 800feea:	2b02      	cmp	r3, #2
 800feec:	d80b      	bhi.n	800ff06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	885b      	ldrh	r3, [r3, #2]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d10c      	bne.n	800ff10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fa1d 	bl	801033e <USBD_CtlSendStatus>
      }
      break;
 800ff04:	e004      	b.n	800ff10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 f840 	bl	800ff8e <USBD_CtlError>
      break;
 800ff0e:	e000      	b.n	800ff12 <USBD_ClrFeature+0x3c>
      break;
 800ff10:	bf00      	nop
  }
}
 800ff12:	bf00      	nop
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b084      	sub	sp, #16
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	781a      	ldrb	r2, [r3, #0]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	3301      	adds	r3, #1
 800ff34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	781a      	ldrb	r2, [r3, #0]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	3301      	adds	r3, #1
 800ff42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7ff fa40 	bl	800f3ca <SWAPBYTE>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	3301      	adds	r3, #1
 800ff56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f7ff fa33 	bl	800f3ca <SWAPBYTE>
 800ff64:	4603      	mov	r3, r0
 800ff66:	461a      	mov	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3301      	adds	r3, #1
 800ff76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f7ff fa26 	bl	800f3ca <SWAPBYTE>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	461a      	mov	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	80da      	strh	r2, [r3, #6]
}
 800ff86:	bf00      	nop
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b082      	sub	sp, #8
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff98:	2180      	movs	r1, #128	@ 0x80
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7fe fdb4 	bl	800eb08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7fe fdb0 	bl	800eb08 <USBD_LL_StallEP>
}
 800ffa8:	bf00      	nop
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d036      	beq.n	8010034 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ffca:	6938      	ldr	r0, [r7, #16]
 800ffcc:	f000 f836 	bl	801003c <USBD_GetLen>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	68ba      	ldr	r2, [r7, #8]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	7812      	ldrb	r2, [r2, #0]
 800ffe8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	3301      	adds	r3, #1
 800ffee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fff0:	7dfb      	ldrb	r3, [r7, #23]
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	4413      	add	r3, r2
 800fff6:	2203      	movs	r2, #3
 800fff8:	701a      	strb	r2, [r3, #0]
  idx++;
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	3301      	adds	r3, #1
 800fffe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010000:	e013      	b.n	801002a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010002:	7dfb      	ldrb	r3, [r7, #23]
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	4413      	add	r3, r2
 8010008:	693a      	ldr	r2, [r7, #16]
 801000a:	7812      	ldrb	r2, [r2, #0]
 801000c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	3301      	adds	r3, #1
 8010012:	613b      	str	r3, [r7, #16]
    idx++;
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	3301      	adds	r3, #1
 8010018:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801001a:	7dfb      	ldrb	r3, [r7, #23]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	4413      	add	r3, r2
 8010020:	2200      	movs	r2, #0
 8010022:	701a      	strb	r2, [r3, #0]
    idx++;
 8010024:	7dfb      	ldrb	r3, [r7, #23]
 8010026:	3301      	adds	r3, #1
 8010028:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1e7      	bne.n	8010002 <USBD_GetString+0x52>
 8010032:	e000      	b.n	8010036 <USBD_GetString+0x86>
    return;
 8010034:	bf00      	nop
  }
}
 8010036:	3718      	adds	r7, #24
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010044:	2300      	movs	r3, #0
 8010046:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801004c:	e005      	b.n	801005a <USBD_GetLen+0x1e>
  {
    len++;
 801004e:	7bfb      	ldrb	r3, [r7, #15]
 8010050:	3301      	adds	r3, #1
 8010052:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	3301      	adds	r3, #1
 8010058:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1f5      	bne.n	801004e <USBD_GetLen+0x12>
  }

  return len;
 8010062:	7bfb      	ldrb	r3, [r7, #15]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3714      	adds	r7, #20
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	6039      	str	r1, [r7, #0]
 801007a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2212      	movs	r2, #18
 8010080:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8010082:	4b03      	ldr	r3, [pc, #12]	@ (8010090 <USBD_Class_DeviceDescriptor+0x20>)
}
 8010084:	4618      	mov	r0, r3
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	200000f0 	.word	0x200000f0

08010094 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	4603      	mov	r3, r0
 801009c:	6039      	str	r1, [r7, #0]
 801009e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	2204      	movs	r2, #4
 80100a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80100a6:	4b03      	ldr	r3, [pc, #12]	@ (80100b4 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	20000104 	.word	0x20000104

080100b8 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	6039      	str	r1, [r7, #0]
 80100c2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80100c4:	79fb      	ldrb	r3, [r7, #7]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d105      	bne.n	80100d6 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80100ca:	683a      	ldr	r2, [r7, #0]
 80100cc:	4907      	ldr	r1, [pc, #28]	@ (80100ec <USBD_Class_ProductStrDescriptor+0x34>)
 80100ce:	4808      	ldr	r0, [pc, #32]	@ (80100f0 <USBD_Class_ProductStrDescriptor+0x38>)
 80100d0:	f7ff ff6e 	bl	800ffb0 <USBD_GetString>
 80100d4:	e004      	b.n	80100e0 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80100d6:	683a      	ldr	r2, [r7, #0]
 80100d8:	4904      	ldr	r1, [pc, #16]	@ (80100ec <USBD_Class_ProductStrDescriptor+0x34>)
 80100da:	4805      	ldr	r0, [pc, #20]	@ (80100f0 <USBD_Class_ProductStrDescriptor+0x38>)
 80100dc:	f7ff ff68 	bl	800ffb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100e0:	4b02      	ldr	r3, [pc, #8]	@ (80100ec <USBD_Class_ProductStrDescriptor+0x34>)
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	20011168 	.word	0x20011168
 80100f0:	08011764 	.word	0x08011764

080100f4 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	6039      	str	r1, [r7, #0]
 80100fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	4904      	ldr	r1, [pc, #16]	@ (8010114 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8010104:	4804      	ldr	r0, [pc, #16]	@ (8010118 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8010106:	f7ff ff53 	bl	800ffb0 <USBD_GetString>
  return USBD_StrDesc;
 801010a:	4b02      	ldr	r3, [pc, #8]	@ (8010114 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 801010c:	4618      	mov	r0, r3
 801010e:	3708      	adds	r7, #8
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	20011168 	.word	0x20011168
 8010118:	0801177c 	.word	0x0801177c

0801011c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	6039      	str	r1, [r7, #0]
 8010126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	221a      	movs	r2, #26
 801012c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 801012e:	f000 f843 	bl	80101b8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8010132:	4b02      	ldr	r3, [pc, #8]	@ (801013c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20000108 	.word	0x20000108

08010140 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	6039      	str	r1, [r7, #0]
 801014a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d105      	bne.n	801015e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	4907      	ldr	r1, [pc, #28]	@ (8010174 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010156:	4808      	ldr	r0, [pc, #32]	@ (8010178 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010158:	f7ff ff2a 	bl	800ffb0 <USBD_GetString>
 801015c:	e004      	b.n	8010168 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 801015e:	683a      	ldr	r2, [r7, #0]
 8010160:	4904      	ldr	r1, [pc, #16]	@ (8010174 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010162:	4805      	ldr	r0, [pc, #20]	@ (8010178 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010164:	f7ff ff24 	bl	800ffb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010168:	4b02      	ldr	r3, [pc, #8]	@ (8010174 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop
 8010174:	20011168 	.word	0x20011168
 8010178:	08011790 	.word	0x08011790

0801017c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	4603      	mov	r3, r0
 8010184:	6039      	str	r1, [r7, #0]
 8010186:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010188:	79fb      	ldrb	r3, [r7, #7]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d105      	bne.n	801019a <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801018e:	683a      	ldr	r2, [r7, #0]
 8010190:	4907      	ldr	r1, [pc, #28]	@ (80101b0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8010192:	4808      	ldr	r0, [pc, #32]	@ (80101b4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010194:	f7ff ff0c 	bl	800ffb0 <USBD_GetString>
 8010198:	e004      	b.n	80101a4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	4904      	ldr	r1, [pc, #16]	@ (80101b0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 801019e:	4805      	ldr	r0, [pc, #20]	@ (80101b4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80101a0:	f7ff ff06 	bl	800ffb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101a4:	4b02      	ldr	r3, [pc, #8]	@ (80101b0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	20011168 	.word	0x20011168
 80101b4:	0801179c 	.word	0x0801179c

080101b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80101be:	4b0f      	ldr	r3, [pc, #60]	@ (80101fc <Get_SerialNum+0x44>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80101c4:	4b0e      	ldr	r3, [pc, #56]	@ (8010200 <Get_SerialNum+0x48>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80101ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010204 <Get_SerialNum+0x4c>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4413      	add	r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d009      	beq.n	80101f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80101de:	2208      	movs	r2, #8
 80101e0:	4909      	ldr	r1, [pc, #36]	@ (8010208 <Get_SerialNum+0x50>)
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f000 f814 	bl	8010210 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80101e8:	2204      	movs	r2, #4
 80101ea:	4908      	ldr	r1, [pc, #32]	@ (801020c <Get_SerialNum+0x54>)
 80101ec:	68b8      	ldr	r0, [r7, #8]
 80101ee:	f000 f80f 	bl	8010210 <IntToUnicode>
  }
}
 80101f2:	bf00      	nop
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	08fff800 	.word	0x08fff800
 8010200:	08fff804 	.word	0x08fff804
 8010204:	08fff808 	.word	0x08fff808
 8010208:	2000010a 	.word	0x2000010a
 801020c:	2000011a 	.word	0x2000011a

08010210 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8010210:	b480      	push	{r7}
 8010212:	b087      	sub	sp, #28
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	4613      	mov	r3, r2
 801021c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 801021e:	2300      	movs	r3, #0
 8010220:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8010222:	2300      	movs	r3, #0
 8010224:	75fb      	strb	r3, [r7, #23]
 8010226:	e025      	b.n	8010274 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	0f1b      	lsrs	r3, r3, #28
 801022c:	2b09      	cmp	r3, #9
 801022e:	d80a      	bhi.n	8010246 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	0f1b      	lsrs	r3, r3, #28
 8010234:	b2da      	uxtb	r2, r3
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	005b      	lsls	r3, r3, #1
 801023a:	68b9      	ldr	r1, [r7, #8]
 801023c:	440b      	add	r3, r1
 801023e:	3230      	adds	r2, #48	@ 0x30
 8010240:	b2d2      	uxtb	r2, r2
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	e009      	b.n	801025a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	0f1b      	lsrs	r3, r3, #28
 801024a:	b2da      	uxtb	r2, r3
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	68b9      	ldr	r1, [r7, #8]
 8010252:	440b      	add	r3, r1
 8010254:	3237      	adds	r2, #55	@ 0x37
 8010256:	b2d2      	uxtb	r2, r2
 8010258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	011b      	lsls	r3, r3, #4
 801025e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	3301      	adds	r3, #1
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	4413      	add	r3, r2
 801026a:	2200      	movs	r2, #0
 801026c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	3301      	adds	r3, #1
 8010272:	75fb      	strb	r3, [r7, #23]
 8010274:	7dfa      	ldrb	r2, [r7, #23]
 8010276:	79fb      	ldrb	r3, [r7, #7]
 8010278:	429a      	cmp	r2, r3
 801027a:	d3d5      	bcc.n	8010228 <IntToUnicode+0x18>
  }
}
 801027c:	bf00      	nop
 801027e:	bf00      	nop
 8010280:	371c      	adds	r7, #28
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr

0801028a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2202      	movs	r2, #2
 801029a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	2100      	movs	r1, #0
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f7fe fca0 	bl	800ebf6 <USBD_LL_Transmit>

  return USBD_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	2100      	movs	r1, #0
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7fe fc8f 	bl	800ebf6 <USBD_LL_Transmit>

  return USBD_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b084      	sub	sp, #16
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	60f8      	str	r0, [r7, #12]
 80102ea:	60b9      	str	r1, [r7, #8]
 80102ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2203      	movs	r2, #3
 80102f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	68ba      	ldr	r2, [r7, #8]
 801030a:	2100      	movs	r1, #0
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f7fe fc8d 	bl	800ec2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010312:	2300      	movs	r3, #0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3710      	adds	r7, #16
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68ba      	ldr	r2, [r7, #8]
 801032c:	2100      	movs	r1, #0
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f7fe fc7c 	bl	800ec2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801033e:	b580      	push	{r7, lr}
 8010340:	b082      	sub	sp, #8
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2204      	movs	r2, #4
 801034a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801034e:	2300      	movs	r3, #0
 8010350:	2200      	movs	r2, #0
 8010352:	2100      	movs	r1, #0
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7fe fc4e 	bl	800ebf6 <USBD_LL_Transmit>

  return USBD_OK;
 801035a:	2300      	movs	r3, #0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2205      	movs	r2, #5
 8010370:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010374:	2300      	movs	r3, #0
 8010376:	2200      	movs	r2, #0
 8010378:	2100      	movs	r1, #0
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7fe fc56 	bl	800ec2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
	...

0801038c <std>:
 801038c:	2300      	movs	r3, #0
 801038e:	b510      	push	{r4, lr}
 8010390:	4604      	mov	r4, r0
 8010392:	6083      	str	r3, [r0, #8]
 8010394:	8181      	strh	r1, [r0, #12]
 8010396:	4619      	mov	r1, r3
 8010398:	6643      	str	r3, [r0, #100]	@ 0x64
 801039a:	81c2      	strh	r2, [r0, #14]
 801039c:	2208      	movs	r2, #8
 801039e:	6183      	str	r3, [r0, #24]
 80103a0:	e9c0 3300 	strd	r3, r3, [r0]
 80103a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103a8:	305c      	adds	r0, #92	@ 0x5c
 80103aa:	f000 f93f 	bl	801062c <memset>
 80103ae:	4b0d      	ldr	r3, [pc, #52]	@ (80103e4 <std+0x58>)
 80103b0:	6224      	str	r4, [r4, #32]
 80103b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80103b4:	4b0c      	ldr	r3, [pc, #48]	@ (80103e8 <std+0x5c>)
 80103b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80103b8:	4b0c      	ldr	r3, [pc, #48]	@ (80103ec <std+0x60>)
 80103ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80103bc:	4b0c      	ldr	r3, [pc, #48]	@ (80103f0 <std+0x64>)
 80103be:	6323      	str	r3, [r4, #48]	@ 0x30
 80103c0:	4b0c      	ldr	r3, [pc, #48]	@ (80103f4 <std+0x68>)
 80103c2:	429c      	cmp	r4, r3
 80103c4:	d006      	beq.n	80103d4 <std+0x48>
 80103c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80103ca:	4294      	cmp	r4, r2
 80103cc:	d002      	beq.n	80103d4 <std+0x48>
 80103ce:	33d0      	adds	r3, #208	@ 0xd0
 80103d0:	429c      	cmp	r4, r3
 80103d2:	d105      	bne.n	80103e0 <std+0x54>
 80103d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80103d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103dc:	f000 b99e 	b.w	801071c <__retarget_lock_init_recursive>
 80103e0:	bd10      	pop	{r4, pc}
 80103e2:	bf00      	nop
 80103e4:	08010535 	.word	0x08010535
 80103e8:	08010557 	.word	0x08010557
 80103ec:	0801058f 	.word	0x0801058f
 80103f0:	080105b3 	.word	0x080105b3
 80103f4:	20011268 	.word	0x20011268

080103f8 <stdio_exit_handler>:
 80103f8:	4a02      	ldr	r2, [pc, #8]	@ (8010404 <stdio_exit_handler+0xc>)
 80103fa:	4903      	ldr	r1, [pc, #12]	@ (8010408 <stdio_exit_handler+0x10>)
 80103fc:	4803      	ldr	r0, [pc, #12]	@ (801040c <stdio_exit_handler+0x14>)
 80103fe:	f000 b869 	b.w	80104d4 <_fwalk_sglue>
 8010402:	bf00      	nop
 8010404:	20000124 	.word	0x20000124
 8010408:	0801128d 	.word	0x0801128d
 801040c:	20000134 	.word	0x20000134

08010410 <cleanup_stdio>:
 8010410:	6841      	ldr	r1, [r0, #4]
 8010412:	4b0c      	ldr	r3, [pc, #48]	@ (8010444 <cleanup_stdio+0x34>)
 8010414:	4299      	cmp	r1, r3
 8010416:	b510      	push	{r4, lr}
 8010418:	4604      	mov	r4, r0
 801041a:	d001      	beq.n	8010420 <cleanup_stdio+0x10>
 801041c:	f000 ff36 	bl	801128c <_fflush_r>
 8010420:	68a1      	ldr	r1, [r4, #8]
 8010422:	4b09      	ldr	r3, [pc, #36]	@ (8010448 <cleanup_stdio+0x38>)
 8010424:	4299      	cmp	r1, r3
 8010426:	d002      	beq.n	801042e <cleanup_stdio+0x1e>
 8010428:	4620      	mov	r0, r4
 801042a:	f000 ff2f 	bl	801128c <_fflush_r>
 801042e:	68e1      	ldr	r1, [r4, #12]
 8010430:	4b06      	ldr	r3, [pc, #24]	@ (801044c <cleanup_stdio+0x3c>)
 8010432:	4299      	cmp	r1, r3
 8010434:	d004      	beq.n	8010440 <cleanup_stdio+0x30>
 8010436:	4620      	mov	r0, r4
 8010438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801043c:	f000 bf26 	b.w	801128c <_fflush_r>
 8010440:	bd10      	pop	{r4, pc}
 8010442:	bf00      	nop
 8010444:	20011268 	.word	0x20011268
 8010448:	200112d0 	.word	0x200112d0
 801044c:	20011338 	.word	0x20011338

08010450 <global_stdio_init.part.0>:
 8010450:	b510      	push	{r4, lr}
 8010452:	4b0b      	ldr	r3, [pc, #44]	@ (8010480 <global_stdio_init.part.0+0x30>)
 8010454:	2104      	movs	r1, #4
 8010456:	4c0b      	ldr	r4, [pc, #44]	@ (8010484 <global_stdio_init.part.0+0x34>)
 8010458:	4a0b      	ldr	r2, [pc, #44]	@ (8010488 <global_stdio_init.part.0+0x38>)
 801045a:	4620      	mov	r0, r4
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	2200      	movs	r2, #0
 8010460:	f7ff ff94 	bl	801038c <std>
 8010464:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010468:	2201      	movs	r2, #1
 801046a:	2109      	movs	r1, #9
 801046c:	f7ff ff8e 	bl	801038c <std>
 8010470:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010474:	2202      	movs	r2, #2
 8010476:	2112      	movs	r1, #18
 8010478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801047c:	f7ff bf86 	b.w	801038c <std>
 8010480:	200113a0 	.word	0x200113a0
 8010484:	20011268 	.word	0x20011268
 8010488:	080103f9 	.word	0x080103f9

0801048c <__sfp_lock_acquire>:
 801048c:	4801      	ldr	r0, [pc, #4]	@ (8010494 <__sfp_lock_acquire+0x8>)
 801048e:	f000 b946 	b.w	801071e <__retarget_lock_acquire_recursive>
 8010492:	bf00      	nop
 8010494:	200113a9 	.word	0x200113a9

08010498 <__sfp_lock_release>:
 8010498:	4801      	ldr	r0, [pc, #4]	@ (80104a0 <__sfp_lock_release+0x8>)
 801049a:	f000 b941 	b.w	8010720 <__retarget_lock_release_recursive>
 801049e:	bf00      	nop
 80104a0:	200113a9 	.word	0x200113a9

080104a4 <__sinit>:
 80104a4:	b510      	push	{r4, lr}
 80104a6:	4604      	mov	r4, r0
 80104a8:	f7ff fff0 	bl	801048c <__sfp_lock_acquire>
 80104ac:	6a23      	ldr	r3, [r4, #32]
 80104ae:	b11b      	cbz	r3, 80104b8 <__sinit+0x14>
 80104b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b4:	f7ff bff0 	b.w	8010498 <__sfp_lock_release>
 80104b8:	4b04      	ldr	r3, [pc, #16]	@ (80104cc <__sinit+0x28>)
 80104ba:	6223      	str	r3, [r4, #32]
 80104bc:	4b04      	ldr	r3, [pc, #16]	@ (80104d0 <__sinit+0x2c>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d1f5      	bne.n	80104b0 <__sinit+0xc>
 80104c4:	f7ff ffc4 	bl	8010450 <global_stdio_init.part.0>
 80104c8:	e7f2      	b.n	80104b0 <__sinit+0xc>
 80104ca:	bf00      	nop
 80104cc:	08010411 	.word	0x08010411
 80104d0:	200113a0 	.word	0x200113a0

080104d4 <_fwalk_sglue>:
 80104d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d8:	4607      	mov	r7, r0
 80104da:	4688      	mov	r8, r1
 80104dc:	4614      	mov	r4, r2
 80104de:	2600      	movs	r6, #0
 80104e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104e4:	f1b9 0901 	subs.w	r9, r9, #1
 80104e8:	d505      	bpl.n	80104f6 <_fwalk_sglue+0x22>
 80104ea:	6824      	ldr	r4, [r4, #0]
 80104ec:	2c00      	cmp	r4, #0
 80104ee:	d1f7      	bne.n	80104e0 <_fwalk_sglue+0xc>
 80104f0:	4630      	mov	r0, r6
 80104f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104f6:	89ab      	ldrh	r3, [r5, #12]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d907      	bls.n	801050c <_fwalk_sglue+0x38>
 80104fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010500:	3301      	adds	r3, #1
 8010502:	d003      	beq.n	801050c <_fwalk_sglue+0x38>
 8010504:	4629      	mov	r1, r5
 8010506:	4638      	mov	r0, r7
 8010508:	47c0      	blx	r8
 801050a:	4306      	orrs	r6, r0
 801050c:	3568      	adds	r5, #104	@ 0x68
 801050e:	e7e9      	b.n	80104e4 <_fwalk_sglue+0x10>

08010510 <iprintf>:
 8010510:	b40f      	push	{r0, r1, r2, r3}
 8010512:	b507      	push	{r0, r1, r2, lr}
 8010514:	4906      	ldr	r1, [pc, #24]	@ (8010530 <iprintf+0x20>)
 8010516:	ab04      	add	r3, sp, #16
 8010518:	6808      	ldr	r0, [r1, #0]
 801051a:	f853 2b04 	ldr.w	r2, [r3], #4
 801051e:	6881      	ldr	r1, [r0, #8]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	f000 fb85 	bl	8010c30 <_vfiprintf_r>
 8010526:	b003      	add	sp, #12
 8010528:	f85d eb04 	ldr.w	lr, [sp], #4
 801052c:	b004      	add	sp, #16
 801052e:	4770      	bx	lr
 8010530:	20000130 	.word	0x20000130

08010534 <__sread>:
 8010534:	b510      	push	{r4, lr}
 8010536:	460c      	mov	r4, r1
 8010538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053c:	f000 f8a0 	bl	8010680 <_read_r>
 8010540:	2800      	cmp	r0, #0
 8010542:	bfab      	itete	ge
 8010544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010546:	89a3      	ldrhlt	r3, [r4, #12]
 8010548:	181b      	addge	r3, r3, r0
 801054a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801054e:	bfac      	ite	ge
 8010550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010552:	81a3      	strhlt	r3, [r4, #12]
 8010554:	bd10      	pop	{r4, pc}

08010556 <__swrite>:
 8010556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055a:	461f      	mov	r7, r3
 801055c:	898b      	ldrh	r3, [r1, #12]
 801055e:	4605      	mov	r5, r0
 8010560:	460c      	mov	r4, r1
 8010562:	05db      	lsls	r3, r3, #23
 8010564:	4616      	mov	r6, r2
 8010566:	d505      	bpl.n	8010574 <__swrite+0x1e>
 8010568:	2302      	movs	r3, #2
 801056a:	2200      	movs	r2, #0
 801056c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010570:	f000 f874 	bl	801065c <_lseek_r>
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	4632      	mov	r2, r6
 8010578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801057c:	4628      	mov	r0, r5
 801057e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010582:	81a3      	strh	r3, [r4, #12]
 8010584:	463b      	mov	r3, r7
 8010586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801058a:	f000 b88b 	b.w	80106a4 <_write_r>

0801058e <__sseek>:
 801058e:	b510      	push	{r4, lr}
 8010590:	460c      	mov	r4, r1
 8010592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010596:	f000 f861 	bl	801065c <_lseek_r>
 801059a:	1c43      	adds	r3, r0, #1
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	bf15      	itete	ne
 80105a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80105a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80105a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80105aa:	81a3      	strheq	r3, [r4, #12]
 80105ac:	bf18      	it	ne
 80105ae:	81a3      	strhne	r3, [r4, #12]
 80105b0:	bd10      	pop	{r4, pc}

080105b2 <__sclose>:
 80105b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105b6:	f000 b841 	b.w	801063c <_close_r>

080105ba <_vsniprintf_r>:
 80105ba:	b530      	push	{r4, r5, lr}
 80105bc:	4614      	mov	r4, r2
 80105be:	b09b      	sub	sp, #108	@ 0x6c
 80105c0:	4605      	mov	r5, r0
 80105c2:	461a      	mov	r2, r3
 80105c4:	2c00      	cmp	r4, #0
 80105c6:	da05      	bge.n	80105d4 <_vsniprintf_r+0x1a>
 80105c8:	238b      	movs	r3, #139	@ 0x8b
 80105ca:	6003      	str	r3, [r0, #0]
 80105cc:	f04f 30ff 	mov.w	r0, #4294967295
 80105d0:	b01b      	add	sp, #108	@ 0x6c
 80105d2:	bd30      	pop	{r4, r5, pc}
 80105d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80105d8:	9100      	str	r1, [sp, #0]
 80105da:	9104      	str	r1, [sp, #16]
 80105dc:	4669      	mov	r1, sp
 80105de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80105e2:	bf14      	ite	ne
 80105e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80105e8:	4623      	moveq	r3, r4
 80105ea:	9302      	str	r3, [sp, #8]
 80105ec:	9305      	str	r3, [sp, #20]
 80105ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80105f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80105f8:	f000 f9f4 	bl	80109e4 <_svfiprintf_r>
 80105fc:	1c43      	adds	r3, r0, #1
 80105fe:	bfbc      	itt	lt
 8010600:	238b      	movlt	r3, #139	@ 0x8b
 8010602:	602b      	strlt	r3, [r5, #0]
 8010604:	2c00      	cmp	r4, #0
 8010606:	d0e3      	beq.n	80105d0 <_vsniprintf_r+0x16>
 8010608:	9b00      	ldr	r3, [sp, #0]
 801060a:	2200      	movs	r2, #0
 801060c:	701a      	strb	r2, [r3, #0]
 801060e:	e7df      	b.n	80105d0 <_vsniprintf_r+0x16>

08010610 <vsniprintf>:
 8010610:	b507      	push	{r0, r1, r2, lr}
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	4613      	mov	r3, r2
 8010616:	460a      	mov	r2, r1
 8010618:	4601      	mov	r1, r0
 801061a:	4803      	ldr	r0, [pc, #12]	@ (8010628 <vsniprintf+0x18>)
 801061c:	6800      	ldr	r0, [r0, #0]
 801061e:	f7ff ffcc 	bl	80105ba <_vsniprintf_r>
 8010622:	b003      	add	sp, #12
 8010624:	f85d fb04 	ldr.w	pc, [sp], #4
 8010628:	20000130 	.word	0x20000130

0801062c <memset>:
 801062c:	4402      	add	r2, r0
 801062e:	4603      	mov	r3, r0
 8010630:	4293      	cmp	r3, r2
 8010632:	d100      	bne.n	8010636 <memset+0xa>
 8010634:	4770      	bx	lr
 8010636:	f803 1b01 	strb.w	r1, [r3], #1
 801063a:	e7f9      	b.n	8010630 <memset+0x4>

0801063c <_close_r>:
 801063c:	b538      	push	{r3, r4, r5, lr}
 801063e:	2300      	movs	r3, #0
 8010640:	4d05      	ldr	r5, [pc, #20]	@ (8010658 <_close_r+0x1c>)
 8010642:	4604      	mov	r4, r0
 8010644:	4608      	mov	r0, r1
 8010646:	602b      	str	r3, [r5, #0]
 8010648:	f7f1 fb41 	bl	8001cce <_close>
 801064c:	1c43      	adds	r3, r0, #1
 801064e:	d102      	bne.n	8010656 <_close_r+0x1a>
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	b103      	cbz	r3, 8010656 <_close_r+0x1a>
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	bd38      	pop	{r3, r4, r5, pc}
 8010658:	200113a4 	.word	0x200113a4

0801065c <_lseek_r>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4604      	mov	r4, r0
 8010660:	4d06      	ldr	r5, [pc, #24]	@ (801067c <_lseek_r+0x20>)
 8010662:	4608      	mov	r0, r1
 8010664:	4611      	mov	r1, r2
 8010666:	2200      	movs	r2, #0
 8010668:	602a      	str	r2, [r5, #0]
 801066a:	461a      	mov	r2, r3
 801066c:	f7f1 fb56 	bl	8001d1c <_lseek>
 8010670:	1c43      	adds	r3, r0, #1
 8010672:	d102      	bne.n	801067a <_lseek_r+0x1e>
 8010674:	682b      	ldr	r3, [r5, #0]
 8010676:	b103      	cbz	r3, 801067a <_lseek_r+0x1e>
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	bd38      	pop	{r3, r4, r5, pc}
 801067c:	200113a4 	.word	0x200113a4

08010680 <_read_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4604      	mov	r4, r0
 8010684:	4d06      	ldr	r5, [pc, #24]	@ (80106a0 <_read_r+0x20>)
 8010686:	4608      	mov	r0, r1
 8010688:	4611      	mov	r1, r2
 801068a:	2200      	movs	r2, #0
 801068c:	602a      	str	r2, [r5, #0]
 801068e:	461a      	mov	r2, r3
 8010690:	f7f1 fae4 	bl	8001c5c <_read>
 8010694:	1c43      	adds	r3, r0, #1
 8010696:	d102      	bne.n	801069e <_read_r+0x1e>
 8010698:	682b      	ldr	r3, [r5, #0]
 801069a:	b103      	cbz	r3, 801069e <_read_r+0x1e>
 801069c:	6023      	str	r3, [r4, #0]
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	200113a4 	.word	0x200113a4

080106a4 <_write_r>:
 80106a4:	b538      	push	{r3, r4, r5, lr}
 80106a6:	4604      	mov	r4, r0
 80106a8:	4d06      	ldr	r5, [pc, #24]	@ (80106c4 <_write_r+0x20>)
 80106aa:	4608      	mov	r0, r1
 80106ac:	4611      	mov	r1, r2
 80106ae:	2200      	movs	r2, #0
 80106b0:	602a      	str	r2, [r5, #0]
 80106b2:	461a      	mov	r2, r3
 80106b4:	f7f1 faef 	bl	8001c96 <_write>
 80106b8:	1c43      	adds	r3, r0, #1
 80106ba:	d102      	bne.n	80106c2 <_write_r+0x1e>
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	b103      	cbz	r3, 80106c2 <_write_r+0x1e>
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	200113a4 	.word	0x200113a4

080106c8 <__errno>:
 80106c8:	4b01      	ldr	r3, [pc, #4]	@ (80106d0 <__errno+0x8>)
 80106ca:	6818      	ldr	r0, [r3, #0]
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	20000130 	.word	0x20000130

080106d4 <__libc_init_array>:
 80106d4:	b570      	push	{r4, r5, r6, lr}
 80106d6:	4d0d      	ldr	r5, [pc, #52]	@ (801070c <__libc_init_array+0x38>)
 80106d8:	2600      	movs	r6, #0
 80106da:	4c0d      	ldr	r4, [pc, #52]	@ (8010710 <__libc_init_array+0x3c>)
 80106dc:	1b64      	subs	r4, r4, r5
 80106de:	10a4      	asrs	r4, r4, #2
 80106e0:	42a6      	cmp	r6, r4
 80106e2:	d109      	bne.n	80106f8 <__libc_init_array+0x24>
 80106e4:	4d0b      	ldr	r5, [pc, #44]	@ (8010714 <__libc_init_array+0x40>)
 80106e6:	2600      	movs	r6, #0
 80106e8:	4c0b      	ldr	r4, [pc, #44]	@ (8010718 <__libc_init_array+0x44>)
 80106ea:	f000 ff7d 	bl	80115e8 <_init>
 80106ee:	1b64      	subs	r4, r4, r5
 80106f0:	10a4      	asrs	r4, r4, #2
 80106f2:	42a6      	cmp	r6, r4
 80106f4:	d105      	bne.n	8010702 <__libc_init_array+0x2e>
 80106f6:	bd70      	pop	{r4, r5, r6, pc}
 80106f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80106fc:	3601      	adds	r6, #1
 80106fe:	4798      	blx	r3
 8010700:	e7ee      	b.n	80106e0 <__libc_init_array+0xc>
 8010702:	f855 3b04 	ldr.w	r3, [r5], #4
 8010706:	3601      	adds	r6, #1
 8010708:	4798      	blx	r3
 801070a:	e7f2      	b.n	80106f2 <__libc_init_array+0x1e>
 801070c:	08011834 	.word	0x08011834
 8010710:	08011834 	.word	0x08011834
 8010714:	08011834 	.word	0x08011834
 8010718:	08011838 	.word	0x08011838

0801071c <__retarget_lock_init_recursive>:
 801071c:	4770      	bx	lr

0801071e <__retarget_lock_acquire_recursive>:
 801071e:	4770      	bx	lr

08010720 <__retarget_lock_release_recursive>:
 8010720:	4770      	bx	lr

08010722 <memcpy>:
 8010722:	440a      	add	r2, r1
 8010724:	1e43      	subs	r3, r0, #1
 8010726:	4291      	cmp	r1, r2
 8010728:	d100      	bne.n	801072c <memcpy+0xa>
 801072a:	4770      	bx	lr
 801072c:	b510      	push	{r4, lr}
 801072e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010732:	4291      	cmp	r1, r2
 8010734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010738:	d1f9      	bne.n	801072e <memcpy+0xc>
 801073a:	bd10      	pop	{r4, pc}

0801073c <_free_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4605      	mov	r5, r0
 8010740:	2900      	cmp	r1, #0
 8010742:	d041      	beq.n	80107c8 <_free_r+0x8c>
 8010744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010748:	1f0c      	subs	r4, r1, #4
 801074a:	2b00      	cmp	r3, #0
 801074c:	bfb8      	it	lt
 801074e:	18e4      	addlt	r4, r4, r3
 8010750:	f000 f8e0 	bl	8010914 <__malloc_lock>
 8010754:	4a1d      	ldr	r2, [pc, #116]	@ (80107cc <_free_r+0x90>)
 8010756:	6813      	ldr	r3, [r2, #0]
 8010758:	b933      	cbnz	r3, 8010768 <_free_r+0x2c>
 801075a:	6063      	str	r3, [r4, #4]
 801075c:	6014      	str	r4, [r2, #0]
 801075e:	4628      	mov	r0, r5
 8010760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010764:	f000 b8dc 	b.w	8010920 <__malloc_unlock>
 8010768:	42a3      	cmp	r3, r4
 801076a:	d908      	bls.n	801077e <_free_r+0x42>
 801076c:	6820      	ldr	r0, [r4, #0]
 801076e:	1821      	adds	r1, r4, r0
 8010770:	428b      	cmp	r3, r1
 8010772:	bf01      	itttt	eq
 8010774:	6819      	ldreq	r1, [r3, #0]
 8010776:	685b      	ldreq	r3, [r3, #4]
 8010778:	1809      	addeq	r1, r1, r0
 801077a:	6021      	streq	r1, [r4, #0]
 801077c:	e7ed      	b.n	801075a <_free_r+0x1e>
 801077e:	461a      	mov	r2, r3
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	b10b      	cbz	r3, 8010788 <_free_r+0x4c>
 8010784:	42a3      	cmp	r3, r4
 8010786:	d9fa      	bls.n	801077e <_free_r+0x42>
 8010788:	6811      	ldr	r1, [r2, #0]
 801078a:	1850      	adds	r0, r2, r1
 801078c:	42a0      	cmp	r0, r4
 801078e:	d10b      	bne.n	80107a8 <_free_r+0x6c>
 8010790:	6820      	ldr	r0, [r4, #0]
 8010792:	4401      	add	r1, r0
 8010794:	1850      	adds	r0, r2, r1
 8010796:	6011      	str	r1, [r2, #0]
 8010798:	4283      	cmp	r3, r0
 801079a:	d1e0      	bne.n	801075e <_free_r+0x22>
 801079c:	6818      	ldr	r0, [r3, #0]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	4408      	add	r0, r1
 80107a2:	6053      	str	r3, [r2, #4]
 80107a4:	6010      	str	r0, [r2, #0]
 80107a6:	e7da      	b.n	801075e <_free_r+0x22>
 80107a8:	d902      	bls.n	80107b0 <_free_r+0x74>
 80107aa:	230c      	movs	r3, #12
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	e7d6      	b.n	801075e <_free_r+0x22>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	1821      	adds	r1, r4, r0
 80107b4:	428b      	cmp	r3, r1
 80107b6:	bf02      	ittt	eq
 80107b8:	6819      	ldreq	r1, [r3, #0]
 80107ba:	685b      	ldreq	r3, [r3, #4]
 80107bc:	1809      	addeq	r1, r1, r0
 80107be:	6063      	str	r3, [r4, #4]
 80107c0:	bf08      	it	eq
 80107c2:	6021      	streq	r1, [r4, #0]
 80107c4:	6054      	str	r4, [r2, #4]
 80107c6:	e7ca      	b.n	801075e <_free_r+0x22>
 80107c8:	bd38      	pop	{r3, r4, r5, pc}
 80107ca:	bf00      	nop
 80107cc:	200113b0 	.word	0x200113b0

080107d0 <sbrk_aligned>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	4e0f      	ldr	r6, [pc, #60]	@ (8010810 <sbrk_aligned+0x40>)
 80107d4:	460c      	mov	r4, r1
 80107d6:	4605      	mov	r5, r0
 80107d8:	6831      	ldr	r1, [r6, #0]
 80107da:	b911      	cbnz	r1, 80107e2 <sbrk_aligned+0x12>
 80107dc:	f000 fe2c 	bl	8011438 <_sbrk_r>
 80107e0:	6030      	str	r0, [r6, #0]
 80107e2:	4621      	mov	r1, r4
 80107e4:	4628      	mov	r0, r5
 80107e6:	f000 fe27 	bl	8011438 <_sbrk_r>
 80107ea:	1c43      	adds	r3, r0, #1
 80107ec:	d103      	bne.n	80107f6 <sbrk_aligned+0x26>
 80107ee:	f04f 34ff 	mov.w	r4, #4294967295
 80107f2:	4620      	mov	r0, r4
 80107f4:	bd70      	pop	{r4, r5, r6, pc}
 80107f6:	1cc4      	adds	r4, r0, #3
 80107f8:	f024 0403 	bic.w	r4, r4, #3
 80107fc:	42a0      	cmp	r0, r4
 80107fe:	d0f8      	beq.n	80107f2 <sbrk_aligned+0x22>
 8010800:	1a21      	subs	r1, r4, r0
 8010802:	4628      	mov	r0, r5
 8010804:	f000 fe18 	bl	8011438 <_sbrk_r>
 8010808:	3001      	adds	r0, #1
 801080a:	d1f2      	bne.n	80107f2 <sbrk_aligned+0x22>
 801080c:	e7ef      	b.n	80107ee <sbrk_aligned+0x1e>
 801080e:	bf00      	nop
 8010810:	200113ac 	.word	0x200113ac

08010814 <_malloc_r>:
 8010814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010818:	1ccd      	adds	r5, r1, #3
 801081a:	4606      	mov	r6, r0
 801081c:	f025 0503 	bic.w	r5, r5, #3
 8010820:	3508      	adds	r5, #8
 8010822:	2d0c      	cmp	r5, #12
 8010824:	bf38      	it	cc
 8010826:	250c      	movcc	r5, #12
 8010828:	2d00      	cmp	r5, #0
 801082a:	db01      	blt.n	8010830 <_malloc_r+0x1c>
 801082c:	42a9      	cmp	r1, r5
 801082e:	d904      	bls.n	801083a <_malloc_r+0x26>
 8010830:	230c      	movs	r3, #12
 8010832:	6033      	str	r3, [r6, #0]
 8010834:	2000      	movs	r0, #0
 8010836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801083a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010910 <_malloc_r+0xfc>
 801083e:	f000 f869 	bl	8010914 <__malloc_lock>
 8010842:	f8d8 3000 	ldr.w	r3, [r8]
 8010846:	461c      	mov	r4, r3
 8010848:	bb44      	cbnz	r4, 801089c <_malloc_r+0x88>
 801084a:	4629      	mov	r1, r5
 801084c:	4630      	mov	r0, r6
 801084e:	f7ff ffbf 	bl	80107d0 <sbrk_aligned>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	4604      	mov	r4, r0
 8010856:	d158      	bne.n	801090a <_malloc_r+0xf6>
 8010858:	f8d8 4000 	ldr.w	r4, [r8]
 801085c:	4627      	mov	r7, r4
 801085e:	2f00      	cmp	r7, #0
 8010860:	d143      	bne.n	80108ea <_malloc_r+0xd6>
 8010862:	2c00      	cmp	r4, #0
 8010864:	d04b      	beq.n	80108fe <_malloc_r+0xea>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	4639      	mov	r1, r7
 801086a:	4630      	mov	r0, r6
 801086c:	eb04 0903 	add.w	r9, r4, r3
 8010870:	f000 fde2 	bl	8011438 <_sbrk_r>
 8010874:	4581      	cmp	r9, r0
 8010876:	d142      	bne.n	80108fe <_malloc_r+0xea>
 8010878:	6821      	ldr	r1, [r4, #0]
 801087a:	4630      	mov	r0, r6
 801087c:	1a6d      	subs	r5, r5, r1
 801087e:	4629      	mov	r1, r5
 8010880:	f7ff ffa6 	bl	80107d0 <sbrk_aligned>
 8010884:	3001      	adds	r0, #1
 8010886:	d03a      	beq.n	80108fe <_malloc_r+0xea>
 8010888:	6823      	ldr	r3, [r4, #0]
 801088a:	442b      	add	r3, r5
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	f8d8 3000 	ldr.w	r3, [r8]
 8010892:	685a      	ldr	r2, [r3, #4]
 8010894:	bb62      	cbnz	r2, 80108f0 <_malloc_r+0xdc>
 8010896:	f8c8 7000 	str.w	r7, [r8]
 801089a:	e00f      	b.n	80108bc <_malloc_r+0xa8>
 801089c:	6822      	ldr	r2, [r4, #0]
 801089e:	1b52      	subs	r2, r2, r5
 80108a0:	d420      	bmi.n	80108e4 <_malloc_r+0xd0>
 80108a2:	2a0b      	cmp	r2, #11
 80108a4:	d917      	bls.n	80108d6 <_malloc_r+0xc2>
 80108a6:	1961      	adds	r1, r4, r5
 80108a8:	42a3      	cmp	r3, r4
 80108aa:	6025      	str	r5, [r4, #0]
 80108ac:	bf18      	it	ne
 80108ae:	6059      	strne	r1, [r3, #4]
 80108b0:	6863      	ldr	r3, [r4, #4]
 80108b2:	bf08      	it	eq
 80108b4:	f8c8 1000 	streq.w	r1, [r8]
 80108b8:	5162      	str	r2, [r4, r5]
 80108ba:	604b      	str	r3, [r1, #4]
 80108bc:	4630      	mov	r0, r6
 80108be:	f000 f82f 	bl	8010920 <__malloc_unlock>
 80108c2:	f104 000b 	add.w	r0, r4, #11
 80108c6:	1d23      	adds	r3, r4, #4
 80108c8:	f020 0007 	bic.w	r0, r0, #7
 80108cc:	1ac2      	subs	r2, r0, r3
 80108ce:	bf1c      	itt	ne
 80108d0:	1a1b      	subne	r3, r3, r0
 80108d2:	50a3      	strne	r3, [r4, r2]
 80108d4:	e7af      	b.n	8010836 <_malloc_r+0x22>
 80108d6:	6862      	ldr	r2, [r4, #4]
 80108d8:	42a3      	cmp	r3, r4
 80108da:	bf0c      	ite	eq
 80108dc:	f8c8 2000 	streq.w	r2, [r8]
 80108e0:	605a      	strne	r2, [r3, #4]
 80108e2:	e7eb      	b.n	80108bc <_malloc_r+0xa8>
 80108e4:	4623      	mov	r3, r4
 80108e6:	6864      	ldr	r4, [r4, #4]
 80108e8:	e7ae      	b.n	8010848 <_malloc_r+0x34>
 80108ea:	463c      	mov	r4, r7
 80108ec:	687f      	ldr	r7, [r7, #4]
 80108ee:	e7b6      	b.n	801085e <_malloc_r+0x4a>
 80108f0:	461a      	mov	r2, r3
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	42a3      	cmp	r3, r4
 80108f6:	d1fb      	bne.n	80108f0 <_malloc_r+0xdc>
 80108f8:	2300      	movs	r3, #0
 80108fa:	6053      	str	r3, [r2, #4]
 80108fc:	e7de      	b.n	80108bc <_malloc_r+0xa8>
 80108fe:	230c      	movs	r3, #12
 8010900:	4630      	mov	r0, r6
 8010902:	6033      	str	r3, [r6, #0]
 8010904:	f000 f80c 	bl	8010920 <__malloc_unlock>
 8010908:	e794      	b.n	8010834 <_malloc_r+0x20>
 801090a:	6005      	str	r5, [r0, #0]
 801090c:	e7d6      	b.n	80108bc <_malloc_r+0xa8>
 801090e:	bf00      	nop
 8010910:	200113b0 	.word	0x200113b0

08010914 <__malloc_lock>:
 8010914:	4801      	ldr	r0, [pc, #4]	@ (801091c <__malloc_lock+0x8>)
 8010916:	f7ff bf02 	b.w	801071e <__retarget_lock_acquire_recursive>
 801091a:	bf00      	nop
 801091c:	200113a8 	.word	0x200113a8

08010920 <__malloc_unlock>:
 8010920:	4801      	ldr	r0, [pc, #4]	@ (8010928 <__malloc_unlock+0x8>)
 8010922:	f7ff befd 	b.w	8010720 <__retarget_lock_release_recursive>
 8010926:	bf00      	nop
 8010928:	200113a8 	.word	0x200113a8

0801092c <__ssputs_r>:
 801092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010930:	461f      	mov	r7, r3
 8010932:	688e      	ldr	r6, [r1, #8]
 8010934:	4682      	mov	sl, r0
 8010936:	460c      	mov	r4, r1
 8010938:	42be      	cmp	r6, r7
 801093a:	4690      	mov	r8, r2
 801093c:	680b      	ldr	r3, [r1, #0]
 801093e:	d82d      	bhi.n	801099c <__ssputs_r+0x70>
 8010940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010948:	d026      	beq.n	8010998 <__ssputs_r+0x6c>
 801094a:	6965      	ldr	r5, [r4, #20]
 801094c:	6909      	ldr	r1, [r1, #16]
 801094e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010952:	eba3 0901 	sub.w	r9, r3, r1
 8010956:	1c7b      	adds	r3, r7, #1
 8010958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801095c:	444b      	add	r3, r9
 801095e:	106d      	asrs	r5, r5, #1
 8010960:	429d      	cmp	r5, r3
 8010962:	bf38      	it	cc
 8010964:	461d      	movcc	r5, r3
 8010966:	0553      	lsls	r3, r2, #21
 8010968:	d527      	bpl.n	80109ba <__ssputs_r+0x8e>
 801096a:	4629      	mov	r1, r5
 801096c:	f7ff ff52 	bl	8010814 <_malloc_r>
 8010970:	4606      	mov	r6, r0
 8010972:	b360      	cbz	r0, 80109ce <__ssputs_r+0xa2>
 8010974:	464a      	mov	r2, r9
 8010976:	6921      	ldr	r1, [r4, #16]
 8010978:	f7ff fed3 	bl	8010722 <memcpy>
 801097c:	89a3      	ldrh	r3, [r4, #12]
 801097e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010986:	81a3      	strh	r3, [r4, #12]
 8010988:	6126      	str	r6, [r4, #16]
 801098a:	444e      	add	r6, r9
 801098c:	6165      	str	r5, [r4, #20]
 801098e:	eba5 0509 	sub.w	r5, r5, r9
 8010992:	6026      	str	r6, [r4, #0]
 8010994:	463e      	mov	r6, r7
 8010996:	60a5      	str	r5, [r4, #8]
 8010998:	42be      	cmp	r6, r7
 801099a:	d900      	bls.n	801099e <__ssputs_r+0x72>
 801099c:	463e      	mov	r6, r7
 801099e:	4632      	mov	r2, r6
 80109a0:	4641      	mov	r1, r8
 80109a2:	6820      	ldr	r0, [r4, #0]
 80109a4:	f000 fd2e 	bl	8011404 <memmove>
 80109a8:	68a3      	ldr	r3, [r4, #8]
 80109aa:	2000      	movs	r0, #0
 80109ac:	1b9b      	subs	r3, r3, r6
 80109ae:	60a3      	str	r3, [r4, #8]
 80109b0:	6823      	ldr	r3, [r4, #0]
 80109b2:	4433      	add	r3, r6
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ba:	462a      	mov	r2, r5
 80109bc:	f000 fd5a 	bl	8011474 <_realloc_r>
 80109c0:	4606      	mov	r6, r0
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d1e0      	bne.n	8010988 <__ssputs_r+0x5c>
 80109c6:	6921      	ldr	r1, [r4, #16]
 80109c8:	4650      	mov	r0, sl
 80109ca:	f7ff feb7 	bl	801073c <_free_r>
 80109ce:	230c      	movs	r3, #12
 80109d0:	f04f 30ff 	mov.w	r0, #4294967295
 80109d4:	f8ca 3000 	str.w	r3, [sl]
 80109d8:	89a3      	ldrh	r3, [r4, #12]
 80109da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109de:	81a3      	strh	r3, [r4, #12]
 80109e0:	e7e9      	b.n	80109b6 <__ssputs_r+0x8a>
	...

080109e4 <_svfiprintf_r>:
 80109e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e8:	4698      	mov	r8, r3
 80109ea:	898b      	ldrh	r3, [r1, #12]
 80109ec:	b09d      	sub	sp, #116	@ 0x74
 80109ee:	4607      	mov	r7, r0
 80109f0:	061b      	lsls	r3, r3, #24
 80109f2:	460d      	mov	r5, r1
 80109f4:	4614      	mov	r4, r2
 80109f6:	d510      	bpl.n	8010a1a <_svfiprintf_r+0x36>
 80109f8:	690b      	ldr	r3, [r1, #16]
 80109fa:	b973      	cbnz	r3, 8010a1a <_svfiprintf_r+0x36>
 80109fc:	2140      	movs	r1, #64	@ 0x40
 80109fe:	f7ff ff09 	bl	8010814 <_malloc_r>
 8010a02:	6028      	str	r0, [r5, #0]
 8010a04:	6128      	str	r0, [r5, #16]
 8010a06:	b930      	cbnz	r0, 8010a16 <_svfiprintf_r+0x32>
 8010a08:	230c      	movs	r3, #12
 8010a0a:	603b      	str	r3, [r7, #0]
 8010a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a10:	b01d      	add	sp, #116	@ 0x74
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	2340      	movs	r3, #64	@ 0x40
 8010a18:	616b      	str	r3, [r5, #20]
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a20:	f04f 0901 	mov.w	r9, #1
 8010a24:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010bc8 <_svfiprintf_r+0x1e4>
 8010a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a2a:	2320      	movs	r3, #32
 8010a2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a30:	2330      	movs	r3, #48	@ 0x30
 8010a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a36:	4623      	mov	r3, r4
 8010a38:	469a      	mov	sl, r3
 8010a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a3e:	b10a      	cbz	r2, 8010a44 <_svfiprintf_r+0x60>
 8010a40:	2a25      	cmp	r2, #37	@ 0x25
 8010a42:	d1f9      	bne.n	8010a38 <_svfiprintf_r+0x54>
 8010a44:	ebba 0b04 	subs.w	fp, sl, r4
 8010a48:	d00b      	beq.n	8010a62 <_svfiprintf_r+0x7e>
 8010a4a:	465b      	mov	r3, fp
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	4629      	mov	r1, r5
 8010a50:	4638      	mov	r0, r7
 8010a52:	f7ff ff6b 	bl	801092c <__ssputs_r>
 8010a56:	3001      	adds	r0, #1
 8010a58:	f000 80a7 	beq.w	8010baa <_svfiprintf_r+0x1c6>
 8010a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a5e:	445a      	add	r2, fp
 8010a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a62:	f89a 3000 	ldrb.w	r3, [sl]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 809f 	beq.w	8010baa <_svfiprintf_r+0x1c6>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a72:	f10a 0a01 	add.w	sl, sl, #1
 8010a76:	9304      	str	r3, [sp, #16]
 8010a78:	9307      	str	r3, [sp, #28]
 8010a7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a84:	4654      	mov	r4, sl
 8010a86:	2205      	movs	r2, #5
 8010a88:	484f      	ldr	r0, [pc, #316]	@ (8010bc8 <_svfiprintf_r+0x1e4>)
 8010a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a8e:	f000 fce3 	bl	8011458 <memchr>
 8010a92:	9a04      	ldr	r2, [sp, #16]
 8010a94:	b9d8      	cbnz	r0, 8010ace <_svfiprintf_r+0xea>
 8010a96:	06d0      	lsls	r0, r2, #27
 8010a98:	bf44      	itt	mi
 8010a9a:	2320      	movmi	r3, #32
 8010a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aa0:	0711      	lsls	r1, r2, #28
 8010aa2:	bf44      	itt	mi
 8010aa4:	232b      	movmi	r3, #43	@ 0x2b
 8010aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8010aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ab0:	d015      	beq.n	8010ade <_svfiprintf_r+0xfa>
 8010ab2:	9a07      	ldr	r2, [sp, #28]
 8010ab4:	4654      	mov	r4, sl
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	f04f 0c0a 	mov.w	ip, #10
 8010abc:	4621      	mov	r1, r4
 8010abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ac2:	3b30      	subs	r3, #48	@ 0x30
 8010ac4:	2b09      	cmp	r3, #9
 8010ac6:	d94b      	bls.n	8010b60 <_svfiprintf_r+0x17c>
 8010ac8:	b1b0      	cbz	r0, 8010af8 <_svfiprintf_r+0x114>
 8010aca:	9207      	str	r2, [sp, #28]
 8010acc:	e014      	b.n	8010af8 <_svfiprintf_r+0x114>
 8010ace:	eba0 0308 	sub.w	r3, r0, r8
 8010ad2:	46a2      	mov	sl, r4
 8010ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	9304      	str	r3, [sp, #16]
 8010adc:	e7d2      	b.n	8010a84 <_svfiprintf_r+0xa0>
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	1d19      	adds	r1, r3, #4
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	9103      	str	r1, [sp, #12]
 8010ae8:	bfbb      	ittet	lt
 8010aea:	425b      	neglt	r3, r3
 8010aec:	f042 0202 	orrlt.w	r2, r2, #2
 8010af0:	9307      	strge	r3, [sp, #28]
 8010af2:	9307      	strlt	r3, [sp, #28]
 8010af4:	bfb8      	it	lt
 8010af6:	9204      	strlt	r2, [sp, #16]
 8010af8:	7823      	ldrb	r3, [r4, #0]
 8010afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8010afc:	d10a      	bne.n	8010b14 <_svfiprintf_r+0x130>
 8010afe:	7863      	ldrb	r3, [r4, #1]
 8010b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b02:	d132      	bne.n	8010b6a <_svfiprintf_r+0x186>
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	3402      	adds	r4, #2
 8010b08:	1d1a      	adds	r2, r3, #4
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b10:	9203      	str	r2, [sp, #12]
 8010b12:	9305      	str	r3, [sp, #20]
 8010b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010bd8 <_svfiprintf_r+0x1f4>
 8010b18:	2203      	movs	r2, #3
 8010b1a:	7821      	ldrb	r1, [r4, #0]
 8010b1c:	4650      	mov	r0, sl
 8010b1e:	f000 fc9b 	bl	8011458 <memchr>
 8010b22:	b138      	cbz	r0, 8010b34 <_svfiprintf_r+0x150>
 8010b24:	eba0 000a 	sub.w	r0, r0, sl
 8010b28:	2240      	movs	r2, #64	@ 0x40
 8010b2a:	9b04      	ldr	r3, [sp, #16]
 8010b2c:	3401      	adds	r4, #1
 8010b2e:	4082      	lsls	r2, r0
 8010b30:	4313      	orrs	r3, r2
 8010b32:	9304      	str	r3, [sp, #16]
 8010b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b38:	2206      	movs	r2, #6
 8010b3a:	4824      	ldr	r0, [pc, #144]	@ (8010bcc <_svfiprintf_r+0x1e8>)
 8010b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b40:	f000 fc8a 	bl	8011458 <memchr>
 8010b44:	2800      	cmp	r0, #0
 8010b46:	d036      	beq.n	8010bb6 <_svfiprintf_r+0x1d2>
 8010b48:	4b21      	ldr	r3, [pc, #132]	@ (8010bd0 <_svfiprintf_r+0x1ec>)
 8010b4a:	bb1b      	cbnz	r3, 8010b94 <_svfiprintf_r+0x1b0>
 8010b4c:	9b03      	ldr	r3, [sp, #12]
 8010b4e:	3307      	adds	r3, #7
 8010b50:	f023 0307 	bic.w	r3, r3, #7
 8010b54:	3308      	adds	r3, #8
 8010b56:	9303      	str	r3, [sp, #12]
 8010b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5a:	4433      	add	r3, r6
 8010b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b5e:	e76a      	b.n	8010a36 <_svfiprintf_r+0x52>
 8010b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b64:	460c      	mov	r4, r1
 8010b66:	2001      	movs	r0, #1
 8010b68:	e7a8      	b.n	8010abc <_svfiprintf_r+0xd8>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	3401      	adds	r4, #1
 8010b6e:	f04f 0c0a 	mov.w	ip, #10
 8010b72:	4619      	mov	r1, r3
 8010b74:	9305      	str	r3, [sp, #20]
 8010b76:	4620      	mov	r0, r4
 8010b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b7c:	3a30      	subs	r2, #48	@ 0x30
 8010b7e:	2a09      	cmp	r2, #9
 8010b80:	d903      	bls.n	8010b8a <_svfiprintf_r+0x1a6>
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d0c6      	beq.n	8010b14 <_svfiprintf_r+0x130>
 8010b86:	9105      	str	r1, [sp, #20]
 8010b88:	e7c4      	b.n	8010b14 <_svfiprintf_r+0x130>
 8010b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b8e:	4604      	mov	r4, r0
 8010b90:	2301      	movs	r3, #1
 8010b92:	e7f0      	b.n	8010b76 <_svfiprintf_r+0x192>
 8010b94:	ab03      	add	r3, sp, #12
 8010b96:	462a      	mov	r2, r5
 8010b98:	a904      	add	r1, sp, #16
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd4 <_svfiprintf_r+0x1f0>)
 8010ba0:	f3af 8000 	nop.w
 8010ba4:	1c42      	adds	r2, r0, #1
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	d1d6      	bne.n	8010b58 <_svfiprintf_r+0x174>
 8010baa:	89ab      	ldrh	r3, [r5, #12]
 8010bac:	065b      	lsls	r3, r3, #25
 8010bae:	f53f af2d 	bmi.w	8010a0c <_svfiprintf_r+0x28>
 8010bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bb4:	e72c      	b.n	8010a10 <_svfiprintf_r+0x2c>
 8010bb6:	ab03      	add	r3, sp, #12
 8010bb8:	462a      	mov	r2, r5
 8010bba:	a904      	add	r1, sp, #16
 8010bbc:	4638      	mov	r0, r7
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	4b04      	ldr	r3, [pc, #16]	@ (8010bd4 <_svfiprintf_r+0x1f0>)
 8010bc2:	f000 f9bf 	bl	8010f44 <_printf_i>
 8010bc6:	e7ed      	b.n	8010ba4 <_svfiprintf_r+0x1c0>
 8010bc8:	080117f8 	.word	0x080117f8
 8010bcc:	08011802 	.word	0x08011802
 8010bd0:	00000000 	.word	0x00000000
 8010bd4:	0801092d 	.word	0x0801092d
 8010bd8:	080117fe 	.word	0x080117fe

08010bdc <__sfputc_r>:
 8010bdc:	6893      	ldr	r3, [r2, #8]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	6093      	str	r3, [r2, #8]
 8010be4:	b410      	push	{r4}
 8010be6:	da08      	bge.n	8010bfa <__sfputc_r+0x1e>
 8010be8:	6994      	ldr	r4, [r2, #24]
 8010bea:	42a3      	cmp	r3, r4
 8010bec:	db01      	blt.n	8010bf2 <__sfputc_r+0x16>
 8010bee:	290a      	cmp	r1, #10
 8010bf0:	d103      	bne.n	8010bfa <__sfputc_r+0x1e>
 8010bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bf6:	f000 bb71 	b.w	80112dc <__swbuf_r>
 8010bfa:	6813      	ldr	r3, [r2, #0]
 8010bfc:	1c58      	adds	r0, r3, #1
 8010bfe:	6010      	str	r0, [r2, #0]
 8010c00:	4608      	mov	r0, r1
 8010c02:	7019      	strb	r1, [r3, #0]
 8010c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <__sfputs_r>:
 8010c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	4614      	mov	r4, r2
 8010c12:	18d5      	adds	r5, r2, r3
 8010c14:	42ac      	cmp	r4, r5
 8010c16:	d101      	bne.n	8010c1c <__sfputs_r+0x12>
 8010c18:	2000      	movs	r0, #0
 8010c1a:	e007      	b.n	8010c2c <__sfputs_r+0x22>
 8010c1c:	463a      	mov	r2, r7
 8010c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7ff ffda 	bl	8010bdc <__sfputc_r>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d1f3      	bne.n	8010c14 <__sfputs_r+0xa>
 8010c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c30 <_vfiprintf_r>:
 8010c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c34:	460d      	mov	r5, r1
 8010c36:	b09d      	sub	sp, #116	@ 0x74
 8010c38:	4614      	mov	r4, r2
 8010c3a:	4698      	mov	r8, r3
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	b118      	cbz	r0, 8010c48 <_vfiprintf_r+0x18>
 8010c40:	6a03      	ldr	r3, [r0, #32]
 8010c42:	b90b      	cbnz	r3, 8010c48 <_vfiprintf_r+0x18>
 8010c44:	f7ff fc2e 	bl	80104a4 <__sinit>
 8010c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c4a:	07d9      	lsls	r1, r3, #31
 8010c4c:	d405      	bmi.n	8010c5a <_vfiprintf_r+0x2a>
 8010c4e:	89ab      	ldrh	r3, [r5, #12]
 8010c50:	059a      	lsls	r2, r3, #22
 8010c52:	d402      	bmi.n	8010c5a <_vfiprintf_r+0x2a>
 8010c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c56:	f7ff fd62 	bl	801071e <__retarget_lock_acquire_recursive>
 8010c5a:	89ab      	ldrh	r3, [r5, #12]
 8010c5c:	071b      	lsls	r3, r3, #28
 8010c5e:	d501      	bpl.n	8010c64 <_vfiprintf_r+0x34>
 8010c60:	692b      	ldr	r3, [r5, #16]
 8010c62:	b99b      	cbnz	r3, 8010c8c <_vfiprintf_r+0x5c>
 8010c64:	4629      	mov	r1, r5
 8010c66:	4630      	mov	r0, r6
 8010c68:	f000 fb76 	bl	8011358 <__swsetup_r>
 8010c6c:	b170      	cbz	r0, 8010c8c <_vfiprintf_r+0x5c>
 8010c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c70:	07dc      	lsls	r4, r3, #31
 8010c72:	d504      	bpl.n	8010c7e <_vfiprintf_r+0x4e>
 8010c74:	f04f 30ff 	mov.w	r0, #4294967295
 8010c78:	b01d      	add	sp, #116	@ 0x74
 8010c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7e:	89ab      	ldrh	r3, [r5, #12]
 8010c80:	0598      	lsls	r0, r3, #22
 8010c82:	d4f7      	bmi.n	8010c74 <_vfiprintf_r+0x44>
 8010c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c86:	f7ff fd4b 	bl	8010720 <__retarget_lock_release_recursive>
 8010c8a:	e7f3      	b.n	8010c74 <_vfiprintf_r+0x44>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c92:	f04f 0901 	mov.w	r9, #1
 8010c96:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010e4c <_vfiprintf_r+0x21c>
 8010c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c9c:	2320      	movs	r3, #32
 8010c9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ca2:	2330      	movs	r3, #48	@ 0x30
 8010ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ca8:	4623      	mov	r3, r4
 8010caa:	469a      	mov	sl, r3
 8010cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb0:	b10a      	cbz	r2, 8010cb6 <_vfiprintf_r+0x86>
 8010cb2:	2a25      	cmp	r2, #37	@ 0x25
 8010cb4:	d1f9      	bne.n	8010caa <_vfiprintf_r+0x7a>
 8010cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8010cba:	d00b      	beq.n	8010cd4 <_vfiprintf_r+0xa4>
 8010cbc:	465b      	mov	r3, fp
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	f7ff ffa1 	bl	8010c0a <__sfputs_r>
 8010cc8:	3001      	adds	r0, #1
 8010cca:	f000 80a7 	beq.w	8010e1c <_vfiprintf_r+0x1ec>
 8010cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cd0:	445a      	add	r2, fp
 8010cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f000 809f 	beq.w	8010e1c <_vfiprintf_r+0x1ec>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce4:	f10a 0a01 	add.w	sl, sl, #1
 8010ce8:	9304      	str	r3, [sp, #16]
 8010cea:	9307      	str	r3, [sp, #28]
 8010cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cf6:	4654      	mov	r4, sl
 8010cf8:	2205      	movs	r2, #5
 8010cfa:	4854      	ldr	r0, [pc, #336]	@ (8010e4c <_vfiprintf_r+0x21c>)
 8010cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d00:	f000 fbaa 	bl	8011458 <memchr>
 8010d04:	9a04      	ldr	r2, [sp, #16]
 8010d06:	b9d8      	cbnz	r0, 8010d40 <_vfiprintf_r+0x110>
 8010d08:	06d1      	lsls	r1, r2, #27
 8010d0a:	bf44      	itt	mi
 8010d0c:	2320      	movmi	r3, #32
 8010d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d12:	0713      	lsls	r3, r2, #28
 8010d14:	bf44      	itt	mi
 8010d16:	232b      	movmi	r3, #43	@ 0x2b
 8010d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d22:	d015      	beq.n	8010d50 <_vfiprintf_r+0x120>
 8010d24:	9a07      	ldr	r2, [sp, #28]
 8010d26:	4654      	mov	r4, sl
 8010d28:	2000      	movs	r0, #0
 8010d2a:	f04f 0c0a 	mov.w	ip, #10
 8010d2e:	4621      	mov	r1, r4
 8010d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d34:	3b30      	subs	r3, #48	@ 0x30
 8010d36:	2b09      	cmp	r3, #9
 8010d38:	d94b      	bls.n	8010dd2 <_vfiprintf_r+0x1a2>
 8010d3a:	b1b0      	cbz	r0, 8010d6a <_vfiprintf_r+0x13a>
 8010d3c:	9207      	str	r2, [sp, #28]
 8010d3e:	e014      	b.n	8010d6a <_vfiprintf_r+0x13a>
 8010d40:	eba0 0308 	sub.w	r3, r0, r8
 8010d44:	46a2      	mov	sl, r4
 8010d46:	fa09 f303 	lsl.w	r3, r9, r3
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	9304      	str	r3, [sp, #16]
 8010d4e:	e7d2      	b.n	8010cf6 <_vfiprintf_r+0xc6>
 8010d50:	9b03      	ldr	r3, [sp, #12]
 8010d52:	1d19      	adds	r1, r3, #4
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	9103      	str	r1, [sp, #12]
 8010d5a:	bfbb      	ittet	lt
 8010d5c:	425b      	neglt	r3, r3
 8010d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8010d62:	9307      	strge	r3, [sp, #28]
 8010d64:	9307      	strlt	r3, [sp, #28]
 8010d66:	bfb8      	it	lt
 8010d68:	9204      	strlt	r2, [sp, #16]
 8010d6a:	7823      	ldrb	r3, [r4, #0]
 8010d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d6e:	d10a      	bne.n	8010d86 <_vfiprintf_r+0x156>
 8010d70:	7863      	ldrb	r3, [r4, #1]
 8010d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d74:	d132      	bne.n	8010ddc <_vfiprintf_r+0x1ac>
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	3402      	adds	r4, #2
 8010d7a:	1d1a      	adds	r2, r3, #4
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d82:	9203      	str	r2, [sp, #12]
 8010d84:	9305      	str	r3, [sp, #20]
 8010d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010e5c <_vfiprintf_r+0x22c>
 8010d8a:	2203      	movs	r2, #3
 8010d8c:	7821      	ldrb	r1, [r4, #0]
 8010d8e:	4650      	mov	r0, sl
 8010d90:	f000 fb62 	bl	8011458 <memchr>
 8010d94:	b138      	cbz	r0, 8010da6 <_vfiprintf_r+0x176>
 8010d96:	eba0 000a 	sub.w	r0, r0, sl
 8010d9a:	2240      	movs	r2, #64	@ 0x40
 8010d9c:	9b04      	ldr	r3, [sp, #16]
 8010d9e:	3401      	adds	r4, #1
 8010da0:	4082      	lsls	r2, r0
 8010da2:	4313      	orrs	r3, r2
 8010da4:	9304      	str	r3, [sp, #16]
 8010da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010daa:	2206      	movs	r2, #6
 8010dac:	4828      	ldr	r0, [pc, #160]	@ (8010e50 <_vfiprintf_r+0x220>)
 8010dae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010db2:	f000 fb51 	bl	8011458 <memchr>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d03f      	beq.n	8010e3a <_vfiprintf_r+0x20a>
 8010dba:	4b26      	ldr	r3, [pc, #152]	@ (8010e54 <_vfiprintf_r+0x224>)
 8010dbc:	bb1b      	cbnz	r3, 8010e06 <_vfiprintf_r+0x1d6>
 8010dbe:	9b03      	ldr	r3, [sp, #12]
 8010dc0:	3307      	adds	r3, #7
 8010dc2:	f023 0307 	bic.w	r3, r3, #7
 8010dc6:	3308      	adds	r3, #8
 8010dc8:	9303      	str	r3, [sp, #12]
 8010dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dcc:	443b      	add	r3, r7
 8010dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dd0:	e76a      	b.n	8010ca8 <_vfiprintf_r+0x78>
 8010dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dd6:	460c      	mov	r4, r1
 8010dd8:	2001      	movs	r0, #1
 8010dda:	e7a8      	b.n	8010d2e <_vfiprintf_r+0xfe>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	3401      	adds	r4, #1
 8010de0:	f04f 0c0a 	mov.w	ip, #10
 8010de4:	4619      	mov	r1, r3
 8010de6:	9305      	str	r3, [sp, #20]
 8010de8:	4620      	mov	r0, r4
 8010dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dee:	3a30      	subs	r2, #48	@ 0x30
 8010df0:	2a09      	cmp	r2, #9
 8010df2:	d903      	bls.n	8010dfc <_vfiprintf_r+0x1cc>
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0c6      	beq.n	8010d86 <_vfiprintf_r+0x156>
 8010df8:	9105      	str	r1, [sp, #20]
 8010dfa:	e7c4      	b.n	8010d86 <_vfiprintf_r+0x156>
 8010dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e00:	4604      	mov	r4, r0
 8010e02:	2301      	movs	r3, #1
 8010e04:	e7f0      	b.n	8010de8 <_vfiprintf_r+0x1b8>
 8010e06:	ab03      	add	r3, sp, #12
 8010e08:	462a      	mov	r2, r5
 8010e0a:	a904      	add	r1, sp, #16
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	4b11      	ldr	r3, [pc, #68]	@ (8010e58 <_vfiprintf_r+0x228>)
 8010e12:	f3af 8000 	nop.w
 8010e16:	4607      	mov	r7, r0
 8010e18:	1c78      	adds	r0, r7, #1
 8010e1a:	d1d6      	bne.n	8010dca <_vfiprintf_r+0x19a>
 8010e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e1e:	07d9      	lsls	r1, r3, #31
 8010e20:	d405      	bmi.n	8010e2e <_vfiprintf_r+0x1fe>
 8010e22:	89ab      	ldrh	r3, [r5, #12]
 8010e24:	059a      	lsls	r2, r3, #22
 8010e26:	d402      	bmi.n	8010e2e <_vfiprintf_r+0x1fe>
 8010e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e2a:	f7ff fc79 	bl	8010720 <__retarget_lock_release_recursive>
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	065b      	lsls	r3, r3, #25
 8010e32:	f53f af1f 	bmi.w	8010c74 <_vfiprintf_r+0x44>
 8010e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e38:	e71e      	b.n	8010c78 <_vfiprintf_r+0x48>
 8010e3a:	ab03      	add	r3, sp, #12
 8010e3c:	462a      	mov	r2, r5
 8010e3e:	a904      	add	r1, sp, #16
 8010e40:	4630      	mov	r0, r6
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	4b04      	ldr	r3, [pc, #16]	@ (8010e58 <_vfiprintf_r+0x228>)
 8010e46:	f000 f87d 	bl	8010f44 <_printf_i>
 8010e4a:	e7e4      	b.n	8010e16 <_vfiprintf_r+0x1e6>
 8010e4c:	080117f8 	.word	0x080117f8
 8010e50:	08011802 	.word	0x08011802
 8010e54:	00000000 	.word	0x00000000
 8010e58:	08010c0b 	.word	0x08010c0b
 8010e5c:	080117fe 	.word	0x080117fe

08010e60 <_printf_common>:
 8010e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e64:	4616      	mov	r6, r2
 8010e66:	4698      	mov	r8, r3
 8010e68:	688a      	ldr	r2, [r1, #8]
 8010e6a:	4607      	mov	r7, r0
 8010e6c:	690b      	ldr	r3, [r1, #16]
 8010e6e:	460c      	mov	r4, r1
 8010e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e74:	4293      	cmp	r3, r2
 8010e76:	bfb8      	it	lt
 8010e78:	4613      	movlt	r3, r2
 8010e7a:	6033      	str	r3, [r6, #0]
 8010e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e80:	b10a      	cbz	r2, 8010e86 <_printf_common+0x26>
 8010e82:	3301      	adds	r3, #1
 8010e84:	6033      	str	r3, [r6, #0]
 8010e86:	6823      	ldr	r3, [r4, #0]
 8010e88:	0699      	lsls	r1, r3, #26
 8010e8a:	bf42      	ittt	mi
 8010e8c:	6833      	ldrmi	r3, [r6, #0]
 8010e8e:	3302      	addmi	r3, #2
 8010e90:	6033      	strmi	r3, [r6, #0]
 8010e92:	6825      	ldr	r5, [r4, #0]
 8010e94:	f015 0506 	ands.w	r5, r5, #6
 8010e98:	d106      	bne.n	8010ea8 <_printf_common+0x48>
 8010e9a:	f104 0a19 	add.w	sl, r4, #25
 8010e9e:	68e3      	ldr	r3, [r4, #12]
 8010ea0:	6832      	ldr	r2, [r6, #0]
 8010ea2:	1a9b      	subs	r3, r3, r2
 8010ea4:	42ab      	cmp	r3, r5
 8010ea6:	dc2b      	bgt.n	8010f00 <_printf_common+0xa0>
 8010ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010eac:	6822      	ldr	r2, [r4, #0]
 8010eae:	3b00      	subs	r3, #0
 8010eb0:	bf18      	it	ne
 8010eb2:	2301      	movne	r3, #1
 8010eb4:	0692      	lsls	r2, r2, #26
 8010eb6:	d430      	bmi.n	8010f1a <_printf_common+0xba>
 8010eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ebc:	4641      	mov	r1, r8
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	47c8      	blx	r9
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	d023      	beq.n	8010f0e <_printf_common+0xae>
 8010ec6:	6823      	ldr	r3, [r4, #0]
 8010ec8:	341a      	adds	r4, #26
 8010eca:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010ece:	f003 0306 	and.w	r3, r3, #6
 8010ed2:	2b04      	cmp	r3, #4
 8010ed4:	bf0a      	itet	eq
 8010ed6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010eda:	2500      	movne	r5, #0
 8010edc:	6833      	ldreq	r3, [r6, #0]
 8010ede:	f04f 0600 	mov.w	r6, #0
 8010ee2:	bf08      	it	eq
 8010ee4:	1aed      	subeq	r5, r5, r3
 8010ee6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010eea:	bf08      	it	eq
 8010eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	bfc4      	itt	gt
 8010ef4:	1a9b      	subgt	r3, r3, r2
 8010ef6:	18ed      	addgt	r5, r5, r3
 8010ef8:	42b5      	cmp	r5, r6
 8010efa:	d11a      	bne.n	8010f32 <_printf_common+0xd2>
 8010efc:	2000      	movs	r0, #0
 8010efe:	e008      	b.n	8010f12 <_printf_common+0xb2>
 8010f00:	2301      	movs	r3, #1
 8010f02:	4652      	mov	r2, sl
 8010f04:	4641      	mov	r1, r8
 8010f06:	4638      	mov	r0, r7
 8010f08:	47c8      	blx	r9
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	d103      	bne.n	8010f16 <_printf_common+0xb6>
 8010f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f16:	3501      	adds	r5, #1
 8010f18:	e7c1      	b.n	8010e9e <_printf_common+0x3e>
 8010f1a:	18e1      	adds	r1, r4, r3
 8010f1c:	1c5a      	adds	r2, r3, #1
 8010f1e:	2030      	movs	r0, #48	@ 0x30
 8010f20:	3302      	adds	r3, #2
 8010f22:	4422      	add	r2, r4
 8010f24:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f30:	e7c2      	b.n	8010eb8 <_printf_common+0x58>
 8010f32:	2301      	movs	r3, #1
 8010f34:	4622      	mov	r2, r4
 8010f36:	4641      	mov	r1, r8
 8010f38:	4638      	mov	r0, r7
 8010f3a:	47c8      	blx	r9
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	d0e6      	beq.n	8010f0e <_printf_common+0xae>
 8010f40:	3601      	adds	r6, #1
 8010f42:	e7d9      	b.n	8010ef8 <_printf_common+0x98>

08010f44 <_printf_i>:
 8010f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f48:	7e0f      	ldrb	r7, [r1, #24]
 8010f4a:	4691      	mov	r9, r2
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	460c      	mov	r4, r1
 8010f50:	2f78      	cmp	r7, #120	@ 0x78
 8010f52:	469a      	mov	sl, r3
 8010f54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f5a:	d807      	bhi.n	8010f6c <_printf_i+0x28>
 8010f5c:	2f62      	cmp	r7, #98	@ 0x62
 8010f5e:	d80a      	bhi.n	8010f76 <_printf_i+0x32>
 8010f60:	2f00      	cmp	r7, #0
 8010f62:	f000 80d2 	beq.w	801110a <_printf_i+0x1c6>
 8010f66:	2f58      	cmp	r7, #88	@ 0x58
 8010f68:	f000 80b9 	beq.w	80110de <_printf_i+0x19a>
 8010f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010f74:	e03a      	b.n	8010fec <_printf_i+0xa8>
 8010f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010f7a:	2b15      	cmp	r3, #21
 8010f7c:	d8f6      	bhi.n	8010f6c <_printf_i+0x28>
 8010f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8010f84 <_printf_i+0x40>)
 8010f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f84:	08010fdd 	.word	0x08010fdd
 8010f88:	08010ff1 	.word	0x08010ff1
 8010f8c:	08010f6d 	.word	0x08010f6d
 8010f90:	08010f6d 	.word	0x08010f6d
 8010f94:	08010f6d 	.word	0x08010f6d
 8010f98:	08010f6d 	.word	0x08010f6d
 8010f9c:	08010ff1 	.word	0x08010ff1
 8010fa0:	08010f6d 	.word	0x08010f6d
 8010fa4:	08010f6d 	.word	0x08010f6d
 8010fa8:	08010f6d 	.word	0x08010f6d
 8010fac:	08010f6d 	.word	0x08010f6d
 8010fb0:	080110f1 	.word	0x080110f1
 8010fb4:	0801101b 	.word	0x0801101b
 8010fb8:	080110ab 	.word	0x080110ab
 8010fbc:	08010f6d 	.word	0x08010f6d
 8010fc0:	08010f6d 	.word	0x08010f6d
 8010fc4:	08011113 	.word	0x08011113
 8010fc8:	08010f6d 	.word	0x08010f6d
 8010fcc:	0801101b 	.word	0x0801101b
 8010fd0:	08010f6d 	.word	0x08010f6d
 8010fd4:	08010f6d 	.word	0x08010f6d
 8010fd8:	080110b3 	.word	0x080110b3
 8010fdc:	6833      	ldr	r3, [r6, #0]
 8010fde:	1d1a      	adds	r2, r3, #4
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	6032      	str	r2, [r6, #0]
 8010fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010fec:	2301      	movs	r3, #1
 8010fee:	e09d      	b.n	801112c <_printf_i+0x1e8>
 8010ff0:	6833      	ldr	r3, [r6, #0]
 8010ff2:	6820      	ldr	r0, [r4, #0]
 8010ff4:	1d19      	adds	r1, r3, #4
 8010ff6:	6031      	str	r1, [r6, #0]
 8010ff8:	0606      	lsls	r6, r0, #24
 8010ffa:	d501      	bpl.n	8011000 <_printf_i+0xbc>
 8010ffc:	681d      	ldr	r5, [r3, #0]
 8010ffe:	e003      	b.n	8011008 <_printf_i+0xc4>
 8011000:	0645      	lsls	r5, r0, #25
 8011002:	d5fb      	bpl.n	8010ffc <_printf_i+0xb8>
 8011004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011008:	2d00      	cmp	r5, #0
 801100a:	da03      	bge.n	8011014 <_printf_i+0xd0>
 801100c:	232d      	movs	r3, #45	@ 0x2d
 801100e:	426d      	negs	r5, r5
 8011010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011014:	4859      	ldr	r0, [pc, #356]	@ (801117c <_printf_i+0x238>)
 8011016:	230a      	movs	r3, #10
 8011018:	e011      	b.n	801103e <_printf_i+0xfa>
 801101a:	6821      	ldr	r1, [r4, #0]
 801101c:	6833      	ldr	r3, [r6, #0]
 801101e:	0608      	lsls	r0, r1, #24
 8011020:	f853 5b04 	ldr.w	r5, [r3], #4
 8011024:	d402      	bmi.n	801102c <_printf_i+0xe8>
 8011026:	0649      	lsls	r1, r1, #25
 8011028:	bf48      	it	mi
 801102a:	b2ad      	uxthmi	r5, r5
 801102c:	2f6f      	cmp	r7, #111	@ 0x6f
 801102e:	6033      	str	r3, [r6, #0]
 8011030:	4852      	ldr	r0, [pc, #328]	@ (801117c <_printf_i+0x238>)
 8011032:	bf14      	ite	ne
 8011034:	230a      	movne	r3, #10
 8011036:	2308      	moveq	r3, #8
 8011038:	2100      	movs	r1, #0
 801103a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801103e:	6866      	ldr	r6, [r4, #4]
 8011040:	2e00      	cmp	r6, #0
 8011042:	60a6      	str	r6, [r4, #8]
 8011044:	bfa2      	ittt	ge
 8011046:	6821      	ldrge	r1, [r4, #0]
 8011048:	f021 0104 	bicge.w	r1, r1, #4
 801104c:	6021      	strge	r1, [r4, #0]
 801104e:	b90d      	cbnz	r5, 8011054 <_printf_i+0x110>
 8011050:	2e00      	cmp	r6, #0
 8011052:	d04b      	beq.n	80110ec <_printf_i+0x1a8>
 8011054:	4616      	mov	r6, r2
 8011056:	fbb5 f1f3 	udiv	r1, r5, r3
 801105a:	fb03 5711 	mls	r7, r3, r1, r5
 801105e:	5dc7      	ldrb	r7, [r0, r7]
 8011060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011064:	462f      	mov	r7, r5
 8011066:	460d      	mov	r5, r1
 8011068:	42bb      	cmp	r3, r7
 801106a:	d9f4      	bls.n	8011056 <_printf_i+0x112>
 801106c:	2b08      	cmp	r3, #8
 801106e:	d10b      	bne.n	8011088 <_printf_i+0x144>
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	07df      	lsls	r7, r3, #31
 8011074:	d508      	bpl.n	8011088 <_printf_i+0x144>
 8011076:	6923      	ldr	r3, [r4, #16]
 8011078:	6861      	ldr	r1, [r4, #4]
 801107a:	4299      	cmp	r1, r3
 801107c:	bfde      	ittt	le
 801107e:	2330      	movle	r3, #48	@ 0x30
 8011080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011088:	1b92      	subs	r2, r2, r6
 801108a:	6122      	str	r2, [r4, #16]
 801108c:	464b      	mov	r3, r9
 801108e:	aa03      	add	r2, sp, #12
 8011090:	4621      	mov	r1, r4
 8011092:	4640      	mov	r0, r8
 8011094:	f8cd a000 	str.w	sl, [sp]
 8011098:	f7ff fee2 	bl	8010e60 <_printf_common>
 801109c:	3001      	adds	r0, #1
 801109e:	d14a      	bne.n	8011136 <_printf_i+0x1f2>
 80110a0:	f04f 30ff 	mov.w	r0, #4294967295
 80110a4:	b004      	add	sp, #16
 80110a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110aa:	6823      	ldr	r3, [r4, #0]
 80110ac:	f043 0320 	orr.w	r3, r3, #32
 80110b0:	6023      	str	r3, [r4, #0]
 80110b2:	2778      	movs	r7, #120	@ 0x78
 80110b4:	4832      	ldr	r0, [pc, #200]	@ (8011180 <_printf_i+0x23c>)
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80110bc:	061f      	lsls	r7, r3, #24
 80110be:	6831      	ldr	r1, [r6, #0]
 80110c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80110c4:	d402      	bmi.n	80110cc <_printf_i+0x188>
 80110c6:	065f      	lsls	r7, r3, #25
 80110c8:	bf48      	it	mi
 80110ca:	b2ad      	uxthmi	r5, r5
 80110cc:	6031      	str	r1, [r6, #0]
 80110ce:	07d9      	lsls	r1, r3, #31
 80110d0:	bf44      	itt	mi
 80110d2:	f043 0320 	orrmi.w	r3, r3, #32
 80110d6:	6023      	strmi	r3, [r4, #0]
 80110d8:	b11d      	cbz	r5, 80110e2 <_printf_i+0x19e>
 80110da:	2310      	movs	r3, #16
 80110dc:	e7ac      	b.n	8011038 <_printf_i+0xf4>
 80110de:	4827      	ldr	r0, [pc, #156]	@ (801117c <_printf_i+0x238>)
 80110e0:	e7e9      	b.n	80110b6 <_printf_i+0x172>
 80110e2:	6823      	ldr	r3, [r4, #0]
 80110e4:	f023 0320 	bic.w	r3, r3, #32
 80110e8:	6023      	str	r3, [r4, #0]
 80110ea:	e7f6      	b.n	80110da <_printf_i+0x196>
 80110ec:	4616      	mov	r6, r2
 80110ee:	e7bd      	b.n	801106c <_printf_i+0x128>
 80110f0:	6833      	ldr	r3, [r6, #0]
 80110f2:	6825      	ldr	r5, [r4, #0]
 80110f4:	1d18      	adds	r0, r3, #4
 80110f6:	6961      	ldr	r1, [r4, #20]
 80110f8:	6030      	str	r0, [r6, #0]
 80110fa:	062e      	lsls	r6, r5, #24
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	d501      	bpl.n	8011104 <_printf_i+0x1c0>
 8011100:	6019      	str	r1, [r3, #0]
 8011102:	e002      	b.n	801110a <_printf_i+0x1c6>
 8011104:	0668      	lsls	r0, r5, #25
 8011106:	d5fb      	bpl.n	8011100 <_printf_i+0x1bc>
 8011108:	8019      	strh	r1, [r3, #0]
 801110a:	2300      	movs	r3, #0
 801110c:	4616      	mov	r6, r2
 801110e:	6123      	str	r3, [r4, #16]
 8011110:	e7bc      	b.n	801108c <_printf_i+0x148>
 8011112:	6833      	ldr	r3, [r6, #0]
 8011114:	2100      	movs	r1, #0
 8011116:	1d1a      	adds	r2, r3, #4
 8011118:	6032      	str	r2, [r6, #0]
 801111a:	681e      	ldr	r6, [r3, #0]
 801111c:	6862      	ldr	r2, [r4, #4]
 801111e:	4630      	mov	r0, r6
 8011120:	f000 f99a 	bl	8011458 <memchr>
 8011124:	b108      	cbz	r0, 801112a <_printf_i+0x1e6>
 8011126:	1b80      	subs	r0, r0, r6
 8011128:	6060      	str	r0, [r4, #4]
 801112a:	6863      	ldr	r3, [r4, #4]
 801112c:	6123      	str	r3, [r4, #16]
 801112e:	2300      	movs	r3, #0
 8011130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011134:	e7aa      	b.n	801108c <_printf_i+0x148>
 8011136:	6923      	ldr	r3, [r4, #16]
 8011138:	4632      	mov	r2, r6
 801113a:	4649      	mov	r1, r9
 801113c:	4640      	mov	r0, r8
 801113e:	47d0      	blx	sl
 8011140:	3001      	adds	r0, #1
 8011142:	d0ad      	beq.n	80110a0 <_printf_i+0x15c>
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	079b      	lsls	r3, r3, #30
 8011148:	d413      	bmi.n	8011172 <_printf_i+0x22e>
 801114a:	68e0      	ldr	r0, [r4, #12]
 801114c:	9b03      	ldr	r3, [sp, #12]
 801114e:	4298      	cmp	r0, r3
 8011150:	bfb8      	it	lt
 8011152:	4618      	movlt	r0, r3
 8011154:	e7a6      	b.n	80110a4 <_printf_i+0x160>
 8011156:	2301      	movs	r3, #1
 8011158:	4632      	mov	r2, r6
 801115a:	4649      	mov	r1, r9
 801115c:	4640      	mov	r0, r8
 801115e:	47d0      	blx	sl
 8011160:	3001      	adds	r0, #1
 8011162:	d09d      	beq.n	80110a0 <_printf_i+0x15c>
 8011164:	3501      	adds	r5, #1
 8011166:	68e3      	ldr	r3, [r4, #12]
 8011168:	9903      	ldr	r1, [sp, #12]
 801116a:	1a5b      	subs	r3, r3, r1
 801116c:	42ab      	cmp	r3, r5
 801116e:	dcf2      	bgt.n	8011156 <_printf_i+0x212>
 8011170:	e7eb      	b.n	801114a <_printf_i+0x206>
 8011172:	2500      	movs	r5, #0
 8011174:	f104 0619 	add.w	r6, r4, #25
 8011178:	e7f5      	b.n	8011166 <_printf_i+0x222>
 801117a:	bf00      	nop
 801117c:	08011809 	.word	0x08011809
 8011180:	0801181a 	.word	0x0801181a

08011184 <__sflush_r>:
 8011184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	0716      	lsls	r6, r2, #28
 801118e:	4605      	mov	r5, r0
 8011190:	460c      	mov	r4, r1
 8011192:	d454      	bmi.n	801123e <__sflush_r+0xba>
 8011194:	684b      	ldr	r3, [r1, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	dc02      	bgt.n	80111a0 <__sflush_r+0x1c>
 801119a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801119c:	2b00      	cmp	r3, #0
 801119e:	dd48      	ble.n	8011232 <__sflush_r+0xae>
 80111a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111a2:	2e00      	cmp	r6, #0
 80111a4:	d045      	beq.n	8011232 <__sflush_r+0xae>
 80111a6:	2300      	movs	r3, #0
 80111a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80111ac:	682f      	ldr	r7, [r5, #0]
 80111ae:	6a21      	ldr	r1, [r4, #32]
 80111b0:	602b      	str	r3, [r5, #0]
 80111b2:	d030      	beq.n	8011216 <__sflush_r+0x92>
 80111b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	0759      	lsls	r1, r3, #29
 80111ba:	d505      	bpl.n	80111c8 <__sflush_r+0x44>
 80111bc:	6863      	ldr	r3, [r4, #4]
 80111be:	1ad2      	subs	r2, r2, r3
 80111c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80111c2:	b10b      	cbz	r3, 80111c8 <__sflush_r+0x44>
 80111c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80111c6:	1ad2      	subs	r2, r2, r3
 80111c8:	2300      	movs	r3, #0
 80111ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111cc:	6a21      	ldr	r1, [r4, #32]
 80111ce:	4628      	mov	r0, r5
 80111d0:	47b0      	blx	r6
 80111d2:	1c43      	adds	r3, r0, #1
 80111d4:	89a3      	ldrh	r3, [r4, #12]
 80111d6:	d106      	bne.n	80111e6 <__sflush_r+0x62>
 80111d8:	6829      	ldr	r1, [r5, #0]
 80111da:	291d      	cmp	r1, #29
 80111dc:	d82b      	bhi.n	8011236 <__sflush_r+0xb2>
 80111de:	4a2a      	ldr	r2, [pc, #168]	@ (8011288 <__sflush_r+0x104>)
 80111e0:	410a      	asrs	r2, r1
 80111e2:	07d6      	lsls	r6, r2, #31
 80111e4:	d427      	bmi.n	8011236 <__sflush_r+0xb2>
 80111e6:	2200      	movs	r2, #0
 80111e8:	04d9      	lsls	r1, r3, #19
 80111ea:	6062      	str	r2, [r4, #4]
 80111ec:	6922      	ldr	r2, [r4, #16]
 80111ee:	6022      	str	r2, [r4, #0]
 80111f0:	d504      	bpl.n	80111fc <__sflush_r+0x78>
 80111f2:	1c42      	adds	r2, r0, #1
 80111f4:	d101      	bne.n	80111fa <__sflush_r+0x76>
 80111f6:	682b      	ldr	r3, [r5, #0]
 80111f8:	b903      	cbnz	r3, 80111fc <__sflush_r+0x78>
 80111fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80111fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111fe:	602f      	str	r7, [r5, #0]
 8011200:	b1b9      	cbz	r1, 8011232 <__sflush_r+0xae>
 8011202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011206:	4299      	cmp	r1, r3
 8011208:	d002      	beq.n	8011210 <__sflush_r+0x8c>
 801120a:	4628      	mov	r0, r5
 801120c:	f7ff fa96 	bl	801073c <_free_r>
 8011210:	2300      	movs	r3, #0
 8011212:	6363      	str	r3, [r4, #52]	@ 0x34
 8011214:	e00d      	b.n	8011232 <__sflush_r+0xae>
 8011216:	2301      	movs	r3, #1
 8011218:	4628      	mov	r0, r5
 801121a:	47b0      	blx	r6
 801121c:	4602      	mov	r2, r0
 801121e:	1c50      	adds	r0, r2, #1
 8011220:	d1c9      	bne.n	80111b6 <__sflush_r+0x32>
 8011222:	682b      	ldr	r3, [r5, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d0c6      	beq.n	80111b6 <__sflush_r+0x32>
 8011228:	2b1d      	cmp	r3, #29
 801122a:	d001      	beq.n	8011230 <__sflush_r+0xac>
 801122c:	2b16      	cmp	r3, #22
 801122e:	d11d      	bne.n	801126c <__sflush_r+0xe8>
 8011230:	602f      	str	r7, [r5, #0]
 8011232:	2000      	movs	r0, #0
 8011234:	e021      	b.n	801127a <__sflush_r+0xf6>
 8011236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801123a:	b21b      	sxth	r3, r3
 801123c:	e01a      	b.n	8011274 <__sflush_r+0xf0>
 801123e:	690f      	ldr	r7, [r1, #16]
 8011240:	2f00      	cmp	r7, #0
 8011242:	d0f6      	beq.n	8011232 <__sflush_r+0xae>
 8011244:	0793      	lsls	r3, r2, #30
 8011246:	680e      	ldr	r6, [r1, #0]
 8011248:	600f      	str	r7, [r1, #0]
 801124a:	bf0c      	ite	eq
 801124c:	694b      	ldreq	r3, [r1, #20]
 801124e:	2300      	movne	r3, #0
 8011250:	eba6 0807 	sub.w	r8, r6, r7
 8011254:	608b      	str	r3, [r1, #8]
 8011256:	f1b8 0f00 	cmp.w	r8, #0
 801125a:	ddea      	ble.n	8011232 <__sflush_r+0xae>
 801125c:	4643      	mov	r3, r8
 801125e:	463a      	mov	r2, r7
 8011260:	6a21      	ldr	r1, [r4, #32]
 8011262:	4628      	mov	r0, r5
 8011264:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011266:	47b0      	blx	r6
 8011268:	2800      	cmp	r0, #0
 801126a:	dc08      	bgt.n	801127e <__sflush_r+0xfa>
 801126c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011274:	f04f 30ff 	mov.w	r0, #4294967295
 8011278:	81a3      	strh	r3, [r4, #12]
 801127a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801127e:	4407      	add	r7, r0
 8011280:	eba8 0800 	sub.w	r8, r8, r0
 8011284:	e7e7      	b.n	8011256 <__sflush_r+0xd2>
 8011286:	bf00      	nop
 8011288:	dfbffffe 	.word	0xdfbffffe

0801128c <_fflush_r>:
 801128c:	b538      	push	{r3, r4, r5, lr}
 801128e:	690b      	ldr	r3, [r1, #16]
 8011290:	4605      	mov	r5, r0
 8011292:	460c      	mov	r4, r1
 8011294:	b913      	cbnz	r3, 801129c <_fflush_r+0x10>
 8011296:	2500      	movs	r5, #0
 8011298:	4628      	mov	r0, r5
 801129a:	bd38      	pop	{r3, r4, r5, pc}
 801129c:	b118      	cbz	r0, 80112a6 <_fflush_r+0x1a>
 801129e:	6a03      	ldr	r3, [r0, #32]
 80112a0:	b90b      	cbnz	r3, 80112a6 <_fflush_r+0x1a>
 80112a2:	f7ff f8ff 	bl	80104a4 <__sinit>
 80112a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0f3      	beq.n	8011296 <_fflush_r+0xa>
 80112ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80112b0:	07d0      	lsls	r0, r2, #31
 80112b2:	d404      	bmi.n	80112be <_fflush_r+0x32>
 80112b4:	0599      	lsls	r1, r3, #22
 80112b6:	d402      	bmi.n	80112be <_fflush_r+0x32>
 80112b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112ba:	f7ff fa30 	bl	801071e <__retarget_lock_acquire_recursive>
 80112be:	4628      	mov	r0, r5
 80112c0:	4621      	mov	r1, r4
 80112c2:	f7ff ff5f 	bl	8011184 <__sflush_r>
 80112c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112c8:	4605      	mov	r5, r0
 80112ca:	07da      	lsls	r2, r3, #31
 80112cc:	d4e4      	bmi.n	8011298 <_fflush_r+0xc>
 80112ce:	89a3      	ldrh	r3, [r4, #12]
 80112d0:	059b      	lsls	r3, r3, #22
 80112d2:	d4e1      	bmi.n	8011298 <_fflush_r+0xc>
 80112d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112d6:	f7ff fa23 	bl	8010720 <__retarget_lock_release_recursive>
 80112da:	e7dd      	b.n	8011298 <_fflush_r+0xc>

080112dc <__swbuf_r>:
 80112dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112de:	460e      	mov	r6, r1
 80112e0:	4614      	mov	r4, r2
 80112e2:	4605      	mov	r5, r0
 80112e4:	b118      	cbz	r0, 80112ee <__swbuf_r+0x12>
 80112e6:	6a03      	ldr	r3, [r0, #32]
 80112e8:	b90b      	cbnz	r3, 80112ee <__swbuf_r+0x12>
 80112ea:	f7ff f8db 	bl	80104a4 <__sinit>
 80112ee:	69a3      	ldr	r3, [r4, #24]
 80112f0:	60a3      	str	r3, [r4, #8]
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	071a      	lsls	r2, r3, #28
 80112f6:	d501      	bpl.n	80112fc <__swbuf_r+0x20>
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	b943      	cbnz	r3, 801130e <__swbuf_r+0x32>
 80112fc:	4621      	mov	r1, r4
 80112fe:	4628      	mov	r0, r5
 8011300:	f000 f82a 	bl	8011358 <__swsetup_r>
 8011304:	b118      	cbz	r0, 801130e <__swbuf_r+0x32>
 8011306:	f04f 37ff 	mov.w	r7, #4294967295
 801130a:	4638      	mov	r0, r7
 801130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	b2f6      	uxtb	r6, r6
 8011312:	6922      	ldr	r2, [r4, #16]
 8011314:	4637      	mov	r7, r6
 8011316:	1a98      	subs	r0, r3, r2
 8011318:	6963      	ldr	r3, [r4, #20]
 801131a:	4283      	cmp	r3, r0
 801131c:	dc05      	bgt.n	801132a <__swbuf_r+0x4e>
 801131e:	4621      	mov	r1, r4
 8011320:	4628      	mov	r0, r5
 8011322:	f7ff ffb3 	bl	801128c <_fflush_r>
 8011326:	2800      	cmp	r0, #0
 8011328:	d1ed      	bne.n	8011306 <__swbuf_r+0x2a>
 801132a:	68a3      	ldr	r3, [r4, #8]
 801132c:	3b01      	subs	r3, #1
 801132e:	60a3      	str	r3, [r4, #8]
 8011330:	6823      	ldr	r3, [r4, #0]
 8011332:	1c5a      	adds	r2, r3, #1
 8011334:	6022      	str	r2, [r4, #0]
 8011336:	701e      	strb	r6, [r3, #0]
 8011338:	1c43      	adds	r3, r0, #1
 801133a:	6962      	ldr	r2, [r4, #20]
 801133c:	429a      	cmp	r2, r3
 801133e:	d004      	beq.n	801134a <__swbuf_r+0x6e>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	07db      	lsls	r3, r3, #31
 8011344:	d5e1      	bpl.n	801130a <__swbuf_r+0x2e>
 8011346:	2e0a      	cmp	r6, #10
 8011348:	d1df      	bne.n	801130a <__swbuf_r+0x2e>
 801134a:	4621      	mov	r1, r4
 801134c:	4628      	mov	r0, r5
 801134e:	f7ff ff9d 	bl	801128c <_fflush_r>
 8011352:	2800      	cmp	r0, #0
 8011354:	d0d9      	beq.n	801130a <__swbuf_r+0x2e>
 8011356:	e7d6      	b.n	8011306 <__swbuf_r+0x2a>

08011358 <__swsetup_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4b29      	ldr	r3, [pc, #164]	@ (8011400 <__swsetup_r+0xa8>)
 801135c:	4605      	mov	r5, r0
 801135e:	460c      	mov	r4, r1
 8011360:	6818      	ldr	r0, [r3, #0]
 8011362:	b118      	cbz	r0, 801136c <__swsetup_r+0x14>
 8011364:	6a03      	ldr	r3, [r0, #32]
 8011366:	b90b      	cbnz	r3, 801136c <__swsetup_r+0x14>
 8011368:	f7ff f89c 	bl	80104a4 <__sinit>
 801136c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011370:	0719      	lsls	r1, r3, #28
 8011372:	d422      	bmi.n	80113ba <__swsetup_r+0x62>
 8011374:	06da      	lsls	r2, r3, #27
 8011376:	d407      	bmi.n	8011388 <__swsetup_r+0x30>
 8011378:	2209      	movs	r2, #9
 801137a:	602a      	str	r2, [r5, #0]
 801137c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011380:	f04f 30ff 	mov.w	r0, #4294967295
 8011384:	81a3      	strh	r3, [r4, #12]
 8011386:	e033      	b.n	80113f0 <__swsetup_r+0x98>
 8011388:	0758      	lsls	r0, r3, #29
 801138a:	d512      	bpl.n	80113b2 <__swsetup_r+0x5a>
 801138c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801138e:	b141      	cbz	r1, 80113a2 <__swsetup_r+0x4a>
 8011390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011394:	4299      	cmp	r1, r3
 8011396:	d002      	beq.n	801139e <__swsetup_r+0x46>
 8011398:	4628      	mov	r0, r5
 801139a:	f7ff f9cf 	bl	801073c <_free_r>
 801139e:	2300      	movs	r3, #0
 80113a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80113a2:	89a3      	ldrh	r3, [r4, #12]
 80113a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113a8:	81a3      	strh	r3, [r4, #12]
 80113aa:	2300      	movs	r3, #0
 80113ac:	6063      	str	r3, [r4, #4]
 80113ae:	6923      	ldr	r3, [r4, #16]
 80113b0:	6023      	str	r3, [r4, #0]
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	f043 0308 	orr.w	r3, r3, #8
 80113b8:	81a3      	strh	r3, [r4, #12]
 80113ba:	6923      	ldr	r3, [r4, #16]
 80113bc:	b94b      	cbnz	r3, 80113d2 <__swsetup_r+0x7a>
 80113be:	89a3      	ldrh	r3, [r4, #12]
 80113c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80113c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113c8:	d003      	beq.n	80113d2 <__swsetup_r+0x7a>
 80113ca:	4621      	mov	r1, r4
 80113cc:	4628      	mov	r0, r5
 80113ce:	f000 f8a4 	bl	801151a <__smakebuf_r>
 80113d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113d6:	f013 0201 	ands.w	r2, r3, #1
 80113da:	d00a      	beq.n	80113f2 <__swsetup_r+0x9a>
 80113dc:	2200      	movs	r2, #0
 80113de:	60a2      	str	r2, [r4, #8]
 80113e0:	6962      	ldr	r2, [r4, #20]
 80113e2:	4252      	negs	r2, r2
 80113e4:	61a2      	str	r2, [r4, #24]
 80113e6:	6922      	ldr	r2, [r4, #16]
 80113e8:	b942      	cbnz	r2, 80113fc <__swsetup_r+0xa4>
 80113ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80113ee:	d1c5      	bne.n	801137c <__swsetup_r+0x24>
 80113f0:	bd38      	pop	{r3, r4, r5, pc}
 80113f2:	0799      	lsls	r1, r3, #30
 80113f4:	bf58      	it	pl
 80113f6:	6962      	ldrpl	r2, [r4, #20]
 80113f8:	60a2      	str	r2, [r4, #8]
 80113fa:	e7f4      	b.n	80113e6 <__swsetup_r+0x8e>
 80113fc:	2000      	movs	r0, #0
 80113fe:	e7f7      	b.n	80113f0 <__swsetup_r+0x98>
 8011400:	20000130 	.word	0x20000130

08011404 <memmove>:
 8011404:	4288      	cmp	r0, r1
 8011406:	b510      	push	{r4, lr}
 8011408:	eb01 0402 	add.w	r4, r1, r2
 801140c:	d902      	bls.n	8011414 <memmove+0x10>
 801140e:	4284      	cmp	r4, r0
 8011410:	4623      	mov	r3, r4
 8011412:	d807      	bhi.n	8011424 <memmove+0x20>
 8011414:	1e43      	subs	r3, r0, #1
 8011416:	42a1      	cmp	r1, r4
 8011418:	d008      	beq.n	801142c <memmove+0x28>
 801141a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801141e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011422:	e7f8      	b.n	8011416 <memmove+0x12>
 8011424:	4402      	add	r2, r0
 8011426:	4601      	mov	r1, r0
 8011428:	428a      	cmp	r2, r1
 801142a:	d100      	bne.n	801142e <memmove+0x2a>
 801142c:	bd10      	pop	{r4, pc}
 801142e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011436:	e7f7      	b.n	8011428 <memmove+0x24>

08011438 <_sbrk_r>:
 8011438:	b538      	push	{r3, r4, r5, lr}
 801143a:	2300      	movs	r3, #0
 801143c:	4d05      	ldr	r5, [pc, #20]	@ (8011454 <_sbrk_r+0x1c>)
 801143e:	4604      	mov	r4, r0
 8011440:	4608      	mov	r0, r1
 8011442:	602b      	str	r3, [r5, #0]
 8011444:	f7f0 fc78 	bl	8001d38 <_sbrk>
 8011448:	1c43      	adds	r3, r0, #1
 801144a:	d102      	bne.n	8011452 <_sbrk_r+0x1a>
 801144c:	682b      	ldr	r3, [r5, #0]
 801144e:	b103      	cbz	r3, 8011452 <_sbrk_r+0x1a>
 8011450:	6023      	str	r3, [r4, #0]
 8011452:	bd38      	pop	{r3, r4, r5, pc}
 8011454:	200113a4 	.word	0x200113a4

08011458 <memchr>:
 8011458:	b2c9      	uxtb	r1, r1
 801145a:	4603      	mov	r3, r0
 801145c:	4402      	add	r2, r0
 801145e:	b510      	push	{r4, lr}
 8011460:	4293      	cmp	r3, r2
 8011462:	4618      	mov	r0, r3
 8011464:	d101      	bne.n	801146a <memchr+0x12>
 8011466:	2000      	movs	r0, #0
 8011468:	e003      	b.n	8011472 <memchr+0x1a>
 801146a:	7804      	ldrb	r4, [r0, #0]
 801146c:	3301      	adds	r3, #1
 801146e:	428c      	cmp	r4, r1
 8011470:	d1f6      	bne.n	8011460 <memchr+0x8>
 8011472:	bd10      	pop	{r4, pc}

08011474 <_realloc_r>:
 8011474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011478:	4680      	mov	r8, r0
 801147a:	4615      	mov	r5, r2
 801147c:	460c      	mov	r4, r1
 801147e:	b921      	cbnz	r1, 801148a <_realloc_r+0x16>
 8011480:	4611      	mov	r1, r2
 8011482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011486:	f7ff b9c5 	b.w	8010814 <_malloc_r>
 801148a:	b92a      	cbnz	r2, 8011498 <_realloc_r+0x24>
 801148c:	f7ff f956 	bl	801073c <_free_r>
 8011490:	2400      	movs	r4, #0
 8011492:	4620      	mov	r0, r4
 8011494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011498:	f000 f89e 	bl	80115d8 <_malloc_usable_size_r>
 801149c:	4285      	cmp	r5, r0
 801149e:	4606      	mov	r6, r0
 80114a0:	d802      	bhi.n	80114a8 <_realloc_r+0x34>
 80114a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80114a6:	d8f4      	bhi.n	8011492 <_realloc_r+0x1e>
 80114a8:	4629      	mov	r1, r5
 80114aa:	4640      	mov	r0, r8
 80114ac:	f7ff f9b2 	bl	8010814 <_malloc_r>
 80114b0:	4607      	mov	r7, r0
 80114b2:	2800      	cmp	r0, #0
 80114b4:	d0ec      	beq.n	8011490 <_realloc_r+0x1c>
 80114b6:	42b5      	cmp	r5, r6
 80114b8:	462a      	mov	r2, r5
 80114ba:	4621      	mov	r1, r4
 80114bc:	bf28      	it	cs
 80114be:	4632      	movcs	r2, r6
 80114c0:	f7ff f92f 	bl	8010722 <memcpy>
 80114c4:	4621      	mov	r1, r4
 80114c6:	4640      	mov	r0, r8
 80114c8:	463c      	mov	r4, r7
 80114ca:	f7ff f937 	bl	801073c <_free_r>
 80114ce:	e7e0      	b.n	8011492 <_realloc_r+0x1e>

080114d0 <__swhatbuf_r>:
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	460c      	mov	r4, r1
 80114d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114d8:	b096      	sub	sp, #88	@ 0x58
 80114da:	4615      	mov	r5, r2
 80114dc:	2900      	cmp	r1, #0
 80114de:	461e      	mov	r6, r3
 80114e0:	da0c      	bge.n	80114fc <__swhatbuf_r+0x2c>
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	2100      	movs	r1, #0
 80114e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80114ea:	bf14      	ite	ne
 80114ec:	2340      	movne	r3, #64	@ 0x40
 80114ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80114f2:	2000      	movs	r0, #0
 80114f4:	6031      	str	r1, [r6, #0]
 80114f6:	602b      	str	r3, [r5, #0]
 80114f8:	b016      	add	sp, #88	@ 0x58
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	466a      	mov	r2, sp
 80114fe:	f000 f849 	bl	8011594 <_fstat_r>
 8011502:	2800      	cmp	r0, #0
 8011504:	dbed      	blt.n	80114e2 <__swhatbuf_r+0x12>
 8011506:	9901      	ldr	r1, [sp, #4]
 8011508:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801150c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011510:	4259      	negs	r1, r3
 8011512:	4159      	adcs	r1, r3
 8011514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011518:	e7eb      	b.n	80114f2 <__swhatbuf_r+0x22>

0801151a <__smakebuf_r>:
 801151a:	898b      	ldrh	r3, [r1, #12]
 801151c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801151e:	079d      	lsls	r5, r3, #30
 8011520:	4606      	mov	r6, r0
 8011522:	460c      	mov	r4, r1
 8011524:	d507      	bpl.n	8011536 <__smakebuf_r+0x1c>
 8011526:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801152a:	6023      	str	r3, [r4, #0]
 801152c:	6123      	str	r3, [r4, #16]
 801152e:	2301      	movs	r3, #1
 8011530:	6163      	str	r3, [r4, #20]
 8011532:	b003      	add	sp, #12
 8011534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011536:	ab01      	add	r3, sp, #4
 8011538:	466a      	mov	r2, sp
 801153a:	f7ff ffc9 	bl	80114d0 <__swhatbuf_r>
 801153e:	9f00      	ldr	r7, [sp, #0]
 8011540:	4605      	mov	r5, r0
 8011542:	4630      	mov	r0, r6
 8011544:	4639      	mov	r1, r7
 8011546:	f7ff f965 	bl	8010814 <_malloc_r>
 801154a:	b948      	cbnz	r0, 8011560 <__smakebuf_r+0x46>
 801154c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011550:	059a      	lsls	r2, r3, #22
 8011552:	d4ee      	bmi.n	8011532 <__smakebuf_r+0x18>
 8011554:	f023 0303 	bic.w	r3, r3, #3
 8011558:	f043 0302 	orr.w	r3, r3, #2
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	e7e2      	b.n	8011526 <__smakebuf_r+0xc>
 8011560:	89a3      	ldrh	r3, [r4, #12]
 8011562:	6020      	str	r0, [r4, #0]
 8011564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011568:	81a3      	strh	r3, [r4, #12]
 801156a:	9b01      	ldr	r3, [sp, #4]
 801156c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011570:	b15b      	cbz	r3, 801158a <__smakebuf_r+0x70>
 8011572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011576:	4630      	mov	r0, r6
 8011578:	f000 f81e 	bl	80115b8 <_isatty_r>
 801157c:	b128      	cbz	r0, 801158a <__smakebuf_r+0x70>
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	f023 0303 	bic.w	r3, r3, #3
 8011584:	f043 0301 	orr.w	r3, r3, #1
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	431d      	orrs	r5, r3
 801158e:	81a5      	strh	r5, [r4, #12]
 8011590:	e7cf      	b.n	8011532 <__smakebuf_r+0x18>
	...

08011594 <_fstat_r>:
 8011594:	b538      	push	{r3, r4, r5, lr}
 8011596:	2300      	movs	r3, #0
 8011598:	4d06      	ldr	r5, [pc, #24]	@ (80115b4 <_fstat_r+0x20>)
 801159a:	4604      	mov	r4, r0
 801159c:	4608      	mov	r0, r1
 801159e:	4611      	mov	r1, r2
 80115a0:	602b      	str	r3, [r5, #0]
 80115a2:	f7f0 fba0 	bl	8001ce6 <_fstat>
 80115a6:	1c43      	adds	r3, r0, #1
 80115a8:	d102      	bne.n	80115b0 <_fstat_r+0x1c>
 80115aa:	682b      	ldr	r3, [r5, #0]
 80115ac:	b103      	cbz	r3, 80115b0 <_fstat_r+0x1c>
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	bd38      	pop	{r3, r4, r5, pc}
 80115b2:	bf00      	nop
 80115b4:	200113a4 	.word	0x200113a4

080115b8 <_isatty_r>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	2300      	movs	r3, #0
 80115bc:	4d05      	ldr	r5, [pc, #20]	@ (80115d4 <_isatty_r+0x1c>)
 80115be:	4604      	mov	r4, r0
 80115c0:	4608      	mov	r0, r1
 80115c2:	602b      	str	r3, [r5, #0]
 80115c4:	f7f0 fb9f 	bl	8001d06 <_isatty>
 80115c8:	1c43      	adds	r3, r0, #1
 80115ca:	d102      	bne.n	80115d2 <_isatty_r+0x1a>
 80115cc:	682b      	ldr	r3, [r5, #0]
 80115ce:	b103      	cbz	r3, 80115d2 <_isatty_r+0x1a>
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	bd38      	pop	{r3, r4, r5, pc}
 80115d4:	200113a4 	.word	0x200113a4

080115d8 <_malloc_usable_size_r>:
 80115d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115dc:	1f18      	subs	r0, r3, #4
 80115de:	2b00      	cmp	r3, #0
 80115e0:	bfbc      	itt	lt
 80115e2:	580b      	ldrlt	r3, [r1, r0]
 80115e4:	18c0      	addlt	r0, r0, r3
 80115e6:	4770      	bx	lr

080115e8 <_init>:
 80115e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ea:	bf00      	nop
 80115ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ee:	bc08      	pop	{r3}
 80115f0:	469e      	mov	lr, r3
 80115f2:	4770      	bx	lr

080115f4 <_fini>:
 80115f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f6:	bf00      	nop
 80115f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115fa:	bc08      	pop	{r3}
 80115fc:	469e      	mov	lr, r3
 80115fe:	4770      	bx	lr
