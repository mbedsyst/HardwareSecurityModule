
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f94c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010090  0800fb98  0800fb98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc28  0801fc28  00021120  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc28  0801fc28  00020c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc30  0801fc30  00021120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc30  0801fc30  00020c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fc34  0801fc34  00020c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  0801fc38  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  20000120  0801fd58  00021120  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20001164  0801fd58  00021164  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00021120  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258e8  00000000  00000000  00021156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ff  00000000  00000000  00046a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd0  00000000  00000000  0004b440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  0004d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ee7  00000000  00000000  0004e732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028742  00000000  00000000  00055619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149509  00000000  00000000  0007dd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c7264  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007afc  00000000  00000000  001c72a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001ceda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000120 	.word	0x20000120
 8000268:	00000000 	.word	0x00000000
 800026c:	0800fb80 	.word	0x0800fb80

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000124 	.word	0x20000124
 8000288:	0800fb80 	.word	0x0800fb80

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char msg[] = "0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42.43.44.45.46.47.48.49.50.51.52.53.54.55.56.57.58.59.60.61.62.63.64.65.66.67.68.69.70.71.72.73.74.75.76.77.78.79.80.81.82.83.84.85.86.87.88.89.90.91.92.93.94.95.96.97.98.99.100.101.102.103.104.105.106.107.108.109.110.111.112.113.114.115.116.117.118.119.120.121.122.123.124.125.126.127.128.129.130.131.132.133.134.135.136.137.138.139.140.141.142.143.144.145.146.147.148.149.150.151.152.153.154.155.156.157.158.159.160.161.162.163.164.165.166.167.168.169.170.171.172.173.174.175.176.177.178.179.180.181.182.183.184.185.186.187.188.189.190.191.192.193.194.195.196.197.198.199.200.201.202.203.204.205.206.207.208.209.210.211.212.213.214.215.216.217.218.219.220.221.222.223.224.225.226.227.228.229.230.231.232.233.234.235.236.237.238.239.240.241.242.243.244.245.246.247.248.249.250.251.252.253.254.255.256.257.258.259.260.261.262.263.264.265.266.267.268.269.270.271.272.273.274.275.276.277.278.279.280.281.282.283.284.285.286.287.288.289.290.291.292.293.294.295.296.297.298.299.300.301.302.303.304.305.306.307.308.309.310.311.312.313.314.315.316.317.318.319.320.321.322.323.324.325.326.327.328.329.330.331.332.333.334.335.336.337.338.339.340.341.342.343.344.345.346.347.348.349.350.351.352.353.354.355.356.357.358.359.360.361.362.363.364.365.366.367.368.369.370.371.372.373.374.375.376.377.378.379.380.381.382.383.384.385.386.387.388.389.390.391.392.393.394.395.396.397.398.399.400.401.402.403.404.405.406.407.408.409.410.411.412.413.414.415.416.417.418.419.420.421.422.423.424.425.426.427.428.429.430.431.432.433.434.435.436.437.438.439.440.441.442.443.444.445.446.447.448.449.450.451.452.453.454.455.456.457.458.459.460.461.462.463.464.465.466.467.468.469.470.471.472.473.474.475.476.477.478.479.480.481.482.483.484.485.486.487.488.489.490.491.492.493.494.495.496.497.498.499.500.501.502.503.504.505.506.507.508.509.510.511.512.513.514.515.516.517.518.519.520.521.522.523.524.525.526.527.528.529.530.531.532.533.534.535.536.537.538.539.540.541.542.543.544.545.546.547.548.549.550.551.552.553.554.555.556.557.558.559.560.561.562.563.564.565.566.567.568.569.570.571.572.573.574.575.576.577.578.579.580.581.582.583.584.585.586.587.588.589.590.591.592.593.594.595.596.597.598.599.600.601.602.603.604.605.606.607.608.609.610.611.612.613.614.615.616.617.618.619.620.621.622.623.624.625.626.627.628.629.630.631.632.633.634.635.636.637.638.639.640.641.642.643.644.645.646.647.648.649.650.651.652.653.654.655.656.657.658.659.660.661.662.663.664.665.666.667.668.669.670.671.672.673.674.675.676.677.678.679.680.681.682.683.684.685.686.687.688.689.690.691.692.693.694.695.696.697.698.699.700.701.702.703.704.705.706.707.708.709.710.711.712.713.714.715.716.717.718.719.720.721.722.723.724.725.726.727.728.729.730.731.732.733.734.735.736.737.738.739.740.741.742.743.744.745.746.747.748.749.750.751.752.753.754.755.756.757.758.759.760.761.762.763.764.765.766.767.768.769.770.771.772.773.774.775.776.777.778.779.780.781.782.783.784.785.786.787.788.789.790.791.792.793.794.795.796.797.798.799.800.801.802.803.804.805.806.807.808.809.810.811.812.813.814.815.816.817.818.819.820.821.822.823.824.825.826.827.828.829.830.831.832.833.834.835.836.837.838.839.840.841.842.843.844.845.846.847.848.849.850.851.852.853.854.855.856.857.858.859.860.861.862.863.864.865.866.867.868.869.870.871.872.873.874.875.876.877.878.879.880.881.882.883.884.885.886.887.888.889.890.891.892.893.894.895.896.897.898.899.900.901.902.903.904.905.906.907.908.909.910.911.912.913.914.915.916.917.918.919.920.921.922.923.924.925.926.927.928.929.930.931.932.933.934.935.936.937.938.939.940.941.942.943.944.945.946.947.948.949.950.951.952.953.954.955.956.957.958.959.960.961.962.963.964.965.966.967.968.969.970.971.972.973.974.975.976.977.978.979.980.981.982.983.984.985.986.987.988.989.990.991.992.993.994.995.996.997.998.999.1000.1001.1002.1003.1004.1005.1006.1007.1008.1009.1010.1011.1012.1013.1014.1015.1016.1017.1018.1019.1020.1021.1022.1023.1024.1025.1026.1027.1028.1029.1030.1031.1032.1033.1034.1035.1036.1037.1038.1039.1040.1041.1042.1043.1044.1045.1046.1047.1048.1049.1050.1051.1052.1053.1054.1055.1056.1057.1058.1059.1060.1061.1062.1063.1064.1065.1066.1067.1068.1069.1070.1071.1072.1073.1074.1075.1076.1077.1078.1079.1080.1081.1082.1083.1084.1085.1086.1087.1088.1089.1090.1091.1092.1093.1094.1095.1096.1097.1098.1099.1100.1101.1102.1103.1104.1105.1106.1107.1108.1109.1110.1111.1112.1113.1114.1115.1116.1117.1118.1119.1120.1121.1122.1123.1124.1125.1126.1127.1128.1129.1130.1131.1132.1133.1134.1135.1136.1137.1138.1139.1140.1141.1142.1143.1144.1145.1146.1147.1148.1149.1150.1151.1152.1153.1154.1155.1156.1157.1158.1159.1160.1161.1162.1163.1164.1165.1166.1167.1168.1169.1170.1171.1172.1173.1174.1175.1176.1177.1178.1179.1180.1181.1182.1183.1184.1185.1186.1187.1188.1189.1190.1191.1192.1193.1194.1195.1196.1197.1198.1199.1200.1201.1202.1203.1204.1205.1206.1207.1208.1209.1210.1211.1212.1213.1214.1215.1216.1217.1218.1219.1220.1221.1222.1223.1224.1225.1226.1227.1228.1229.1230.1231.1232.1233.1234.1235.1236.1237.1238.1239.1240.1241.1242.1243.1244.1245.1246.1247.1248.1249.1250.1251.1252.1253.1254.1255.1256.1257.1258.1259.1260.1261.1262.1263.1264.1265.1266.1267.1268.1269.1270.1271.1272.1273.1274.1275.1276.1277.1278.1279.1280.1281.1282.1283.1284.1285.1286.1287.1288.1289.1290.1291.1292.1293.1294.1295.1296.1297.1298.1299.1300.1301.1302.1303.1304.1305.1306.1307.1308.1309.1310.1311.1312.1313.1314.1315.1316.1317.1318.1319.1320.1321.1322.1323.1324.1325.1326.1327.1328.1329.1330.1331.1332.1333.1334.1335.1336.1337.1338.1339.1340.1341.1342.1343.1344.1345.1346.1347.1348.1349.1350.1351.1352.1353.1354.1355.1356.1357.1358.1359.1360.1361.1362.1363.1364.1365.1366.1367.1368.1369.1370.1371.1372.1373.1374.1375.1376.1377.1378.1379.1380.1381.1382.1383.1384.1385.1386.1387.1388.1389.1390.1391.1392.1393.1394.1395.1396.1397.1398.1399.1400.1401.1402.1403.1404.1405.1406.1407.1408.1409.1410.1411.1412.1413.1414.1415.1416.1417.1418.1419.1420.1421.1422.1423.1424.1425.1426.1427.1428.1429.1430.1431.1432.1433.1434.1435.1436.1437.1438.1439.1440.1441.1442.1443.1444.1445.1446.1447.1448.1449.1450.1451.1452.1453.1454.1455.1456.1457.1458.1459.1460.1461.1462.1463.1464.1465.1466.1467.1468.1469.1470.1471.1472.1473.1474.1475.1476.1477.1478.1479.1480.1481.1482.1483.1484.1485.1486.1487.1488.1489.1490.1491.1492.1493.1494.1495.1496.1497.1498.1499.1500.1501.1502.1503.1504.1505.1506.1507.1508.1509.1510.1511.1512.1513.1514.1515.1516.1517.1518.1519.1520.1521.1522.1523.1524.1525.1526.1527.1528.1529.1530.1531.1532.1533.1534.1535.1536.1537.1538.1539.1540.1541.1542.1543.1544.1545.1546.1547.1548.1549.1550.1551.1552.1553.1554.1555.1556.1557.1558.1559.1560.1561.1562.1563.1564.1565.1566.1567.1568.1569.1570.1571.1572.1573.1574.1575.1576.1577.1578.1579.1580.1581.1582.1583.1584.1585.1586.1587.1588.1589.1590.1591.1592.1593.1594.1595.1596.1597.1598.1599.1600.1601.1602.1603.1604.1605.1606.1607.1608.1609.1610.1611.1612.1613.1614.1615.1616.1617.1618.1619.1620.1621.1622.1623.1624.1625.1626.1627.1628.1629.1630.1631.1632.1633.1634.1635.1636.1637.1638.1639.1640.1641.1642.1643.1644.1645.1646.1647.1648.1649.1650.1651.1652.1653.1654.1655.1656.1657.1658.1659.1660.1661.1662.1663.1664.1665.1666.1667.1668.1669.1670.1671.1672.1673.1674.1675.1676.1677.1678.1679.1680.1681.1682.1683.1684.1685.1686.1687.1688.1689.1690.1691.1692.1693.1694.1695.1696.1697.1698.1699.1700.1701.1702.1703.1704.1705.1706.1707.1708.1709.1710.1711.1712.1713.1714.1715.1716.1717.1718.1719.1720.1721.1722.1723.1724.1725.1726.1727.1728.1729.1730.1731.1732.1733.1734.1735.1736.1737.1738.1739.1740.1741.1742.1743.1744.1745.1746.1747.1748.1749.1750.1751.1752.1753.1754.1755.1756.1757.1758.1759.1760.1761.1762.1763.1764.1765.1766.1767.1768.1769.1770.1771.1772.1773.1774.1775.1776.1777.1778.1779.1780.1781.1782.1783.1784.1785.1786.1787.1788.1789.1790.1791.1792.1793.1794.1795.1796.1797.1798.1799.1800.1801.1802.1803.1804.1805.1806.1807.1808.1809.1810.1811.1812.1813.1814.1815.1816.1817.1818.1819.1820.1821.1822.1823.1824.1825.1826.1827.1828.1829.1830.1831.1832.1833.1834.1835.1836.1837.1838.1839.1840.1841.1842.1843.1844.1845.1846.1847.1848.1849.1850.1851.1852.1853.1854.1855.1856.1857.1858.1859.1860.1861.1862.1863.1864.1865.1866.1867.1868.1869.1870.1871.1872.1873.1874.1875.1876.1877.1878.1879.1880.1881.1882.1883.1884.1885.1886.1887.1888.1889.1890.1891.1892.1893.1894.1895.1896.1897.1898.1899.1900.1901.1902.1903.1904.1905.1906.1907.1908.1909.1910.1911.1912.1913.1914.1915.1916.1917.1918.1919.1920.1921.1922.1923.1924.1925.1926.1927.1928.1929.1930.1931.1932.1933.1934.1935.1936.1937.1938.1939.1940.1941.1942.1943.1944.1945.1946.1947.1948.1949.1950.1951.1952.1953.1954.1955.1956.1957.1958.1959.1960.1961.1962.1963.1964.1965.1966.1967.1968.1969.1970.1971.1972.1973.1974.1975.1976.1977.1978.1979.1980.1981.1982.1983.1984.1985.1986.1987.1988.1989.1990.1991.1992.1993.1994.1995.1996.1997.1998.1999.2000.2001.2002.2003.2004.2005.2006.2007.2008.2009.2010.2011.2012.2013.2014.2015.2016.2017.2018.2019.2020.2021.2022.2023.2024.2025.2026.2027.2028.2029.2030.2031.2032.2033.2034.2035.2036.2037.2038.2039.2040.2041.2042.2043.2044.2045.2046.2047.2048.2049.2050.2051.2052.2053.2054.2055.2056.2057.2058.2059.2060.2061.2062.2063.2064.2065.2066.2067.2068.2069.2070.2071.2072.2073.2074.2075.2076.2077.2078.2079.2080.2081.2082.2083.2084.2085.2086.2087.2088.2089.2090.2091.2092.2093.2094.2095.2096.2097.2098.2099.2100.2101.2102.2103.2104.2105.2106.2107.2108.2109.2110.2111.2112.2113.2114.2115.2116.2117.2118.2119.2120.2121.2122.2123.2124.2125.2126.2127.2128.2129.2130.2131.2132.2133.2134.2135.2136.2137.2138.2139.2140.2141.2142.2143.2144.2145.2146.2147.2148.2149.2150.2151.2152.2153.2154.2155.2156.2157.2158.2159.2160.2161.2162.2163.2164.2165.2166.2167.2168.2169.2170.2171.2172.2173.2174.2175.2176.2177.2178.2179.2180.2181.2182.2183.2184.2185.2186.2187.2188.2189.2190.2191.2192.2193.2194.2195.2196.2197.2198.2199.2200.2201.2202.2203.2204.2205.2206.2207.2208.2209.2210.2211.2212.2213.2214.2215.2216.2217.2218.2219.2220.2221.2222.2223.2224.2225.2226.2227.2228.2229.2230.2231.2232.2233.2234.2235.2236.2237.2238.2239.2240.2241.2242.2243.2244.2245.2246.2247.2248.2249.2250.2251.2252.2253.2254.2255.2256.2257.2258.2259.2260.2261.2262.2263.2264.2265.2266.2267.2268.2269.2270.2271.2272.2273.2274.2275.2276.2277.2278.2279.2280.2281.2282.2283.2284.2285.2286.2287.2288.2289.2290.2291.2292.2293.2294.2295.2296.2297.2298.2299.2300.2301.2302.2303.2304.2305.2306.2307.2308.2309.2310.2311.2312.2313.2314.2315.2316.2317.2318.2319.2320.2321.2322.2323.2324.2325.2326.2327.2328.2329.2330.2331.2332.2333.2334.2335.2336.2337.2338.2339.2340.2341.2342.2343.2344.2345.2346.2347.2348.2349.2350.2351.2352.2353.2354.2355.2356.2357.2358.2359.2360.2361.2362.2363.2364.2365.2366.2367.2368.2369.2370.2371.2372.2373.2374.2375.2376.2377.2378.2379.2380.2381.2382.2383.2384.2385.2386.2387.2388.2389.2390.2391.2392.2393.2394.2395.2396.2397.2398.2399.2400.2401.2402.2403.2404.2405.2406.2407.2408.2409.2410.2411.2412.2413.2414.2415.2416.2417.2418.2419.2420.2421.2422.2423.2424.2425.2426.2427.2428.2429.2430.2431.2432.2433.2434.2435.2436.2437.2438.2439.2440.2441.2442.2443.2444.2445.2446.2447.2448.2449.2450.2451.2452.2453.2454.2455.2456.2457.2458.2459.2460.2461.2462.2463.2464.2465.2466.2467.2468.2469.2470.2471.2472.2473.2474.2475.2476.2477.2478.2479.2480.2481.2482.2483.2484.2485.2486.2487.2488.2489.2490.2491.2492.2493.2494.2495.2496.2497.2498.2499.2500.2501.2502.2503.2504.2505.2506.2507.2508.2509.2510.2511.2512.2513.2514.2515.2516.2517.2518.2519.2520.2521.2522.2523.2524.2525.2526.2527.2528.2529.2530.2531.2532.2533.2534.2535.2536.2537.2538.2539.2540.2541.2542.2543.2544.2545.2546.2547.2548.2549.2550.2551.2552.2553.2554.2555.2556.2557.2558.2559.2560.2561.2562.2563.2564.2565.2566.2567.2568.2569.2570.2571.2572.2573.2574.2575.2576.2577.2578.2579.2580.2581.2582.2583.2584.2585.2586.2587.2588.2589.2590.2591.2592.2593.2594.2595.2596.2597.2598.2599.2600.2601.2602.2603.2604.2605.2606.2607.2608.2609.2610.2611.2612.2613.2614.2615.2616.2617.2618.2619.2620.2621.2622.2623.2624.2625.2626.2627.2628.2629.2630.2631.2632.2633.2634.2635.2636.2637.2638.2639.2640.2641.2642.2643.2644.2645.2646.2647.2648.2649.2650.2651.2652.2653.2654.2655.2656.2657.2658.2659.2660.2661.2662.2663.2664.2665.2666.2667.2668.2669.2670.2671.2672.2673.2674.2675.2676.2677.2678.2679.2680.2681.2682.2683.2684.2685.2686.2687.2688.2689.2690.2691.2692.2693.2694.2695.2696.2697.2698.2699.2700.2701.2702.2703.2704.2705.2706.2707.2708.2709.2710.2711.2712.2713.2714.2715.2716.2717.2718.2719.2720.2721.2722.2723.2724.2725.2726.2727.2728.2729.2730.2731.2732.2733.2734.2735.2736.2737.2738.2739.2740.2741.2742.2743.2744.2745.2746.2747.2748.2749.2750.2751.2752.2753.2754.2755.2756.2757.2758.2759.2760.2761.2762.2763.2764.2765.2766.2767.2768.2769.2770.2771.2772.2773.2774.2775.2776.2777.2778.2779.2780.2781.2782.2783.2784.2785.2786.2787.2788.2789.2790.2791.2792.2793.2794.2795.2796.2797.2798.2799.2800.2801.2802.2803.2804.2805.2806.2807.2808.2809.2810.2811.2812.2813.2814.2815.2816.2817.2818.2819.2820.2821.2822.2823.2824.2825.2826.2827.2828.2829.2830.2831.2832.2833.2834.2835.2836.2837.2838.2839.2840.2841.2842.2843.2844.2845.2846.2847.2848.2849.2850.2851.2852.2853.2854.2855.2856.2857.2858.2859.2860.2861.2862.2863.2864.2865.2866.2867.2868.2869.2870.2871.2872.2873.2874.2875.2876.2877.2878.2879.2880.2881.2882.2883.2884.2885.2886.2887.2888.2889.2890.2891.2892.2893.2894.2895.2896.2897.2898.2899.2900.2901.2902.2903.2904.2905.2906.2907.2908.2909.2910.2911.2912.2913.2914.2915.2916.2917.2918.2919.2920.2921.2922.2923.2924.2925.2926.2927.2928.2929.2930.2931.2932.2933.2934.2935.2936.2937.2938.2939.2940.2941.2942.2943.2944.2945.2946.2947.2948.2949.2950.2951.2952.2953.2954.2955.2956.2957.2958.2959.2960.2961.2962.2963.2964.2965.2966.2967.2968.2969.2970.2971.2972.2973.2974.2975.2976.2977.2978.2979.2980.2981.2982.2983.2984.2985.2986.2987.2988.2989.2990.2991.2992.2993.2994.2995.2996.2997.2998.2999.3000.3001.3002.3003.3004.3005.3006.3007.3008.3009.3010.3011.3012.3013.3014.3015.3016.3017.3018.3019.3020.3021.3022.3023.3024.3025.3026.3027.3028.3029.3030.3031.3032.3033.3034.3035.3036.3037.3038.3039.3040.3041.3042.3043.3044.3045.3046.3047.3048.3049.3050.3051.3052.3053.3054.3055.3056.3057.3058.3059.3060.3061.3062.3063.3064.3065.3066.3067.3068.3069.3070.3071.3072.3073.3074.3075.3076.3077.3078.3079.3080.3081.3082.3083.3084.3085.3086.3087.3088.3089.3090.3091.3092.3093.3094.3095.3096.3097.3098.3099.3100.3101.3102.3103.3104.3105.3106.3107.3108.3109.3110.3111.3112.3113.3114.3115.3116.3117.3118.3119.3120.3121.3122.3123.3124.3125.3126.3127.3128.3129.3130.3131.3132.3133.3134.3135.3136.3137.3138.3139.3140.3141.3142.3143.3144.3145.3146.3147.3148.3149.3150.3151.3152.3153.3154.3155.3156.3157.3158.3159.3160.3161.3162.3163.3164.3165.3166.3167.3168.3169.3170.3171.3172.3173.3174.3175.3176.3177.3178.3179.3180.3181.3182.3183.3184.3185.3186.3187.3188.3189.3190.3191.3192.3193.3194.3195.3196.3197.3198.3199.3200.3201.3202.3203.3204.3205.3206.3207.3208.3209.3210.3211.3212.3213.3214.3215.3216.3217.3218.3219.3220.3221.3222.3223.3224.3225.3226.3227.3228.3229.3230.3231.3232.3233.3234.3235.3236.3237.3238.3239.3240.3241.3242.3243.3244.3245.3246.3247.3248.3249.3250.3251.3252.3253.3254.3255.3256.3257.3258.3259.3260.3261.3262.3263.3264.3265.3266.3267.3268.3269.3270.3271.3272.3273.3274.3275.3276.3277.3278.3279.3280.3281.3282.3283.3284.3285.3286.3287.3288.3289.3290.3291.3292.3293.3294.3295.3296.3297.3298.3299.3300.3301.3302.3303.3304.3305.3306.3307.3308.3309.3310.3311.3312.3313.3314.3315.3316.3317.3318.3319.3320.3321.3322.3323.3324.3325.3326.3327.3328.3329.3330.3331.3332.3333.3334.3335.3336.3337.3338.3339.3340.3341.3342.3343.3344.3345.3346.3347.3348.3349.3350.3351.3352.3353.3354.3355.3356.3357.3358.3359.3360.3361.3362.3363.3364.3365.3366.3367.3368.3369.3370.3371.3372.3373.3374.3375.3376.3377.3378.3379.3380.3381.3382.3383.3384.3385.3386.3387.3388.3389.3390.3391.3392.3393.3394.3395.3396.3397.3398.3399.3400.3401.3402.3403.3404.3405.3406.3407.3408.3409.3410.3411.3412.3413.3414.3415.3416.3417.3418.3419.3420.3421.3422.3423.3424.3425.3426.3427.3428.3429.3430.3431.3432.3433.3434.3435.3436.3437.3438.3439.3440.3441.3442.3443.3444.3445.3446.3447.3448.3449.3450.3451.3452.3453.3454.3455.3456.3457.3458.3459.3460.3461.3462.3463.3464.3465.3466.3467.3468.3469.3470.3471.3472.3473.3474.3475.3476.3477.3478.3479.3480.3481.3482.3483.3484.3485.3486.3487.3488.3489.3490.3491.3492.3493.3494.3495.3496.3497.3498.3499.3500.3501.3502.3503.3504.3505.3506.3507.3508.3509.3510.3511.3512.3513.3514.3515.3516.3517.3518.3519.3520.3521.3522.3523.3524.3525.3526.3527.3528.3529.3530.3531.3532.3533.3534.3535.3536.3537.3538.3539.3540.3541.3542.3543.3544.3545.3546.3547.3548.3549.3550.3551.3552.3553.3554.3555.3556.3557.3558.3559.3560.3561.3562.3563.3564.3565.3566.3567.3568.3569.3570.3571.3572.3573.3574.3575.3576.3577.3578.3579.3580.3581.3582.3583.3584.3585.3586.3587.3588.3589.3590.3591.3592.3593.3594.3595.3596.3597.3598.3599.3600.3601.3602.3603.3604.3605.3606.3607.3608.3609.3610.3611.3612.3613.3614.3615.3616.3617.3618.3619.3620.3621.3622.3623.3624.3625.3626.3627.3628.3629.3630.3631.3632.3633.3634.3635.3636.3637.3638.3639.3640.3641.3642.3643.3644.3645.3646.3647.3648.3649.3650.3651.3652.3653.3654.3655.3656.3657.3658.3659.3660.3661.3662.3663.3664.3665.3666.3667.3668.3669.3670.3671.3672.3673.3674.3675.3676.3677.3678.3679.3680.3681.3682.3683.3684.3685.3686.3687.3688.3689.3690.3691.3692.3693.3694.3695.3696.3697.3698.3699.3700.3701.3702.3703.3704.3705.3706.3707.3708.3709.3710.3711.3712.3713.3714.3715.3716.3717.3718.3719.3720.3721.3722.3723.3724.3725.3726.3727.3728.3729.3730.3731.3732.3733.3734.3735.3736.3737.3738.3739.3740.3741.3742.3743.3744.3745.3746.3747.3748.3749.3750.3751.3752.3753.3754.3755.3756.3757.3758.3759.3760.3761.3762.3763.3764.3765.3766.3767.3768.3769.3770.3771.3772.3773.3774.3775.3776.3777.3778.3779.3780.3781.3782.3783.3784.3785.3786.3787.3788.3789.3790.3791.3792.3793.3794.3795.3796.3797.3798.3799.3800.3801.3802.3803.3804.3805.3806.3807.3808.3809.3810.3811.3812.3813.3814.3815.3816.3817.3818.3819.3820.3821.3822.3823.3824.3825.3826.3827.3828.3829.3830.3831.3832.3833.3834.3835.3836.3837.3838.3839.3840.3841.3842.3843.3844.3845.3846.3847.3848.3849.3850.3851.3852.3853.3854.3855.3856.3857.3858.3859.3860.3861.3862.3863.3864.3865.3866.3867.3868.3869.3870.3871.3872.3873.3874.3875.3876.3877.3878.3879.3880.3881.3882.3883.3884.3885.3886.3887.3888.3889.3890.3891.3892.3893.3894.3895.3896.3897.3898.3899.3900.3901.3902.3903.3904.3905.3906.3907.3908.3909.3910.3911.3912.3913.3914.3915.3916.3917.3918.3919.3920.3921.3922.3923.3924.3925.3926.3927.3928.3929.3930.3931.3932.3933.3934.3935.3936.3937.3938.3939.3940.3941.3942.3943.3944.3945.3946.3947.3948.3949.3950.3951.3952.3953.3954.3955.3956.3957.3958.3959.3960.3961.3962.3963.3964.3965.3966.3967.3968.3969.3970.3971.3972.3973.3974.3975.3976.3977.3978.3979.3980.3981.3982.3983.3984.3985.3986.3987.3988.3989.3990.3991.3992.3993.3994.3995.3996.3997.3998.3999.4000.4001.4002.4003.4004.4005.4006.4007.4008.4009.4010.4011.4012.4013.4014.4015.4016.4017.4018.4019.4020.4021.4022.4023.4024.4025.4026.4027.4028.4029.4030.4031.4032.4033.4034.4035.4036.4037.4038.4039.4040.4041.4042.4043.4044.4045.4046.4047.4048.4049.4050.4051.4052.4053.4054.4055.4056.4057.4058.4059.4060.4061.4062.4063.4064.4065.4066.4067.4068.4069.4070.4071.4072.4073.4074.4075.4076.4077.4078.4079.4080.4081.4082.4083.4084.4085.4086.4087.4088.4089.4090.4091.4092.4093.4094.4095.4096.4097.4098.4099.4100.4101.4102.4103.4104.4105.4106.4107.4108.4109.4110.4111.4112.4113.4114.4115.4116.4117.4118.4119.4120.4121.4122.4123.4124.4125.4126.4127.4128.4129.4130.4131.4132.4133.4134.4135.4136.4137.4138.4139.4140.4141.4142.4143.4144.4145.4146.4147.4148.4149.4150.4151.4152.4153.4154.4155.4156.4157.4158.4159.4160.4161.4162.4163.4164.4165.4166.4167.4168.4169.4170.4171.4172.4173.4174.4175.4176.4177.4178.4179.4180.4181.4182.4183.4184.4185.4186.4187.4188.4189.4190.4191.4192.4193.4194.4195.4196.4197.4198.4199.4200.4201.4202.4203.4204.4205.4206.4207.4208.4209.4210.4211.4212.4213.4214.4215.4216.4217.4218.4219.4220.4221.4222.4223.4224.4225.4226.4227.4228.4229.4230.4231.4232.4233.4234.4235.4236.4237.4238.4239.4240.4241.4242.4243.4244.4245.4246.4247.4248.4249.4250.4251.4252.4253.4254.4255.4256.4257.4258.4259.4260.4261.4262.4263.4264.4265.4266.4267.4268.4269.4270.4271.4272.4273.4274.4275.4276.4277.4278.4279.4280.4281.4282.4283.4284.4285.4286.4287.4288.4289.4290.4291.4292.4293.4294.4295.4296.4297.4298.4299.4300.4301.4302.4303.4304.4305.4306.4307.4308.4309.4310.4311.4312.4313.4314.4315.4316.4317.4318.4319.4320.4321.4322.4323.4324.4325.4326.4327.4328.4329.4330.4331.4332.4333.4334.4335.4336.4337.4338.4339.4340.4341.4342.4343.4344.4345.4346.4347.4348.4349.4350.4351.4352.4353.4354.4355.4356.4357.4358.4359.4360.4361.4362.4363.4364.4365.4366.4367.4368.4369.4370.4371.4372.4373.4374.4375.4376.4377.4378.4379.4380.4381.4382.4383.4384.4385.4386.4387.4388.4389.4390.4391.4392.4393.4394.4395.4396.4397.4398.4399.4400.4401.4402.4403.4404.4405.4406.4407.4408.4409.4410.4411.4412.4413.4414.4415.4416.4417.4418.4419.4420.4421.4422.4423.4424.4425.4426.4427.4428.4429.4430.4431.4432.4433.4434.4435.4436.4437.4438.4439.4440.4441.4442.4443.4444.4445.4446.4447.4448.4449.4450.4451.4452.4453.4454.4455.4456.4457.4458.4459.4460.4461.4462.4463.4464.4465.4466.4467.4468.4469.4470.4471.4472.4473.4474.4475.4476.4477.4478.4479.4480.4481.4482.4483.4484.4485.4486.4487.4488.4489.4490.4491.4492.4493.4494.4495.4496.4497.4498.4499.4500.4501.4502.4503.4504.4505.4506.4507.4508.4509.4510.4511.4512.4513.4514.4515.4516.4517.4518.4519.4520.4521.4522.4523.4524.4525.4526.4527.4528.4529.4530.4531.4532.4533.4534.4535.4536.4537.4538.4539.4540.4541.4542.4543.4544.4545.4546.4547.4548.4549.4550.4551.4552.4553.4554.4555.4556.4557.4558.4559.4560.4561.4562.4563.4564.4565.4566.4567.4568.4569.4570.4571.4572.4573.4574.4575.4576.4577.4578.4579.4580.4581.4582.4583.4584.4585.4586.4587.4588.4589.4590.4591.4592.4593.4594.4595.4596.4597.4598.4599.4600.4601.4602.4603.4604.4605.4606.4607.4608.4609.4610.4611.4612.4613.4614.4615.4616.4617.4618.4619.4620.4621.4622.4623.4624.4625.4626.4627.4628.4629.4630.4631.4632.4633.4634.4635.4636.4637.4638.4639.4640.4641.4642.4643.4644.4645.4646.4647.4648.4649.4650.4651.4652.4653.4654.4655.4656.4657.4658.4659.4660.4661.4662.4663.4664.4665.4666.4667.4668.4669.4670.4671.4672.4673.4674.4675.4676.4677.4678.4679.4680.4681.4682.4683.4684.4685.4686.4687.4688.4689.4690.4691.4692.4693.4694.4695.4696.4697.4698.4699.4700.4701.4702.4703.4704.4705.4706.4707.4708.4709.4710.4711.4712.4713.4714.4715.4716.4717.4718.4719.4720.4721.4722.4723.4724.4725.4726.4727.4728.4729.4730.4731.4732.4733.4734.4735.4736.4737.4738.4739.4740.4741.4742.4743.4744.4745.4746.4747.4748.4749.4750.4751.4752.4753.4754.4755.4756.4757.4758.4759.4760.4761.4762.4763.4764.4765.4766.4767.4768.4769.4770.4771.4772.4773.4774.4775.4776.4777.4778.4779.4780.4781.4782.4783.4784.4785.4786.4787.4788.4789.4790.4791.4792.4793.4794.4795.4796.4797.4798.4799.4800.4801.4802.4803.4804.4805.4806.4807.4808.4809.4810.4811.4812.4813.4814.4815.4816.4817.4818.4819.4820.4821.4822.4823.4824.4825.4826.4827.4828.4829.4830.4831.4832.4833.4834.4835.4836.4837.4838.4839.4840.4841.4842.4843.4844.4845.4846.4847.4848.4849.4850.4851.4852.4853.4854.4855.4856.4857.4858.4859.4860.4861.4862.4863.4864.4865.4866.4867.4868.4869.4870.4871.4872.4873.4874.4875.4876.4877.4878.4879.4880.4881.4882.4883.4884.4885.4886.4887.4888.4889.4890.4891.4892.4893.4894.4895.4896.4897.4898.4899.4900.4901.4902.4903.4904.4905.4906.4907.4908.4909.4910.4911.4912.4913.4914.4915.4916.4917.4918.4919.4920.4921.4922.4923.4924.4925.4926.4927.4928.4929.4930.4931.4932.4933.4934.4935.4936.4937.4938.4939.4940.4941.4942.4943.4944.4945.4946.4947.4948.4949.4950.4951.4952.4953.4954.4955.4956.4957.4958.4959.4960.4961.4962.4963.4964.4965.4966.4967.4968.4969.4970.4971.4972.4973.4974.4975.4976.4977.4978.4979.4980.4981.4982.4983.4984.4985.4986.4987.4988.4989.4990.4991.4992.4993.4994.4995.4996.4997.4998.4999.5000.5001.5002.5003.5004.5005.5006.5007.5008.5009.5010.5011.5012.5013.5014.5015.5016.5017.5018.5019.5020.5021.5022.5023.5024.5025.5026.5027.5028.5029.5030.5031.5032.5033.5034.5035.5036.5037.5038.5039.5040.5041.5042.5043.5044.5045.5046.5047.5048.5049.5050.5051.5052.5053.5054.5055.5056.5057.5058.5059.5060.5061.5062.5063.5064.5065.5066.5067.5068.5069.5070.5071.5072.5073.5074.5075.5076.5077.5078.5079.5080.5081.5082.5083.5084.5085.5086.5087.5088.5089.5090.5091.5092.5093.5094.5095.5096.5097.5098.5099.5100.5101.5102.5103.5104.5105.5106.5107.5108.5109.5110.5111.5112.5113.5114.5115.5116.5117.5118.5119.5120.5121.5122.5123.5124.5125.5126.5127.5128.5129.5130.5131.5132.5133.5134.5135.5136.5137.5138.5139.5140.5141.5142.5143.5144.5145.5146.5147.5148.5149.5150.5151.5152.5153.5154.5155.5156.5157.5158.5159.5160.5161.5162.5163.5164.5165.5166.5167.5168.5169.5170.5171.5172.5173.5174.5175.5176.5177.5178.5179.5180.5181.5182.5183.5184.5185.5186.5187.5188.5189.5190.5191.5192.5193.5194.5195.5196.5197.5198.5199.5200.5201.5202.5203.5204.5205.5206.5207.5208.5209.5210.5211.5212.5213.5214.5215.5216.5217.5218.5219.5220.5221.5222.5223.5224.5225.5226.5227.5228.5229.5230.5231.5232.5233.5234.5235.5236.5237.5238.5239.5240.5241.5242.5243.5244.5245.5246.5247.5248.5249.5250.5251.5252.5253.5254.5255.5256.5257.5258.5259.5260.5261.5262.5263.5264.5265.5266.5267.5268.5269.5270.5271.5272.5273.5274.5275.5276.5277.5278.5279.5280.5281.5282.5283.5284.5285.5286.5287.5288.5289.5290.5291.5292.5293.5294.5295.5296.5297.5298.5299.5300.5301.5302.5303.5304.5305.5306.5307.5308.5309.5310.5311.5312.5313.5314.5315.5316.5317.5318.5319.5320.5321.5322.5323.5324.5325.5326.5327.5328.5329.5330.5331.5332.5333.5334.5335.5336.5337.5338.5339.5340.5341.5342.5343.5344.5345.5346.5347.5348.5349.5350.5351.5352.5353.5354.5355.5356.5357.5358.5359.5360.5361.5362.5363.5364.5365.5366.5367.5368.5369.5370.5371.5372.5373.5374.5375.5376.5377.5378.5379.5380.5381.5382.5383.5384.5385.5386.5387.5388.5389.5390.5391.5392.5393.5394.5395.5396.5397.5398.5399.5400.5401.5402.5403.5404.5405.5406.5407.5408.5409.5410.5411.5412.5413.5414.5415.5416.5417.5418.5419.5420.5421.5422.5423.5424.5425.5426.5427.5428.5429.5430.5431.5432.5433.5434.5435.5436.5437.5438.5439.5440.5441.5442.5443.5444.5445.5446.5447.5448.5449.5450.5451.5452.5453.5454.5455.5456.5457.5458.5459.5460.5461.5462.5463.5464.5465.5466.5467.5468.5469.5470.5471.5472.5473.5474.5475.5476.5477.5478.5479.5480.5481.5482.5483.5484.5485.5486.5487.5488.5489.5490.5491.5492.5493.5494.5495.5496.5497.5498.5499.5500.5501.5502.5503.5504.5505.5506.5507.5508.5509.5510.5511.5512.5513.5514.5515.5516.5517.5518.5519.5520.5521.5522.5523.5524.5525.5526.5527.5528.5529.5530.5531.5532.5533.5534.5535.5536.5537.5538.5539.5540.5541.5542.5543.5544.5545.5546.5547.5548.5549.5550.5551.5552.5553.5554.5555.5556.5557.5558.5559.5560.5561.5562.5563.5564.5565.5566.5567.5568.5569.5570.5571.5572.5573.5574.5575.5576.5577.5578.5579.5580.5581.5582.5583.5584.5585.5586.5587.5588.5589.5590.5591.5592.5593.5594.5595.5596.5597.5598.5599.5600.5601.5602.5603.5604.5605.5606.5607.5608.5609.5610.5611.5612.5613.5614.5615.5616.5617.5618.5619.5620.5621.5622.5623.5624.5625.5626.5627.5628.5629.5630.5631.5632.5633.5634.5635.5636.5637.5638.5639.5640.5641.5642.5643.5644.5645.5646.5647.5648.5649.5650.5651.5652.5653.5654.5655.5656.5657.5658.5659.5660.5661.5662.5663.5664.5665.5666.5667.5668.5669.5670.5671.5672.5673.5674.5675.5676.5677.5678.5679.5680.5681.5682.5683.5684.5685.5686.5687.5688.5689.5690.5691.5692.5693.5694.5695.5696.5697.5698.5699.5700.5701.5702.5703.5704.5705.5706.5707.5708.5709.5710.5711.5712.5713.5714.5715.5716.5717.5718.5719.5720.5721.5722.5723.5724.5725.5726.5727.5728.5729.5730.5731.5732.5733.5734.5735.5736.5737.5738.5739.5740.5741.5742.5743.5744.5745.5746.5747.5748.5749.5750.5751.5752.5753.5754.5755.5756.5757.5758.5759.5760.5761.5762.5763.5764.5765.5766.5767.5768.5769.5770.5771.5772.5773.5774.5775.5776.5777.5778.5779.5780.5781.5782.5783.5784.5785.5786.5787.5788.5789.5790.5791.5792.5793.5794.5795.5796.5797.5798.5799.5800.5801.5802.5803.5804.5805.5806.5807.5808.5809.5810.5811.5812.5813.5814.5815.5816.5817.5818.5819.5820.5821.5822.5823.5824.5825.5826.5827.5828.5829.5830.5831.5832.5833.5834.5835.5836.5837.5838.5839.5840.5841.5842.5843.5844.5845.5846.5847.5848.5849.5850.5851.5852.5853.5854.5855.5856.5857.5858.5859.5860.5861.5862.5863.5864.5865.5866.5867.5868.5869.5870.5871.5872.5873.5874.5875.5876.5877.5878.5879.5880.5881.5882.5883.5884.5885.5886.5887.5888.5889.5890.5891.5892.5893.5894.5895.5896.5897.5898.5899.5900.5901.5902.5903.5904.5905.5906.5907.5908.5909.5910.5911.5912.5913.5914.5915.5916.5917.5918.5919.5920.5921.5922.5923.5924.5925.5926.5927.5928.5929.5930.5931.5932.5933.5934.5935.5936.5937.5938.5939.5940.5941.5942.5943.5944.5945.5946.5947.5948.5949.5950.5951.5952.5953.5954.5955.5956.5957.5958.5959.5960.5961.5962.5963.5964.5965.5966.5967.5968.5969.5970.5971.5972.5973.5974.5975.5976.5977.5978.5979.5980.5981.5982.5983.5984.5985.5986.5987.5988.5989.5990.5991.5992.5993.5994.5995.5996.5997.5998.5999.6000.6001.6002.6003.6004.6005.6006.6007.6008.6009.6010.6011.6012.6013.6014.6015.6016.6017.6018.6019.6020.6021.6022.6023.6024.6025.6026.6027.6028.6029.6030.6031.6032.6033.6034.6035.6036.6037.6038.6039.6040.6041.6042.6043.6044.6045.6046.6047.6048.6049.6050.6051.6052.6053.6054.6055.6056.6057.6058.6059.6060.6061.6062.6063.6064.6065.6066.6067.6068.6069.6070.6071.6072.6073.6074.6075.6076.6077.6078.6079.6080.6081.6082.6083.6084.6085.6086.6087.6088.6089.6090.6091.6092.6093.6094.6095.6096.6097.6098.6099.6100.6101.6102.6103.6104.6105.6106.6107.6108.6109.6110.6111.6112.6113.6114.6115.6116.6117.6118.6119.6120.6121.6122.6123.6124.6125.6126.6127.6128.6129.6130.6131.6132.6133.6134.6135.6136.6137.6138.6139.6140.6141.6142.6143.6144.6145.6146.6147.6148.6149.6150.6151.6152.6153.6154.6155.6156.6157.6158.6159.6160.6161.6162.6163.6164.6165.6166.6167.6168.6169.6170.6171.6172.6173.6174.6175.6176.6177.6178.6179.6180.6181.6182.6183.6184.6185.6186.6187.6188.6189.6190.6191.6192.6193.6194.6195.6196.6197.6198.6199.6200.6201.6202.6203.6204.6205.6206.6207.6208.6209.6210.6211.6212.6213.6214.6215.6216.6217.6218.6219.6220.6221.6222.6223.6224.6225.6226.6227.6228.6229.6230.6231.6232.6233.6234.6235.6236.6237.6238.6239.6240.6241.6242.6243.6244.6245.6246.6247.6248.6249.6250.6251.6252.6253.6254.6255.6256.6257.6258.6259.6260.6261.6262.6263.6264.6265.6266.6267.6268.6269.6270.6271.6272.6273.6274.6275.6276.6277.6278.6279.6280.6281.6282.6283.6284.6285.6286.6287.6288.6289.6290.6291.6292.6293.6294.6295.6296.6297.6298.6299.6300.6301.6302.6303.6304.6305.6306.6307.6308.6309.6310.6311.6312.6313.6314.6315.6316.6317.6318.6319.6320.6321.6322.6323.6324.6325.6326.6327.6328.6329.6330.6331.6332.6333.6334.6335.6336.6337.6338.6339.6340.6341.6342.6343.6344.6345.6346.6347.6348.6349.6350.6351.6352.6353.6354.6355.6356.6357.6358.6359.6360.6361.6362.6363.6364.6365.6366.6367.6368.6369.6370.6371.6372.6373.6374.6375.6376.6377.6378.6379.6380.6381.6382.6383.6384.6385.6386.6387.6388.6389.6390.6391.6392.6393.6394.6395.6396.6397.6398.6399.6400.6401.6402.6403.6404.6405.6406.6407.6408.6409.6410.6411.6412.6413.6414.6415.6416.6417.6418.6419.6420.6421.6422.6423.6424.6425.6426.6427.6428.6429.6430.6431.6432.6433.6434.6435.6436.6437.6438.6439.6440.6441.6442.6443.6444.6445.6446.6447.6448.6449.6450.6451.6452.6453.6454.6455.6456.6457.6458.6459.6460.6461.6462.6463.6464.6465.6466.6467.6468.6469.6470.6471.6472.6473.6474.6475.6476.6477.6478.6479.6480.6481.6482.6483.6484.6485.6486.6487.6488.6489.6490.6491.6492.6493.6494.6495.6496.6497.6498.6499.6500.6501.6502.6503.6504.6505.6506.6507.6508.6509.6510.6511.6512.6513.6514.6515.6516.6517.6518.6519.6520.6521.6522.6523.6524.6525.6526.6527.6528.6529.6530.6531.6532.6533.6534.6535.6536.6537.6538.6539.6540.6541.6542.6543.6544.6545.6546.6547.6548.6549.6550.6551.6552.6553.6554.6555.6556.6557.6558.6559.6560.6561.6562.6563.6564.6565.6566.6567.6568.6569.6570.6571.6572.6573.6574.6575.6576.6577.6578.6579.6580.6581.6582.6583.6584.6585.6586.6587.6588.6589.6590.6591.6592.6593.6594.6595.6596.6597.6598.6599.6600.6601.6602.6603.6604.6605.6606.6607.6608.6609.6610.6611.6612.6613.6614.6615.6616.6617.6618.6619.6620.6621.6622.6623.6624.6625.6626.6627.6628.6629.6630.6631.6632.6633.6634.6635.6636.6637.6638.6639.6640.6641.6642.6643.6644.6645.6646.6647.6648.6649.6650.6651.6652.6653.6654.6655.6656.6657.6658.6659.6660.6661.6662.6663.6664.6665.6666.6667.6668.6669.6670.6671.6672.6673.6674.6675.6676.6677.6678.6679.6680.6681.6682.6683.6684.6685.6686.6687.6688.6689.6690.6691.6692.6693.6694.6695.6696.6697.6698.6699.6700.6701.6702.6703.6704.6705.6706.6707.6708.6709.6710.6711.6712.6713.6714.6715.6716.6717.6718.6719.6720.6721.6722.6723.6724.6725.6726.6727.6728.6729.6730.6731.6732.6733.6734.6735.6736.6737.6738.6739.6740.6741.6742.6743.6744.6745.6746.6747.6748.6749.6750.6751.6752.6753.6754.6755.6756.6757.6758.6759.6760.6761.6762.6763.6764.6765.6766.6767.6768.6769.6770.6771.6772.6773.6774.6775.6776.6777.6778.6779.6780.6781.6782.6783.6784.6785.6786.6787.6788.6789.6790.6791.6792.6793.6794.6795.6796.6797.6798.6799.6800.6801.6802.6803.6804.6805.6806.6807.6808.6809.6810.6811.6812.6813.6814.6815.6816.6817.6818.6819.6820.6821.6822.6823.6824.6825.6826.6827.6828.6829.6830.6831.6832.6833.6834.6835.6836.6837.6838.6839.6840.6841.6842.6843.6844.6845.6846.6847.6848.6849.6850.6851.6852.6853.6854.6855.6856.6857.6858.6859.6860.6861.6862.6863.6864.6865.6866.6867.6868.6869.6870.6871.6872.6873.6874.6875.6876.6877.6878.6879.6880.6881.6882.6883.6884.6885.6886.6887.6888.6889.6890.6891.6892.6893.6894.6895.6896.6897.6898.6899.6900.6901.6902.6903.6904.6905.6906.6907.6908.6909.6910.6911.6912.6913.6914.6915.6916.6917.6918.6919.6920.6921.6922.6923.6924.6925.6926.6927.6928.6929.6930.6931.6932.6933.6934.6935.6936.6937.6938.6939.6940.6941.6942.6943.6944.6945.6946.6947.6948.6949.6950.6951.6952.6953.6954.6955.6956.6957.6958.6959.6960.6961.6962.6963.6964.6965.6966.6967.6968.6969.6970.6971.6972.6973.6974.6975.6976.6977.6978.6979.6980.6981.6982.6983.6984.6985.6986.6987.6988.6989.6990.6991.6992.6993.6994.6995.6996.6997.6998.6999.7000.7001.7002.7003.7004.7005.7006.7007.7008.7009.7010.7011.7012.7013.7014.7015.7016.7017.7018.7019.7020.7021.7022.7023.7024.7025.7026.7027.7028.7029.7030.7031.7032.7033.7034.7035.7036.7037.7038.7039.7040.7041.7042.7043.7044.7045.7046.7047.7048.7049.7050.7051.7052.7053.7054.7055.7056.7057.7058.7059.7060.7061.7062.7063.7064.7065.7066.7067.7068.7069.7070.7071.7072.7073.7074.7075.7076.7077.7078.7079.7080.7081.7082.7083.7084.7085.7086.7087.7088.7089.7090.7091.7092.7093.7094.7095.7096.7097.7098.7099.7100.7101.7102.7103.7104.7105.7106.7107.7108.7109.7110.7111.7112.7113.7114.7115.7116.7117.7118.7119.7120.7121.7122.7123.7124.7125.7126.7127.7128.7129.7130.7131.7132.7133.7134.7135.7136.7137.7138.7139.7140.7141.7142.7143.7144.7145.7146.7147.7148.7149.7150.7151.7152.7153.7154.7155.7156.7157.7158.7159.7160.7161.7162.7163.7164.7165.7166.7167.7168.7169.7170.7171.7172.7173.7174.7175.7176.7177.7178.7179.7180.7181.7182.7183.7184.7185.7186.7187.7188.7189.7190.7191.7192.7193.7194.7195.7196.7197.7198.7199.7200.7201.7202.7203.7204.7205.7206.7207.7208.7209.7210.7211.7212.7213.7214.7215.7216.7217.7218.7219.7220.7221.7222.7223.7224.7225.7226.7227.7228.7229.7230.7231.7232.7233.7234.7235.7236.7237.7238.7239.7240.7241.7242.7243.7244.7245.7246.7247.7248.7249.7250.7251.7252.7253.7254.7255.7256.7257.7258.7259.7260.7261.7262.7263.7264.7265.7266.7267.7268.7269.7270.7271.7272.7273.7274.7275.7276.7277.7278.7279.7280.7281.7282.7283.7284.7285.7286.7287.7288.7289.7290.7291.7292.7293.7294.7295.7296.7297.7298.7299.7300.7301.7302.7303.7304.7305.7306.7307.7308.7309.7310.7311.7312.7313.7314.7315.7316.7317.7318.7319.7320.7321.7322.7323.7324.7325.7326.7327.7328.7329.7330.7331.7332.7333.7334.7335.7336.7337.7338.7339.7340.7341.7342.7343.7344.7345.7346.7347.7348.7349.7350.7351.7352.7353.7354.7355.7356.7357.7358.7359.7360.7361.7362.7363.7364.7365.7366.7367.7368.7369.7370.7371.7372.7373.7374.7375.7376.7377.7378.7379.7380.7381.7382.7383.7384.7385.7386.7387.7388.7389.7390.7391.7392.7393.7394.7395.7396.7397.7398.7399.7400.7401.7402.7403.7404.7405.7406.7407.7408.7409.7410.7411.7412.7413.7414.7415.7416.7417.7418.7419.7420.7421.7422.7423.7424.7425.7426.7427.7428.7429.7430.7431.7432.7433.7434.7435.7436.7437.7438.7439.7440.7441.7442.7443.7444.7445.7446.7447.7448.7449.7450.7451.7452.7453.7454.7455.7456.7457.7458.7459.7460.7461.7462.7463.7464.7465.7466.7467.7468.7469.7470.7471.7472.7473.7474.7475.7476.7477.7478.7479.7480.7481.7482.7483.7484.7485.7486.7487.7488.7489.7490.7491.7492.7493.7494.7495.7496.7497.7498.7499.7500.7501.7502.7503.7504.7505.7506.7507.7508.7509.7510.7511.7512.7513.7514.7515.7516.7517.7518.7519.7520.7521.7522.7523.7524.7525.7526.7527.7528.7529.7530.7531.7532.7533.7534.7535.7536.7537.7538.7539.7540.7541.7542.7543.7544.7545.7546.7547.7548.7549.7550.7551.7552.7553.7554.7555.7556.7557.7558.7559.7560.7561.7562.7563.7564.7565.7566.7567.7568.7569.7570.7571.7572.7573.7574.7575.7576.7577.7578.7579.7580.7581.7582.7583.7584.7585.7586.7587.7588.7589.7590.7591.7592.7593.7594.7595.7596.7597.7598.7599.7600.7601.7602.7603.7604.7605.7606.7607.7608.7609.7610.7611.7612.7613.7614.7615.7616.7617.7618.7619.7620.7621.7622.7623.7624.7625.7626.7627.7628.7629.7630.7631.7632.7633.7634.7635.7636.7637.7638.7639.7640.7641.7642.7643.7644.7645.7646.7647.7648.7649.7650.7651.7652.7653.7654.7655.7656.7657.7658.7659.7660.7661.7662.7663.7664.7665.7666.7667.7668.7669.7670.7671.7672.7673.7674.7675.7676.7677.7678.7679.7680.7681.7682.7683.7684.7685.7686.7687.7688.7689.7690.7691.7692.7693.7694.7695.7696.7697.7698.7699.7700.7701.7702.7703.7704.7705.7706.7707.7708.7709.7710.7711.7712.7713.7714.7715.7716.7717.7718.7719.7720.7721.7722.7723.7724.7725.7726.7727.7728.7729.7730.7731.7732.7733.7734.7735.7736.7737.7738.7739.7740.7741.7742.7743.7744.7745.7746.7747.7748.7749.7750.7751.7752.7753.7754.7755.7756.7757.7758.7759.7760.7761.7762.7763.7764.7765.7766.7767.7768.7769.7770.7771.7772.7773.7774.7775.7776.7777.7778.7779.7780.7781.7782.7783.7784.7785.7786.7787.7788.7789.7790.7791.7792.7793.7794.7795.7796.7797.7798.7799.7800.7801.7802.7803.7804.7805.7806.7807.7808.7809.7810.7811.7812.7813.7814.7815.7816.7817.7818.7819.7820.7821.7822.7823.7824.7825.7826.7827.7828.7829.7830.7831.7832.7833.7834.7835.7836.7837.7838.7839.7840.7841.7842.7843.7844.7845.7846.7847.7848.7849.7850.7851.7852.7853.7854.7855.7856.7857.7858.7859.7860.7861.7862.7863.7864.7865.7866.7867.7868.7869.7870.7871.7872.7873.7874.7875.7876.7877.7878.7879.7880.7881.7882.7883.7884.7885.7886.7887.7888.7889.7890.7891.7892.7893.7894.7895.7896.7897.7898.7899.7900.7901.7902.7903.7904.7905.7906.7907.7908.7909.7910.7911.7912.7913.7914.7915.7916.7917.7918.7919.7920.7921.7922.7923.7924.7925.7926.7927.7928.7929.7930.7931.7932.7933.7934.7935.7936.7937.7938.7939.7940.7941.7942.7943.7944.7945.7946.7947.7948.7949.7950.7951.7952.7953.7954.7955.7956.7957.7958.7959.7960.7961.7962.7963.7964.7965.7966.7967.7968.7969.7970.7971.7972.7973.7974.7975.7976.7977.7978.7979.7980.7981.7982.7983.7984.7985.7986.7987.7988.7989.7990.7991.7992.7993.7994.7995.7996.7997.7998.7999.8000.8001.8002.8003.8004.8005.8006.8007.8008.8009.8010.8011.8012.8013.8014.8015.8016.8017.8018.8019.8020.8021.8022.8023.8024.8025.8026.8027.8028.8029.8030.8031.8032.8033.8034.8035.8036.8037.8038.8039.8040.8041.8042.8043.8044.8045.8046.8047.8048.8049.8050.8051.8052.8053.8054.8055.8056.8057.8058.8059.8060.8061.8062.8063.8064.8065.8066.8067.8068.8069.8070.8071.8072.8073.8074.8075.8076.8077.8078.8079.8080.8081.8082.8083.8084.8085.8086.8087.8088.8089.8090.8091.8092.8093.8094.8095.8096.8097.8098.8099.8100.8101.8102.8103.8104.8105.8106.8107.8108.8109.8110.8111.8112.8113.8114.8115.8116.8117.8118.8119.8120.8121.8122.8123.8124.8125.8126.8127.8128.8129.8130.8131.8132.8133.8134.8135.8136.8137.8138.8139.8140.8141.8142.8143.8144.8145.8146.8147.8148.8149.8150.8151.8152.8153.8154.8155.8156.8157.8158.8159.8160.8161.8162.8163.8164.8165.8166.8167.8168.8169.8170.8171.8172.8173.8174.8175.8176.8177.8178.8179.8180.8181.8182.8183.8184.8185.8186.8187.8188.8189.8190.8191.8192.8193.8194.8195.8196.8197.8198.8199.8200.8201.8202.8203.8204.8205.8206.8207.8208.8209.8210.8211.8212.8213.8214.8215.8216.8217.8218.8219.8220.8221.8222.8223.8224.8225.8226.8227.8228.8229.8230.8231.8232.8233.8234.8235.8236.8237.8238.8239.8240.8241.8242.8243.8244.8245.8246.8247.8248.8249.8250.8251.8252.8253.8254.8255.8256.8257.8258.8259.8260.8261.8262.8263.8264.8265.8266.8267.8268.8269.8270.8271.8272.8273.8274.8275.8276.8277.8278.8279.8280.8281.8282.8283.8284.8285.8286.8287.8288.8289.8290.8291.8292.8293.8294.8295.8296.8297.8298.8299.8300.8301.8302.8303.8304.8305.8306.8307.8308.8309.8310.8311.8312.8313.8314.8315.8316.8317.8318.8319.8320.8321.8322.8323.8324.8325.8326.8327.8328.8329.8330.8331.8332.8333.8334.8335.8336.8337.8338.8339.8340.8341.8342.8343.8344.8345.8346.8347.8348.8349.8350.8351.8352.8353.8354.8355.8356.8357.8358.8359.8360.8361.8362.8363.8364.8365.8366.8367.8368.8369.8370.8371.8372.8373.8374.8375.8376.8377.8378.8379.8380.8381.8382.8383.8384.8385.8386.8387.8388.8389.8390.8391.8392.8393.8394.8395.8396.8397.8398.8399.8400.8401.8402.8403.8404.8405.8406.8407.8408.8409.8410.8411.8412.8413.8414.8415.8416.8417.8418.8419.8420.8421.8422.8423.8424.8425.8426.8427.8428.8429.8430.8431.8432.8433.8434.8435.8436.8437.8438.8439.8440.8441.8442.8443.8444.8445.8446.8447.8448.8449.8450.8451.8452.8453.8454.8455.8456.8457.8458.8459.8460.8461.8462.8463.8464.8465.8466.8467.8468.8469.8470.8471.8472.8473.8474.8475.8476.8477.8478.8479.8480.8481.8482.8483.8484.8485.8486.8487.8488.8489.8490.8491.8492.8493.8494.8495.8496.8497.8498.8499.8500.8501.8502.8503.8504.8505.8506.8507.8508.8509.8510.8511.8512.8513.8514.8515.8516.8517.8518.8519.8520.8521.8522.8523.8524.8525.8526.8527.8528.8529.8530.8531.8532.8533.8534.8535.8536.8537.8538.8539.8540.8541.8542.8543.8544.8545.8546.8547.8548.8549.8550.8551.8552.8553.8554.8555.8556.8557.8558.8559.8560.8561.8562.8563.8564.8565.8566.8567.8568.8569.8570.8571.8572.8573.8574.8575.8576.8577.8578.8579.8580.8581.8582.8583.8584.8585.8586.8587.8588.8589.8590.8591.8592.8593.8594.8595.8596.8597.8598.8599.8600.8601.8602.8603.8604.8605.8606.8607.8608.8609.8610.8611.8612.8613.8614.8615.8616.8617.8618.8619.8620.8621.8622.8623.8624.8625.8626.8627.8628.8629.8630.8631.8632.8633.8634.8635.8636.8637.8638.8639.8640.8641.8642.8643.8644.8645.8646.8647.8648.8649.8650.8651.8652.8653.8654.8655.8656.8657.8658.8659.8660.8661.8662.8663.8664.8665.8666.8667.8668.8669.8670.8671.8672.8673.8674.8675.8676.8677.8678.8679.8680.8681.8682.8683.8684.8685.8686.8687.8688.8689.8690.8691.8692.8693.8694.8695.8696.8697.8698.8699.8700.8701.8702.8703.8704.8705.8706.8707.8708.8709.8710.8711.8712.8713.8714.8715.8716.8717.8718.8719.8720.8721.8722.8723.8724.8725.8726.8727.8728.8729.8730.8731.8732.8733.8734.8735.8736.8737.8738.8739.8740.8741.8742.8743.8744.8745.8746.8747.8748.8749.8750.8751.8752.8753.8754.8755.8756.8757.8758.8759.8760.8761.8762.8763.8764.8765.8766.8767.8768.8769.8770.8771.8772.8773.8774.8775.8776.8777.8778.8779.8780.8781.8782.8783.8784.8785.8786.8787.8788.8789.8790.8791.8792.8793.8794.8795.8796.8797.8798.8799.8800.8801.8802.8803.8804.8805.8806.8807.8808.8809.8810.8811.8812.8813.8814.8815.8816.8817.8818.8819.8820.8821.8822.8823.8824.8825.8826.8827.8828.8829.8830.8831.8832.8833.8834.8835.8836.8837.8838.8839.8840.8841.8842.8843.8844.8845.8846.8847.8848.8849.8850.8851.8852.8853.8854.8855.8856.8857.8858.8859.8860.8861.8862.8863.8864.8865.8866.8867.8868.8869.8870.8871.8872.8873.8874.8875.8876.8877.8878.8879.8880.8881.8882.8883.8884.8885.8886.8887.8888.8889.8890.8891.8892.8893.8894.8895.8896.8897.8898.8899.8900.8901.8902.8903.8904.8905.8906.8907.8908.8909.8910.8911.8912.8913.8914.8915.8916.8917.8918.8919.8920.8921.8922.8923.8924.8925.8926.8927.8928.8929.8930.8931.8932.8933.8934.8935.8936.8937.8938.8939.8940.8941.8942.8943.8944.8945.8946.8947.8948.8949.8950.8951.8952.8953.8954.8955.8956.8957.8958.8959.8960.8961.8962.8963.8964.8965.8966.8967.8968.8969.8970.8971.8972.8973.8974.8975.8976.8977.8978.8979.8980.8981.8982.8983.8984.8985.8986.8987.8988.8989.8990.8991.8992.8993.8994.8995.8996.8997.8998.8999.9000.9001.9002.9003.9004.9005.9006.9007.9008.9009.9010.9011.9012.9013.9014.9015.9016.9017.9018.9019.9020.9021.9022.9023.9024.9025.9026.9027.9028.9029.9030.9031.9032.9033.9034.9035.9036.9037.9038.9039.9040.9041.9042.9043.9044.9045.9046.9047.9048.9049.9050.9051.9052.9053.9054.9055.9056.9057.9058.9059.9060.9061.9062.9063.9064.9065.9066.9067.9068.9069.9070.9071.9072.9073.9074.9075.9076.9077.9078.9079.9080.9081.9082.9083.9084.9085.9086.9087.9088.9089.9090.9091.9092.9093.9094.9095.9096.9097.9098.9099.9100.9101.9102.9103.9104.9105.9106.9107.9108.9109.9110.9111.9112.9113.9114.9115.9116.9117.9118.9119.9120.9121.9122.9123.9124.9125.9126.9127.9128.9129.9130.9131.9132.9133.9134.9135.9136.9137.9138.9139.9140.9141.9142.9143.9144.9145.9146.9147.9148.9149.9150.9151.9152.9153.9154.9155.9156.9157.9158.9159.9160.9161.9162.9163.9164.9165.9166.9167.9168.9169.9170.9171.9172.9173.9174.9175.9176.9177.9178.9179.9180.9181.9182.9183.9184.9185.9186.9187.9188.9189.9190.9191.9192.9193.9194.9195.9196.9197.9198.9199.9200.9201.9202.9203.9204.9205.9206.9207.9208.9209.9210.9211.9212.9213.9214.9215.9216.9217.9218.9219.9220.9221.9222.9223.9224.9225.9226.9227.9228.9229.9230.9231.9232.9233.9234.9235.9236.9237.9238.9239.9240.9241.9242.9243.9244.9245.9246.9247.9248.9249.9250.9251.9252.9253.9254.9255.9256.9257.9258.9259.9260.9261.9262.9263.9264.9265.9266.9267.9268.9269.9270.9271.9272.9273.9274.9275.9276.9277.9278.9279.9280.9281.9282.9283.9284.9285.9286.9287.9288.9289.9290.9291.9292.9293.9294.9295.9296.9297.9298.9299.9300.9301.9302.9303.9304.9305.9306.9307.9308.9309.9310.9311.9312.9313.9314.9315.9316.9317.9318.9319.9320.9321.9322.9323.9324.9325.9326.9327.9328.9329.9330.9331.9332.9333.9334.9335.9336.9337.9338.9339.9340.9341.9342.9343.9344.9345.9346.9347.9348.9349.9350.9351.9352.9353.9354.9355.9356.9357.9358.9359.9360.9361.9362.9363.9364.9365.9366.9367.9368.9369.9370.9371.9372.9373.9374.9375.9376.9377.9378.9379.9380.9381.9382.9383.9384.9385.9386.9387.9388.9389.9390.9391.9392.9393.9394.9395.9396.9397.9398.9399.9400.9401.9402.9403.9404.9405.9406.9407.9408.9409.9410.9411.9412.9413.9414.9415.9416.9417.9418.9419.9420.9421.9422.9423.9424.9425.9426.9427.9428.9429.9430.9431.9432.9433.9434.9435.9436.9437.9438.9439.9440.9441.9442.9443.9444.9445.9446.9447.9448.9449.9450.9451.9452.9453.9454.9455.9456.9457.9458.9459.9460.9461.9462.9463.9464.9465.9466.9467.9468.9469.9470.9471.9472.9473.9474.9475.9476.9477.9478.9479.9480.9481.9482.9483.9484.9485.9486.9487.9488.9489.9490.9491.9492.9493.9494.9495.9496.9497.9498.9499.9500.9501.9502.9503.9504.9505.9506.9507.9508.9509.9510.9511.9512.9513.9514.9515.9516.9517.9518.9519.9520.9521.9522.9523.9524.9525.9526.9527.9528.9529.9530.9531.9532.9533.9534.9535.9536.9537.9538.9539.9540.9541.9542.9543.9544.9545.9546.9547.9548.9549.9550.9551.9552.9553.9554.9555.9556.9557.9558.9559.9560.9561.9562.9563.9564.9565.9566.9567.9568.9569.9570.9571.9572.9573.9574.9575.9576.9577.9578.9579.9580.9581.9582.9583.9584.9585.9586.9587.9588.9589.9590.9591.9592.9593.9594.9595.9596.9597.9598.9599.9600.9601.9602.9603.9604.9605.9606.9607.9608.9609.9610.9611.9612.9613.9614.9615.9616.9617.9618.9619.9620.9621.9622.9623.9624.9625.9626.9627.9628.9629.9630.9631.9632.9633.9634.9635.9636.9637.9638.9639.9640.9641.9642.9643.9644.9645.9646.9647.9648.9649.9650.9651.9652.9653.9654.9655.9656.9657.9658.9659.9660.9661.9662.9663.9664.9665.9666.9667.9668.9669.9670.9671.9672.9673.9674.9675.9676.9677.9678.9679.9680.9681.9682.9683.9684.9685.9686.9687.9688.9689.9690.9691.9692.9693.9694.9695.9696.9697.9698.9699.9700.9701.9702.9703.9704.9705.9706.9707.9708.9709.9710.9711.9712.9713.9714.9715.9716.9717.9718.9719.9720.9721.9722.9723.9724.9725.9726.9727.9728.9729.9730.9731.9732.9733.9734.9735.9736.9737.9738.9739.9740.9741.9742.9743.9744.9745.9746.9747.9748.9749.9750.9751.9752.9753.9754.9755.9756.9757.9758.9759.9760.9761.9762.9763.9764.9765.9766.9767.9768.9769.9770.9771.9772.9773.9774.9775.9776.9777.9778.9779.9780.9781.9782.9783.9784.9785.9786.9787.9788.9789.9790.9791.9792.9793.9794.9795.9796.9797.9798.9799.9800.9801.9802.9803.9804.9805.9806.9807.9808.9809.9810.9811.9812.9813.9814.9815.9816.9817.9818.9819.9820.9821.9822.9823.9824.9825.9826.9827.9828.9829.9830.9831.9832.9833.9834.9835.9836.9837.9838.9839.9840.9841.9842.9843.9844.9845.9846.9847.9848.9849.9850.9851.9852.9853.9854.9855.9856.9857.9858.9859.9860.9861.9862.9863.9864.9865.9866.9867.9868.9869.9870.9871.9872.9873.9874.9875.9876.9877.9878.9879.9880.9881.9882.9883.9884.9885.9886.9887.9888.9889.9890.9891.9892.9893.9894.9895.9896.9897.9898.9899.9900.9901.9902.9903.9904.9905.9906.9907.9908.9909.9910.9911.9912.9913.9914.9915.9916.9917.9918.9919.9920.9921.9922.9923.9924.9925.9926.9927.9928.9929.9930.9931.9932.9933.9934.9935.9936.9937.9938.9939.9940.9941.9942.9943.9944.9945.9946.9947.9948.9949.9950.9951.9952.9953.9954.9955.9956.9957.9958.9959.9960.9961.9962.9963.9964.9965.9966.9967.9968.9969.9970.9971.9972.9973.9974.9975.9976.9977.9978.9979.9980.9981.9982.9983.9984.9985.9986.9987.9988.9989.9990.9991.9992.9993.9994.9995.9996.9997.9998.9999.10000.10001.10002.10003.10004.10005.10006.10007.10008.10009.10010.10011.10012.10013.10014.10015.10016.10017.10018.10019.10020.10021.10022.10023.10024.10025.10026.10027.10028.10029.10030.10031.10032.10033.10034.10035.10036.10037.10038.10039.10040.10041.10042.10043.10044.10045.10046.10047.10048.10049.10050.10051.10052.10053.10054.10055.10056.10057.10058.10059.10060.10061.10062.10063.10064.10065.10066.10067.10068.10069.10070.10071.10072.10073.10074.10075.10076.10077.10078.10079.10080.10081.10082.10083.10084.10085.10086.10087.10088.10089.10090.10091.10092.10093.10094.10095.10096.10097.10098.10099.10100.10101.10102.10103.10104.10105.10106.10107.10108.10109.10110.10111.10112.10113.10114.10115.10116.10117.10118.10119.10120.10121.10122.10123.10124.10125.10126.10127.10128.10129.10130.10131.10132.10133.10134.10135.10136.10137.10138.10139.10140.10141.10142.10143.10144.10145.10146.10147.10148.10149.10150.10151.10152.10153.10154.10155.10156.10157.10158.10159.10160.10161.10162.10163.10164.10165.10166.10167.10168.10169.10170.10171.10172.10173.10174.10175.10176.10177.10178.10179.10180.10181.10182.10183.10184.10185.10186.10187.10188.10189.10190.10191.10192.10193.10194.10195.10196.10197.10198.10199.10200.10201.10202.10203.10204.10205.10206.10207.10208.10209.10210.10211.10212.10213.10214.10215.10216.10217.10218.10219.10220.10221.10222.10223.10224.10225.10226.10227.10228.10229.10230.10231.10232.10233.10234.10235.10236.10237.10238.10239.10240.10241.10242.10243.10244.10245.10246.10247.10248.10249.10250.10251.10252.10253.10254.10255.10256.10257.10258.10259.10260.10261.10262.10263.10264.10265.10266.10267.10268.10269.10270.10271.10272.10273.10274.10275.10276.10277.10278.10279.10280.10281.10282.10283.10284.10285.10286.10287.10288.10289.10290.10291.10292.10293.10294.10295.10296.10297.10298.10299.10300.10301.10302.10303.10304.10305.10306.10307.10308.10309.10310.10311.10312.10313.10314.10315.10316.10317.10318.10319.10320.10321.10322.10323.10324.10325.10326.10327.10328.10329.10330.10331.10332.10333.10334.10335.10336.10337.10338.10339.10340.10341.10342.10343.10344.10345.10346.10347.10348.10349.10350.10351.10352.10353.10354.10355.10356.10357.10358.10359.10360.10361.10362.10363.10364.10365.10366.10367.10368.10369.10370.10371.10372.10373.10374.10375.10376.10377.10378.10379.10380.10381.10382.10383.10384.10385.10386.10387.10388.10389.10390.10391.10392.10393.10394.10395.10396.10397.10398.10399.10400.10401.10402.10403.10404.10405.10406.10407.10408.10409.10410.10411.10412.10413.10414.10415.10416.10417.10418.10419.10420.10421.10422.10423.10424.10425.10426.10427.10428.10429.10430.10431.10432.10433.10434.10435.10436.10437.10438.10439.10440.10441.10442.10443.10444.10445.10446.10447.10448.10449.10450.10451.10452.10453.10454.10455.10456.10457.10458.10459.10460.10461.10462.10463.10464.10465.10466.10467.10468.10469.10470.10471.10472.10473.10474.10475.10476.10477.10478.10479.10480.10481.10482.10483.10484.10485.10486.10487.10488.10489.10490.10491.10492.10493.10494.10495.10496.10497.10498.10499.10500.10501.10502.10503.10504.10505.10506.10507.10508.10509.10510.10511.10512.10513.10514.10515.10516.10517.10518.10519.10520.10521.10522.10523.10524.10525.10526.10527.10528.10529.10530.10531.10532.10533.10534.10535.10536.10537.10538.10539.10540.10541.10542.10543.10544.10545.10546.10547.10548.10549.10550.10551.10552.10553.10554.10555.10556.10557.10558.10559.10560.10561.10562.10563.10564.10565.10566.10567.10568.10569.10570.10571.10572.10573.10574.10575.10576.10577.10578.10579.10580.10581.10582.10583.10584.10585.10586.10587.10588.10589.10590.10591.10592.10593.10594.10595.10596.10597.10598.10599.10600.10601.10602.10603.10604.10605.10606.10607.10608.10609.10610.10611.10612.10613.10614.10615.10616.10617.10618.10619.10620.10621.10622.10623.10624.10625.10626.10627.10628.10629.10630.10631.10632.10633.10634.10635.10636.10637.10638.10639.10640.10641.10642.10643.10644.10645.10646.10647.10648.10649.10650.10651.10652.10653.10654.10655.10656.10657.10658.10659.10660.10661.10662.10663.10664.10665.10666.10667.10668.10669.10670.10671.10672.10673.10674.10675.10676.10677.10678.10679.10680.10681.10682.10683.10684.10685.10686.10687.10688.10689.10690.10691.10692.10693.10694.10695.10696.10697.10698.10699.10700.10701.10702.10703.10704.10705.10706.10707.10708.10709.10710.10711.10712.10713.10714.10715.10716.10717.10718.10719.10720.10721.10722.10723.10724.10725.10726.10727.10728.10729.10730.10731.10732.10733.10734.10735.10736.10737.10738.10739.10740.10741.10742.10743.10744.10745.10746.10747.10748.10749.10750.10751.10752.10753.10754.10755.10756.10757.10758.10759.10760.10761.10762.10763.10764.10765.10766.10767.10768.10769.10770.10771.10772.10773.10774.10775.10776.10777.10778.10779.10780.10781.10782.10783.10784.10785.10786.10787.10788.10789.10790.10791.10792.10793.10794.10795.10796.10797.10798.10799.10800.10801.10802.10803.10804.10805.10806.10807.10808.10809.10810.10811.10812.10813.10814.10815.10816.10817.10818.10819.10820.10821.10822.10823.10824.10825.10826.10827.10828.10829.10830.10831.10832.10833.10834.10835.10836.10837.10838.10839.10840.10841.10842.10843.10844.10845.10846.10847.10848.10849.10850.10851.10852.10853.10854.10855.10856.10857.10858.10859.10860.10861.10862.10863.10864.10865.10866.10867.10868.10869.10870.10871.10872.10873.10874.10875.10876.10877.10878.10879.10880.10881.10882.10883.10884.10885.10886.10887.10888.10889.10890.10891.10892.10893.10894.10895.10896.10897.10898.10899.10900.10901.10902.10903.10904.10905.10906.10907.10908.10909.10910.10911.10912.10913.10914.10915.10916.10917.10918.10919.10920.10921.10922.10923.10924.10925.10926.10927.10928.10929.10930.10931.10932.10933.10934.10935.10936.10937.10938.10939.10940.10941.10942.10943.10944.10945.10946.10947.10948.10949.10950.10951.10952.10953.10954.10955.10956.10957.10958.10959.10960.10961.10962.10963.10964.10965.10966.10967.10968.10969.10970.10971.10972.10973.10974.10975.10976.10977.10978.10979.10980.10981.10982.10983.10984.10985.10986.10987.10988.10989.10990.10991.10992.10993.10994.10995.10996.10997.10998.10999.11000.11001.11002.11003.11004.11005.11006.11007.11008.11009.11010.11011.11012.11013.11014.11015.11016.11017.11018.11019.11020.11021.11022.11023.11024.11025.11026.11027.11028.11029.11030.11031.11032.11033.11034.11035.11036.11037.11038.11039.11040.11041.11042.11043.11044.11045.11046.11047.11048.11049.11050.11051.11052.11053.11054.11055.11056.11057.11058.11059.11060.11061.11062.11063.11064.11065.11066.11067.11068.11069.11070.11071.11072.11073.11074.11075.11076.11077.11078.11079.11080.11081.11082.11083.11084.11085.11086.11087.11088.11089.11090.11091.11092.11093.11094.11095.11096.11097.11098.11099.11100.11101.11102.11103.11104.11105.11106.11107.11108.11109.11110.11111.11112.11113.11114.11115.11116.11117.11118.11119.11120.11121.11122.11123.11124.11125.11126.11127.11128.11129.11130.11131.11132.11133.11134.11135.11136.11137.11138.11139.11140.11141.11142.11143.11144.11145.11146.11147.11148.11149.11150.11151.11152.11153.11154.11155.11156.11157.11158.11159.11160.11161.11162.11163.11164.11165.11166.11167.11168.11169.11170.11171.11172.11173.11174.11175.11176.11177.11178.11179.11180.11181.11182.11183.11184.11185.11186.11187.11188.11189.11190.11191.11192.11193.11194.11195.11196.11197.11198.11199.11200.11201.11202.11203.11204.11205.11206.11207.11208.11209.11210.11211.11212.11213.11214.11215.11216.11217.11218.11219.11220.11221.11222.11223.11224.11225.11226.11227.11228.11229.11230.11231.11232.11233.11234.11235.11236.11237.11238.11239.11240.11241.11242.11243.11244.11245.11246.11247.11248.11249.11250.11251.11252.11253.11254.11255.11256.11257.11258.11259.11260.11261.11262.11263.11264.11265.11266.11267.11268.11269.11270.11271.11272.11273.11274.11275.11276.11277.11278.11279.11280.11281.11282.11283.11284.11285.11286.11287.11288.11289.11290.11291.11292.11293.11294.11295.11296.11297.11298.11299.11300.11301.11302.11303.11304.11305.11306.11307.11308.11309.11310.11311.11312.11313.11314.11315.11316.11317.11318.11319.11320.11321.11322.11323.11324.11325.11326.11327.11328.11329.11330.11331.11332.11333.11334.11335.11336.11337.11338.11339.11340.11341.11342.11343.11344.11345.11346.11347.11348.11349.11350.11351.11352.11353.11354.11355.11356.11357.11358.11359.11360.11361.11362.11363.11364.11365.11366.11367.11368.11369.11370.11371.11372.11373.11374.11375.11376.11377.11378.11379.11380.11381.11382.11383.11384.11385.11386.11387.11388.11389.11390.11391.11392.11393.11394.11395.11396.11397.11398.11399.11400.11401.11402.11403.11404.11405.11406.11407.11408.11409.11410.11411.11412.11413.11414.11415.11416.11417.11418.11419.11420.11421.11422.11423.11424.11425.11426.11427.11428.11429.11430.11431.11432.11433.11434.11435.11436.11437.11438.11439.11440.11441.11442.11443.11444.11445.11446.11447.11448.11449.11450.11451.11452.11453.11454.11455.11456.11457.11458.11459.11460.11461.11462.11463.11464.11465.11466.11467.11468.11469.11470.11471.11472.11473.11474.11475.11476.11477.11478.11479.11480.11481.11482.11483.11484.11485.11486.11487.11488.11489.11490.11491.11492.11493.11494.11495.11496.11497.11498.11499.11500.11501.11502.11503.11504.11505.11506.11507.11508.11509.11510.11511.11512.11513.11514.11515.11516.11517.11518.11519.11520.11521.11522.11523.11524.11525.11526.11527.11528.11529.11530.11531.11532.11533.11534.11535.11536.11537.11538.11539.11540.11541.11542.11543.11544.11545.11546.11547.11548.11549.11550.11551.11552.11553.11554.11555.11556.11557.11558.11559.11560.11561.11562.11563.11564.11565.11566.11567.11568.11569.11570.11571.11572.11573.11574.11575.11576.11577.11578.11579.11580.11581.11582.11583.11584.11585.11586.11587.11588.11589.11590.11591.11592.11593.11594.11595.11596.11597.11598.11599.11600.11601.11602.11603.11604.11605.11606.11607.11608.11609.11610.11611.11612.11613.11614.11615.11616.11617.11618.11619.11620.11621.11622.11623.11624.11625.11626.11627.11628.11629.11630.11631.11632.11633.11634.11635.11636.11637.11638.11639.11640.11641.11642.11643.11644.11645.11646.11647.11648.11649.11650.11651.11652.11653.11654.11655.11656.11657.11658.11659.11660.11661.11662.11663.11664.11665.11666.11667.11668.11669.11670.11671.11672.11673.11674.11675.11676.11677.11678.11679.11680.11681.11682.11683.11684.11685.11686.11687.11688.11689.11690.11691.11692.11693.11694.11695.11696.11697.11698.11699.11700.11701.11702.11703.11704.11705.11706.11707.11708.11709.11710.11711.11712.11713.11714.11715.11716.11717.11718.11719.11720.11721.11722.11723.11724.11725.11726.11727.11728.11729.11730.11731.11732.11733.11734.11735.11736.11737.11738.11739.11740.11741.11742.11743.11744.11745.11746.11747.11748.11749.11750.11751.11752.11753.11754.11755.11756.11757.11758.11759.11760.11761.11762.11763.11764.11765.11766.11767.11768.11769.11770.11771.11772.11773.11774.11775.11776.11777.11778.11779.11780.11781.11782.11783.11784.11785.11786.11787.11788.11789.11790.11791.11792.11793.11794.11795.11796.11797.11798.11799.11800.11801.11802.11803.11804.11805.11806.11807.11808.11809.11810.11811.11812.11813.11814.11815.11816.11817.11818.11819.11820.11821.11822.11823.11824.11825.11826.11827.11828.11829.11830.11831.11832.11833.11834.11835.11836.11837.11838.11839.11840.11841.11842.11843.11844.11845.11846.11847.11848.11849.11850.11851.11852.11853.11854.11855.11856.11857.11858.11859.11860.11861.11862.11863.11864.11865.11866.11867.11868.11869.11870.11871.11872.11873.11874.11875.11876.11877.11878.11879.11880.11881.11882.11883.11884.11885.11886.11887.11888.11889.11890.11891.11892.11893.11894.11895.11896.11897.11898.11899.11900.11901.11902.11903.11904.11905.11906.11907.11908.11909.11910.11911.11912.11913.11914.11915.11916.11917.11918.11919.11920.11921.11922.11923.11924.11925.11926.11927.11928.11929.11930.11931.11932.11933.11934.11935.11936.11937.11938.11939.11940.11941.11942.11943.11944.11945.11946.11947.11948.11949.11950.11951.11952.11953.11954.11955.11956.11957.11958.11959.11960.11961.11962.11963.11964.11965.11966.11967.11968.11969.11970.11971.11972.11973.11974.11975.11976.11977.11978.11979.11980.11981.11982.11983.11984.11985.11986.11987.11988.11989.11990.11991.11992.11993.11994.11995.11996.11997.11998.11999.12000.12001.12002.12003.12004.12005.12006.12007.12008.12009.12010.12011.12012.12013.12014.12015.12016.12017.12018.12019.12020.12021.12022.12023.12024.12025.12026.12027.12028.12029.12030.12031.12032.12033.12034.12035.12036.12037.12038.12039.12040.12041.12042.12043.12044.12045.12046.12047.12048.12049.12050.12051.12052.12053.12054.12055.12056.12057.12058.12059.12060.12061.12062.12063.12064.12065.12066.12067.12068.12069.12070.12071.12072.12073.12074.12075.12076.12077.12078.12079.12080.12081.12082.12083.12084.12085.12086.12087.12088.12089.12090.12091.12092.12093.12094.12095.12096.12097.12098.12099.12100.12101.12102.12103.12104.12105.12106.12107.12108.12109.12110.12111.12112.12113.12114.12115.12116.12117.12118.12119.12120.12121.12122.12123.12124.12125.12126.12127.12128.12129.12130.12131.12132.12133.12134.12135.12136.12137.12138.12139.12140.12141.12142.12143.12144.12145.12146.12147.12148.12149.12150.12151.12152.12153.12154.12155.12156.12157.12158.12159.12160.12161.12162.12163.12164.12165.12166.12167.12168.12169.12170.12171.12172.12173.12174.12175.12176.12177.12178.12179.12180.12181.12182.12183.12184.12185.12186.12187.12188.12189.12190.12191.12192.12193.12194.12195.12196.12197.12198.12199.12200.12201.12202.12203.12204.12205.12206.12207.12208.12209.12210.12211.12212.12213.12214.12215.12216.12217.12218.12219.12220.12221.12222.12223.12224.12225.12226.12227.12228.12229.12230.12231.12232.12233.12234.12235.12236.12237.12238.12239.12240.12241.12242.12243.12244.12245.12246.12247.12248.12249.12250.12251.12252.12253.12254.12255.12256.12257.12258.12259.12260.12261.12262.12263.12264.12265.12266.12267.12268.12269.12270.12271.12272.12273.12274.12275.12276.12277.12278.12279.12280.12281.12282.12283.12284.12285.12286.12287.12288.12289.12290.12291.12292.12293.12294.12295.12296.12297.12298.12299.12300.12301.12302.12303.12304.12305.12306.12307.12308.12309.12310.12311.12312.12313.12314.12315.12316.12317.12318.12319.12320.12321.12322.12323.12324.12325.12326.12327.12328.12329.12330.12331.12332.12333.12334.12335.12336.12337.12338.12339.12340.12341.12342.12343.12344.12345.12346.12347.12348.12349.12350.12351.12352.12353.12354.12355.12356.12357.12358.12359.12360.12361.12362.12363.12364.12365.12366.12367.12368.12369.12370.12371.12372.12373.12374.12375.12376.12377.12378.12379.12380.12381.12382.12383.12384.12385.12386.12387.12388.12389.12390.12391.12392.12393.12394.12395.12396.12397.12398.12399.12400.12401.12402.12403.12404.12405.12406.12407.12408.12409.12410.12411.12412.12413.12414.12415.12416.12417.12418.12419.12420.12421.12422.12423.12424.12425.12426.12427.12428.12429.12430.12431.12432.12433.12434.12435.12436.12437.12438.12439.12440.12441.12442.12443.12444.12445.12446.12447.12448.12449.12450.12451.12452.12453.12454.12455.12456.12457.12458.12459.12460.12461.12462.12463.12464.12465.12466.12467.12468.12469.12470.12471.12472.12473.12474.12475.12476.12477.12478.12479.12480.12481.12482.12483.12484.12485.12486.12487.12488.12489.12490.12491.12492.12493.12494.12495.12496.12497.12498.12499.12500.12501.12502.12503.12504.12505.12506.12507.12508.12509.12510.12511.12512.12513.12514.12515.12516.12517.12518.12519.12520.12521.12522.12523.12524.12525.12526.12527.12528.12529.12530.12531.12532.12533.12534.12535.12536.12537.12538.12539.12540.12541.12542.12543.12544.12545.12546.12547.12548.12549.12550.12551.12552.12553.12554.12555.12556.12557.12558.12559.12560.12561.12562.12563.12564.12565.12566.12567.12568.12569.12570.12571.12572.12573.12574.12575.12576.12577.12578.12579.12580.12581.12582.12583.12584.12585.12586.12587.12588.12589.12590.12591.12592.12593.12594.12595.12596.12597.12598.12599.12600.12601.12602.12603.12604.12605.12606.12607.12608.12609.12610.12611.12612.12613.12614.12615.12616.12617.12618.12619.12620.12621.12622.12623.12624.12625.12626.12627.12628.12629.12630.12631.12632.12633.12634.12635.12636.12637.12638.12639.12640.12641.12642.12643.12644.12645.12646.12647.12648.12649.12650.12651.12652.12653.12654.12655.12656.12657.12658.12659.12660.12661.12662.12663.12664.12665.12666.12667.12668.12669.12670.12671.12672.12673.12674.12675.12676.12677.12678.12679.12680.12681.12682.12683.12684.12685.12686.12687.12688.12689.12690.12691.12692.12693.12694.12695.12696.12697.12698.12699.12700.12701.12702.12703.12704.12705.12706.12707.12708.12709.12710.12711.12712.12713.12714.12715.12716.12717.12718.12719.12720.12721.12722.12723.12724.12725.12726.12727.12728.12729.12730.12731.12732.12733.12734.12735.12736.12737.12738.12739.12740.12741.12742.12743.12744.12745.12746.12747.12748.12749.12750.12751.12752.12753.12754.12755.12756.12757.12758.12759.12760.12761.12762.12763.12764.12765.12766.12767.12768.12769.12770.12771.1277\r\n;";
 80005bc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80005c0:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 80005c4:	4a38      	ldr	r2, [pc, #224]	@ (80006a8 <main+0xf4>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	4611      	mov	r1, r2
 80005ca:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 80005ce:	461a      	mov	r2, r3
 80005d0:	f00f fac8 	bl	800fb64 <memcpy>
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 faba 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f86c 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fb22 	bl	8000c24 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005e0:	f000 fabe 	bl	8000b60 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 fa24 	bl	8000a30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005e8:	f000 f8f4 	bl	80007d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005ec:	f000 f9ca 	bl	8000984 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80005f0:	f000 fa6a 	bl	8000ac8 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80005f4:	f000 f944 	bl	8000880 <MX_RTC_Init>
  MX_RNG_Init();
 80005f8:	f000 f92c 	bl	8000854 <MX_RNG_Init>
  MX_HASH_Init();
 80005fc:	f000 f8d0 	bl	80007a0 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000600:	bf00      	nop
 8000602:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <main+0xf8>)
 8000604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0fa      	beq.n	8000602 <main+0x4e>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800060c:	2000      	movs	r0, #0
 800060e:	f001 f89f 	bl	8001750 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000612:	2001      	movs	r0, #1
 8000614:	f001 f89c 	bl	8001750 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000618:	2002      	movs	r0, #2
 800061a:	f001 f899 	bl	8001750 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f001 f935 	bl	8001890 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000626:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <main+0xfc>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800062c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <main+0xfc>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <main+0xfc>)
 8000636:	2200      	movs	r2, #0
 8000638:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <main+0xfc>)
 800063c:	2200      	movs	r2, #0
 800063e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <main+0xfc>)
 8000642:	2200      	movs	r2, #0
 8000644:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000646:	491a      	ldr	r1, [pc, #104]	@ (80006b0 <main+0xfc>)
 8000648:	2000      	movs	r0, #0
 800064a:	f001 f9bb 	bl	80019c4 <BSP_COM_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <main+0xa4>
  {
    Error_Handler();
 8000654:	f000 fbe2 	bl	8000e1c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	TEMPLATE_Transmit((uint8_t*)msg, strlen(msg));
 8000658:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800065c:	3bfc      	subs	r3, #252	@ 0xfc
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fe14 	bl	800028c <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800066c:	3bfc      	subs	r3, #252	@ 0xfc
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f00d fc07 	bl	800de84 <TEMPLATE_Transmit>
	BSP_LED_Toggle(LED_GREEN);
 8000676:	2000      	movs	r0, #0
 8000678:	f001 f8e0 	bl	800183c <BSP_LED_Toggle>
	BSP_LED_Toggle(LED_RED);
 800067c:	2002      	movs	r0, #2
 800067e:	f001 f8dd 	bl	800183c <BSP_LED_Toggle>
	BSP_LED_Toggle(LED_YELLOW);
 8000682:	2001      	movs	r0, #1
 8000684:	f001 f8da 	bl	800183c <BSP_LED_Toggle>
	HAL_Delay(10000);
 8000688:	f242 7010 	movw	r0, #10000	@ 0x2710
 800068c:	f001 fb1c 	bl	8001cc8 <HAL_Delay>
	BSP_LED_Toggle(LED_GREEN);
 8000690:	2000      	movs	r0, #0
 8000692:	f001 f8d3 	bl	800183c <BSP_LED_Toggle>
	BSP_LED_Toggle(LED_RED);
 8000696:	2002      	movs	r0, #2
 8000698:	f001 f8d0 	bl	800183c <BSP_LED_Toggle>
	BSP_LED_Toggle(LED_YELLOW);
 800069c:	2001      	movs	r0, #1
 800069e:	f001 f8cd 	bl	800183c <BSP_LED_Toggle>
	TEMPLATE_Transmit((uint8_t*)msg, strlen(msg));
 80006a2:	bf00      	nop
 80006a4:	e7d8      	b.n	8000658 <main+0xa4>
 80006a6:	bf00      	nop
 80006a8:	0800fb98 	.word	0x0800fb98
 80006ac:	200006c0 	.word	0x200006c0
 80006b0:	2000013c 	.word	0x2000013c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09c      	sub	sp, #112	@ 0x70
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2250      	movs	r2, #80	@ 0x50
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00f fa21 	bl	800fb0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <SystemClock_Config+0xe4>)
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	4a2e      	ldr	r2, [pc, #184]	@ (8000798 <SystemClock_Config+0xe4>)
 80006e0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006e4:	6113      	str	r3, [r2, #16]
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <SystemClock_Config+0xe4>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <SystemClock_Config+0xe4>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d1f9      	bne.n	80006f4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000700:	2329      	movs	r3, #41	@ 0x29
 8000702:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800070a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800071a:	2303      	movs	r3, #3
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071e:	2304      	movs	r3, #4
 8000720:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000722:	23fa      	movs	r3, #250	@ 0xfa
 8000724:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000732:	2304      	movs	r3, #4
 8000734:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000736:	2300      	movs	r3, #0
 8000738:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fcee 	bl	8004124 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074e:	f000 fb65 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	231f      	movs	r3, #31
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f004 f90f 	bl	8004994 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800077c:	f000 fb4e 	bl	8000e1c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <SystemClock_Config+0xe8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <SystemClock_Config+0xe8>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	3770      	adds	r7, #112	@ 0x70
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	44020800 	.word	0x44020800
 800079c:	40022000 	.word	0x40022000

080007a0 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_HASH_Init+0x2c>)
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <MX_HASH_Init+0x30>)
 80007a8:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_HASH_Init+0x2c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_HASH_Init+0x2c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_HASH_Init+0x2c>)
 80007b8:	f001 fe46 	bl	8002448 <HAL_HASH_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 80007c2:	f000 fb2b 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000014c 	.word	0x2000014c
 80007d0:	420c0400 	.word	0x420c0400

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <MX_I2C1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000850 <MX_I2C1_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000810:	f001 fe52 	bl	80024b8 <HAL_I2C_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081a:	f000 faff 	bl	8000e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000822:	f001 fee4 	bl	80025ee <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 faf6 	bl	8000e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000834:	f001 ff26 	bl	8002684 <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 faed 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000018c 	.word	0x2000018c
 800084c:	40005400 	.word	0x40005400
 8000850:	10c043e5 	.word	0x10c043e5

08000854 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_RNG_Init+0x24>)
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <MX_RNG_Init+0x28>)
 800085c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_RNG_Init+0x24>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_RNG_Init+0x24>)
 8000866:	f009 fc2f 	bl	800a0c8 <HAL_RNG_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000870:	f000 fad4 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001e0 	.word	0x200001e0
 800087c:	420c0800 	.word	0x420c0800

08000880 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	@ 0x38
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008ae:	4b33      	ldr	r3, [pc, #204]	@ (800097c <MX_RTC_Init+0xfc>)
 80008b0:	4a33      	ldr	r2, [pc, #204]	@ (8000980 <MX_RTC_Init+0x100>)
 80008b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008b4:	4b31      	ldr	r3, [pc, #196]	@ (800097c <MX_RTC_Init+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <MX_RTC_Init+0xfc>)
 80008bc:	227f      	movs	r2, #127	@ 0x7f
 80008be:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <MX_RTC_Init+0xfc>)
 80008c2:	22ff      	movs	r2, #255	@ 0xff
 80008c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	@ (800097c <MX_RTC_Init+0xfc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <MX_RTC_Init+0xfc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	@ (800097c <MX_RTC_Init+0xfc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008d8:	4b28      	ldr	r3, [pc, #160]	@ (800097c <MX_RTC_Init+0xfc>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <MX_RTC_Init+0xfc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80008e6:	4b25      	ldr	r3, [pc, #148]	@ (800097c <MX_RTC_Init+0xfc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ec:	4823      	ldr	r0, [pc, #140]	@ (800097c <MX_RTC_Init+0xfc>)
 80008ee:	f009 fc89 	bl	800a204 <HAL_RTC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 fa90 	bl	8000e1c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481a      	ldr	r0, [pc, #104]	@ (800097c <MX_RTC_Init+0xfc>)
 8000914:	f009 fedc 	bl	800a6d0 <HAL_RTCEx_PrivilegeModeSet>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800091e:	f000 fa7d 	bl	8000e1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000922:	2300      	movs	r3, #0
 8000924:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000926:	2300      	movs	r3, #0
 8000928:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800092a:	2300      	movs	r3, #0
 800092c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2201      	movs	r2, #1
 800093c:	4619      	mov	r1, r3
 800093e:	480f      	ldr	r0, [pc, #60]	@ (800097c <MX_RTC_Init+0xfc>)
 8000940:	f009 fce2 	bl	800a308 <HAL_RTC_SetTime>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800094a:	f000 fa67 	bl	8000e1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800094e:	2301      	movs	r3, #1
 8000950:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000952:	2301      	movs	r3, #1
 8000954:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000956:	2301      	movs	r3, #1
 8000958:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800095a:	2300      	movs	r3, #0
 800095c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2201      	movs	r2, #1
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_RTC_Init+0xfc>)
 8000966:	f009 fd61 	bl	800a42c <HAL_RTC_SetDate>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000970:	f000 fa54 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	@ 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200001f4 	.word	0x200001f4
 8000980:	44007800 	.word	0x44007800

08000984 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 800098a:	4a28      	ldr	r2, [pc, #160]	@ (8000a2c <MX_SPI1_Init+0xa8>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 8000990:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000994:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000996:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 800099e:	2207      	movs	r2, #7
 80009a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009b8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80009bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009d2:	2207      	movs	r2, #7
 80009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009e4:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_SPI1_Init+0xa4>)
 8000a16:	f009 fe89 	bl	800a72c <HAL_SPI_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a20:	f000 f9fc 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000224 	.word	0x20000224
 8000a2c:	40013000 	.word	0x40013000

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <MX_USART2_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a7a:	f009 ffe2 	bl	800aa42 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f9ca 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a8c:	f00a fc70 	bl	800b370 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 f9c1 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	f00a fca5 	bl	800b3ec <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 f9b8 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_USART2_UART_Init+0x90>)
 8000aae:	f00a fc26 	bl	800b2fe <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f9b0 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002b4 	.word	0x200002b4
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <MX_USART6_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b12:	f009 ff96 	bl	800aa42 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f97e 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b24:	f00a fc24 	bl	800b370 <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 f975 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b36:	f00a fc59 	bl	800b3ec <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 f96c 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_USART6_UART_Init+0x90>)
 8000b46:	f00a fbda 	bl	800b2fe <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f964 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000348 	.word	0x20000348
 8000b5c:	40006400 	.word	0x40006400

08000b60 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000b64:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b66:	4a2a      	ldr	r2, [pc, #168]	@ (8000c10 <MX_USB_PCD_Init+0xb0>)
 8000b68:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b6e:	4a29      	ldr	r2, [pc, #164]	@ (8000c14 <MX_USB_PCD_Init+0xb4>)
 8000b70:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b74:	2208      	movs	r2, #8
 8000b76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000bae:	4817      	ldr	r0, [pc, #92]	@ (8000c0c <MX_USB_PCD_Init+0xac>)
 8000bb0:	f001 fe17 	bl	80027e2 <HAL_PCD_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000bba:	f000 f92f 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4915      	ldr	r1, [pc, #84]	@ (8000c18 <MX_USB_PCD_Init+0xb8>)
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <MX_USB_PCD_Init+0xb0>)
 8000bc4:	f00d fc64 	bl	800e490 <USBD_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000bce:	f000 f925 	bl	8000e1c <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000bd2:	4912      	ldr	r1, [pc, #72]	@ (8000c1c <MX_USB_PCD_Init+0xbc>)
 8000bd4:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <MX_USB_PCD_Init+0xb0>)
 8000bd6:	f00d fc8b 	bl	800e4f0 <USBD_RegisterClass>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000be0:	f000 f91c 	bl	8000e1c <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000be4:	490e      	ldr	r1, [pc, #56]	@ (8000c20 <MX_USB_PCD_Init+0xc0>)
 8000be6:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <MX_USB_PCD_Init+0xb0>)
 8000be8:	f00d f860 	bl	800dcac <USBD_CDC_RegisterInterface>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000bf2:	f000 f913 	bl	8000e1c <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000bf6:	4806      	ldr	r0, [pc, #24]	@ (8000c10 <MX_USB_PCD_Init+0xb0>)
 8000bf8:	f00d fcb0 	bl	800e55c <USBD_Start>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000c02:	f000 f90b 	bl	8000e1c <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200003dc 	.word	0x200003dc
 8000c10:	200006c0 	.word	0x200006c0
 8000c14:	40016000 	.word	0x40016000
 8000c18:	200000d0 	.word	0x200000d0
 8000c1c:	20000034 	.word	0x20000034
 8000c20:	200000b4 	.word	0x200000b4

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	4b72      	ldr	r3, [pc, #456]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c40:	4a70      	ldr	r2, [pc, #448]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	4b6a      	ldr	r3, [pc, #424]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5e:	4a69      	ldr	r2, [pc, #420]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c68:	4b66      	ldr	r3, [pc, #408]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	4b63      	ldr	r3, [pc, #396]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c7c:	4a61      	ldr	r2, [pc, #388]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c86:	4b5f      	ldr	r3, [pc, #380]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b5b      	ldr	r3, [pc, #364]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ca4:	4b57      	ldr	r3, [pc, #348]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b54      	ldr	r3, [pc, #336]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb8:	4a52      	ldr	r2, [pc, #328]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cc2:	4b50      	ldr	r3, [pc, #320]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd6:	4a4b      	ldr	r2, [pc, #300]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ce0:	4b48      	ldr	r3, [pc, #288]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b45      	ldr	r3, [pc, #276]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf4:	4a43      	ldr	r2, [pc, #268]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cfe:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <MX_GPIO_Init+0x1e0>)
 8000d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d0c:	2332      	movs	r3, #50	@ 0x32
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4838      	ldr	r0, [pc, #224]	@ (8000e08 <MX_GPIO_Init+0x1e4>)
 8000d28:	f001 fa0a 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d2c:	2384      	movs	r3, #132	@ 0x84
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4831      	ldr	r0, [pc, #196]	@ (8000e0c <MX_GPIO_Init+0x1e8>)
 8000d48:	f001 f9fa 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	482b      	ldr	r0, [pc, #172]	@ (8000e0c <MX_GPIO_Init+0x1e8>)
 8000d60:	f001 f9ee 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000d64:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4825      	ldr	r0, [pc, #148]	@ (8000e10 <MX_GPIO_Init+0x1ec>)
 8000d7a:	f001 f9e1 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d90:	230b      	movs	r3, #11
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481d      	ldr	r0, [pc, #116]	@ (8000e10 <MX_GPIO_Init+0x1ec>)
 8000d9c:	f001 f9d0 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_GPIO_Init+0x1f0>)
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4819      	ldr	r0, [pc, #100]	@ (8000e18 <MX_GPIO_Init+0x1f4>)
 8000db4:	f001 f9c4 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000db8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dca:	230b      	movs	r3, #11
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4810      	ldr	r0, [pc, #64]	@ (8000e18 <MX_GPIO_Init+0x1f4>)
 8000dd6:	f001 f9b3 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000dda:	23c0      	movs	r3, #192	@ 0xc0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dea:	2308      	movs	r3, #8
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <MX_GPIO_Init+0x1ec>)
 8000df6:	f001 f9a3 	bl	8002140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	@ 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	44020c00 	.word	0x44020c00
 8000e08:	42020800 	.word	0x42020800
 8000e0c:	42020000 	.word	0x42020000
 8000e10:	42020400 	.word	0x42020400
 8000e14:	10110000 	.word	0x10110000
 8000e18:	42021800 	.word	0x42021800

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_HASH_MspInit+0x34>)
 8000e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <HAL_HASH_MspInit+0x34>)
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_HASH_MspInit+0x34>)
 8000e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	44020c00 	.word	0x44020c00

08000e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0cc      	sub	sp, #304	@ 0x130
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e7e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e94:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f00e fe32 	bl	800fb0a <memset>
  if(hi2c->Instance==I2C1)
 8000ea6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a33      	ldr	r2, [pc, #204]	@ (8000f80 <HAL_I2C_MspInit+0x110>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d15e      	bne.n	8000f76 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ebc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000ec0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ecc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ed0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 f89a 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000eea:	f7ff ff97 	bl	8000e1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <HAL_I2C_MspInit+0x114>)
 8000ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef4:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <HAL_I2C_MspInit+0x114>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_I2C_MspInit+0x114>)
 8000f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f04:	f003 0202 	and.w	r2, r3, #2
 8000f08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f16:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f1a:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f36:	2304      	movs	r3, #4
 8000f38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	@ (8000f88 <HAL_I2C_MspInit+0x118>)
 8000f44:	f001 f8fc 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_I2C_MspInit+0x114>)
 8000f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_I2C_MspInit+0x114>)
 8000f50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_I2C_MspInit+0x114>)
 8000f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f5e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000f62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f70:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f74:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f76:	bf00      	nop
 8000f78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40005400 	.word	0x40005400
 8000f84:	44020c00 	.word	0x44020c00
 8000f88:	42020400 	.word	0x42020400

08000f8c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0c6      	sub	sp, #280	@ 0x118
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f9a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000faa:	461a      	mov	r2, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	f00e fdac 	bl	800fb0a <memset>
  if(hrng->Instance==RNG)
 8000fb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fb6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <HAL_RNG_MspInit+0xa8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d131      	bne.n	8001028 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000fc4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fc8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8000fcc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000fd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 f814 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8000ff6:	f7ff ff11 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <HAL_RNG_MspInit+0xac>)
 8000ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_RNG_MspInit+0xac>)
 8001002:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001006:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_RNG_MspInit+0xac>)
 800100c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001010:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001014:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001018:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001022:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001026:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001028:	bf00      	nop
 800102a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	420c0800 	.word	0x420c0800
 8001038:	44020c00 	.word	0x44020c00

0800103c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0c6      	sub	sp, #280	@ 0x118
 8001040:	af00      	add	r7, sp, #0
 8001042:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001046:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800104a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001054:	4618      	mov	r0, r3
 8001056:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800105a:	461a      	mov	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f00e fd54 	bl	800fb0a <memset>
  if(hrtc->Instance==RTC)
 8001062:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001066:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <HAL_RTC_MspInit+0xb8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13a      	bne.n	80010ea <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001074:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001078:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800107c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001088:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800108c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001094:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f003 ffbb 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80010a8:	f7ff feb8 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_RTC_MspInit+0xbc>)
 80010ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b2:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <HAL_RTC_MspInit+0xbc>)
 80010b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_RTC_MspInit+0xbc>)
 80010be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80010c2:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_RTC_MspInit+0xbc>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_RTC_MspInit+0xbc>)
 80010ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80010d2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80010d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010e8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80010ea:	bf00      	nop
 80010ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	44007800 	.word	0x44007800
 80010f8:	44020c00 	.word	0x44020c00

080010fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0ce      	sub	sp, #312	@ 0x138
 8001100:	af00      	add	r7, sp, #0
 8001102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001106:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800110a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001120:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001124:	4618      	mov	r0, r3
 8001126:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800112a:	461a      	mov	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	f00e fcec 	bl	800fb0a <memset>
  if(hspi->Instance==SPI1)
 8001132:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001136:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a49      	ldr	r2, [pc, #292]	@ (8001264 <HAL_SPI_MspInit+0x168>)
 8001140:	4293      	cmp	r3, r2
 8001142:	f040 808a 	bne.w	800125a <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800114a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800114e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800115a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800115e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001162:	2200      	movs	r2, #0
 8001164:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f003 ff53 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001178:	f7ff fe50 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117c:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 800117e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001182:	4a39      	ldr	r2, [pc, #228]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 8001184:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001188:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800118c:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 800118e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001192:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800119a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011a8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0201 	and.w	r2, r3, #1
 80011c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011d6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <HAL_SPI_MspInit+0x16c>)
 80011ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ee:	f003 0208 	and.w	r2, r3, #8
 80011f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001200:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001204:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001206:	2360      	movs	r3, #96	@ 0x60
 8001208:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121e:	2305      	movs	r3, #5
 8001220:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001228:	4619      	mov	r1, r3
 800122a:	4810      	ldr	r0, [pc, #64]	@ (800126c <HAL_SPI_MspInit+0x170>)
 800122c:	f000 ff88 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001248:	2305      	movs	r3, #5
 800124a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001252:	4619      	mov	r1, r3
 8001254:	4806      	ldr	r0, [pc, #24]	@ (8001270 <HAL_SPI_MspInit+0x174>)
 8001256:	f000 ff73 	bl	8002140 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800125a:	bf00      	nop
 800125c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40013000 	.word	0x40013000
 8001268:	44020c00 	.word	0x44020c00
 800126c:	42020000 	.word	0x42020000
 8001270:	42020c00 	.word	0x42020c00

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0d0      	sub	sp, #320	@ 0x140
 8001278:	af00      	add	r7, sp, #0
 800127a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800127e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001282:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001298:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800129c:	4618      	mov	r0, r3
 800129e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f00e fc30 	bl	800fb0a <memset>
  if(huart->Instance==USART2)
 80012aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7c      	ldr	r2, [pc, #496]	@ (80014a8 <HAL_UART_MspInit+0x234>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	f040 808a 	bne.w	80013d2 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80012c6:	f04f 0202 	mov.w	r2, #2
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012da:	2200      	movs	r2, #0
 80012dc:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fe98 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80012ee:	f7ff fd95 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f2:	4b6e      	ldr	r3, [pc, #440]	@ (80014ac <HAL_UART_MspInit+0x238>)
 80012f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012f8:	4a6c      	ldr	r2, [pc, #432]	@ (80014ac <HAL_UART_MspInit+0x238>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001302:	4b6a      	ldr	r3, [pc, #424]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001304:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001308:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 800130c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001310:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800131a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800131e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b62      	ldr	r3, [pc, #392]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001326:	4a61      	ldr	r2, [pc, #388]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001330:	4b5e      	ldr	r3, [pc, #376]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800133e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001348:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800134c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	4b57      	ldr	r3, [pc, #348]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001354:	4a55      	ldr	r2, [pc, #340]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800135e:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001364:	f003 0208 	and.w	r2, r3, #8
 8001368:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800136c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001376:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800137a:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137c:	2308      	movs	r3, #8
 800137e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800139e:	4619      	mov	r1, r3
 80013a0:	4843      	ldr	r0, [pc, #268]	@ (80014b0 <HAL_UART_MspInit+0x23c>)
 80013a2:	f000 fecd 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013a6:	2320      	movs	r3, #32
 80013a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013be:	2307      	movs	r3, #7
 80013c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80013c8:	4619      	mov	r1, r3
 80013ca:	483a      	ldr	r0, [pc, #232]	@ (80014b4 <HAL_UART_MspInit+0x240>)
 80013cc:	f000 feb8 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013d0:	e065      	b.n	800149e <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 80013d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a36      	ldr	r2, [pc, #216]	@ (80014b8 <HAL_UART_MspInit+0x244>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d15c      	bne.n	800149e <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80013e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80013ec:	f04f 0220 	mov.w	r2, #32
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80013f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001400:	2200      	movs	r2, #0
 8001402:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fe05 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001414:	f7ff fd02 	bl	8000e1c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <HAL_UART_MspInit+0x238>)
 800141a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800141e:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001420:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001424:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001428:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HAL_UART_MspInit+0x238>)
 800142a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800142e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001432:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001436:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001440:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001444:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144c:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_UART_MspInit+0x238>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_UART_MspInit+0x238>)
 8001458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145c:	f003 0204 	and.w	r2, r3, #4
 8001460:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001464:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800146e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001472:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001474:	23c0      	movs	r3, #192	@ 0xc0
 8001476:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800148c:	2307      	movs	r3, #7
 800148e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001496:	4619      	mov	r1, r3
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <HAL_UART_MspInit+0x248>)
 800149a:	f000 fe51 	bl	8002140 <HAL_GPIO_Init>
}
 800149e:	bf00      	nop
 80014a0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40004400 	.word	0x40004400
 80014ac:	44020c00 	.word	0x44020c00
 80014b0:	42020000 	.word	0x42020000
 80014b4:	42020c00 	.word	0x42020c00
 80014b8:	40006400 	.word	0x40006400
 80014bc:	42020800 	.word	0x42020800

080014c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0c6      	sub	sp, #280	@ 0x118
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014ce:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014d8:	4618      	mov	r0, r3
 80014da:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80014de:	461a      	mov	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	f00e fb12 	bl	800fb0a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80014e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_PCD_MspInit+0xbc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13b      	bne.n	8001570 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014fc:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0310 	mov.w	r3, #16
 8001508:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800150c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001514:	2230      	movs	r2, #48	@ 0x30
 8001516:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fd7a 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800152a:	f7ff fc77 	bl	8000e1c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800152e:	f002 fde9 	bl	8004104 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_PCD_MspInit+0xc0>)
 8001534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001538:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <HAL_PCD_MspInit+0xc0>)
 800153a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800153e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_PCD_MspInit+0xc0>)
 8001544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001548:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 800154c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001550:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800155a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800155e:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	204a      	movs	r0, #74	@ 0x4a
 8001566:	f000 fc8b 	bl	8001e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800156a:	204a      	movs	r0, #74	@ 0x4a
 800156c:	f000 fca2 	bl	8001eb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40016000 	.word	0x40016000
 8001580:	44020c00 	.word	0x44020c00

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <NMI_Handler+0x4>

0800158c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <MemManage_Handler+0x4>

0800159c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <UsageFault_Handler+0x4>

080015ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f000 fb55 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f9ca 	bl	8001980 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <USB_DRD_FS_IRQHandler+0x10>)
 80015f6:	f001 fa17 	bl	8002a28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200003dc 	.word	0x200003dc

08001604 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160a:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <SystemInit+0xdc>)
 800160c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001610:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <SystemInit+0xdc>)
 8001612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001616:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800161a:	4b32      	ldr	r3, [pc, #200]	@ (80016e4 <SystemInit+0xe0>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001620:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <SystemInit+0xe0>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001626:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <SystemInit+0xe0>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800162c:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <SystemInit+0xe0>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	492c      	ldr	r1, [pc, #176]	@ (80016e4 <SystemInit+0xe0>)
 8001632:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <SystemInit+0xe4>)
 8001634:	4013      	ands	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001638:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <SystemInit+0xe0>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800163e:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <SystemInit+0xe0>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <SystemInit+0xe0>)
 8001646:	2200      	movs	r2, #0
 8001648:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800164a:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <SystemInit+0xe0>)
 800164c:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <SystemInit+0xe8>)
 800164e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001650:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <SystemInit+0xe0>)
 8001652:	2200      	movs	r2, #0
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001656:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <SystemInit+0xe0>)
 8001658:	4a24      	ldr	r2, [pc, #144]	@ (80016ec <SystemInit+0xe8>)
 800165a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <SystemInit+0xe0>)
 800165e:	2200      	movs	r2, #0
 8001660:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <SystemInit+0xe0>)
 8001664:	4a21      	ldr	r2, [pc, #132]	@ (80016ec <SystemInit+0xe8>)
 8001666:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001668:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <SystemInit+0xe0>)
 800166a:	2200      	movs	r2, #0
 800166c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800166e:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <SystemInit+0xe0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <SystemInit+0xe0>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001678:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800167a:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <SystemInit+0xe0>)
 800167c:	2200      	movs	r2, #0
 800167e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <SystemInit+0xdc>)
 8001682:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001686:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <SystemInit+0xec>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001690:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001698:	d003      	beq.n	80016a2 <SystemInit+0x9e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80016a0:	d117      	bne.n	80016d2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <SystemInit+0xec>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <SystemInit+0xec>)
 80016b0:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <SystemInit+0xf0>)
 80016b2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <SystemInit+0xec>)
 80016b6:	4a10      	ldr	r2, [pc, #64]	@ (80016f8 <SystemInit+0xf4>)
 80016b8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <SystemInit+0xec>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <SystemInit+0xec>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <SystemInit+0xec>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <SystemInit+0xec>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	61d3      	str	r3, [r2, #28]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	44020c00 	.word	0x44020c00
 80016e8:	eae2eae3 	.word	0xeae2eae3
 80016ec:	01010280 	.word	0x01010280
 80016f0:	40022000 	.word	0x40022000
 80016f4:	08192a3b 	.word	0x08192a3b
 80016f8:	4c5d6e7f 	.word	0x4c5d6e7f

080016fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016fc:	480d      	ldr	r0, [pc, #52]	@ (8001734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001700:	f7ff ff80 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopForever+0x6>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopForever+0xe>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopForever+0x16>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800172a:	f00e f9f7 	bl	800fb1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7fe ff41 	bl	80005b4 <main>

08001732 <LoopForever>:

LoopForever:
    b LoopForever
 8001732:	e7fe      	b.n	8001732 <LoopForever>
  ldr   r0, =_estack
 8001734:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001740:	0801fc38 	.word	0x0801fc38
  ldr r2, =_sbss
 8001744:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001748:	20001164 	.word	0x20001164

0800174c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_IRQHandler>
	...

08001750 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	@ 0x30
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d009      	beq.n	8001778 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <BSP_LED_Init+0x28>
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d003      	beq.n	8001778 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001770:	f06f 0301 	mvn.w	r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001776:	e055      	b.n	8001824 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10f      	bne.n	800179e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800177e:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <BSP_LED_Init+0xe0>)
 8001780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001784:	4a2a      	ldr	r2, [pc, #168]	@ (8001830 <BSP_LED_Init+0xe0>)
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800178e:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <BSP_LED_Init+0xe0>)
 8001790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	e021      	b.n	80017e2 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <BSP_LED_Init+0xe0>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017aa:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <BSP_LED_Init+0xe0>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <BSP_LED_Init+0xe0>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	e00e      	b.n	80017e2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <BSP_LED_Init+0xe0>)
 80017c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ca:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <BSP_LED_Init+0xe0>)
 80017cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <BSP_LED_Init+0xe0>)
 80017d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <BSP_LED_Init+0xe4>)
 80017e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ea:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001838 <BSP_LED_Init+0xe8>)
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	f107 0218 	add.w	r2, r7, #24
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fc9a 	bl	8002140 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <BSP_LED_Init+0xe8>)
 8001810:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <BSP_LED_Init+0xe4>)
 8001818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	f000 fde0 	bl	80023e4 <HAL_GPIO_WritePin>
  }

  return ret;
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001826:	4618      	mov	r0, r3
 8001828:	3730      	adds	r7, #48	@ 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	44020c00 	.word	0x44020c00
 8001834:	0801fbf4 	.word	0x0801fbf4
 8001838:	20000008 	.word	0x20000008

0800183c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d009      	beq.n	8001864 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <BSP_LED_Toggle+0x28>
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d003      	beq.n	8001864 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800185c:	f06f 0301 	mvn.w	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e00b      	b.n	800187c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <BSP_LED_Toggle+0x4c>)
 8001868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4907      	ldr	r1, [pc, #28]	@ (800188c <BSP_LED_Toggle+0x50>)
 8001870:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f000 fdcc 	bl	8002414 <HAL_GPIO_TogglePin>
  }

  return ret;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	0801fbf4 	.word	0x0801fbf4

08001890 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <BSP_PB_Init+0xd4>)
 80018a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001964 <BSP_PB_Init+0xd4>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <BSP_PB_Init+0xd4>)
 80018b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018c4:	2302      	movs	r3, #2
 80018c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <BSP_PB_Init+0xd8>)
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fc2b 	bl	8002140 <HAL_GPIO_Init>
 80018ea:	e036      	b.n	800195a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <BSP_PB_Init+0xdc>)
 80018ee:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <BSP_PB_Init+0xd8>)
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fc1e 	bl	8002140 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <BSP_PB_Init+0xe0>)
 8001910:	441a      	add	r2, r3
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4917      	ldr	r1, [pc, #92]	@ (8001974 <BSP_PB_Init+0xe4>)
 8001916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 fbb3 	bl	8002088 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <BSP_PB_Init+0xe0>)
 800192e:	1898      	adds	r0, r3, r2
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <BSP_PB_Init+0xe8>)
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	461a      	mov	r2, r3
 800193a:	2100      	movs	r1, #0
 800193c:	f000 fb78 	bl	8002030 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001940:	2018      	movs	r0, #24
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <BSP_PB_Init+0xec>)
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	f000 fa97 	bl	8001e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001952:	2318      	movs	r3, #24
 8001954:	4618      	mov	r0, r3
 8001956:	f000 faad 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	44020c00 	.word	0x44020c00
 8001968:	20000014 	.word	0x20000014
 800196c:	10110000 	.word	0x10110000
 8001970:	2000099c 	.word	0x2000099c
 8001974:	0801fbfc 	.word	0x0801fbfc
 8001978:	20000018 	.word	0x20000018
 800197c:	2000001c 	.word	0x2000001c

08001980 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <BSP_PB_IRQHandler+0x28>)
 8001996:	4413      	add	r3, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fb89 	bl	80020b0 <HAL_EXTI_IRQHandler>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000099c 	.word	0x2000099c

080019ac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019da:	f06f 0301 	mvn.w	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e018      	b.n	8001a14 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2294      	movs	r2, #148	@ 0x94
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <BSP_COM_Init+0x5c>)
 80019ec:	4413      	add	r3, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f854 	bl	8001a9c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2294      	movs	r2, #148	@ 0x94
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <BSP_COM_Init+0x5c>)
 80019fe:	4413      	add	r3, r2
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f80e 	bl	8001a24 <MX_USART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a0e:	f06f 0303 	mvn.w	r3, #3
 8001a12:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a14:	68fb      	ldr	r3, [r7, #12]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200009a8 	.word	0x200009a8

08001a24 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <MX_USART_Init+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	220c      	movs	r2, #12
 8001a42:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	895b      	ldrh	r3, [r3, #10]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	891b      	ldrh	r3, [r3, #8]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	899b      	ldrh	r3, [r3, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a70:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f008 ffe2 	bl	800aa42 <HAL_UART_Init>
 8001a7e:	4603      	mov	r3, r0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000004 	.word	0x20000004

08001a8c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff ff8b 	bl	80019ac <BSP_PB_Callback>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aaa:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <COM1_MspInit+0xa8>)
 8001af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b02:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b10:	2307      	movs	r3, #7
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <COM1_MspInit+0xac>)
 8001b1c:	f000 fb10 	bl	8002140 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b24:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <COM1_MspInit+0xac>)
 8001b36:	f000 fb03 	bl	8002140 <HAL_GPIO_Init>
}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	@ 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	44020c00 	.word	0x44020c00
 8001b48:	42020c00 	.word	0x42020c00

08001b4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 f98a 	bl	8001e6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b56:	f003 f8d5 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_Init+0x44>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	490b      	ldr	r1, [pc, #44]	@ (8001b94 <HAL_Init+0x48>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_Init+0x4c>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b70:	2004      	movs	r0, #4
 8001b72:	f000 f9cf 	bl	8001f14 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b76:	200f      	movs	r0, #15
 8001b78:	f000 f810 	bl	8001b9c <HAL_InitTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e002      	b.n	8001b8c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b86:	f7ff f94f 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	44020c00 	.word	0x44020c00
 8001b94:	0801fbdc 	.word	0x0801fbdc
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ba8:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <HAL_InitTick+0xdc>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e05c      	b.n	8001c6e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001bb4:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <HAL_InitTick+0xe0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d10c      	bne.n	8001bda <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <HAL_InitTick+0xe4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c78 <HAL_InitTick+0xdc>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e037      	b.n	8001c4a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001bda:	f000 f9f3 	bl	8001fc4 <HAL_SYSTICK_GetCLKSourceConfig>
 8001bde:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d023      	beq.n	8001c2e <HAL_InitTick+0x92>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d82d      	bhi.n	8001c48 <HAL_InitTick+0xac>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_InitTick+0x5e>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d00d      	beq.n	8001c14 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001bf8:	e026      	b.n	8001c48 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_InitTick+0xe4>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_InitTick+0xdc>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	60fb      	str	r3, [r7, #12]
        break;
 8001c12:	e01a      	b.n	8001c4a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_InitTick+0xdc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c22:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	60fb      	str	r3, [r7, #12]
        break;
 8001c2c:	e00d      	b.n	8001c4a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0xdc>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	60fb      	str	r3, [r7, #12]
        break;
 8001c46:	e000      	b.n	8001c4a <HAL_InitTick+0xae>
        break;
 8001c48:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f940 	bl	8001ed0 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e009      	b.n	8001c6e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c62:	f000 f90d 	bl	8001e80 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001c66:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_InitTick+0xe8>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000024 	.word	0x20000024
 8001c7c:	e000e010 	.word	0xe000e010
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000020 	.word	0x20000020

08001c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000024 	.word	0x20000024
 8001cac:	20000a3c 	.word	0x20000a3c

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000a3c 	.word	0x20000a3c

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000024 	.word	0x20000024

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	@ (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff4c 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8e:	f7ff ff63 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001e92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f7ff ffb3 	bl	8001e04 <NVIC_EncodePriority>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff82 	bl	8001db0 <__NVIC_SetPriority>
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff56 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee0:	d301      	bcc.n	8001ee6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00d      	b.n	8001f02 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <HAL_SYSTICK_Config+0x40>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_SYSTICK_Config+0x40>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_SYSTICK_Config+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <HAL_SYSTICK_Config+0x40>)
 8001efa:	f043 0303 	orr.w	r3, r3, #3
 8001efe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d844      	bhi.n	8001fac <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001f22:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f4b 	.word	0x08001f4b
 8001f2c:	08001f69 	.word	0x08001f69
 8001f30:	08001f8b 	.word	0x08001f8b
 8001f34:	08001fad 	.word	0x08001fad
 8001f38:	08001f3d 	.word	0x08001f3d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6013      	str	r3, [r2, #0]
      break;
 8001f48:	e031      	b.n	8001fae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f5c:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f5e:	f023 030c 	bic.w	r3, r3, #12
 8001f62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f66:	e022      	b.n	8001fae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a13      	ldr	r2, [pc, #76]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f7a:	f023 030c 	bic.w	r3, r3, #12
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f88:	e011      	b.n	8001fae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f9c:	f023 030c 	bic.w	r3, r3, #12
 8001fa0:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001faa:	e000      	b.n	8001fae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001fac:	bf00      	nop
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010
 8001fc0:	44020c00 	.word	0x44020c00

08001fc4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	e01e      	b.n	800201a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001fdc:	4b13      	ldr	r3, [pc, #76]	@ (800202c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001fde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d00f      	beq.n	800200e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d80f      	bhi.n	8002014 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d003      	beq.n	8002008 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002000:	e008      	b.n	8002014 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
        break;
 8002006:	e008      	b.n	800201a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002008:	2301      	movs	r3, #1
 800200a:	607b      	str	r3, [r7, #4]
        break;
 800200c:	e005      	b.n	800201a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800200e:	2302      	movs	r3, #2
 8002010:	607b      	str	r3, [r7, #4]
        break;
 8002012:	e002      	b.n	800201a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
        break;
 8002018:	bf00      	nop
    }
  }
  return systick_source;
 800201a:	687b      	ldr	r3, [r7, #4]
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e010 	.word	0xe000e010
 800202c:	44020c00 	.word	0x44020c00

08002030 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	460b      	mov	r3, r1
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d011      	beq.n	800206c <HAL_EXTI_RegisterCallback+0x3c>
 8002048:	2b02      	cmp	r3, #2
 800204a:	dc13      	bgt.n	8002074 <HAL_EXTI_RegisterCallback+0x44>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_EXTI_RegisterCallback+0x26>
 8002050:	2b01      	cmp	r3, #1
 8002052:	d007      	beq.n	8002064 <HAL_EXTI_RegisterCallback+0x34>
 8002054:	e00e      	b.n	8002074 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
      break;
 8002062:	e00a      	b.n	800207a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	605a      	str	r2, [r3, #4]
      break;
 800206a:	e006      	b.n	800207a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]
      break;
 8002072:	e002      	b.n	800207a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	75fb      	strb	r3, [r7, #23]
      break;
 8002078:	bf00      	nop
  }

  return status;
 800207a:	7dfb      	ldrb	r3, [r7, #23]
}
 800207c:	4618      	mov	r0, r3
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e003      	b.n	80020a4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2201      	movs	r2, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_EXTI_IRQHandler+0x88>)
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_EXTI_IRQHandler+0x8c>)
 8002108:	4413      	add	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4798      	blx	r3
    }
  }
}
 8002130:	bf00      	nop
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	4402200c 	.word	0x4402200c
 800213c:	44022010 	.word	0x44022010

08002140 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800214e:	e136      	b.n	80023be <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8128 	beq.w	80023b8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x38>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b12      	cmp	r3, #18
 8002176:	d125      	bne.n	80021c4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	08da      	lsrs	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3208      	adds	r2, #8
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	6979      	ldr	r1, [r7, #20]
 80021c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d00b      	beq.n	8002218 <HAL_GPIO_Init+0xd8>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220c:	2b11      	cmp	r3, #17
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b12      	cmp	r3, #18
 8002216:	d130      	bne.n	800227a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4013      	ands	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224e:	2201      	movs	r2, #1
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4013      	ands	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 0201 	and.w	r2, r3, #1
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d017      	beq.n	80022b2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4013      	ands	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d07c      	beq.n	80023b8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022be:	4a47      	ldr	r2, [pc, #284]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3318      	adds	r3, #24
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4013      	ands	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0a9a      	lsrs	r2, r3, #10
 80022e6:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <HAL_GPIO_Init+0x2a0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	f002 0203 	and.w	r2, r2, #3
 80022f0:	00d2      	lsls	r2, r2, #3
 80022f2:	4093      	lsls	r3, r2
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022fa:	4938      	ldr	r1, [pc, #224]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3318      	adds	r3, #24
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800232c:	4a2b      	ldr	r2, [pc, #172]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002332:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4013      	ands	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002356:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800235c:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002362:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4013      	ands	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002382:	4a16      	ldr	r2, [pc, #88]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 800238c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002390:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_GPIO_Init+0x29c>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3301      	adds	r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f aec1 	bne.w	8002150 <HAL_GPIO_Init+0x10>
  }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	44022000 	.word	0x44022000
 80023e0:	002f7f7f 	.word	0x002f7f7f

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002400:	e002      	b.n	8002408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	041a      	lsls	r2, r3, #16
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43d9      	mvns	r1, r3
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	400b      	ands	r3, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e02a      	b.n	80024b0 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fce2 	bl	8000e38 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800248a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	430b      	orrs	r3, r1
 8002496:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e08d      	b.n	80025e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fcc6 	bl	8000e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	@ 0x24
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800253e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d108      	bne.n	800255a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e007      	b.n	800256a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800257c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800258c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69d9      	ldr	r1, [r3, #28]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b20      	cmp	r3, #32
 8002602:	d138      	bne.n	8002676 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800260e:	2302      	movs	r3, #2
 8002610:	e032      	b.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2224      	movs	r2, #36	@ 0x24
 800261e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002640:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	d139      	bne.n	800270e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e033      	b.n	8002710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	@ 0x24
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002728:	230a      	movs	r3, #10
 800272a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800272c:	e002      	b.n	8002734 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b01      	subs	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f9      	bne.n	800272e <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002742:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b29b      	uxth	r3, r3
 800274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002750:	b29b      	uxth	r3, r3
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800276a:	230a      	movs	r3, #10
 800276c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800276e:	e002      	b.n	8002776 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3b01      	subs	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b29b      	uxth	r3, r3
 800278e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002792:	b29b      	uxth	r3, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80027ac:	230a      	movs	r3, #10
 80027ae:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80027b0:	e002      	b.n	80027b8 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d4:	b29b      	uxth	r3, r3
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0f3      	b.n	80029dc <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fe59 	bl	80014c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f008 febb 	bl	800b596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7c1a      	ldrb	r2, [r3, #16]
 8002828:	f88d 2000 	strb.w	r2, [sp]
 800282c:	3304      	adds	r3, #4
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	f008 fe7f 	bl	800b532 <USB_CoreInit>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0ca      	b.n	80029dc <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f008 feb7 	bl	800b5c0 <USB_SetCurrentMode>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0bb      	b.n	80029dc <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e03f      	b.n	80028ea <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3315      	adds	r3, #21
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	3314      	adds	r3, #20
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	3317      	adds	r3, #23
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	3324      	adds	r3, #36	@ 0x24
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3328      	adds	r3, #40	@ 0x28
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3304      	adds	r3, #4
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	3301      	adds	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	791b      	ldrb	r3, [r3, #4]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d3ba      	bcc.n	800286a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e044      	b.n	8002984 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	440b      	add	r3, r1
 800291e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	3301      	adds	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	791b      	ldrb	r3, [r3, #4]
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	429a      	cmp	r2, r3
 800298c:	d3b5      	bcc.n	80028fa <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7c1a      	ldrb	r2, [r3, #16]
 8002996:	f88d 2000 	strb.w	r2, [sp]
 800299a:	3304      	adds	r3, #4
 800299c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299e:	f008 fe32 	bl	800b606 <USB_DevInit>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e013      	b.n	80029dc <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7b1b      	ldrb	r3, [r3, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f001 fb6b 	bl	80040a6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00a fc8b 	bl	800d2f0 <USB_DevDisconnect>

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_PCD_Start+0x16>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e012      	b.n	8002a20 <HAL_PCD_Start+0x3c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f008 fdb1 	bl	800b56e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00a fc5c 	bl	800d2ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00a fc6c 	bl	800d312 <USB_ReadInterrupts>
 8002a3a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 faf2 	bl	8003030 <PCD_EP_ISR_Handler>

    return;
 8002a4c:	e0de      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002a66:	400b      	ands	r3, r1
 8002a68:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f00b fb65 	bl	800e13a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a70:	2100      	movs	r1, #0
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8e1 	bl	8002c3a <HAL_PCD_SetAddress>

    return;
 8002a78:	e0c8      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002a92:	400b      	ands	r3, r1
 8002a94:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002a96:	e0b9      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002ab0:	400b      	ands	r3, r1
 8002ab2:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002ab4:	e0aa      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d029      	beq.n	8002b14 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0204 	bic.w	r2, r2, #4
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0208 	bic.w	r2, r2, #8
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002af2:	2100      	movs	r1, #0
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f001 faf8 	bl	80040ea <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f893 	bl	8002c26 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002b0e:	400b      	ands	r3, r1
 8002b10:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002b12:	e07b      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0208 	orr.w	r2, r2, #8
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002b3c:	400b      	ands	r3, r1
 8002b3e:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0204 	orr.w	r2, r2, #4
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f85e 	bl	8002c12 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b56:	e059      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d033      	beq.n	8002bca <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002b70:	400b      	ands	r3, r1
 8002b72:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d121      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0204 	orr.w	r2, r2, #4
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0208 	orr.w	r2, r2, #8
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 fa95 	bl	80040ea <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002bc0:	e024      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f825 	bl	8002c12 <HAL_PCD_SuspendCallback>
    return;
 8002bc8:	e020      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8002be2:	400b      	ands	r3, r1
 8002be4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f00b fa99 	bl	800e11e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002bec:	e00e      	b.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002c06:	400b      	ands	r3, r1
 8002c08:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002c0a:	bf00      	nop
  }
}
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_PCD_SetAddress+0x1a>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e012      	b.n	8002c7a <HAL_PCD_SetAddress+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f00a fb1c 	bl	800d2a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	4608      	mov	r0, r1
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	70fb      	strb	r3, [r7, #3]
 8002c94:	460b      	mov	r3, r1
 8002c96:	803b      	strh	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da0f      	bge.n	8002cc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 0207 	and.w	r2, r3, #7
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 0207 	and.w	r2, r3, #7
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002cf4:	883b      	ldrh	r3, [r7, #0]
 8002cf6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	78ba      	ldrb	r2, [r7, #2]
 8002d02:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d04:	78bb      	ldrb	r3, [r7, #2]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d102      	bne.n	8002d10 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_PCD_EP_Open+0x9c>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e00e      	b.n	8002d3c <HAL_PCD_EP_Open+0xba>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68f9      	ldr	r1, [r7, #12]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f008 fc8d 	bl	800b64c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da0f      	bge.n	8002d78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 0207 	and.w	r2, r3, #7
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	3310      	adds	r3, #16
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	705a      	strb	r2, [r3, #1]
 8002d76:	e00f      	b.n	8002d98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 0207 	and.w	r2, r3, #7
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_PCD_EP_Close+0x6e>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e00e      	b.n	8002dd0 <HAL_PCD_EP_Close+0x8c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f008 ffa3 	bl	800bd0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	460b      	mov	r3, r1
 8002de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	7afb      	ldrb	r3, [r7, #11]
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2200      	movs	r2, #0
 8002e18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6979      	ldr	r1, [r7, #20]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f009 f8f7 	bl	800c020 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 0207 	and.w	r2, r3, #7
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7c:	7afb      	ldrb	r3, [r7, #11]
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f009 f8a7 	bl	800c020 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	7912      	ldrb	r2, [r2, #4]
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e040      	b.n	8002f7c <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da0f      	bge.n	8002f22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 0207 	and.w	r2, r3, #7
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3310      	adds	r3, #16
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	705a      	strb	r2, [r3, #1]
 8002f20:	e00d      	b.n	8002f3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_EP_SetStall+0x82>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e00e      	b.n	8002f7c <HAL_PCD_EP_SetStall+0xa0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00a f8c1 	bl	800d0f4 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	7912      	ldrb	r2, [r2, #4]
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e042      	b.n	8003028 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da0f      	bge.n	8002fca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 0207 	and.w	r2, r3, #7
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	3310      	adds	r3, #16
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	705a      	strb	r2, [r3, #1]
 8002fc8:	e00f      	b.n	8002fea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 0207 	and.w	r2, r3, #7
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_PCD_EP_ClrStall+0x86>
 8003006:	2302      	movs	r3, #2
 8003008:	e00e      	b.n	8003028 <HAL_PCD_EP_ClrStall+0xa4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f00a f8b1 	bl	800d180 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003038:	e326      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8003042:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 800304e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 8124 	bne.w	80032a0 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003058:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d13e      	bne.n	80030e0 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b89      	ldr	r3, [pc, #548]	@ (8003290 <PCD_EP_ISR_Handler+0x260>)
 800306a:	4013      	ands	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003078:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3314      	adds	r3, #20
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800308a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	441a      	add	r2, r3
 80030a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030a8:	2100      	movs	r1, #0
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f00b f81d 	bl	800e0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7c5b      	ldrb	r3, [r3, #17]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 82e6 	beq.w	8003688 <PCD_EP_ISR_Handler+0x658>
 80030bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 82e1 	bne.w	8003688 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7c5b      	ldrb	r3, [r3, #17]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	745a      	strb	r2, [r3, #17]
 80030de:	e2d3      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80030f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d027      	beq.n	800314a <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7ff fb09 	bl	800271c <PCD_GET_EP_RX_CNT>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003110:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003124:	b29b      	uxth	r3, r3
 8003126:	f00a f963 	bl	800d3f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <PCD_EP_ISR_Handler+0x264>)
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003140:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f00a ffa4 	bl	800e090 <HAL_PCD_SetupStageCallback>
 8003148:	e29e      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800314a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800314e:	2b00      	cmp	r3, #0
 8003150:	f280 829a 	bge.w	8003688 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b4e      	ldr	r3, [pc, #312]	@ (8003294 <PCD_EP_ISR_Handler+0x264>)
 800315c:	4013      	ands	r3, r2
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003166:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800316a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f7ff fad0 	bl	800271c <PCD_GET_EP_RX_CNT>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d019      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x190>
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	6959      	ldr	r1, [r3, #20]
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f00a f923 	bl	800d3f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	441a      	add	r2, r3
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031b8:	2100      	movs	r1, #0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f00a ff7a 	bl	800e0b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80031c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80031ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 825a 	bne.w	8003688 <PCD_EP_ISR_Handler+0x658>
 80031d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80031d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031de:	f000 8253 	beq.w	8003688 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 80031e8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80031ec:	6053      	str	r3, [r2, #4]
 80031ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <PCD_EP_ISR_Handler+0x1d4>
 80031f6:	4b28      	ldr	r3, [pc, #160]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a27      	ldr	r2, [pc, #156]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 80031fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	6053      	str	r3, [r2, #4]
 8003202:	e02e      	b.n	8003262 <PCD_EP_ISR_Handler+0x232>
 8003204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b3e      	cmp	r3, #62	@ 0x3e
 800320a:	d814      	bhi.n	8003236 <PCD_EP_ISR_Handler+0x206>
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <PCD_EP_ISR_Handler+0x1f6>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	069b      	lsls	r3, r3, #26
 800322e:	491a      	ldr	r1, [pc, #104]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e015      	b.n	8003262 <PCD_EP_ISR_Handler+0x232>
 8003236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <PCD_EP_ISR_Handler+0x220>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3b01      	subs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	069b      	lsls	r3, r3, #26
 8003258:	4313      	orrs	r3, r2
 800325a:	4a0f      	ldr	r2, [pc, #60]	@ (8003298 <PCD_EP_ISR_Handler+0x268>)
 800325c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003260:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <PCD_EP_ISR_Handler+0x26c>)
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e1fb      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
 8003290:	07ff8f0f 	.word	0x07ff8f0f
 8003294:	07ff0f8f 	.word	0x07ff0f8f
 8003298:	40016400 	.word	0x40016400
 800329c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80032b2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f280 80bd 	bge.w	8003436 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b9e      	ldr	r3, [pc, #632]	@ (8003548 <PCD_EP_ISR_Handler+0x518>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032e6:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032e8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003302:	7b1b      	ldrb	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7ff fa02 	bl	800271c <PCD_GET_EP_RX_CNT>
 8003318:	4603      	mov	r3, r0
 800331a:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 800331c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d067      	beq.n	80033f2 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003328:	6959      	ldr	r1, [r3, #20]
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	88da      	ldrh	r2, [r3, #6]
 800332e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003330:	f00a f85e 	bl	800d3f0 <USB_ReadPMA>
 8003334:	e05d      	b.n	80033f2 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	78db      	ldrb	r3, [r3, #3]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d108      	bne.n	8003350 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800333e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003340:	461a      	mov	r2, r3
 8003342:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9ad 	bl	80036a4 <HAL_PCD_EP_DB_Receive>
 800334a:	4603      	mov	r3, r0
 800334c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800334e:	e050      	b.n	80033f2 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b7a      	ldr	r3, [pc, #488]	@ (800354c <PCD_EP_ISR_Handler+0x51c>)
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800337e:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f7ff f9db 	bl	800275e <PCD_GET_EP_DBUF0_CNT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80033ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01f      	beq.n	80033f2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b8:	6959      	ldr	r1, [r3, #20]
 80033ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033bc:	891a      	ldrh	r2, [r3, #8]
 80033be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033c0:	f00a f816 	bl	800d3f0 <USB_ReadPMA>
 80033c4:	e015      	b.n	80033f2 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f7ff f9e5 	bl	80027a0 <PCD_GET_EP_DBUF1_CNT>
 80033d6:	4603      	mov	r3, r0
 80033d8:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80033da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e6:	6959      	ldr	r1, [r3, #20]
 80033e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ea:	895a      	ldrh	r2, [r3, #10]
 80033ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033ee:	f009 ffff 	bl	800d3f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80033f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033f8:	441a      	add	r2, r3
 80033fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80033fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003404:	441a      	add	r2, r3
 8003406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003408:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800340a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <PCD_EP_ISR_Handler+0x3ec>
 8003412:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	429a      	cmp	r2, r3
 800341a:	d206      	bcs.n	800342a <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800341c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f00a fe46 	bl	800e0b4 <HAL_PCD_DataOutStageCallback>
 8003428:	e005      	b.n	8003436 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003430:	4618      	mov	r0, r3
 8003432:	f008 fdf5 	bl	800c020 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003436:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8123 	beq.w	8003688 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003442:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	3310      	adds	r3, #16
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <PCD_EP_ISR_Handler+0x520>)
 800346a:	4013      	ands	r3, r2
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003486:	78db      	ldrb	r3, [r3, #3]
 8003488:	2b01      	cmp	r3, #1
 800348a:	f040 80b8 	bne.w	80035fe <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003496:	7b1b      	ldrb	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80a9 	beq.w	80035f0 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800349e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d055      	beq.n	8003554 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d124      	bne.n	80034fa <PCD_EP_ISR_Handler+0x4ca>
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034ce:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e07a      	b.n	80035f0 <PCD_EP_ISR_Handler+0x5c0>
 80034fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d176      	bne.n	80035f0 <PCD_EP_ISR_Handler+0x5c0>
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800350c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800351c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003520:	b292      	uxth	r2, r2
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800352e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800353c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e054      	b.n	80035f0 <PCD_EP_ISR_Handler+0x5c0>
 8003546:	bf00      	nop
 8003548:	07ff0f8f 	.word	0x07ff0f8f
 800354c:	07ff8f8f 	.word	0x07ff8f8f
 8003550:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	785b      	ldrb	r3, [r3, #1]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d124      	bne.n	80035a6 <PCD_EP_ISR_Handler+0x576>
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800357a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800358a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800359a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800359e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	e024      	b.n	80035f0 <PCD_EP_ISR_Handler+0x5c0>
 80035a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d120      	bne.n	80035f0 <PCD_EP_ISR_Handler+0x5c0>
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035cc:	b292      	uxth	r2, r2
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80035da:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ec:	6852      	ldr	r2, [r2, #4]
 80035ee:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f00a fd77 	bl	800e0ea <HAL_PCD_DataInStageCallback>
 80035fc:	e044      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035fe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d139      	bne.n	800367c <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b29b      	uxth	r3, r3
 800361c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003620:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003628:	429a      	cmp	r2, r3
 800362a:	d906      	bls.n	800363a <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 800362c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003632:	1ad2      	subs	r2, r2, r3
 8003634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003636:	619a      	str	r2, [r3, #24]
 8003638:	e002      	b.n	8003640 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 800363a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f00a fd4b 	bl	800e0ea <HAL_PCD_DataInStageCallback>
 8003654:	e018      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800365c:	441a      	add	r2, r3
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003668:	441a      	add	r2, r3
 800366a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003674:	4618      	mov	r0, r3
 8003676:	f008 fcd3 	bl	800c020 <USB_EPStartXfer>
 800367a:	e005      	b.n	8003688 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800367c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800367e:	461a      	mov	r2, r3
 8003680:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8e8 	bl	8003858 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003692:	2b00      	cmp	r3, #0
 8003694:	f47f acd1 	bne.w	800303a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3738      	adds	r7, #56	@ 0x38
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop

080036a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	@ 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d062      	beq.n	8003782 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f7ff f849 	bl	800275e <PCD_GET_EP_DBUF0_CNT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	8bfb      	ldrh	r3, [r7, #30]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d306      	bcc.n	80036e8 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	8bfb      	ldrh	r3, [r7, #30]
 80036e0:	1ad2      	subs	r2, r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	619a      	str	r2, [r3, #24]
 80036e6:	e002      	b.n	80036ee <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11b      	bne.n	800372e <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b52      	ldr	r3, [pc, #328]	@ (8003850 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800372c:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b42      	ldr	r3, [pc, #264]	@ (8003854 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800374a:	4013      	ands	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	441a      	add	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003762:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003766:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003768:	8bfb      	ldrh	r3, [r7, #30]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d06b      	beq.n	8003846 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6959      	ldr	r1, [r3, #20]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	891a      	ldrh	r2, [r3, #8]
 800377a:	8bfb      	ldrh	r3, [r7, #30]
 800377c:	f009 fe38 	bl	800d3f0 <USB_ReadPMA>
 8003780:	e061      	b.n	8003846 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff f807 	bl	80027a0 <PCD_GET_EP_DBUF1_CNT>
 8003792:	4603      	mov	r3, r0
 8003794:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	8bfb      	ldrh	r3, [r7, #30]
 800379c:	429a      	cmp	r2, r3
 800379e:	d306      	bcc.n	80037ae <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	8bfb      	ldrh	r3, [r7, #30]
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	619a      	str	r2, [r3, #24]
 80037ac:	e002      	b.n	80037b4 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11b      	bne.n	80037f4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	441a      	add	r2, r3
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037f2:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d117      	bne.n	800382e <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003810:	4013      	ands	r3, r2
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003828:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800382c:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800382e:	8bfb      	ldrh	r3, [r7, #30]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6959      	ldr	r1, [r3, #20]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	895a      	ldrh	r2, [r3, #10]
 8003840:	8bfb      	ldrh	r3, [r7, #30]
 8003842:	f009 fdd5 	bl	800d3f0 <USB_ReadPMA>
    }
  }

  return count;
 8003846:	8bfb      	ldrh	r3, [r7, #30]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	@ 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	07ffbf8f 	.word	0x07ffbf8f
 8003854:	07ff8f8f 	.word	0x07ff8f8f

08003858 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	@ 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 81d5 	beq.w	8003c1c <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fe ff6e 	bl	800275e <PCD_GET_EP_DBUF0_CNT>
 8003882:	4603      	mov	r3, r0
 8003884:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	8bfb      	ldrh	r3, [r7, #30]
 800388c:	429a      	cmp	r2, r3
 800388e:	d906      	bls.n	800389e <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	619a      	str	r2, [r3, #24]
 800389c:	e002      	b.n	80038a4 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 80c1 	bne.w	8003a30 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d124      	bne.n	8003900 <HAL_PCD_EP_DB_Transmit+0xa8>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e024      	b.n	800394a <HAL_PCD_EP_DB_Transmit+0xf2>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d120      	bne.n	800394a <HAL_PCD_EP_DB_Transmit+0xf2>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003912:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003922:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003926:	b292      	uxth	r2, r2
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003934:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d124      	bne.n	800399c <HAL_PCD_EP_DB_Transmit+0x144>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003970:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003980:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003994:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e024      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x18e>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d120      	bne.n	80039e6 <HAL_PCD_EP_DB_Transmit+0x18e>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039c2:	b292      	uxth	r2, r2
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80039d0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e2:	6852      	ldr	r2, [r2, #4]
 80039e4:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f00a fb7c 	bl	800e0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 82e5 	beq.w	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c48 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e2cb      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d017      	beq.n	8003a6a <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c48 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a68:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 82a9 	bne.w	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	8bfb      	ldrh	r3, [r7, #30]
 8003a7c:	441a      	add	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	8bfb      	ldrh	r3, [r7, #30]
 8003a88:	441a      	add	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d309      	bcc.n	8003aae <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	621a      	str	r2, [r3, #32]
 8003aac:	e014      	b.n	8003ad8 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003ab6:	8bfb      	ldrh	r3, [r7, #30]
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ac2:	e009      	b.n	8003ad8 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d16a      	bne.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x35e>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003afa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003afe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d112      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e06a      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b34:	d81e      	bhi.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b48:	3301      	adds	r3, #1
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	069a      	lsls	r2, r3, #26
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e048      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_PCD_EP_DB_Transmit+0x332>
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	3b01      	subs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9c:	069b      	lsls	r3, r3, #26
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003baa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e027      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d123      	bne.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	041a      	lsls	r2, r3, #16
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6959      	ldr	r1, [r3, #20]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	891a      	ldrh	r2, [r3, #8]
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f009 fb8a 	bl	800d32e <USB_WritePMA>
 8003c1a:	e1d5      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f7fe fdba 	bl	80027a0 <PCD_GET_EP_DBUF1_CNT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	8bfb      	ldrh	r3, [r7, #30]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d308      	bcc.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	8bfb      	ldrh	r3, [r7, #30]
 8003c40:	1ad2      	subs	r2, r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	e004      	b.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003c48:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 80c1 	bne.w	8003dde <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d124      	bne.n	8003cae <HAL_PCD_EP_DB_Transmit+0x456>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c82:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ca2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ca6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e024      	b.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d120      	bne.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003ce2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d124      	bne.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d1e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	e024      	b.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	785b      	ldrb	r3, [r3, #1]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d120      	bne.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d70:	b292      	uxth	r2, r2
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003d7e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d90:	6852      	ldr	r2, [r2, #4]
 8003d92:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f00a f9a5 	bl	800e0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 810e 	bne.w	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b95      	ldr	r3, [pc, #596]	@ (8004014 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	441a      	add	r2, r3
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e0f4      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d117      	bne.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b86      	ldr	r3, [pc, #536]	@ (8004014 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e16:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	f040 80d2 	bne.w	8003fc8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	8bfb      	ldrh	r3, [r7, #30]
 8003e2a:	441a      	add	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	8bfb      	ldrh	r3, [r7, #30]
 8003e36:	441a      	add	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d309      	bcc.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	1ad2      	subs	r2, r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	621a      	str	r2, [r3, #32]
 8003e5a:	e014      	b.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003e64:	8bfb      	ldrh	r3, [r7, #30]
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e70:	e009      	b.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d16a      	bne.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x70c>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eac:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d112      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x686>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ec2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ed6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	e06a      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ee2:	d81e      	bhi.n	8003f22 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	069a      	lsls	r2, r3, #26
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	e048      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	069b      	lsls	r3, r3, #26
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f5c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	e027      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d123      	bne.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f8a:	b292      	uxth	r2, r2
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	041a      	lsls	r2, r3, #16
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6959      	ldr	r1, [r3, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	895a      	ldrh	r2, [r3, #10]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f009 f9b3 	bl	800d32e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	f083 0310 	eor.w	r3, r3, #16
 8003fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	f083 0320 	eor.w	r3, r3, #32
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004006:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3738      	adds	r7, #56	@ 0x38
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	07ff8f8f 	.word	0x07ff8f8f
 8004018:	07ff8fbf 	.word	0x07ff8fbf

0800401c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	817b      	strh	r3, [r7, #10]
 800402a:	4613      	mov	r3, r2
 800402c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	f003 0207 	and.w	r2, r3, #7
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	3310      	adds	r3, #16
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e00a      	b.n	800406a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004054:	897a      	ldrh	r2, [r7, #10]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	3304      	adds	r3, #4
 8004068:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800406a:	893b      	ldrh	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2200      	movs	r2, #0
 8004074:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	b29a      	uxth	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	80da      	strh	r2, [r3, #6]
 800407e:	e00b      	b.n	8004098 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2201      	movs	r2, #1
 8004084:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	b29a      	uxth	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	b29a      	uxth	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	f043 0202 	orr.w	r2, r3, #2
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_PWREx_EnableVddUSB+0x1c>)
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	4a04      	ldr	r2, [pc, #16]	@ (8004120 <HAL_PWREx_EnableVddUSB+0x1c>)
 800410e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004112:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	44020800 	.word	0x44020800

08004124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f000 bc28 	b.w	8004988 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004138:	4b94      	ldr	r3, [pc, #592]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f003 0318 	and.w	r3, r3, #24
 8004140:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004142:	4b92      	ldr	r3, [pc, #584]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05b      	beq.n	8004210 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b08      	cmp	r3, #8
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x46>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b18      	cmp	r3, #24
 8004162:	d114      	bne.n	800418e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d111      	bne.n	800418e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f000 bc08 	b.w	8004988 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004178:	4b84      	ldr	r3, [pc, #528]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	4981      	ldr	r1, [pc, #516]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004188:	4313      	orrs	r3, r2
 800418a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800418c:	e040      	b.n	8004210 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d023      	beq.n	80041de <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004196:	4b7d      	ldr	r3, [pc, #500]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7c      	ldr	r2, [pc, #496]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd fd85 	bl	8001cb0 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041aa:	f7fd fd81 	bl	8001cb0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e3e5      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041bc:	4b73      	ldr	r3, [pc, #460]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80041c8:	4b70      	ldr	r3, [pc, #448]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	496d      	ldr	r1, [pc, #436]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	618b      	str	r3, [r1, #24]
 80041dc:	e018      	b.n	8004210 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041de:	4b6b      	ldr	r3, [pc, #428]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6a      	ldr	r2, [pc, #424]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80041e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd fd61 	bl	8001cb0 <HAL_GetTick>
 80041ee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041f2:	f7fd fd5d 	bl	8001cb0 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e3c1      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004204:	4b61      	ldr	r3, [pc, #388]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a0 	beq.w	800435e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b10      	cmp	r3, #16
 8004222:	d005      	beq.n	8004230 <HAL_RCC_OscConfig+0x10c>
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b18      	cmp	r3, #24
 8004228:	d109      	bne.n	800423e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 8092 	bne.w	800435e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e3a4      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x132>
 8004248:	4b50      	ldr	r3, [pc, #320]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a4f      	ldr	r2, [pc, #316]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e058      	b.n	8004308 <HAL_RCC_OscConfig+0x1e4>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d112      	bne.n	8004284 <HAL_RCC_OscConfig+0x160>
 800425e:	4b4b      	ldr	r3, [pc, #300]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a4a      	ldr	r2, [pc, #296]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b48      	ldr	r3, [pc, #288]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a47      	ldr	r2, [pc, #284]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004270:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b45      	ldr	r3, [pc, #276]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a44      	ldr	r2, [pc, #272]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800427c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e041      	b.n	8004308 <HAL_RCC_OscConfig+0x1e4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800428c:	d112      	bne.n	80042b4 <HAL_RCC_OscConfig+0x190>
 800428e:	4b3f      	ldr	r3, [pc, #252]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a3e      	ldr	r2, [pc, #248]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b3c      	ldr	r3, [pc, #240]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3b      	ldr	r2, [pc, #236]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b39      	ldr	r3, [pc, #228]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a38      	ldr	r2, [pc, #224]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e029      	b.n	8004308 <HAL_RCC_OscConfig+0x1e4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x1c0>
 80042be:	4b33      	ldr	r3, [pc, #204]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a32      	ldr	r2, [pc, #200]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b30      	ldr	r3, [pc, #192]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2f      	ldr	r2, [pc, #188]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b2d      	ldr	r3, [pc, #180]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2c      	ldr	r2, [pc, #176]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e011      	b.n	8004308 <HAL_RCC_OscConfig+0x1e4>
 80042e4:	4b29      	ldr	r3, [pc, #164]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a28      	ldr	r2, [pc, #160]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b26      	ldr	r3, [pc, #152]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a25      	ldr	r2, [pc, #148]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b23      	ldr	r3, [pc, #140]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a22      	ldr	r2, [pc, #136]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004302:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd fcce 	bl	8001cb0 <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004318:	f7fd fcca 	bl	8001cb0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	@ 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e32e      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	4b18      	ldr	r3, [pc, #96]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x1f4>
 8004336:	e012      	b.n	800435e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd fcba 	bl	8001cb0 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004340:	f7fd fcb6 	bl	8001cb0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e31a      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004352:	4b0e      	ldr	r3, [pc, #56]	@ (800438c <HAL_RCC_OscConfig+0x268>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 809a 	beq.w	80044a0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_RCC_OscConfig+0x25a>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b18      	cmp	r3, #24
 8004376:	d149      	bne.n	800440c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d146      	bne.n	800440c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e2fe      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
 800438a:	bf00      	nop
 800438c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004396:	4b9a      	ldr	r3, [pc, #616]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0218 	and.w	r2, r3, #24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d014      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80043a6:	4b96      	ldr	r3, [pc, #600]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 0218 	bic.w	r2, r3, #24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4993      	ldr	r1, [pc, #588]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80043b8:	f000 fdd0 	bl	8004f5c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043bc:	4b91      	ldr	r3, [pc, #580]	@ (8004604 <HAL_RCC_OscConfig+0x4e0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fbeb 	bl	8001b9c <HAL_InitTick>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e2db      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fc6e 	bl	8001cb0 <HAL_GetTick>
 80043d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80043d8:	f7fd fc6a 	bl	8001cb0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e2ce      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ea:	4b85      	ldr	r3, [pc, #532]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80043f6:	4b82      	ldr	r3, [pc, #520]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	497e      	ldr	r1, [pc, #504]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800440a:	e049      	b.n	80044a0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02c      	beq.n	800446e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004414:	4b7a      	ldr	r3, [pc, #488]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 0218 	bic.w	r2, r3, #24
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4977      	ldr	r1, [pc, #476]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004426:	4b76      	ldr	r3, [pc, #472]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd fc3d 	bl	8001cb0 <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800443a:	f7fd fc39 	bl	8001cb0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e29d      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444c:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004458:	4b69      	ldr	r3, [pc, #420]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	4966      	ldr	r1, [pc, #408]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	610b      	str	r3, [r1, #16]
 800446c:	e018      	b.n	80044a0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b64      	ldr	r3, [pc, #400]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a63      	ldr	r2, [pc, #396]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd fc19 	bl	8001cb0 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004482:	f7fd fc15 	bl	8001cb0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e279      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004494:	4b5a      	ldr	r3, [pc, #360]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03c      	beq.n	8004526 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01c      	beq.n	80044ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b4:	4b52      	ldr	r3, [pc, #328]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80044b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044ba:	4a51      	ldr	r2, [pc, #324]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80044bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fbf4 	bl	8001cb0 <HAL_GetTick>
 80044c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80044cc:	f7fd fbf0 	bl	8001cb0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e254      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044de:	4b48      	ldr	r3, [pc, #288]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80044e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <HAL_RCC_OscConfig+0x3a8>
 80044ec:	e01b      	b.n	8004526 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ee:	4b44      	ldr	r3, [pc, #272]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80044f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f4:	4a42      	ldr	r2, [pc, #264]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80044f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fe:	f7fd fbd7 	bl	8001cb0 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004506:	f7fd fbd3 	bl	8001cb0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e237      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004518:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 800451a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800451e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ef      	bne.n	8004506 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80d2 	beq.w	80046d8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004534:	4b34      	ldr	r3, [pc, #208]	@ (8004608 <HAL_RCC_OscConfig+0x4e4>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d118      	bne.n	8004572 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004540:	4b31      	ldr	r3, [pc, #196]	@ (8004608 <HAL_RCC_OscConfig+0x4e4>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	4a30      	ldr	r2, [pc, #192]	@ (8004608 <HAL_RCC_OscConfig+0x4e4>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454c:	f7fd fbb0 	bl	8001cb0 <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fd fbac 	bl	8001cb0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e210      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004566:	4b28      	ldr	r3, [pc, #160]	@ (8004608 <HAL_RCC_OscConfig+0x4e4>)
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d108      	bne.n	800458c <HAL_RCC_OscConfig+0x468>
 800457a:	4b21      	ldr	r3, [pc, #132]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 800457c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004580:	4a1f      	ldr	r2, [pc, #124]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800458a:	e074      	b.n	8004676 <HAL_RCC_OscConfig+0x552>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d118      	bne.n	80045c6 <HAL_RCC_OscConfig+0x4a2>
 8004594:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800459a:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045a4:	4b16      	ldr	r3, [pc, #88]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045aa:	4a15      	ldr	r2, [pc, #84]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045b4:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ba:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045c4:	e057      	b.n	8004676 <HAL_RCC_OscConfig+0x552>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d11e      	bne.n	800460c <HAL_RCC_OscConfig+0x4e8>
 80045ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e4:	4a06      	ldr	r2, [pc, #24]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045ee:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f4:	4a02      	ldr	r2, [pc, #8]	@ (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x552>
 8004600:	44020c00 	.word	0x44020c00
 8004604:	20000020 	.word	0x20000020
 8004608:	44020800 	.word	0x44020800
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b85      	cmp	r3, #133	@ 0x85
 8004612:	d118      	bne.n	8004646 <HAL_RCC_OscConfig+0x522>
 8004614:	4ba2      	ldr	r3, [pc, #648]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800461a:	4aa1      	ldr	r2, [pc, #644]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004624:	4b9e      	ldr	r3, [pc, #632]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800462a:	4a9d      	ldr	r2, [pc, #628]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800462c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004630:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004634:	4b9a      	ldr	r3, [pc, #616]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800463a:	4a99      	ldr	r2, [pc, #612]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004644:	e017      	b.n	8004676 <HAL_RCC_OscConfig+0x552>
 8004646:	4b96      	ldr	r3, [pc, #600]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464c:	4a94      	ldr	r2, [pc, #592]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004656:	4b92      	ldr	r3, [pc, #584]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800465c:	4a90      	ldr	r2, [pc, #576]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800465e:	f023 0304 	bic.w	r3, r3, #4
 8004662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004666:	4b8e      	ldr	r3, [pc, #568]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800466c:	4a8c      	ldr	r2, [pc, #560]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800466e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d016      	beq.n	80046ac <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fb17 	bl	8001cb0 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd fb13 	bl	8001cb0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e175      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469c:	4b80      	ldr	r3, [pc, #512]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800469e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ed      	beq.n	8004686 <HAL_RCC_OscConfig+0x562>
 80046aa:	e015      	b.n	80046d8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fd fb00 	bl	8001cb0 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd fafc 	bl	8001cb0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e15e      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ca:	4b75      	ldr	r3, [pc, #468]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80046cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ed      	bne.n	80046b4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d036      	beq.n	8004752 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d019      	beq.n	8004720 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046ec:	4b6c      	ldr	r3, [pc, #432]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6b      	ldr	r2, [pc, #428]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80046f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd fada 	bl	8001cb0 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004700:	f7fd fad6 	bl	8001cb0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e13a      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004712:	4b63      	ldr	r3, [pc, #396]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x5dc>
 800471e:	e018      	b.n	8004752 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004720:	4b5f      	ldr	r3, [pc, #380]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5e      	ldr	r2, [pc, #376]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800472a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472c:	f7fd fac0 	bl	8001cb0 <HAL_GetTick>
 8004730:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004734:	f7fd fabc 	bl	8001cb0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e120      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004746:	4b56      	ldr	r3, [pc, #344]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8115 	beq.w	8004986 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b18      	cmp	r3, #24
 8004760:	f000 80af 	beq.w	80048c2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	2b02      	cmp	r3, #2
 800476a:	f040 8086 	bne.w	800487a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800476e:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a4b      	ldr	r2, [pc, #300]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004774:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7fd fa99 	bl	8001cb0 <HAL_GetTick>
 800477e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004782:	f7fd fa95 	bl	8001cb0 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0f9      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004794:	4b42      	ldr	r3, [pc, #264]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f0      	bne.n	8004782 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80047a0:	4b3f      	ldr	r3, [pc, #252]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047a8:	f023 0303 	bic.w	r3, r3, #3
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047b4:	0212      	lsls	r2, r2, #8
 80047b6:	430a      	orrs	r2, r1
 80047b8:	4939      	ldr	r1, [pc, #228]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047cc:	3b01      	subs	r3, #1
 80047ce:	025b      	lsls	r3, r3, #9
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	3b01      	subs	r3, #1
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047ee:	492c      	ldr	r1, [pc, #176]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80047f4:	4b2a      	ldr	r3, [pc, #168]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 80047fa:	f023 0310 	bic.w	r3, r3, #16
 80047fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004804:	4a26      	ldr	r2, [pc, #152]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800480a:	4b25      	ldr	r3, [pc, #148]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	4a24      	ldr	r2, [pc, #144]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004810:	f043 0310 	orr.w	r3, r3, #16
 8004814:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004816:	4b22      	ldr	r3, [pc, #136]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	f023 020c 	bic.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	491f      	ldr	r1, [pc, #124]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004828:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	f023 0220 	bic.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004834:	491a      	ldr	r1, [pc, #104]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800483a:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	4a18      	ldr	r2, [pc, #96]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004844:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004846:	4b16      	ldr	r3, [pc, #88]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800484c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fd fa2d 	bl	8001cb0 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800485a:	f7fd fa29 	bl	8001cb0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e08d      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800486c:	4b0c      	ldr	r3, [pc, #48]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x736>
 8004878:	e085      	b.n	8004986 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <HAL_RCC_OscConfig+0x77c>)
 8004880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fd fa13 	bl	8001cb0 <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800488e:	f7fd fa0f 	bl	8001cb0 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d903      	bls.n	80048a4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e073      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
 80048a0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ee      	bne.n	800488e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80048b0:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	4a36      	ldr	r2, [pc, #216]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 80048b6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	6293      	str	r3, [r2, #40]	@ 0x28
 80048c0:	e061      	b.n	8004986 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80048c2:	4b33      	ldr	r3, [pc, #204]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048c8:	4b31      	ldr	r3, [pc, #196]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d031      	beq.n	800493a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0203 	and.w	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d12a      	bne.n	800493a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d122      	bne.n	800493a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d11a      	bne.n	800493a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	0a5b      	lsrs	r3, r3, #9
 8004908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d111      	bne.n	800493a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d108      	bne.n	800493a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	0e1b      	lsrs	r3, r3, #24
 800492c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e024      	b.n	8004988 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800493e:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	08db      	lsrs	r3, r3, #3
 8004944:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800494c:	429a      	cmp	r2, r3
 800494e:	d01a      	beq.n	8004986 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004950:	4b0f      	ldr	r3, [pc, #60]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	4a0e      	ldr	r2, [pc, #56]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 8004956:	f023 0310 	bic.w	r3, r3, #16
 800495a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd f9a8 	bl	8001cb0 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004962:	bf00      	nop
 8004964:	f7fd f9a4 	bl	8001cb0 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4293      	cmp	r3, r2
 800496e:	d0f9      	beq.n	8004964 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004974:	4a06      	ldr	r2, [pc, #24]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800497a:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <HAL_RCC_OscConfig+0x86c>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	44020c00 	.word	0x44020c00

08004994 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e19e      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a8:	4b83      	ldr	r3, [pc, #524]	@ (8004bb8 <HAL_RCC_ClockConfig+0x224>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d910      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b80      	ldr	r3, [pc, #512]	@ (8004bb8 <HAL_RCC_ClockConfig+0x224>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 020f 	bic.w	r2, r3, #15
 80049be:	497e      	ldr	r1, [pc, #504]	@ (8004bb8 <HAL_RCC_ClockConfig+0x224>)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b7c      	ldr	r3, [pc, #496]	@ (8004bb8 <HAL_RCC_ClockConfig+0x224>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e186      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	4b74      	ldr	r3, [pc, #464]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d909      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80049f6:	4b71      	ldr	r3, [pc, #452]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	496d      	ldr	r1, [pc, #436]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	4b68      	ldr	r3, [pc, #416]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d909      	bls.n	8004a3c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a28:	4b64      	ldr	r3, [pc, #400]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	4961      	ldr	r1, [pc, #388]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d010      	beq.n	8004a6a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d908      	bls.n	8004a6a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004a58:	4b58      	ldr	r3, [pc, #352]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4955      	ldr	r1, [pc, #340]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	4b50      	ldr	r3, [pc, #320]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d908      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004a86:	4b4d      	ldr	r3, [pc, #308]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 020f 	bic.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	494a      	ldr	r1, [pc, #296]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8093 	beq.w	8004bcc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004aae:	4b43      	ldr	r3, [pc, #268]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d121      	bne.n	8004afe <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e113      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d115      	bne.n	8004afe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e107      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004ade:	4b37      	ldr	r3, [pc, #220]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0fb      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aee:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0f3      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004afe:	4b2f      	ldr	r3, [pc, #188]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	492c      	ldr	r1, [pc, #176]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b10:	f7fd f8ce 	bl	8001cb0 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d112      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fd f8c6 	bl	8001cb0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0d7      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b36:	4b21      	ldr	r3, [pc, #132]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0318 	and.w	r3, r3, #24
 8004b3e:	2b18      	cmp	r3, #24
 8004b40:	d1ee      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x18c>
 8004b42:	e043      	b.n	8004bcc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d112      	bne.n	8004b72 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4e:	f7fd f8af 	bl	8001cb0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0c0      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b64:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 0318 	and.w	r3, r3, #24
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d1ee      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x1ba>
 8004b70:	e02c      	b.n	8004bcc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d122      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f7fd f898 	bl	8001cb0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e0a9      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b92:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <HAL_RCC_ClockConfig+0x228>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 0318 	and.w	r3, r3, #24
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1e8>
 8004b9e:	e015      	b.n	8004bcc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd f886 	bl	8001cb0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d906      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e097      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
 8004bb6:	bf00      	nop
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 0318 	and.w	r3, r3, #24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e9      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d010      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	4b44      	ldr	r3, [pc, #272]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d208      	bcs.n	8004bfa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004be8:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 020f 	bic.w	r2, r3, #15
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	493e      	ldr	r1, [pc, #248]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <HAL_RCC_ClockConfig+0x360>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d210      	bcs.n	8004c2a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c08:	4b3a      	ldr	r3, [pc, #232]	@ (8004cf4 <HAL_RCC_ClockConfig+0x360>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 020f 	bic.w	r2, r3, #15
 8004c10:	4938      	ldr	r1, [pc, #224]	@ (8004cf4 <HAL_RCC_ClockConfig+0x360>)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c18:	4b36      	ldr	r3, [pc, #216]	@ (8004cf4 <HAL_RCC_ClockConfig+0x360>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e05d      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d208      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004c46:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4927      	ldr	r1, [pc, #156]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	4b21      	ldr	r3, [pc, #132]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d209      	bcs.n	8004c8a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004c76:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	491a      	ldr	r1, [pc, #104]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	4b15      	ldr	r3, [pc, #84]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	0a1b      	lsrs	r3, r3, #8
 8004ca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d209      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	490e      	ldr	r1, [pc, #56]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cbc:	f000 f822 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCC_ClockConfig+0x35c>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	490b      	ldr	r1, [pc, #44]	@ (8004cf8 <HAL_RCC_ClockConfig+0x364>)
 8004ccc:	5ccb      	ldrb	r3, [r1, r3]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cfc <HAL_RCC_ClockConfig+0x368>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <HAL_RCC_ClockConfig+0x36c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc ff5e 	bl	8001b9c <HAL_InitTick>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	44020c00 	.word	0x44020c00
 8004cf4:	40022000 	.word	0x40022000
 8004cf8:	0801fbdc 	.word	0x0801fbdc
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	20000020 	.word	0x20000020

08004d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	@ 0x24
 8004d08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d0a:	4b8c      	ldr	r3, [pc, #560]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 0318 	and.w	r3, r3, #24
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d16:	4b8a      	ldr	r3, [pc, #552]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e107      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d1c:	4b87      	ldr	r3, [pc, #540]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f003 0318 	and.w	r3, r3, #24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d112      	bne.n	8004d4e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d28:	4b84      	ldr	r3, [pc, #528]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d34:	4b81      	ldr	r3, [pc, #516]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	08db      	lsrs	r3, r3, #3
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	4a81      	ldr	r2, [pc, #516]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e0f1      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004d48:	4b7e      	ldr	r3, [pc, #504]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e0ee      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0318 	and.w	r3, r3, #24
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d102      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x244>)
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e0e5      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d60:	4b76      	ldr	r3, [pc, #472]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f003 0318 	and.w	r3, r3, #24
 8004d68:	2b18      	cmp	r3, #24
 8004d6a:	f040 80dd 	bne.w	8004f28 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d6e:	4b73      	ldr	r3, [pc, #460]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004d78:	4b70      	ldr	r3, [pc, #448]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004d84:	4b6d      	ldr	r3, [pc, #436]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004d90:	4b6a      	ldr	r3, [pc, #424]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80b7 	beq.w	8004f22 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d056      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x16a>
 8004dc0:	e077      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02d      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dce:	4b5b      	ldr	r3, [pc, #364]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	08db      	lsrs	r3, r3, #3
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x240>)
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df8:	4b50      	ldr	r3, [pc, #320]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e08:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e0c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004f4c <HAL_RCC_GetSysClockFreq+0x248>
 8004e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e24:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004e28:	e065      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e34:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004f50 <HAL_RCC_GetSysClockFreq+0x24c>
 8004e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e50:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004f4c <HAL_RCC_GetSysClockFreq+0x248>
 8004e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e68:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004e6c:	e043      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	ee07 3a90 	vmov	s15, r3
 8004e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e78:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004f54 <HAL_RCC_GetSysClockFreq+0x250>
 8004e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e80:	4b2e      	ldr	r3, [pc, #184]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e90:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e94:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004f4c <HAL_RCC_GetSysClockFreq+0x248>
 8004e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004eb0:	e021      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f58 <HAL_RCC_GetSysClockFreq+0x254>
 8004ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ed4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ed8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004f4c <HAL_RCC_GetSysClockFreq+0x248>
 8004edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ef4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004ef6:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x238>)
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efa:	0a5b      	lsrs	r3, r3, #9
 8004efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f00:	3301      	adds	r3, #1
 8004f02:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f0e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1a:	ee17 3a90 	vmov	r3, s15
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	e004      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	e001      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f2a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3724      	adds	r7, #36	@ 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	44020c00 	.word	0x44020c00
 8004f40:	003d0900 	.word	0x003d0900
 8004f44:	03d09000 	.word	0x03d09000
 8004f48:	007a1200 	.word	0x007a1200
 8004f4c:	46000000 	.word	0x46000000
 8004f50:	4c742400 	.word	0x4c742400
 8004f54:	4af42400 	.word	0x4af42400
 8004f58:	4a742400 	.word	0x4a742400

08004f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f60:	f7ff fed0 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f6a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f6e:	4907      	ldr	r1, [pc, #28]	@ (8004f8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004f70:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f72:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <HAL_RCC_GetHCLKFreq+0x34>)
 8004f7c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004f7e:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <HAL_RCC_GetHCLKFreq+0x34>)
 8004f80:	681b      	ldr	r3, [r3, #0]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	44020c00 	.word	0x44020c00
 8004f8c:	0801fbdc 	.word	0x0801fbdc
 8004f90:	20000000 	.word	0x20000000

08004f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004f98:	f7ff ffe0 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	@ (8004fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	44020c00 	.word	0x44020c00
 8004fbc:	0801fbec 	.word	0x0801fbec

08004fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004fc4:	f7ff ffca 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4904      	ldr	r1, [pc, #16]	@ (8004fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	44020c00 	.word	0x44020c00
 8004fe8:	0801fbec 	.word	0x0801fbec

08004fec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004ff0:	f7ff ffb4 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	0b1b      	lsrs	r3, r3, #12
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4904      	ldr	r1, [pc, #16]	@ (8005014 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	44020c00 	.word	0x44020c00
 8005014:	0801fbec 	.word	0x0801fbec

08005018 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b0d8      	sub	sp, #352	@ 0x160
 800501e:	af00      	add	r7, sp, #0
 8005020:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005024:	2300      	movs	r3, #0
 8005026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800502a:	2300      	movs	r3, #0
 800502c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800503c:	2500      	movs	r5, #0
 800503e:	ea54 0305 	orrs.w	r3, r4, r5
 8005042:	d00b      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005044:	4bcd      	ldr	r3, [pc, #820]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800504a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800504e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005054:	4ac9      	ldr	r2, [pc, #804]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005056:	430b      	orrs	r3, r1
 8005058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f002 0801 	and.w	r8, r2, #1
 8005068:	f04f 0900 	mov.w	r9, #0
 800506c:	ea58 0309 	orrs.w	r3, r8, r9
 8005070:	d042      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005072:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005078:	2b05      	cmp	r3, #5
 800507a:	d823      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050cd 	.word	0x080050cd
 8005088:	0800509d 	.word	0x0800509d
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050cd 	.word	0x080050cd
 8005094:	080050cd 	.word	0x080050cd
 8005098:	080050cd 	.word	0x080050cd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800509c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a0:	3308      	adds	r3, #8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 fee0 	bl	8009e68 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80050ae:	e00e      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050b4:	3330      	adds	r3, #48	@ 0x30
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 ff6e 	bl	8009f98 <RCCEx_PLL3_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80050c2:	e004      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80050cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80050d6:	4ba9      	ldr	r3, [pc, #676]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80050d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050dc:	f023 0107 	bic.w	r1, r3, #7
 80050e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	4aa5      	ldr	r2, [pc, #660]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80050e8:	430b      	orrs	r3, r1
 80050ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050ee:	e003      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f002 0a02 	and.w	sl, r2, #2
 8005104:	f04f 0b00 	mov.w	fp, #0
 8005108:	ea5a 030b 	orrs.w	r3, sl, fp
 800510c:	f000 8088 	beq.w	8005220 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005116:	2b28      	cmp	r3, #40	@ 0x28
 8005118:	d868      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800511a:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	080051f5 	.word	0x080051f5
 8005124:	080051ed 	.word	0x080051ed
 8005128:	080051ed 	.word	0x080051ed
 800512c:	080051ed 	.word	0x080051ed
 8005130:	080051ed 	.word	0x080051ed
 8005134:	080051ed 	.word	0x080051ed
 8005138:	080051ed 	.word	0x080051ed
 800513c:	080051ed 	.word	0x080051ed
 8005140:	080051c5 	.word	0x080051c5
 8005144:	080051ed 	.word	0x080051ed
 8005148:	080051ed 	.word	0x080051ed
 800514c:	080051ed 	.word	0x080051ed
 8005150:	080051ed 	.word	0x080051ed
 8005154:	080051ed 	.word	0x080051ed
 8005158:	080051ed 	.word	0x080051ed
 800515c:	080051ed 	.word	0x080051ed
 8005160:	080051d9 	.word	0x080051d9
 8005164:	080051ed 	.word	0x080051ed
 8005168:	080051ed 	.word	0x080051ed
 800516c:	080051ed 	.word	0x080051ed
 8005170:	080051ed 	.word	0x080051ed
 8005174:	080051ed 	.word	0x080051ed
 8005178:	080051ed 	.word	0x080051ed
 800517c:	080051ed 	.word	0x080051ed
 8005180:	080051f5 	.word	0x080051f5
 8005184:	080051ed 	.word	0x080051ed
 8005188:	080051ed 	.word	0x080051ed
 800518c:	080051ed 	.word	0x080051ed
 8005190:	080051ed 	.word	0x080051ed
 8005194:	080051ed 	.word	0x080051ed
 8005198:	080051ed 	.word	0x080051ed
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	080051ed 	.word	0x080051ed
 80051b4:	080051ed 	.word	0x080051ed
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	080051f5 	.word	0x080051f5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051c8:	3308      	adds	r3, #8
 80051ca:	4618      	mov	r0, r3
 80051cc:	f004 fe4c 	bl	8009e68 <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80051d6:	e00e      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051dc:	3330      	adds	r3, #48	@ 0x30
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 feda 	bl	8009f98 <RCCEx_PLL3_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80051ea:	e004      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80051f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10c      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80051fe:	4b5f      	ldr	r3, [pc, #380]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005204:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800520c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520e:	4a5b      	ldr	r2, [pc, #364]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005210:	430b      	orrs	r3, r1
 8005212:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800521c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f002 0304 	and.w	r3, r2, #4
 800522c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005230:	2300      	movs	r3, #0
 8005232:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005236:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800523a:	460b      	mov	r3, r1
 800523c:	4313      	orrs	r3, r2
 800523e:	d04e      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005246:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800524a:	d02c      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800524c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005250:	d825      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005256:	d028      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525c:	d81f      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800525e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005260:	d025      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005262:	2bc0      	cmp	r3, #192	@ 0xc0
 8005264:	d81b      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d00f      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d817      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01f      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d113      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800527a:	3308      	adds	r3, #8
 800527c:	4618      	mov	r0, r3
 800527e:	f004 fdf3 	bl	8009e68 <RCCEx_PLL2_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005288:	e014      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800528a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800528e:	3330      	adds	r3, #48	@ 0x30
 8005290:	4618      	mov	r0, r3
 8005292:	f004 fe81 	bl	8009f98 <RCCEx_PLL3_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800529c:	e00a      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052a6:	bf00      	nop
 80052a8:	e004      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052aa:	bf00      	nop
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10c      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80052bc:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052c2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80052c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052cc:	4a2b      	ldr	r2, [pc, #172]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052ce:	430b      	orrs	r3, r1
 80052d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f002 0308 	and.w	r3, r2, #8
 80052ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80052f4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80052f8:	460b      	mov	r3, r1
 80052fa:	4313      	orrs	r3, r2
 80052fc:	d056      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80052fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005304:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005308:	d031      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x356>
 800530a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800530e:	d82a      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005314:	d02d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531a:	d824      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800531c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005320:	d029      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005322:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005326:	d81e      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532c:	d011      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800532e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005332:	d818      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d023      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800533c:	d113      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800533e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005342:	3308      	adds	r3, #8
 8005344:	4618      	mov	r0, r3
 8005346:	f004 fd8f 	bl	8009e68 <RCCEx_PLL2_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005350:	e017      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005356:	3330      	adds	r3, #48	@ 0x30
 8005358:	4618      	mov	r0, r3
 800535a:	f004 fe1d 	bl	8009f98 <RCCEx_PLL3_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005364:	e00d      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800536c:	e009      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800536e:	bf00      	nop
 8005370:	e007      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005372:	bf00      	nop
 8005374:	e005      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005376:	bf00      	nop
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800537a:	bf00      	nop
 800537c:	44020c00 	.word	0x44020c00
        break;
 8005380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005382:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10c      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800538a:	4bbb      	ldr	r3, [pc, #748]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800538c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005390:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800539a:	4ab7      	ldr	r2, [pc, #732]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800539c:	430b      	orrs	r3, r1
 800539e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f002 0310 	and.w	r3, r2, #16
 80053b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80053c2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d053      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80053cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80053d6:	d031      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80053d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80053dc:	d82a      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e2:	d02d      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80053e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e8:	d824      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053ee:	d029      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80053f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053f4:	d81e      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fa:	d011      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005400:	d818      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d020      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540a:	d113      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800540c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005410:	3308      	adds	r3, #8
 8005412:	4618      	mov	r0, r3
 8005414:	f004 fd28 	bl	8009e68 <RCCEx_PLL2_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800541e:	e014      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005420:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005424:	3330      	adds	r3, #48	@ 0x30
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fdb6 	bl	8009f98 <RCCEx_PLL3_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005432:	e00a      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800543a:	e006      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800543c:	bf00      	nop
 800543e:	e004      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005440:	bf00      	nop
 8005442:	e002      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005444:	bf00      	nop
 8005446:	e000      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10c      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005452:	4b89      	ldr	r3, [pc, #548]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005458:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800545c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005462:	4a85      	ldr	r2, [pc, #532]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005464:	430b      	orrs	r3, r1
 8005466:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800546a:	e003      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005470:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005474:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f002 0320 	and.w	r3, r2, #32
 8005480:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800548a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d053      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800549e:	d031      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80054a0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80054a4:	d82a      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054aa:	d02d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80054ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b0:	d824      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054b2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80054b6:	d029      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80054b8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80054bc:	d81e      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c2:	d011      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c8:	d818      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80054ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054d2:	d113      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d8:	3308      	adds	r3, #8
 80054da:	4618      	mov	r0, r3
 80054dc:	f004 fcc4 	bl	8009e68 <RCCEx_PLL2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80054e6:	e014      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ec:	3330      	adds	r3, #48	@ 0x30
 80054ee:	4618      	mov	r0, r3
 80054f0:	f004 fd52 	bl	8009f98 <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80054fa:	e00a      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005502:	e006      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005504:	bf00      	nop
 8005506:	e004      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005508:	bf00      	nop
 800550a:	e002      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800550c:	bf00      	nop
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005512:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800551a:	4b57      	ldr	r3, [pc, #348]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800551c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005520:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552a:	4a53      	ldr	r2, [pc, #332]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800552c:	430b      	orrs	r3, r1
 800552e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005532:	e003      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005534:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005538:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800553c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005548:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800554c:	2300      	movs	r3, #0
 800554e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005552:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005556:	460b      	mov	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	d053      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800555c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005562:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005566:	d031      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005568:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800556c:	d82a      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005572:	d02d      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005578:	d824      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800557a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800557e:	d029      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005580:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005584:	d81e      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005586:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800558a:	d011      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800558c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005590:	d818      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d020      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005596:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800559a:	d113      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800559c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a0:	3308      	adds	r3, #8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f004 fc60 	bl	8009e68 <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80055ae:	e014      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055b4:	3330      	adds	r3, #48	@ 0x30
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fcee 	bl	8009f98 <RCCEx_PLL3_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80055c2:	e00a      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055ca:	e006      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80055cc:	bf00      	nop
 80055ce:	e004      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80055d0:	bf00      	nop
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10c      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80055e2:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80055e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80055e8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80055ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f2:	4a21      	ldr	r2, [pc, #132]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80055fa:	e003      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005600:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005610:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800561a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800561e:	460b      	mov	r3, r1
 8005620:	4313      	orrs	r3, r2
 8005622:	d055      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800562a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800562e:	d033      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005630:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005634:	d82c      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005636:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800563a:	d02f      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800563c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005640:	d826      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005642:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005646:	d02b      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005648:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800564c:	d820      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800564e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005652:	d013      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005658:	d81a      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d022      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800565e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005662:	d115      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005668:	3308      	adds	r3, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f004 fbfc 	bl	8009e68 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005676:	e016      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005678:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800567c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005680:	3330      	adds	r3, #48	@ 0x30
 8005682:	4618      	mov	r0, r3
 8005684:	f004 fc88 	bl	8009f98 <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800568e:	e00a      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005696:	e006      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005698:	bf00      	nop
 800569a:	e004      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800569c:	bf00      	nop
 800569e:	e002      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80056a0:	bf00      	nop
 80056a2:	e000      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80056a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80056ae:	4bbb      	ldr	r3, [pc, #748]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80056b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056be:	4ab7      	ldr	r2, [pc, #732]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056c0:	430b      	orrs	r3, r1
 80056c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80056c6:	e003      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80056d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80056dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80056e0:	2300      	movs	r3, #0
 80056e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80056e6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80056ea:	460b      	mov	r3, r1
 80056ec:	4313      	orrs	r3, r2
 80056ee:	d053      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80056f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80056fa:	d031      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80056fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005700:	d82a      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005706:	d02d      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800570c:	d824      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800570e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005712:	d029      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005714:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005718:	d81e      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800571a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800571e:	d011      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005724:	d818      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800572a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800572e:	d113      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005734:	3308      	adds	r3, #8
 8005736:	4618      	mov	r0, r3
 8005738:	f004 fb96 	bl	8009e68 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005742:	e014      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005748:	3330      	adds	r3, #48	@ 0x30
 800574a:	4618      	mov	r0, r3
 800574c:	f004 fc24 	bl	8009f98 <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005756:	e00a      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800575e:	e006      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005760:	bf00      	nop
 8005762:	e004      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005764:	bf00      	nop
 8005766:	e002      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800576c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005776:	4b89      	ldr	r3, [pc, #548]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800577c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005786:	4a85      	ldr	r2, [pc, #532]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005788:	430b      	orrs	r3, r1
 800578a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800578e:	e003      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005794:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80057a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80057a8:	2300      	movs	r3, #0
 80057aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80057ae:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80057b2:	460b      	mov	r3, r1
 80057b4:	4313      	orrs	r3, r2
 80057b6:	d055      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80057b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80057c4:	d031      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x812>
 80057c6:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80057ca:	d82a      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80057cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d0:	d02d      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80057d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d6:	d824      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80057d8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80057dc:	d029      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80057de:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80057e2:	d81e      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80057e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057e8:	d011      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ee:	d818      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80057f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f8:	d113      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057fe:	3308      	adds	r3, #8
 8005800:	4618      	mov	r0, r3
 8005802:	f004 fb31 	bl	8009e68 <RCCEx_PLL2_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800580c:	e014      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800580e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005812:	3330      	adds	r3, #48	@ 0x30
 8005814:	4618      	mov	r0, r3
 8005816:	f004 fbbf 	bl	8009f98 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005820:	e00a      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800582a:	bf00      	nop
 800582c:	e004      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005838:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005840:	4b56      	ldr	r3, [pc, #344]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005846:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800584a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800584e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005852:	4a52      	ldr	r2, [pc, #328]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005854:	430b      	orrs	r3, r1
 8005856:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800585a:	e003      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005860:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005870:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800587a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800587e:	460b      	mov	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	d044      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005884:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588c:	2b05      	cmp	r3, #5
 800588e:	d823      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005890:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058e1 	.word	0x080058e1
 800589c:	080058b1 	.word	0x080058b1
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058e1 	.word	0x080058e1
 80058a8:	080058e1 	.word	0x080058e1
 80058ac:	080058e1 	.word	0x080058e1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058b4:	3308      	adds	r3, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f004 fad6 	bl	8009e68 <RCCEx_PLL2_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80058c2:	e00e      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c8:	3330      	adds	r3, #48	@ 0x30
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 fb64 	bl	8009f98 <RCCEx_PLL3_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80058d6:	e004      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80058e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10d      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80058ea:	4b2c      	ldr	r3, [pc, #176]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80058ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058f0:	f023 0107 	bic.w	r1, r3, #7
 80058f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058fc:	4a27      	ldr	r2, [pc, #156]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005906:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800590a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800590e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800591a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800591e:	2300      	movs	r3, #0
 8005920:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005924:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005928:	460b      	mov	r3, r1
 800592a:	4313      	orrs	r3, r2
 800592c:	d04f      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800592e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	2b50      	cmp	r3, #80	@ 0x50
 8005938:	d029      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800593a:	2b50      	cmp	r3, #80	@ 0x50
 800593c:	d823      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800593e:	2b40      	cmp	r3, #64	@ 0x40
 8005940:	d027      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005942:	2b40      	cmp	r3, #64	@ 0x40
 8005944:	d81f      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005946:	2b30      	cmp	r3, #48	@ 0x30
 8005948:	d025      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800594a:	2b30      	cmp	r3, #48	@ 0x30
 800594c:	d81b      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800594e:	2b20      	cmp	r3, #32
 8005950:	d00f      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005952:	2b20      	cmp	r3, #32
 8005954:	d817      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d022      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800595a:	2b10      	cmp	r3, #16
 800595c:	d113      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005962:	3308      	adds	r3, #8
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fa7f 	bl	8009e68 <RCCEx_PLL2_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005970:	e017      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005972:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005976:	3330      	adds	r3, #48	@ 0x30
 8005978:	4618      	mov	r0, r3
 800597a:	f004 fb0d 	bl	8009f98 <RCCEx_PLL3_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005984:	e00d      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800598c:	e009      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800598e:	bf00      	nop
 8005990:	e007      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005992:	bf00      	nop
 8005994:	e005      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005996:	bf00      	nop
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800599a:	bf00      	nop
 800599c:	44020c00 	.word	0x44020c00
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80059aa:	4baf      	ldr	r3, [pc, #700]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059b0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80059b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059bc:	4aaa      	ldr	r2, [pc, #680]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059be:	430b      	orrs	r3, r1
 80059c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80059c4:	e003      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80059da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d055      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80059ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80059fa:	d031      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80059fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a00:	d82a      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a06:	d02d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a0c:	d824      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a12:	d029      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005a14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a18:	d81e      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a1e:	d011      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005a20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a24:	d818      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d020      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005a2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a2e:	d113      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	3308      	adds	r3, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f004 fa16 	bl	8009e68 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005a42:	e014      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a48:	3330      	adds	r3, #48	@ 0x30
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f004 faa4 	bl	8009f98 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005a56:	e00a      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a60:	bf00      	nop
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005a76:	4b7c      	ldr	r3, [pc, #496]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a88:	4a77      	ldr	r2, [pc, #476]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ab0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d03d      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ac6:	d01b      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005ac8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005acc:	d814      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad2:	d017      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad8:	d80e      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d014      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae2:	d109      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae8:	3330      	adds	r3, #48	@ 0x30
 8005aea:	4618      	mov	r0, r3
 8005aec:	f004 fa54 	bl	8009f98 <RCCEx_PLL3_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005af6:	e008      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005afe:	e004      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005b00:	bf00      	nop
 8005b02:	e002      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10d      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005b12:	4b55      	ldr	r3, [pc, #340]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b18:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b24:	4a50      	ldr	r2, [pc, #320]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b26:	430b      	orrs	r3, r1
 8005b28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b2c:	e003      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b46:	2300      	movs	r3, #0
 8005b48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d03d      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b62:	d01b      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005b64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b68:	d814      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005b6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b6e:	d017      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005b70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b74:	d80e      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d014      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005b7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b7e:	d109      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b84:	3330      	adds	r3, #48	@ 0x30
 8005b86:	4618      	mov	r0, r3
 8005b88:	f004 fa06 	bl	8009f98 <RCCEx_PLL3_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005b92:	e008      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b9a:	e004      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10d      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005bae:	4b2e      	ldr	r3, [pc, #184]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bb4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc0:	4a29      	ldr	r2, [pc, #164]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005be8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bec:	460b      	mov	r3, r1
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	d040      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bfe:	d01b      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005c00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c04:	d814      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c0a:	d017      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c10:	d80e      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c1a:	d109      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c20:	3330      	adds	r3, #48	@ 0x30
 8005c22:	4618      	mov	r0, r3
 8005c24:	f004 f9b8 	bl	8009f98 <RCCEx_PLL3_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005c2e:	e008      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c36:	e004      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005c38:	bf00      	nop
 8005c3a:	e002      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005c3c:	bf00      	nop
 8005c3e:	e000      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d110      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005c4a:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c50:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c5c:	4a02      	ldr	r2, [pc, #8]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005c66:	bf00      	nop
 8005c68:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d03d      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ca0:	d01b      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005ca2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ca6:	d814      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005ca8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cac:	d017      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005cae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cb2:	d80e      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d014      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cbc:	d109      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc2:	3330      	adds	r3, #48	@ 0x30
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f004 f967 	bl	8009f98 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cd8:	e004      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005cda:	bf00      	nop
 8005cdc:	e002      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10d      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005cec:	4bbe      	ldr	r3, [pc, #760]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cf2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cfe:	4aba      	ldr	r2, [pc, #744]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d00:	430b      	orrs	r3, r1
 8005d02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d035      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d3c:	d015      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005d3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d42:	d80e      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d012      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d52:	3330      	adds	r3, #48	@ 0x30
 8005d54:	4618      	mov	r0, r3
 8005d56:	f004 f91f 	bl	8009f98 <RCCEx_PLL3_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005d60:	e006      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005d78:	4b9b      	ldr	r3, [pc, #620]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d7e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d8a:	4a97      	ldr	r2, [pc, #604]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	2100      	movs	r1, #0
 8005da6:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005db2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	4a89      	ldr	r2, [pc, #548]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dc6:	61d3      	str	r3, [r2, #28]
 8005dc8:	4b87      	ldr	r3, [pc, #540]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005dd4:	4a84      	ldr	r2, [pc, #528]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005de6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005df0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005df4:	460b      	mov	r3, r1
 8005df6:	4313      	orrs	r3, r2
 8005df8:	d055      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e02:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005e06:	d031      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005e08:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005e0c:	d82a      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e12:	d02d      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e18:	d824      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e1e:	d029      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e24:	d81e      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e2a:	d011      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e30:	d818      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d020      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e3a:	d113      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e40:	3308      	adds	r3, #8
 8005e42:	4618      	mov	r0, r3
 8005e44:	f004 f810 	bl	8009e68 <RCCEx_PLL2_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005e4e:	e014      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e54:	3330      	adds	r3, #48	@ 0x30
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 f89e 	bl	8009f98 <RCCEx_PLL3_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005e62:	e00a      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e6a:	e006      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e004      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e70:	bf00      	nop
 8005e72:	e002      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e74:	bf00      	nop
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10d      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005e82:	4b59      	ldr	r3, [pc, #356]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e88:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e94:	4a54      	ldr	r2, [pc, #336]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e9c:	e003      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ea2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ebc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d055      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ece:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ed2:	d031      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005ed4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ed8:	d82a      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ede:	d02d      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ee4:	d824      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005ee6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eea:	d029      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005eec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ef0:	d81e      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef6:	d011      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005efc:	d818      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f06:	d113      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f003 ffaa 	bl	8009e68 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005f1a:	e014      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f20:	3330      	adds	r3, #48	@ 0x30
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 f838 	bl	8009f98 <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f36:	e006      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f38:	bf00      	nop
 8005f3a:	e004      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10d      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005f4e:	4b26      	ldr	r3, [pc, #152]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f60:	4a21      	ldr	r2, [pc, #132]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005f72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d057      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f9e:	d033      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fa4:	d82c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005fa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005fac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fb0:	d826      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005fb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fb6:	d02b      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005fb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fbc:	d820      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fc2:	d013      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fc8:	d81a      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d022      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd2:	d115      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fd8:	3308      	adds	r3, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f003 ff44 	bl	8009e68 <RCCEx_PLL2_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005fe6:	e016      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005fe8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ff0:	3330      	adds	r3, #48	@ 0x30
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f003 ffd0 	bl	8009f98 <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005ffe:	e00a      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006006:	e006      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10d      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800601e:	4bbb      	ldr	r3, [pc, #748]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006020:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006024:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800602c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006030:	4ab6      	ldr	r2, [pc, #728]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006032:	430b      	orrs	r3, r1
 8006034:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006038:	e003      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800603e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006042:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	2100      	movs	r1, #0
 800604c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006058:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800605c:	460b      	mov	r3, r1
 800605e:	4313      	orrs	r3, r2
 8006060:	d055      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006062:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800606a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800606e:	d031      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006070:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006074:	d82a      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800607a:	d02d      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800607c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006080:	d824      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006082:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006086:	d029      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006088:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800608c:	d81e      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800608e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006092:	d011      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006098:	d818      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d020      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800609e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060a2:	d113      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a8:	3308      	adds	r3, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f003 fedc 	bl	8009e68 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80060b6:	e014      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060bc:	3330      	adds	r3, #48	@ 0x30
 80060be:	4618      	mov	r0, r3
 80060c0:	f003 ff6a 	bl	8009f98 <RCCEx_PLL3_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80060ca:	e00a      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060d2:	e006      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80060d4:	bf00      	nop
 80060d6:	e004      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80060e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80060ea:	4b88      	ldr	r3, [pc, #544]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80060ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060f0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80060f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060fc:	4a83      	ldr	r2, [pc, #524]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006104:	e003      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006106:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800610a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800610e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	2100      	movs	r1, #0
 8006118:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800611c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006124:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006128:	460b      	mov	r3, r1
 800612a:	4313      	orrs	r3, r2
 800612c:	d055      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800612e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006136:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800613a:	d031      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800613c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006140:	d82a      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006142:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006146:	d02d      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006148:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800614c:	d824      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800614e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006152:	d029      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006154:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006158:	d81e      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800615a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800615e:	d011      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006160:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006164:	d818      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800616a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800616e:	d113      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006174:	3308      	adds	r3, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f003 fe76 	bl	8009e68 <RCCEx_PLL2_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006182:	e014      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006188:	3330      	adds	r3, #48	@ 0x30
 800618a:	4618      	mov	r0, r3
 800618c:	f003 ff04 	bl	8009f98 <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006196:	e00a      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800619e:	e006      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061a0:	bf00      	nop
 80061a2:	e004      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061a4:	bf00      	nop
 80061a6:	e002      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061a8:	bf00      	nop
 80061aa:	e000      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10d      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80061b6:	4b55      	ldr	r3, [pc, #340]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80061c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061c8:	4a50      	ldr	r2, [pc, #320]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061ca:	430b      	orrs	r3, r1
 80061cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80061da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	2100      	movs	r1, #0
 80061e4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80061e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061f0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80061f4:	460b      	mov	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	d055      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80061fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006206:	d031      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800620c:	d82a      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d02d      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006218:	d824      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800621a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800621e:	d029      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006220:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006224:	d81e      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800622a:	d011      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800622c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006230:	d818      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d020      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623a:	d113      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800623c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006240:	3308      	adds	r3, #8
 8006242:	4618      	mov	r0, r3
 8006244:	f003 fe10 	bl	8009e68 <RCCEx_PLL2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800624e:	e014      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006250:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006254:	3330      	adds	r3, #48	@ 0x30
 8006256:	4618      	mov	r0, r3
 8006258:	f003 fe9e 	bl	8009f98 <RCCEx_PLL3_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006262:	e00a      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800626a:	e006      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800626c:	bf00      	nop
 800626e:	e004      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006270:	bf00      	nop
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006282:	4b22      	ldr	r3, [pc, #136]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006284:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006288:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800628c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006290:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006294:	4a1d      	ldr	r2, [pc, #116]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006296:	430b      	orrs	r3, r1
 8006298:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062c0:	460b      	mov	r3, r1
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d055      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80062c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d2:	d035      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80062d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d8:	d82e      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80062da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062de:	d031      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80062e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062e4:	d828      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80062e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ea:	d01b      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80062ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f0:	d822      	bhi.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80062f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062fa:	d009      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80062fc:	e01c      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fe:	4b03      	ldr	r3, [pc, #12]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	4a02      	ldr	r2, [pc, #8]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006308:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800630a:	e01c      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800630c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006314:	3308      	adds	r3, #8
 8006316:	4618      	mov	r0, r3
 8006318:	f003 fda6 	bl	8009e68 <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006322:	e010      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006324:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006328:	3330      	adds	r3, #48	@ 0x30
 800632a:	4618      	mov	r0, r3
 800632c:	f003 fe34 	bl	8009f98 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006336:	e006      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006346:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10d      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800634e:	4bc3      	ldr	r3, [pc, #780]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006354:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006358:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800635c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006360:	4abe      	ldr	r2, [pc, #760]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006362:	430b      	orrs	r3, r1
 8006364:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800636e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800637e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006388:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800638c:	460b      	mov	r3, r1
 800638e:	4313      	orrs	r3, r2
 8006390:	d051      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006392:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006396:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800639a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800639e:	d033      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80063a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063a4:	d82c      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80063a6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80063aa:	d02d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80063ac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80063b0:	d826      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80063b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063b6:	d019      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80063b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063bc:	d820      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80063c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063c6:	d007      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80063c8:	e01a      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ca:	4ba4      	ldr	r3, [pc, #656]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	4aa3      	ldr	r2, [pc, #652]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063d6:	e018      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063dc:	3308      	adds	r3, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f003 fd42 	bl	8009e68 <RCCEx_PLL2_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063ea:	e00e      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f0:	3330      	adds	r3, #48	@ 0x30
 80063f2:	4618      	mov	r0, r3
 80063f4:	f003 fdd0 	bl	8009f98 <RCCEx_PLL3_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10d      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006412:	4b92      	ldr	r3, [pc, #584]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006418:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800641c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006420:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006424:	4a8d      	ldr	r2, [pc, #564]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006426:	430b      	orrs	r3, r1
 8006428:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800642c:	e003      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006432:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006442:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006444:	2300      	movs	r3, #0
 8006446:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006448:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d032      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006456:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800645a:	2b05      	cmp	r3, #5
 800645c:	d80f      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800645e:	2b03      	cmp	r3, #3
 8006460:	d211      	bcs.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006462:	2b01      	cmp	r3, #1
 8006464:	d911      	bls.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006466:	2b02      	cmp	r3, #2
 8006468:	d109      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800646a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800646e:	3308      	adds	r3, #8
 8006470:	4618      	mov	r0, r3
 8006472:	f003 fcf9 	bl	8009e68 <RCCEx_PLL2_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800647c:	e006      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006484:	e002      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800648a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10d      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006494:	4b71      	ldr	r3, [pc, #452]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800649a:	f023 0107 	bic.w	r1, r3, #7
 800649e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80064a6:	4a6d      	ldr	r2, [pc, #436]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064a8:	430b      	orrs	r3, r1
 80064aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80064ae:	e003      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80064b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	2100      	movs	r1, #0
 80064c2:	6739      	str	r1, [r7, #112]	@ 0x70
 80064c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80064ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	d024      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80064d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d005      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064ea:	e002      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80064ec:	bf00      	nop
 80064ee:	e000      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80064f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10d      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80064fa:	4b58      	ldr	r3, [pc, #352]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006500:	f023 0108 	bic.w	r1, r3, #8
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800650c:	4a53      	ldr	r2, [pc, #332]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800650e:	430b      	orrs	r3, r1
 8006510:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006514:	e003      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006516:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800651a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800651e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800652a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800652c:	2300      	movs	r3, #0
 800652e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006530:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	f000 80b9 	beq.w	80066ae <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800653c:	4b48      	ldr	r3, [pc, #288]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	4a47      	ldr	r2, [pc, #284]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006548:	f7fb fbb2 	bl	8001cb0 <HAL_GetTick>
 800654c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006550:	e00b      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006552:	f7fb fbad 	bl	8001cb0 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d903      	bls.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006568:	e005      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800656a:	4b3d      	ldr	r3, [pc, #244]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800656c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ed      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 8093 	bne.w	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006580:	4b36      	ldr	r3, [pc, #216]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800658a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800658e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d023      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800659a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800659e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d01b      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065a6:	4b2d      	ldr	r3, [pc, #180]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065b4:	4b29      	ldr	r3, [pc, #164]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ba:	4a28      	ldr	r2, [pc, #160]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065c4:	4b25      	ldr	r3, [pc, #148]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ca:	4a24      	ldr	r2, [pc, #144]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065d4:	4a21      	ldr	r2, [pc, #132]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80065da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d019      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ea:	f7fb fb61 	bl	8001cb0 <HAL_GetTick>
 80065ee:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f2:	e00d      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f4:	f7fb fb5c 	bl	8001cb0 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006604:	429a      	cmp	r2, r3
 8006606:	d903      	bls.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800660e:	e006      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006610:	4b12      	ldr	r3, [pc, #72]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ea      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800661e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13a      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800662a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800662e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006636:	d115      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006638:	4b08      	ldr	r3, [pc, #32]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006644:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800664e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006652:	4a02      	ldr	r2, [pc, #8]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006654:	430b      	orrs	r3, r1
 8006656:	61d3      	str	r3, [r2, #28]
 8006658:	e00a      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800665a:	bf00      	nop
 800665c:	44020c00 	.word	0x44020c00
 8006660:	44020800 	.word	0x44020800
 8006664:	4b9f      	ldr	r3, [pc, #636]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	4a9e      	ldr	r2, [pc, #632]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800666a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800666e:	61d3      	str	r3, [r2, #28]
 8006670:	4b9c      	ldr	r3, [pc, #624]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006676:	4a9b      	ldr	r2, [pc, #620]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006680:	4b98      	ldr	r3, [pc, #608]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006682:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006686:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800668a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800668e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006692:	4a94      	ldr	r2, [pc, #592]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006694:	430b      	orrs	r3, r1
 8006696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800669c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80066ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80066bc:	2300      	movs	r3, #0
 80066be:	667b      	str	r3, [r7, #100]	@ 0x64
 80066c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d035      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80066ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80066d2:	2b30      	cmp	r3, #48	@ 0x30
 80066d4:	d014      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80066d6:	2b30      	cmp	r3, #48	@ 0x30
 80066d8:	d80e      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d012      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d80a      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d106      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ea:	4b7e      	ldr	r3, [pc, #504]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	4a7d      	ldr	r2, [pc, #500]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80066f6:	e008      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006700:	bf00      	nop
 8006702:	e002      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006704:	bf00      	nop
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10d      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006712:	4b74      	ldr	r3, [pc, #464]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006718:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800671c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006720:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006724:	4a6f      	ldr	r2, [pc, #444]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006726:	430b      	orrs	r3, r1
 8006728:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006732:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006736:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006744:	2300      	movs	r3, #0
 8006746:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006748:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800674c:	460b      	mov	r3, r1
 800674e:	4313      	orrs	r3, r2
 8006750:	d033      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006756:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d007      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006762:	e010      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006764:	4b5f      	ldr	r3, [pc, #380]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	4a5e      	ldr	r2, [pc, #376]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800676a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006770:	e00d      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006776:	3308      	adds	r3, #8
 8006778:	4618      	mov	r0, r3
 800677a:	f003 fb75 	bl	8009e68 <RCCEx_PLL2_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006784:	e003      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800678c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006796:	4b53      	ldr	r3, [pc, #332]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800679c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80067a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80067a8:	4a4e      	ldr	r2, [pc, #312]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067b0:	e003      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80067ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c8:	2300      	movs	r3, #0
 80067ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80067cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067d0:	460b      	mov	r3, r1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	d033      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80067d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80067e2:	2b80      	cmp	r3, #128	@ 0x80
 80067e4:	d007      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80067e6:	e010      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e8:	4b3e      	ldr	r3, [pc, #248]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	4a3d      	ldr	r2, [pc, #244]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80067f4:	e00d      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067fa:	3308      	adds	r3, #8
 80067fc:	4618      	mov	r0, r3
 80067fe:	f003 fb33 	bl	8009e68 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006808:	e003      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006812:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800681a:	4b32      	ldr	r3, [pc, #200]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800681c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006820:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006828:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800682c:	4a2d      	ldr	r2, [pc, #180]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800682e:	430b      	orrs	r3, r1
 8006830:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006834:	e003      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800683a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800683e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800684a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800684c:	2300      	movs	r3, #0
 800684e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006850:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d04a      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800685a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800685e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006862:	2b04      	cmp	r3, #4
 8006864:	d827      	bhi.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006866:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006881 	.word	0x08006881
 8006870:	0800688f 	.word	0x0800688f
 8006874:	080068a3 	.word	0x080068a3
 8006878:	080068bf 	.word	0x080068bf
 800687c:	080068bf 	.word	0x080068bf
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4b18      	ldr	r3, [pc, #96]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006884:	4a17      	ldr	r2, [pc, #92]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800688c:	e018      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800688e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006892:	3308      	adds	r3, #8
 8006894:	4618      	mov	r0, r3
 8006896:	f003 fae7 	bl	8009e68 <RCCEx_PLL2_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80068a0:	e00e      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068a6:	3330      	adds	r3, #48	@ 0x30
 80068a8:	4618      	mov	r0, r3
 80068aa:	f003 fb75 	bl	8009f98 <RCCEx_PLL3_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80068b4:	e004      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068bc:	e000      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80068be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10f      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80068c8:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ce:	f023 0107 	bic.w	r1, r3, #7
 80068d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068da:	4a02      	ldr	r2, [pc, #8]	@ (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068e2:	e005      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80068e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80068f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068fe:	2300      	movs	r3, #0
 8006900:	647b      	str	r3, [r7, #68]	@ 0x44
 8006902:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006906:	460b      	mov	r3, r1
 8006908:	4313      	orrs	r3, r2
 800690a:	f000 8081 	beq.w	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800690e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006912:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006916:	2b20      	cmp	r3, #32
 8006918:	d85f      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800691a:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	080069a5 	.word	0x080069a5
 8006924:	080069db 	.word	0x080069db
 8006928:	080069db 	.word	0x080069db
 800692c:	080069db 	.word	0x080069db
 8006930:	080069db 	.word	0x080069db
 8006934:	080069db 	.word	0x080069db
 8006938:	080069db 	.word	0x080069db
 800693c:	080069db 	.word	0x080069db
 8006940:	080069b3 	.word	0x080069b3
 8006944:	080069db 	.word	0x080069db
 8006948:	080069db 	.word	0x080069db
 800694c:	080069db 	.word	0x080069db
 8006950:	080069db 	.word	0x080069db
 8006954:	080069db 	.word	0x080069db
 8006958:	080069db 	.word	0x080069db
 800695c:	080069db 	.word	0x080069db
 8006960:	080069c7 	.word	0x080069c7
 8006964:	080069db 	.word	0x080069db
 8006968:	080069db 	.word	0x080069db
 800696c:	080069db 	.word	0x080069db
 8006970:	080069db 	.word	0x080069db
 8006974:	080069db 	.word	0x080069db
 8006978:	080069db 	.word	0x080069db
 800697c:	080069db 	.word	0x080069db
 8006980:	080069e3 	.word	0x080069e3
 8006984:	080069db 	.word	0x080069db
 8006988:	080069db 	.word	0x080069db
 800698c:	080069db 	.word	0x080069db
 8006990:	080069db 	.word	0x080069db
 8006994:	080069db 	.word	0x080069db
 8006998:	080069db 	.word	0x080069db
 800699c:	080069db 	.word	0x080069db
 80069a0:	080069e3 	.word	0x080069e3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a4:	4bab      	ldr	r3, [pc, #684]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	4aaa      	ldr	r2, [pc, #680]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80069b0:	e018      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b6:	3308      	adds	r3, #8
 80069b8:	4618      	mov	r0, r3
 80069ba:	f003 fa55 	bl	8009e68 <RCCEx_PLL2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80069c4:	e00e      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ca:	3330      	adds	r3, #48	@ 0x30
 80069cc:	4618      	mov	r0, r3
 80069ce:	f003 fae3 	bl	8009f98 <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80069d8:	e004      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069e0:	e000      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80069e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10d      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80069ec:	4b99      	ldr	r3, [pc, #612]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80069f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069fe:	4a95      	ldr	r2, [pc, #596]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a1e:	2300      	movs	r3, #0
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a26:	460b      	mov	r3, r1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	d04e      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a38:	d02e      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3e:	d827      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a40:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a42:	d02b      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006a44:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a46:	d823      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a48:	2b80      	cmp	r3, #128	@ 0x80
 8006a4a:	d017      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006a4c:	2b80      	cmp	r3, #128	@ 0x80
 8006a4e:	d81f      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006a54:	2b40      	cmp	r3, #64	@ 0x40
 8006a56:	d007      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006a58:	e01a      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a5a:	4b7e      	ldr	r3, [pc, #504]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	4a7d      	ldr	r2, [pc, #500]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a64:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006a66:	e01a      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f003 f9fa 	bl	8009e68 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006a7a:	e010      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a80:	3330      	adds	r3, #48	@ 0x30
 8006a82:	4618      	mov	r0, r3
 8006a84:	f003 fa88 	bl	8009f98 <RCCEx_PLL3_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006a8e:	e006      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a96:	e002      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006a98:	bf00      	nop
 8006a9a:	e000      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ab8:	4a66      	ldr	r2, [pc, #408]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ac0:	e003      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ac6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ad8:	2300      	movs	r3, #0
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	d055      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006aee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006af2:	d031      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006af4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006af8:	d82a      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006afe:	d02d      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b04:	d824      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b0a:	d029      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006b0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b10:	d81e      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b16:	d011      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1c:	d818      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d020      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b26:	d113      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f003 f99a 	bl	8009e68 <RCCEx_PLL2_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006b3a:	e014      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b40:	3330      	adds	r3, #48	@ 0x30
 8006b42:	4618      	mov	r0, r3
 8006b44:	f003 fa28 	bl	8009f98 <RCCEx_PLL3_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006b4e:	e00a      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b56:	e006      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b58:	bf00      	nop
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b5c:	bf00      	nop
 8006b5e:	e002      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10d      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006b6e:	4b39      	ldr	r3, [pc, #228]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b74:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006b80:	4a34      	ldr	r2, [pc, #208]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b82:	430b      	orrs	r3, r1
 8006b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b88:	e003      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ba4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d058      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bba:	d031      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006bbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bc0:	d82a      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bc6:	d02d      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006bc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bcc:	d824      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bd2:	d029      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006bd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bd8:	d81e      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bde:	d011      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006be4:	d818      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bee:	d113      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 f936 	bl	8009e68 <RCCEx_PLL2_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006c02:	e014      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c08:	3330      	adds	r3, #48	@ 0x30
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f003 f9c4 	bl	8009f98 <RCCEx_PLL3_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006c16:	e00a      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c1e:	e006      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c20:	bf00      	nop
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d110      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006c36:	4b07      	ldr	r3, [pc, #28]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c3c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c48:	4902      	ldr	r1, [pc, #8]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006c50:	e006      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006c52:	bf00      	nop
 8006c54:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6239      	str	r1, [r7, #32]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c76:	460b      	mov	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d055      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c84:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006c88:	d031      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006c8a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006c8e:	d82a      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c94:	d02d      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c9a:	d824      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c9c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006ca0:	d029      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006ca2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006ca6:	d81e      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cac:	d011      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb2:	d818      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d020      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbc:	d113      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f003 f8cf 	bl	8009e68 <RCCEx_PLL2_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006cd0:	e014      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd6:	3330      	adds	r3, #48	@ 0x30
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f003 f95d 	bl	8009f98 <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ce4:	e00a      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e004      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006cf2:	bf00      	nop
 8006cf4:	e002      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006cf6:	bf00      	nop
 8006cf8:	e000      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10d      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006d04:	4b88      	ldr	r3, [pc, #544]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d0a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d16:	4984      	ldr	r1, [pc, #528]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006d1e:	e003      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d24:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	2100      	movs	r1, #0
 8006d32:	61b9      	str	r1, [r7, #24]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d03d      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d81c      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006d50:	a201      	add	r2, pc, #4	@ (adr r2, 8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d93 	.word	0x08006d93
 8006d5c:	08006d69 	.word	0x08006d69
 8006d60:	08006d77 	.word	0x08006d77
 8006d64:	08006d93 	.word	0x08006d93
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d68:	4b6f      	ldr	r3, [pc, #444]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d72:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006d74:	e00e      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f003 f873 	bl	8009e68 <RCCEx_PLL2_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006d88:	e004      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10d      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006d9c:	4b62      	ldr	r3, [pc, #392]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006da2:	f023 0203 	bic.w	r2, r3, #3
 8006da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006daa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006dae:	495e      	ldr	r1, [pc, #376]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006db6:	e003      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6139      	str	r1, [r7, #16]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d03a      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006de0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de8:	d00e      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dee:	d815      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d017      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df8:	d110      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	4a4a      	ldr	r2, [pc, #296]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006e06:	e00e      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f003 f82a 	bl	8009e68 <RCCEx_PLL2_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006e1a:	e004      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10d      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e40:	4939      	ldr	r1, [pc, #228]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d038      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006e76:	2b30      	cmp	r3, #48	@ 0x30
 8006e78:	d01b      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006e7a:	2b30      	cmp	r3, #48	@ 0x30
 8006e7c:	d815      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d002      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d007      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006e86:	e010      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e88:	4b27      	ldr	r3, [pc, #156]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	4a26      	ldr	r2, [pc, #152]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e94:	e00e      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e9a:	3330      	adds	r3, #48	@ 0x30
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f003 f87b 	bl	8009f98 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006ea8:	e004      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ec2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ece:	4916      	ldr	r1, [pc, #88]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006ed6:	e003      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006edc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6039      	str	r1, [r7, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	607b      	str	r3, [r7, #4]
 8006ef2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	d00c      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006efc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f0a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006f0e:	4906      	ldr	r1, [pc, #24]	@ (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006f16:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006f20:	46bd      	mov	sp, r7
 8006f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f26:	bf00      	nop
 8006f28:	44020c00 	.word	0x44020c00

08006f2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b08b      	sub	sp, #44	@ 0x2c
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006f34:	4bae      	ldr	r3, [pc, #696]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006f3e:	4bac      	ldr	r3, [pc, #688]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006f48:	4ba9      	ldr	r3, [pc, #676]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f52:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006f54:	4ba6      	ldr	r3, [pc, #664]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	091b      	lsrs	r3, r3, #4
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f60:	4ba3      	ldr	r3, [pc, #652]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f64:	08db      	lsrs	r3, r3, #3
 8006f66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	fb02 f303 	mul.w	r3, r2, r3
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f78:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8126 	beq.w	80071d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d053      	beq.n	8007032 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d86f      	bhi.n	8007070 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d003      	beq.n	8006f9e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d02b      	beq.n	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006f9c:	e068      	b.n	8007070 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f9e:	4b94      	ldr	r3, [pc, #592]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	08db      	lsrs	r3, r3, #3
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	4a92      	ldr	r2, [pc, #584]	@ (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006faa:	fa22 f303 	lsr.w	r3, r2, r3
 8006fae:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fd6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006ff2:	e068      	b.n	80070c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007010:	ed97 6a04 	vldr	s12, [r7, #16]
 8007014:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007030:	e049      	b.n	80070c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	ee07 3a90 	vmov	s15, r3
 8007038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007052:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800706e:	e02a      	b.n	80070c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007070:	4b5f      	ldr	r3, [pc, #380]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	08db      	lsrs	r3, r3, #3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	4a5e      	ldr	r2, [pc, #376]	@ (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80070a8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80070ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80070c4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070c6:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070d2:	d121      	bne.n	8007118 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80070d4:	4b46      	ldr	r3, [pc, #280]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d017      	beq.n	8007110 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070e0:	4b43      	ldr	r3, [pc, #268]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e4:	0a5b      	lsrs	r3, r3, #9
 80070e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80070f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070f6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80070fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80070fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007106:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e006      	b.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	e002      	b.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800711e:	4b34      	ldr	r3, [pc, #208]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800712a:	d121      	bne.n	8007170 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800712c:	4b30      	ldr	r3, [pc, #192]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800712e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d017      	beq.n	8007168 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007138:	4b2d      	ldr	r3, [pc, #180]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800713a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800714a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800714e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007152:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800715a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800715e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	e006      	b.n	8007176 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	e002      	b.n	8007176 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007176:	4b1e      	ldr	r3, [pc, #120]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007182:	d121      	bne.n	80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007184:	4b1a      	ldr	r3, [pc, #104]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d017      	beq.n	80071c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007190:	4b17      	ldr	r3, [pc, #92]	@ (80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80071a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80071aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071be:	e010      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
}
 80071c6:	e00c      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
}
 80071ce:	e008      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	609a      	str	r2, [r3, #8]
}
 80071e2:	bf00      	nop
 80071e4:	372c      	adds	r7, #44	@ 0x2c
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	44020c00 	.word	0x44020c00
 80071f4:	03d09000 	.word	0x03d09000
 80071f8:	46000000 	.word	0x46000000
 80071fc:	4a742400 	.word	0x4a742400
 8007200:	4af42400 	.word	0x4af42400

08007204 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007204:	b480      	push	{r7}
 8007206:	b08b      	sub	sp, #44	@ 0x2c
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800720c:	4bae      	ldr	r3, [pc, #696]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007214:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007216:	4bac      	ldr	r3, [pc, #688]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007220:	4ba9      	ldr	r3, [pc, #676]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800722a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800722c:	4ba6      	ldr	r3, [pc, #664]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007238:	4ba3      	ldr	r3, [pc, #652]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	fb02 f303 	mul.w	r3, r2, r3
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007250:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8126 	beq.w	80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b03      	cmp	r3, #3
 8007260:	d053      	beq.n	800730a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d86f      	bhi.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d003      	beq.n	8007276 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d02b      	beq.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007274:	e068      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007276:	4b94      	ldr	r3, [pc, #592]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	08db      	lsrs	r3, r3, #3
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	4a92      	ldr	r2, [pc, #584]	@ (80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007282:	fa22 f303 	lsr.w	r3, r2, r3
 8007286:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80072ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80072ca:	e068      	b.n	800739e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80072ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80072f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007304:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007308:	e049      	b.n	800739e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007326:	ed97 6a04 	vldr	s12, [r7, #16]
 800732a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800732e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800733a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007346:	e02a      	b.n	800739e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007348:	4b5f      	ldr	r3, [pc, #380]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	4a5e      	ldr	r2, [pc, #376]	@ (80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007380:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007398:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800739c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800739e:	4b4a      	ldr	r3, [pc, #296]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073aa:	d121      	bne.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80073ac:	4b46      	ldr	r3, [pc, #280]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d017      	beq.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073b8:	4b43      	ldr	r3, [pc, #268]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073bc:	0a5b      	lsrs	r3, r3, #9
 80073be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80073ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80073d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80073d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073de:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	e006      	b.n	80073f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073f6:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007402:	d121      	bne.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007404:	4b30      	ldr	r3, [pc, #192]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d017      	beq.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007410:	4b2d      	ldr	r3, [pc, #180]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007426:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800742a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800742e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007436:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	e006      	b.n	800744e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	e002      	b.n	800744e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800744e:	4b1e      	ldr	r3, [pc, #120]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800745a:	d121      	bne.n	80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800745c:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d017      	beq.n	8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007468:	4b17      	ldr	r3, [pc, #92]	@ (80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800746a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746c:	0e1b      	lsrs	r3, r3, #24
 800746e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800747a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800747e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007482:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007496:	e010      	b.n	80074ba <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	609a      	str	r2, [r3, #8]
}
 800749e:	e00c      	b.n	80074ba <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	609a      	str	r2, [r3, #8]
}
 80074a6:	e008      	b.n	80074ba <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	609a      	str	r2, [r3, #8]
}
 80074ba:	bf00      	nop
 80074bc:	372c      	adds	r7, #44	@ 0x2c
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	44020c00 	.word	0x44020c00
 80074cc:	03d09000 	.word	0x03d09000
 80074d0:	46000000 	.word	0x46000000
 80074d4:	4a742400 	.word	0x4a742400
 80074d8:	4af42400 	.word	0x4af42400

080074dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80074dc:	b480      	push	{r7}
 80074de:	b08b      	sub	sp, #44	@ 0x2c
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80074e4:	4bae      	ldr	r3, [pc, #696]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ec:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80074ee:	4bac      	ldr	r3, [pc, #688]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80074f8:	4ba9      	ldr	r3, [pc, #676]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fc:	0a1b      	lsrs	r3, r3, #8
 80074fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007502:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007504:	4ba6      	ldr	r3, [pc, #664]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007508:	091b      	lsrs	r3, r3, #4
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007510:	4ba3      	ldr	r3, [pc, #652]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007514:	08db      	lsrs	r3, r3, #3
 8007516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	fb02 f303 	mul.w	r3, r2, r3
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 8126 	beq.w	8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d053      	beq.n	80075e2 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d86f      	bhi.n	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d003      	beq.n	800754e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d02b      	beq.n	80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800754c:	e068      	b.n	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800754e:	4b94      	ldr	r3, [pc, #592]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	08db      	lsrs	r3, r3, #3
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	4a92      	ldr	r2, [pc, #584]	@ (80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800755a:	fa22 f303 	lsr.w	r3, r2, r3
 800755e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007582:	ed97 6a04 	vldr	s12, [r7, #16]
 8007586:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80075a2:	e068      	b.n	8007676 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	ee07 3a90 	vmov	s15, r3
 80075bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80075c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80075c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80075e0:	e049      	b.n	8007676 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80075f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007602:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800761e:	e02a      	b.n	8007676 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007620:	4b5f      	ldr	r3, [pc, #380]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	4a5e      	ldr	r2, [pc, #376]	@ (80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
 8007630:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007654:	ed97 6a04 	vldr	s12, [r7, #16]
 8007658:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800765c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007670:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007674:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007676:	4b4a      	ldr	r3, [pc, #296]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800767e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007682:	d121      	bne.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007684:	4b46      	ldr	r3, [pc, #280]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d017      	beq.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007690:	4b43      	ldr	r3, [pc, #268]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007694:	0a5b      	lsrs	r3, r3, #9
 8007696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80076a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80076aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80076ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e006      	b.n	80076ce <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076ce:	4b34      	ldr	r3, [pc, #208]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076da:	d121      	bne.n	8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80076dc:	4b30      	ldr	r3, [pc, #192]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d017      	beq.n	8007718 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076e8:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ec:	0c1b      	lsrs	r3, r3, #16
 80076ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80076fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007702:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	e006      	b.n	8007726 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	e002      	b.n	8007726 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007726:	4b1e      	ldr	r3, [pc, #120]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800772e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007732:	d121      	bne.n	8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007734:	4b1a      	ldr	r3, [pc, #104]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d017      	beq.n	8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007740:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007744:	0e1b      	lsrs	r3, r3, #24
 8007746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007756:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800775a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800775e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007766:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800776e:	e010      	b.n	8007792 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
}
 8007776:	e00c      	b.n	8007792 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	609a      	str	r2, [r3, #8]
}
 800777e:	e008      	b.n	8007792 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	609a      	str	r2, [r3, #8]
}
 8007792:	bf00      	nop
 8007794:	372c      	adds	r7, #44	@ 0x2c
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	44020c00 	.word	0x44020c00
 80077a4:	03d09000 	.word	0x03d09000
 80077a8:	46000000 	.word	0x46000000
 80077ac:	4a742400 	.word	0x4a742400
 80077b0:	4af42400 	.word	0x4af42400

080077b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b08f      	sub	sp, #60	@ 0x3c
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80077be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077c2:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80077c6:	4321      	orrs	r1, r4
 80077c8:	d150      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80077ca:	4b26      	ldr	r3, [pc, #152]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80077d6:	4b23      	ldr	r3, [pc, #140]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d108      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ea:	d104      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80077ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f2:	f002 bb2a 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80077f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007804:	d108      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780c:	d104      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800780e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
 8007814:	f002 bb19 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007818:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007824:	d119      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800782c:	d115      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800782e:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800783a:	d30a      	bcc.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800783c:	4b09      	ldr	r3, [pc, #36]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007846:	4a08      	ldr	r2, [pc, #32]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007848:	fbb2 f3f3 	udiv	r3, r2, r3
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800784e:	f002 bafc 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007856:	f002 baf8 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	637b      	str	r3, [r7, #52]	@ 0x34
 800785e:	f002 baf4 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007862:	bf00      	nop
 8007864:	44020c00 	.word	0x44020c00
 8007868:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800786c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007870:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007874:	ea50 0104 	orrs.w	r1, r0, r4
 8007878:	f001 8275 	beq.w	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800787c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007880:	2801      	cmp	r0, #1
 8007882:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007886:	f082 82dd 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800788a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800788e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007892:	ea50 0104 	orrs.w	r1, r0, r4
 8007896:	f001 816c 	beq.w	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800789a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800789e:	2801      	cmp	r0, #1
 80078a0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80078a4:	f082 82ce 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ac:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80078b0:	ea50 0104 	orrs.w	r1, r0, r4
 80078b4:	f001 8602 	beq.w	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80078b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078bc:	2801      	cmp	r0, #1
 80078be:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80078c2:	f082 82bf 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ca:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80078ce:	ea50 0104 	orrs.w	r1, r0, r4
 80078d2:	f001 854c 	beq.w	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80078d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078da:	2801      	cmp	r0, #1
 80078dc:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80078e0:	f082 82b0 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80078ec:	ea50 0104 	orrs.w	r1, r0, r4
 80078f0:	f001 849e 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80078f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078f8:	2801      	cmp	r0, #1
 80078fa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80078fe:	f082 82a1 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007906:	f1a1 0420 	sub.w	r4, r1, #32
 800790a:	ea50 0104 	orrs.w	r1, r0, r4
 800790e:	f001 83e8 	beq.w	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007916:	2801      	cmp	r0, #1
 8007918:	f171 0120 	sbcs.w	r1, r1, #32
 800791c:	f082 8292 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007924:	f1a1 0410 	sub.w	r4, r1, #16
 8007928:	ea50 0104 	orrs.w	r1, r0, r4
 800792c:	f002 8256 	beq.w	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007934:	2801      	cmp	r0, #1
 8007936:	f171 0110 	sbcs.w	r1, r1, #16
 800793a:	f082 8283 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800793e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007942:	f1a1 0408 	sub.w	r4, r1, #8
 8007946:	ea50 0104 	orrs.w	r1, r0, r4
 800794a:	f002 81cc 	beq.w	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800794e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007952:	2801      	cmp	r0, #1
 8007954:	f171 0108 	sbcs.w	r1, r1, #8
 8007958:	f082 8274 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800795c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007960:	1f0c      	subs	r4, r1, #4
 8007962:	ea50 0104 	orrs.w	r1, r0, r4
 8007966:	f001 8648 	beq.w	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800796a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800796e:	2801      	cmp	r0, #1
 8007970:	f171 0104 	sbcs.w	r1, r1, #4
 8007974:	f082 8266 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800797c:	1e8c      	subs	r4, r1, #2
 800797e:	ea50 0104 	orrs.w	r1, r0, r4
 8007982:	f002 8143 	beq.w	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800798a:	2801      	cmp	r0, #1
 800798c:	f171 0102 	sbcs.w	r1, r1, #2
 8007990:	f082 8258 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007998:	1e4c      	subs	r4, r1, #1
 800799a:	ea50 0104 	orrs.w	r1, r0, r4
 800799e:	f002 80ce 	beq.w	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80079a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a6:	2801      	cmp	r0, #1
 80079a8:	f171 0101 	sbcs.w	r1, r1, #1
 80079ac:	f082 824a 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079b4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80079b8:	4321      	orrs	r1, r4
 80079ba:	f002 8059 	beq.w	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80079be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c2:	4cd9      	ldr	r4, [pc, #868]	@ (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80079c4:	42a0      	cmp	r0, r4
 80079c6:	f171 0100 	sbcs.w	r1, r1, #0
 80079ca:	f082 823b 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079d2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80079d6:	4321      	orrs	r1, r4
 80079d8:	f001 87d9 	beq.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80079dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e0:	4cd2      	ldr	r4, [pc, #840]	@ (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80079e2:	42a0      	cmp	r0, r4
 80079e4:	f171 0100 	sbcs.w	r1, r1, #0
 80079e8:	f082 822c 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079f0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80079f4:	4321      	orrs	r1, r4
 80079f6:	f001 8751 	beq.w	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80079fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079fe:	4ccc      	ldr	r4, [pc, #816]	@ (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	f171 0100 	sbcs.w	r1, r1, #0
 8007a06:	f082 821d 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a0e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007a12:	4321      	orrs	r1, r4
 8007a14:	f001 869a 	beq.w	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a1c:	4cc5      	ldr	r4, [pc, #788]	@ (8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007a1e:	42a0      	cmp	r0, r4
 8007a20:	f171 0100 	sbcs.w	r1, r1, #0
 8007a24:	f082 820e 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a2c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007a30:	4321      	orrs	r1, r4
 8007a32:	f001 8612 	beq.w	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a3a:	4cbf      	ldr	r4, [pc, #764]	@ (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007a3c:	42a0      	cmp	r0, r4
 8007a3e:	f171 0100 	sbcs.w	r1, r1, #0
 8007a42:	f082 81ff 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a4a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007a4e:	4321      	orrs	r1, r4
 8007a50:	f002 817e 	beq.w	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a58:	4cb8      	ldr	r4, [pc, #736]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a5a:	42a0      	cmp	r0, r4
 8007a5c:	f171 0100 	sbcs.w	r1, r1, #0
 8007a60:	f082 81f0 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a68:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007a6c:	4321      	orrs	r1, r4
 8007a6e:	f000 829e 	beq.w	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a76:	4cb2      	ldr	r4, [pc, #712]	@ (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	f171 0100 	sbcs.w	r1, r1, #0
 8007a7e:	f082 81e1 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a86:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007a8a:	4321      	orrs	r1, r4
 8007a8c:	f000 826d 	beq.w	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a94:	4cab      	ldr	r4, [pc, #684]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a96:	42a0      	cmp	r0, r4
 8007a98:	f171 0100 	sbcs.w	r1, r1, #0
 8007a9c:	f082 81d2 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007aa8:	4321      	orrs	r1, r4
 8007aaa:	f001 800d 	beq.w	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007aae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ab2:	4ca5      	ldr	r4, [pc, #660]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ab4:	42a0      	cmp	r0, r4
 8007ab6:	f171 0100 	sbcs.w	r1, r1, #0
 8007aba:	f082 81c3 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ac2:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007ac6:	4321      	orrs	r1, r4
 8007ac8:	f000 81d0 	beq.w	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ad0:	4c9e      	ldr	r4, [pc, #632]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ad2:	42a0      	cmp	r0, r4
 8007ad4:	f171 0100 	sbcs.w	r1, r1, #0
 8007ad8:	f082 81b4 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ae0:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007ae4:	4321      	orrs	r1, r4
 8007ae6:	f000 8142 	beq.w	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aee:	4c98      	ldr	r4, [pc, #608]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	f171 0100 	sbcs.w	r1, r1, #0
 8007af6:	f082 81a5 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007afe:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007b02:	4321      	orrs	r1, r4
 8007b04:	f001 824e 	beq.w	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0c:	4c91      	ldr	r4, [pc, #580]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007b0e:	42a0      	cmp	r0, r4
 8007b10:	f171 0100 	sbcs.w	r1, r1, #0
 8007b14:	f082 8196 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b1c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007b20:	4321      	orrs	r1, r4
 8007b22:	f001 8197 	beq.w	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b2a:	4c8b      	ldr	r4, [pc, #556]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	f171 0100 	sbcs.w	r1, r1, #0
 8007b32:	f082 8187 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b3a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007b3e:	4321      	orrs	r1, r4
 8007b40:	f001 8154 	beq.w	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b48:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007b4c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b50:	f082 8178 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b58:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007b5c:	4321      	orrs	r1, r4
 8007b5e:	f001 80b7 	beq.w	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b66:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007b6a:	42a0      	cmp	r0, r4
 8007b6c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b70:	f082 8168 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b78:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007b7c:	4321      	orrs	r1, r4
 8007b7e:	f001 8064 	beq.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007b82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b86:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007b8a:	42a0      	cmp	r0, r4
 8007b8c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b90:	f082 8158 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b98:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007b9c:	4321      	orrs	r1, r4
 8007b9e:	f001 8011 	beq.w	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba6:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007baa:	42a0      	cmp	r0, r4
 8007bac:	f171 0100 	sbcs.w	r1, r1, #0
 8007bb0:	f082 8148 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb8:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007bbc:	4321      	orrs	r1, r4
 8007bbe:	f000 871e 	beq.w	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc6:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007bca:	42a0      	cmp	r0, r4
 8007bcc:	f171 0100 	sbcs.w	r1, r1, #0
 8007bd0:	f082 8138 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd8:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007bdc:	4321      	orrs	r1, r4
 8007bde:	f000 86a8 	beq.w	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be6:	f640 0401 	movw	r4, #2049	@ 0x801
 8007bea:	42a0      	cmp	r0, r4
 8007bec:	f171 0100 	sbcs.w	r1, r1, #0
 8007bf0:	f082 8128 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007bfc:	4321      	orrs	r1, r4
 8007bfe:	f000 8632 	beq.w	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c06:	f240 4401 	movw	r4, #1025	@ 0x401
 8007c0a:	42a0      	cmp	r0, r4
 8007c0c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c10:	f082 8118 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c18:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007c1c:	4321      	orrs	r1, r4
 8007c1e:	f000 85b0 	beq.w	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c26:	f240 2401 	movw	r4, #513	@ 0x201
 8007c2a:	42a0      	cmp	r0, r4
 8007c2c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c30:	f082 8108 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c38:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007c3c:	4321      	orrs	r1, r4
 8007c3e:	f000 8535 	beq.w	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c46:	f240 1401 	movw	r4, #257	@ 0x101
 8007c4a:	42a0      	cmp	r0, r4
 8007c4c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c50:	f082 80f8 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c58:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007c5c:	4321      	orrs	r1, r4
 8007c5e:	f000 84ba 	beq.w	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c66:	2881      	cmp	r0, #129	@ 0x81
 8007c68:	f171 0100 	sbcs.w	r1, r1, #0
 8007c6c:	f082 80ea 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c74:	2821      	cmp	r0, #33	@ 0x21
 8007c76:	f171 0100 	sbcs.w	r1, r1, #0
 8007c7a:	d26f      	bcs.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c80:	4301      	orrs	r1, r0
 8007c82:	f002 80df 	beq.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c8a:	1e42      	subs	r2, r0, #1
 8007c8c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007c90:	2a20      	cmp	r2, #32
 8007c92:	f173 0100 	sbcs.w	r1, r3, #0
 8007c96:	f082 80d5 	bcs.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c9a:	2a1f      	cmp	r2, #31
 8007c9c:	f202 80d2 	bhi.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ca0:	a101      	add	r1, pc, #4	@ (adr r1, 8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007ca2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08008009 	.word	0x08008009
 8007cac:	080080d5 	.word	0x080080d5
 8007cb0:	08009e45 	.word	0x08009e45
 8007cb4:	08008195 	.word	0x08008195
 8007cb8:	08009e45 	.word	0x08009e45
 8007cbc:	08009e45 	.word	0x08009e45
 8007cc0:	08009e45 	.word	0x08009e45
 8007cc4:	08008265 	.word	0x08008265
 8007cc8:	08009e45 	.word	0x08009e45
 8007ccc:	08009e45 	.word	0x08009e45
 8007cd0:	08009e45 	.word	0x08009e45
 8007cd4:	08009e45 	.word	0x08009e45
 8007cd8:	08009e45 	.word	0x08009e45
 8007cdc:	08009e45 	.word	0x08009e45
 8007ce0:	08009e45 	.word	0x08009e45
 8007ce4:	08008347 	.word	0x08008347
 8007ce8:	08009e45 	.word	0x08009e45
 8007cec:	08009e45 	.word	0x08009e45
 8007cf0:	08009e45 	.word	0x08009e45
 8007cf4:	08009e45 	.word	0x08009e45
 8007cf8:	08009e45 	.word	0x08009e45
 8007cfc:	08009e45 	.word	0x08009e45
 8007d00:	08009e45 	.word	0x08009e45
 8007d04:	08009e45 	.word	0x08009e45
 8007d08:	08009e45 	.word	0x08009e45
 8007d0c:	08009e45 	.word	0x08009e45
 8007d10:	08009e45 	.word	0x08009e45
 8007d14:	08009e45 	.word	0x08009e45
 8007d18:	08009e45 	.word	0x08009e45
 8007d1c:	08009e45 	.word	0x08009e45
 8007d20:	08009e45 	.word	0x08009e45
 8007d24:	0800841d 	.word	0x0800841d
 8007d28:	80000001 	.word	0x80000001
 8007d2c:	40000001 	.word	0x40000001
 8007d30:	20000001 	.word	0x20000001
 8007d34:	10000001 	.word	0x10000001
 8007d38:	08000001 	.word	0x08000001
 8007d3c:	04000001 	.word	0x04000001
 8007d40:	00800001 	.word	0x00800001
 8007d44:	00400001 	.word	0x00400001
 8007d48:	00200001 	.word	0x00200001
 8007d4c:	00100001 	.word	0x00100001
 8007d50:	00080001 	.word	0x00080001
 8007d54:	00040001 	.word	0x00040001
 8007d58:	00020001 	.word	0x00020001
 8007d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d60:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007d64:	430b      	orrs	r3, r1
 8007d66:	f000 83c4 	beq.w	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007d6a:	f002 b86b 	b.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d80:	d036      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d88:	d86b      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d90:	d02b      	beq.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d98:	d863      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da0:	d01b      	beq.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007da8:	d85b      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db6:	d008      	beq.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007db8:	e053      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dba:	f107 0320 	add.w	r3, r7, #32
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff f8b4 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dc8:	e04e      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dca:	f107 0314 	add.w	r3, r7, #20
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fa18 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dd8:	e046      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dda:	f107 0308 	add.w	r3, r7, #8
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fb7c 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007de8:	e03e      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007dea:	4b83      	ldr	r3, [pc, #524]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007dec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dee:	e03b      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007df0:	4b80      	ldr	r3, [pc, #512]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007df6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dfc:	4b7d      	ldr	r3, [pc, #500]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d10c      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e0e:	4b79      	ldr	r3, [pc, #484]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	08db      	lsrs	r3, r3, #3
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	4a78      	ldr	r2, [pc, #480]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e20:	e01e      	b.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e22:	4b74      	ldr	r3, [pc, #464]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e2e:	d106      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	d102      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e38:	4b71      	ldr	r3, [pc, #452]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3c:	e010      	b.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4a:	d106      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e52:	d102      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e54:	4b6b      	ldr	r3, [pc, #428]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e58:	e002      	b.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007e5e:	e003      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007e60:	e002      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e66:	bf00      	nop
          }
        }
        break;
 8007e68:	f001 bfef 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e6c:	4b61      	ldr	r3, [pc, #388]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e72:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e7e:	d036      	beq.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e86:	d86b      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e8e:	d02b      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e96:	d863      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9e:	d01b      	beq.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea6:	d85b      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007eb4:	d008      	beq.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007eb6:	e053      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb8:	f107 0320 	add.w	r3, r7, #32
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff f835 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ec6:	e04e      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ec8:	f107 0314 	add.w	r3, r7, #20
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff f999 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ed6:	e046      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ed8:	f107 0308 	add.w	r3, r7, #8
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fafd 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ee6:	e03e      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007ee8:	4b43      	ldr	r3, [pc, #268]	@ (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007eec:	e03b      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eee:	4b41      	ldr	r3, [pc, #260]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ef4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007efa:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d10c      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d109      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f0c:	4b39      	ldr	r3, [pc, #228]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	08db      	lsrs	r3, r3, #3
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	4a39      	ldr	r2, [pc, #228]	@ (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1e:	e01e      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f20:	4b34      	ldr	r3, [pc, #208]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f2c:	d106      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f34:	d102      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f36:	4b32      	ldr	r3, [pc, #200]	@ (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3a:	e010      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f48:	d106      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f50:	d102      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f52:	4b2c      	ldr	r3, [pc, #176]	@ (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f56:	e002      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007f5c:	e003      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007f5e:	e002      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f64:	bf00      	nop
          }
        }
        break;
 8007f66:	f001 bf70 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007f6a:	4b22      	ldr	r3, [pc, #136]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f74:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f7c:	f107 0320 	add.w	r3, r7, #32
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe ffd3 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f8a:	f001 bf5e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	2b40      	cmp	r3, #64	@ 0x40
 8007f92:	d108      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff f933 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fa2:	f001 bf52 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007faa:	f001 bf4e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007fae:	4b11      	ldr	r3, [pc, #68]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d108      	bne.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc0:	f107 0320 	add.w	r3, r7, #32
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe ffb1 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007fce:	f001 bf3c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	2b80      	cmp	r3, #128	@ 0x80
 8007fd6:	d108      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff f911 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fe6:	f001 bf30 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fee:	f001 bf2c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ff2:	bf00      	nop
 8007ff4:	44020c00 	.word	0x44020c00
 8007ff8:	00bb8000 	.word	0x00bb8000
 8007ffc:	03d09000 	.word	0x03d09000
 8008000:	003d0900 	.word	0x003d0900
 8008004:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008008:	4b9d      	ldr	r3, [pc, #628]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800800a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800801a:	f7fc ffd1 	bl	8004fc0 <HAL_RCC_GetPCLK2Freq>
 800801e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008020:	f001 bf13 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008024:	4b96      	ldr	r3, [pc, #600]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800802c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008030:	d10a      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	2b01      	cmp	r3, #1
 8008036:	d107      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff f8e1 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
 8008046:	e043      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008048:	4b8d      	ldr	r3, [pc, #564]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008054:	d10a      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	2b02      	cmp	r3, #2
 800805a:	d107      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fa3b 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
 800806a:	e031      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800806c:	4b84      	ldr	r3, [pc, #528]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b02      	cmp	r3, #2
 8008076:	d10c      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	2b03      	cmp	r3, #3
 800807c:	d109      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800807e:	4b80      	ldr	r3, [pc, #512]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	08db      	lsrs	r3, r3, #3
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	4a7e      	ldr	r2, [pc, #504]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800808a:	fa22 f303 	lsr.w	r3, r2, r3
 800808e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008090:	e01e      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008092:	4b7b      	ldr	r3, [pc, #492]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800809a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800809e:	d105      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d102      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80080a6:	4b78      	ldr	r3, [pc, #480]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80080a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080aa:	e011      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80080ac:	4b74      	ldr	r3, [pc, #464]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d106      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d103      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80080c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c6:	e003      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080cc:	f001 bebd 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080d0:	f001 bebb 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80080d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80080e6:	f7fc ff55 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80080ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80080ec:	f001 bead 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80080f0:	4b63      	ldr	r3, [pc, #396]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080fc:	d10a      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	2b08      	cmp	r3, #8
 8008102:	d107      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff f87b 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
 8008112:	e03d      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	2b10      	cmp	r3, #16
 8008118:	d108      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800811a:	f107 0308 	add.w	r3, r7, #8
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f9dc 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008128:	f001 be8f 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800812c:	4b54      	ldr	r3, [pc, #336]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b02      	cmp	r3, #2
 8008136:	d10c      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	2b18      	cmp	r3, #24
 800813c:	d109      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800813e:	4b50      	ldr	r3, [pc, #320]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	4a4e      	ldr	r2, [pc, #312]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800814a:	fa22 f303 	lsr.w	r3, r2, r3
 800814e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008150:	e01e      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008152:	4b4b      	ldr	r3, [pc, #300]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800815a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815e:	d105      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	2b20      	cmp	r3, #32
 8008164:	d102      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008166:	4b48      	ldr	r3, [pc, #288]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
 800816a:	e011      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800816c:	4b44      	ldr	r3, [pc, #272]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800816e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b02      	cmp	r3, #2
 8008178:	d106      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	2b28      	cmp	r3, #40	@ 0x28
 800817e:	d103      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008180:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34
 8008186:	e003      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800818c:	f001 be5d 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008190:	f001 be5b 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008194:	4b3a      	ldr	r3, [pc, #232]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800819a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800819e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081a6:	f7fc fef5 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80081aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80081ac:	f001 be4d 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80081b0:	4b33      	ldr	r3, [pc, #204]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081bc:	d10a      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80081be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c0:	2b40      	cmp	r3, #64	@ 0x40
 80081c2:	d107      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff f81b 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081d2:	e045      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80081d4:	4b2a      	ldr	r3, [pc, #168]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e0:	d10a      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	2b80      	cmp	r3, #128	@ 0x80
 80081e6:	d107      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e8:	f107 0308 	add.w	r3, r7, #8
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff f975 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081f6:	e033      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80081f8:	4b21      	ldr	r3, [pc, #132]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b02      	cmp	r3, #2
 8008202:	d10c      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	2bc0      	cmp	r3, #192	@ 0xc0
 8008208:	d109      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800820a:	4b1d      	ldr	r3, [pc, #116]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	08db      	lsrs	r3, r3, #3
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	4a1b      	ldr	r2, [pc, #108]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008216:	fa22 f303 	lsr.w	r3, r2, r3
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
 800821c:	e020      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800821e:	4b18      	ldr	r3, [pc, #96]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800822a:	d106      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008232:	d102      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008234:	4b14      	ldr	r3, [pc, #80]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008236:	637b      	str	r3, [r7, #52]	@ 0x34
 8008238:	e012      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800823a:	4b11      	ldr	r3, [pc, #68]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800823c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b02      	cmp	r3, #2
 8008246:	d107      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800824e:	d103      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008254:	637b      	str	r3, [r7, #52]	@ 0x34
 8008256:	e003      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800825c:	f001 bdf5 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008260:	f001 bdf3 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008264:	4b06      	ldr	r3, [pc, #24]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800826a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800826e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008276:	f7fc fe8d 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 800827a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800827c:	f001 bde5 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008280:	44020c00 	.word	0x44020c00
 8008284:	03d09000 	.word	0x03d09000
 8008288:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800828c:	4ba0      	ldr	r3, [pc, #640]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008298:	d10b      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a0:	d107      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a2:	f107 0314 	add.w	r3, r7, #20
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe ffac 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b0:	e047      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80082b2:	4b97      	ldr	r3, [pc, #604]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082be:	d10b      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c6:	d107      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c8:	f107 0308 	add.w	r3, r7, #8
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff f905 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d6:	e034      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80082d8:	4b8d      	ldr	r3, [pc, #564]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d10d      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80082ea:	d109      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082ec:	4b88      	ldr	r3, [pc, #544]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	08db      	lsrs	r3, r3, #3
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	4a87      	ldr	r2, [pc, #540]	@ (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80082f8:	fa22 f303 	lsr.w	r3, r2, r3
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082fe:	e020      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008300:	4b83      	ldr	r3, [pc, #524]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800830c:	d106      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008314:	d102      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008316:	4b80      	ldr	r3, [pc, #512]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
 800831a:	e012      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800831c:	4b7c      	ldr	r3, [pc, #496]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800831e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b02      	cmp	r3, #2
 8008328:	d107      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008330:	d103      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008336:	637b      	str	r3, [r7, #52]	@ 0x34
 8008338:	e003      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800833e:	f001 bd84 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008342:	f001 bd82 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008346:	4b72      	ldr	r3, [pc, #456]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800834c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008350:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008358:	f7fc fe1c 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 800835c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800835e:	f001 bd74 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008362:	4b6b      	ldr	r3, [pc, #428]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800836a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800836e:	d10b      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008376:	d107      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe ff41 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
 8008386:	e047      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008388:	4b61      	ldr	r3, [pc, #388]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008394:	d10b      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800839c:	d107      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839e:	f107 0308 	add.w	r3, r7, #8
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff f89a 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ac:	e034      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80083ae:	4b58      	ldr	r3, [pc, #352]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d10d      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083c0:	d109      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083c2:	4b53      	ldr	r3, [pc, #332]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	08db      	lsrs	r3, r3, #3
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	4a51      	ldr	r2, [pc, #324]	@ (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80083ce:	fa22 f303 	lsr.w	r3, r2, r3
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d4:	e020      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80083d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083e2:	d106      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083ea:	d102      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80083ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f0:	e012      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80083f2:	4b47      	ldr	r3, [pc, #284]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d107      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008406:	d103      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
 800840e:	e003      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008414:	f001 bd19 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008418:	f001 bd17 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800841c:	4b3c      	ldr	r3, [pc, #240]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800841e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008422:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008426:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800842e:	f7fc fdb1 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008432:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008434:	f001 bd09 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008438:	4b35      	ldr	r3, [pc, #212]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008444:	d10b      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800844c:	d107      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844e:	f107 0314 	add.w	r3, r7, #20
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe fed6 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	637b      	str	r3, [r7, #52]	@ 0x34
 800845c:	e047      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800845e:	4b2c      	ldr	r3, [pc, #176]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846a:	d10b      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008472:	d107      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008474:	f107 0308 	add.w	r3, r7, #8
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff f82f 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
 8008482:	e034      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008484:	4b22      	ldr	r3, [pc, #136]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	2b02      	cmp	r3, #2
 800848e:	d10d      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008496:	d109      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008498:	4b1d      	ldr	r3, [pc, #116]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	08db      	lsrs	r3, r3, #3
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80084a4:	fa22 f303 	lsr.w	r3, r2, r3
 80084a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084aa:	e020      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80084ac:	4b18      	ldr	r3, [pc, #96]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b8:	d106      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084c0:	d102      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80084c2:	4b15      	ldr	r3, [pc, #84]	@ (8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80084c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c6:	e012      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80084c8:	4b11      	ldr	r3, [pc, #68]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d107      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80084dc:	d103      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80084de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e4:	e003      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ea:	f001 bcae 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084ee:	f001 bcac 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80084f2:	4b07      	ldr	r3, [pc, #28]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80084f8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80084fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10b      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008504:	f7fc fd46 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008508:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800850a:	f001 bc9e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800850e:	bf00      	nop
 8008510:	44020c00 	.word	0x44020c00
 8008514:	03d09000 	.word	0x03d09000
 8008518:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800851c:	4ba0      	ldr	r3, [pc, #640]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008528:	d10b      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008530:	d107      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008532:	f107 0314 	add.w	r3, r7, #20
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fe64 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008540:	e047      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008542:	4b97      	ldr	r3, [pc, #604]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854e:	d10b      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008556:	d107      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008558:	f107 0308 	add.w	r3, r7, #8
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe ffbd 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	e034      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008568:	4b8d      	ldr	r3, [pc, #564]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b02      	cmp	r3, #2
 8008572:	d10d      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800857a:	d109      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800857c:	4b88      	ldr	r3, [pc, #544]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	08db      	lsrs	r3, r3, #3
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	4a87      	ldr	r2, [pc, #540]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	637b      	str	r3, [r7, #52]	@ 0x34
 800858e:	e020      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008590:	4b83      	ldr	r3, [pc, #524]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859c:	d106      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085a4:	d102      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80085a6:	4b80      	ldr	r3, [pc, #512]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80085a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085aa:	e012      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80085ac:	4b7c      	ldr	r3, [pc, #496]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d107      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80085c0:	d103      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80085c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c8:	e003      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ce:	f001 bc3c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085d2:	f001 bc3a 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80085d6:	4b72      	ldr	r3, [pc, #456]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085dc:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80085e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085e8:	f7fc fcd4 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80085ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80085ee:	f001 bc2c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80085f2:	4b6b      	ldr	r3, [pc, #428]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fe:	d10b      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008606:	d107      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008608:	f107 0314 	add.w	r3, r7, #20
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fdf9 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
 8008616:	e047      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008618:	4b61      	ldr	r3, [pc, #388]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008624:	d10b      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800862c:	d107      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe ff52 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	637b      	str	r3, [r7, #52]	@ 0x34
 800863c:	e034      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800863e:	4b58      	ldr	r3, [pc, #352]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b02      	cmp	r3, #2
 8008648:	d10d      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800864a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008650:	d109      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008652:	4b53      	ldr	r3, [pc, #332]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	08db      	lsrs	r3, r3, #3
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	4a51      	ldr	r2, [pc, #324]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800865e:	fa22 f303 	lsr.w	r3, r2, r3
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	e020      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008666:	4b4e      	ldr	r3, [pc, #312]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800866e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008672:	d106      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800867a:	d102      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800867c:	4b4a      	ldr	r3, [pc, #296]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008680:	e012      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008682:	4b47      	ldr	r3, [pc, #284]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b02      	cmp	r3, #2
 800868e:	d107      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008696:	d103      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
 800869e:	e003      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086a4:	f001 bbd1 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086a8:	f001 bbcf 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80086ac:	4b3c      	ldr	r3, [pc, #240]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086b2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80086b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086be:	f7fc fc69 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80086c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80086c4:	f001 bbc1 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80086c8:	4b35      	ldr	r3, [pc, #212]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d4:	d10b      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086de:	f107 0314 	add.w	r3, r7, #20
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fd8e 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	e047      	b.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80086ee:	4b2c      	ldr	r3, [pc, #176]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086fa:	d10b      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008702:	d107      	bne.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008704:	f107 0308 	add.w	r3, r7, #8
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fee7 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
 8008712:	e034      	b.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008714:	4b22      	ldr	r3, [pc, #136]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d10d      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008726:	d109      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008728:	4b1d      	ldr	r3, [pc, #116]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	4a1c      	ldr	r2, [pc, #112]	@ (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008734:	fa22 f303 	lsr.w	r3, r2, r3
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
 800873a:	e020      	b.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800873c:	4b18      	ldr	r3, [pc, #96]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008748:	d106      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008750:	d102      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008752:	4b15      	ldr	r3, [pc, #84]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34
 8008756:	e012      	b.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008758:	4b11      	ldr	r3, [pc, #68]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800875a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d107      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800876c:	d103      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008772:	637b      	str	r3, [r7, #52]	@ 0x34
 8008774:	e003      	b.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800877a:	f001 bb66 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800877e:	f001 bb64 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008782:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008788:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800878c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10b      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008794:	f7fc fbfe 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008798:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800879a:	f001 bb56 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800879e:	bf00      	nop
 80087a0:	44020c00 	.word	0x44020c00
 80087a4:	03d09000 	.word	0x03d09000
 80087a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80087ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b8:	d10b      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087c0:	d107      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0314 	add.w	r3, r7, #20
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fd1c 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d0:	e047      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80087d2:	4b98      	ldr	r3, [pc, #608]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087de:	d10b      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087e6:	d107      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fe75 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f6:	e034      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80087f8:	4b8e      	ldr	r3, [pc, #568]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b02      	cmp	r3, #2
 8008802:	d10d      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800880a:	d109      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800880c:	4b89      	ldr	r3, [pc, #548]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	4a88      	ldr	r2, [pc, #544]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
 800881e:	e020      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008820:	4b84      	ldr	r3, [pc, #528]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800882c:	d106      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008834:	d102      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008836:	4b81      	ldr	r3, [pc, #516]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008838:	637b      	str	r3, [r7, #52]	@ 0x34
 800883a:	e012      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800883c:	4b7d      	ldr	r3, [pc, #500]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800883e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b02      	cmp	r3, #2
 8008848:	d107      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800884a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008850:	d103      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
 8008858:	e003      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800885e:	f001 baf4 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008862:	f001 baf2 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008866:	4b73      	ldr	r3, [pc, #460]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008868:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	2b00      	cmp	r3, #0
 8008876:	d104      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008878:	f7fc fb8c 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 800887c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800887e:	f001 bae4 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008882:	4b6c      	ldr	r3, [pc, #432]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800888a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800888e:	d10a      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	2b01      	cmp	r3, #1
 8008894:	d107      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008896:	f107 0314 	add.w	r3, r7, #20
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fcb2 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a4:	e043      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80088a6:	4b63      	ldr	r3, [pc, #396]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b2:	d10a      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d107      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fe0c 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088c8:	e031      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80088ca:	4b5a      	ldr	r3, [pc, #360]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d10c      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d109      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088dc:	4b55      	ldr	r3, [pc, #340]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	08db      	lsrs	r3, r3, #3
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	4a54      	ldr	r2, [pc, #336]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80088e8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ee:	e01e      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80088f0:	4b50      	ldr	r3, [pc, #320]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088fc:	d105      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	2b04      	cmp	r3, #4
 8008902:	d102      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008904:	4b4d      	ldr	r3, [pc, #308]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
 8008908:	e011      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800890a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800890c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b02      	cmp	r3, #2
 8008916:	d106      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	2b05      	cmp	r3, #5
 800891c:	d103      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800891e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
 8008924:	e003      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800892a:	f001 ba8e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800892e:	f001 ba8c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008932:	4b40      	ldr	r3, [pc, #256]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008934:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008938:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800893c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fc fb26 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008948:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800894a:	f001 ba7e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800894e:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800895a:	d10a      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	2b10      	cmp	r3, #16
 8008960:	d107      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008962:	f107 0314 	add.w	r3, r7, #20
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fc4c 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008970:	e043      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008972:	4b30      	ldr	r3, [pc, #192]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800897a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897e:	d10a      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	2b20      	cmp	r3, #32
 8008984:	d107      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008986:	f107 0308 	add.w	r3, r7, #8
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fda6 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
 8008994:	e031      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008996:	4b27      	ldr	r3, [pc, #156]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d10c      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	2b30      	cmp	r3, #48	@ 0x30
 80089a6:	d109      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089a8:	4b22      	ldr	r3, [pc, #136]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	08db      	lsrs	r3, r3, #3
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	4a21      	ldr	r2, [pc, #132]	@ (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ba:	e01e      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80089bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c8:	d105      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	2b40      	cmp	r3, #64	@ 0x40
 80089ce:	d102      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80089d0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80089d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d4:	e011      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80089d6:	4b17      	ldr	r3, [pc, #92]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d106      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	2b50      	cmp	r3, #80	@ 0x50
 80089e8:	d103      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80089ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f0:	e003      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089f6:	f001 ba28 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089fa:	f001 ba26 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a04:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008a08:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008a10:	f7fc faec 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8008a14:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a16:	f001 ba18 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a20:	d10e      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a22:	f107 0314 	add.w	r3, r7, #20
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fbec 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a30:	f001 ba0b 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a34:	44020c00 	.word	0x44020c00
 8008a38:	03d09000 	.word	0x03d09000
 8008a3c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a46:	d108      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fe fd45 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a56:	f001 b9f8 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008a5a:	4ba4      	ldr	r3, [pc, #656]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d10d      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	08db      	lsrs	r3, r3, #3
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	4a9d      	ldr	r2, [pc, #628]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a80:	e020      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008a82:	4b9a      	ldr	r3, [pc, #616]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a8e:	d106      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a96:	d102      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008a98:	4b96      	ldr	r3, [pc, #600]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9c:	e012      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008a9e:	4b93      	ldr	r3, [pc, #588]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d107      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ab2:	d103      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aba:	e003      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ac0:	f001 b9c3 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ac4:	f001 b9c1 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008ac8:	4b88      	ldr	r3, [pc, #544]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d104      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008ada:	f7fc fa3f 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8008ade:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008ae0:	f001 b9b3 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d104      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008aea:	f7fc f90b 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8008aee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008af0:	f001 b9ab 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d108      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008afa:	f107 0314 	add.w	r3, r7, #20
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fb80 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b08:	f001 b99f 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008b0c:	4b77      	ldr	r3, [pc, #476]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b18:	d105      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d102      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008b20:	4b75      	ldr	r3, [pc, #468]	@ (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b24:	e023      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008b26:	4b71      	ldr	r3, [pc, #452]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d10c      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d109      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b38:	4b6c      	ldr	r3, [pc, #432]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	08db      	lsrs	r3, r3, #3
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	4a6b      	ldr	r2, [pc, #428]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008b44:	fa22 f303 	lsr.w	r3, r2, r3
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4a:	e010      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008b4c:	4b67      	ldr	r3, [pc, #412]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b58:	d105      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	d102      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008b60:	4b64      	ldr	r3, [pc, #400]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b64:	e003      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b6a:	f001 b96e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b6e:	f001 b96c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008b72:	4b5e      	ldr	r3, [pc, #376]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d106      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b98:	e012      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008b9a:	4b54      	ldr	r3, [pc, #336]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba8:	d106      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	d103      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008bb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb6:	e003      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008bbc:	f001 b945 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bc0:	f001 b943 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008bc4:	4b49      	ldr	r3, [pc, #292]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008bce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bd6:	f7fc f9dd 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008bda:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bdc:	f001 b935 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008be6:	d108      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be8:	f107 0308 	add.w	r3, r7, #8
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fc75 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bf6:	f001 b928 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d10d      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c0c:	d109      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c0e:	4b37      	ldr	r3, [pc, #220]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	08db      	lsrs	r3, r3, #3
 8008c14:	f003 0303 	and.w	r3, r3, #3
 8008c18:	4a35      	ldr	r2, [pc, #212]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c20:	e011      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008c22:	4b32      	ldr	r3, [pc, #200]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c2e:	d106      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c36:	d102      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008c38:	4b2e      	ldr	r3, [pc, #184]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c3c:	e003      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c42:	f001 b902 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c46:	f001 b900 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008c4a:	4b28      	ldr	r3, [pc, #160]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c50:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008c54:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c5c:	f7fc f99a 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008c60:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c62:	f001 b8f2 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c6c:	d108      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c6e:	f107 0308 	add.w	r3, r7, #8
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fc32 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c7c:	f001 b8e5 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008c80:	4b1a      	ldr	r3, [pc, #104]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d10d      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008c92:	d109      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c94:	4b15      	ldr	r3, [pc, #84]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	08db      	lsrs	r3, r3, #3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	4a14      	ldr	r2, [pc, #80]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ca6:	e011      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008ca8:	4b10      	ldr	r3, [pc, #64]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb4:	d106      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc2:	e003      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc8:	f001 b8bf 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ccc:	f001 b8bd 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008cd0:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cd6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008cda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10c      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008ce2:	f7fc f983 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8008ce6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ce8:	f001 b8af 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cec:	44020c00 	.word	0x44020c00
 8008cf0:	03d09000 	.word	0x03d09000
 8008cf4:	003d0900 	.word	0x003d0900
 8008cf8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d02:	d108      	bne.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d04:	f107 0308 	add.w	r3, r7, #8
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fbe7 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d12:	f001 b89a 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008d16:	4b9f      	ldr	r3, [pc, #636]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d10d      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d28:	d109      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d2a:	4b9a      	ldr	r3, [pc, #616]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	08db      	lsrs	r3, r3, #3
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	4a98      	ldr	r2, [pc, #608]	@ (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d3c:	e011      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008d3e:	4b95      	ldr	r3, [pc, #596]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d4a:	d106      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d52:	d102      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008d54:	4b91      	ldr	r3, [pc, #580]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d58:	e003      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d5e:	f001 b874 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d62:	f001 b872 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008d66:	4b8b      	ldr	r3, [pc, #556]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d6c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008d70:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d104      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008d78:	f7fc f938 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8008d7c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d7e:	f001 b864 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d88:	d108      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d8a:	f107 0308 	add.w	r3, r7, #8
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe fba4 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d98:	f001 b857 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d10d      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008dae:	d109      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008db0:	4b78      	ldr	r3, [pc, #480]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	08db      	lsrs	r3, r3, #3
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	4a77      	ldr	r2, [pc, #476]	@ (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc2:	e011      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008dc4:	4b73      	ldr	r3, [pc, #460]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dd0:	d106      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008dd8:	d102      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008dda:	4b70      	ldr	r3, [pc, #448]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dde:	e003      	b.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008de4:	f001 b831 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008de8:	f001 b82f 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008dec:	4b69      	ldr	r3, [pc, #420]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008df2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d104      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dfe:	f7fc f8c9 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8008e02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e04:	f001 b821 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e0e:	d108      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fb61 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e1e:	f001 b814 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008e22:	4b5c      	ldr	r3, [pc, #368]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d10e      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e34:	d10a      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e36:	4b57      	ldr	r3, [pc, #348]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	08db      	lsrs	r3, r3, #3
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	4a55      	ldr	r2, [pc, #340]	@ (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008e42:	fa22 f303 	lsr.w	r3, r2, r3
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e48:	f000 bfff 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e50:	f000 bffb 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e54:	4b4f      	ldr	r3, [pc, #316]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008e66:	d056      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008e6e:	f200 808b 	bhi.w	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e78:	d03e      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e80:	f200 8082 	bhi.w	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e8a:	d027      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e92:	d879      	bhi.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e9a:	d017      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea2:	d871      	bhi.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb0:	d004      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008eb2:	e069      	b.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008eb4:	f7fc f89a 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8008eb8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008eba:	e068      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe f99f 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008eca:	e060      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe fb03 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008eda:	e058      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008edc:	4b2d      	ldr	r3, [pc, #180]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d103      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ef0:	e04d      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ef6:	e04a      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008ef8:	4b26      	ldr	r3, [pc, #152]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f06:	d103      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008f08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f0c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f0e:	e03e      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f14:	e03b      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f16:	4b1f      	ldr	r3, [pc, #124]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f22:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d10c      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d109      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f34:	4b17      	ldr	r3, [pc, #92]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	08db      	lsrs	r3, r3, #3
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	4a16      	ldr	r2, [pc, #88]	@ (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f46:	e01e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f48:	4b12      	ldr	r3, [pc, #72]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f54:	d106      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5c:	d102      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f62:	e010      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f64:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f70:	d106      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f78:	d102      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	e002      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f84:	e003      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008f86:	e002      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f8c:	bf00      	nop
          }
        }
        break;
 8008f8e:	f000 bf5c 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f92:	bf00      	nop
 8008f94:	44020c00 	.word	0x44020c00
 8008f98:	03d09000 	.word	0x03d09000
 8008f9c:	003d0900 	.word	0x003d0900
 8008fa0:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008fa4:	4b9e      	ldr	r3, [pc, #632]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fa6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008faa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008fb6:	d056      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008fbe:	f200 808b 	bhi.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fc8:	d03e      	beq.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fd0:	f200 8082 	bhi.w	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fda:	d027      	beq.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fe2:	d879      	bhi.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fea:	d017      	beq.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff2:	d871      	bhi.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009000:	d004      	beq.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009002:	e069      	b.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009004:	f7fb ffc6 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 8009008:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800900a:	e068      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900c:	f107 0314 	add.w	r3, r7, #20
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe f8f7 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800901a:	e060      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fa5b 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800902a:	e058      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800902c:	4b7c      	ldr	r3, [pc, #496]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800902e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b02      	cmp	r3, #2
 8009038:	d103      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800903a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009040:	e04d      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009046:	e04a      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009048:	4b75      	ldr	r3, [pc, #468]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800904a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800904e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009056:	d103      	bne.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009058:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800905e:	e03e      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009064:	e03b      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009066:	4b6e      	ldr	r3, [pc, #440]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800906c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009070:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009072:	4b6b      	ldr	r3, [pc, #428]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b02      	cmp	r3, #2
 800907c:	d10c      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800907e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d109      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009084:	4b66      	ldr	r3, [pc, #408]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	08db      	lsrs	r3, r3, #3
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	4a65      	ldr	r2, [pc, #404]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009090:	fa22 f303 	lsr.w	r3, r2, r3
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
 8009096:	e01e      	b.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009098:	4b61      	ldr	r3, [pc, #388]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a4:	d106      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80090a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ac:	d102      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090ae:	4b5e      	ldr	r3, [pc, #376]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80090b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b2:	e010      	b.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090b4:	4b5a      	ldr	r3, [pc, #360]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090c0:	d106      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80090c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090c8:	d102      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090ca:	4b58      	ldr	r3, [pc, #352]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80090cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ce:	e002      	b.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090d4:	e003      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80090d6:	e002      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090dc:	bf00      	nop
          }
        }
        break;
 80090de:	f000 beb4 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80090e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80090e8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80090ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090f4:	d056      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090fc:	f200 808b 	bhi.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009106:	d03e      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800910e:	f200 8082 	bhi.w	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009118:	d027      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009120:	d879      	bhi.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009128:	d017      	beq.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009130:	d871      	bhi.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800913e:	d004      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009140:	e069      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009142:	f7fb ff53 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8009146:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009148:	e068      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe f858 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009158:	e060      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800915a:	f107 0308 	add.w	r3, r7, #8
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe f9bc 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009168:	e058      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800916a:	4b2d      	ldr	r3, [pc, #180]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800916c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b02      	cmp	r3, #2
 8009176:	d103      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800917e:	e04d      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009184:	e04a      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009186:	4b26      	ldr	r3, [pc, #152]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800918c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009194:	d103      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009196:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800919c:	e03e      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091a2:	e03b      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091a4:	4b1e      	ldr	r3, [pc, #120]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d10c      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80091bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091c2:	4b17      	ldr	r3, [pc, #92]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	08db      	lsrs	r3, r3, #3
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d4:	e01e      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091d6:	4b12      	ldr	r3, [pc, #72]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e2:	d106      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80091e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ea:	d102      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80091ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f0:	e010      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091fe:	d106      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009206:	d102      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009208:	4b08      	ldr	r3, [pc, #32]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
 800920c:	e002      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009212:	e003      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009214:	e002      	b.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800921a:	bf00      	nop
          }
        }
        break;
 800921c:	f000 be15 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009220:	44020c00 	.word	0x44020c00
 8009224:	03d09000 	.word	0x03d09000
 8009228:	003d0900 	.word	0x003d0900
 800922c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009230:	4b9e      	ldr	r3, [pc, #632]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009232:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009236:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800923a:	633b      	str	r3, [r7, #48]	@ 0x30
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009242:	d056      	beq.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800924a:	f200 808b 	bhi.w	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009254:	d03e      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800925c:	f200 8082 	bhi.w	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009266:	d027      	beq.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800926e:	d879      	bhi.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009276:	d017      	beq.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800927e:	d871      	bhi.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928c:	d004      	beq.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800928e:	e069      	b.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009290:	f7fb feac 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8009294:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009296:	e068      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009298:	f107 0314 	add.w	r3, r7, #20
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd ffb1 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092a6:	e060      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092a8:	f107 0308 	add.w	r3, r7, #8
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe f915 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092b6:	e058      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092b8:	4b7c      	ldr	r3, [pc, #496]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d103      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80092c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092cc:	e04d      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092d2:	e04a      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80092d4:	4b75      	ldr	r3, [pc, #468]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092e2:	d103      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80092e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092ea:	e03e      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092f0:	e03b      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092f2:	4b6e      	ldr	r3, [pc, #440]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092fe:	4b6b      	ldr	r3, [pc, #428]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b02      	cmp	r3, #2
 8009308:	d10c      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009310:	4b66      	ldr	r3, [pc, #408]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	08db      	lsrs	r3, r3, #3
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	4a65      	ldr	r2, [pc, #404]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
 8009322:	e01e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009324:	4b61      	ldr	r3, [pc, #388]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800932c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009330:	d106      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009338:	d102      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800933a:	4b5e      	ldr	r3, [pc, #376]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
 800933e:	e010      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009340:	4b5a      	ldr	r3, [pc, #360]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800934c:	d106      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009354:	d102      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009356:	4b58      	ldr	r3, [pc, #352]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
 800935a:	e002      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009360:	e003      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009362:	e002      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009368:	bf00      	nop
          }
        }
        break;
 800936a:	f000 bd6e 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800936e:	4b4f      	ldr	r3, [pc, #316]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009370:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009374:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009380:	d056      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009388:	f200 808b 	bhi.w	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009392:	d03e      	beq.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800939a:	f200 8082 	bhi.w	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093a4:	d027      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093ac:	d879      	bhi.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093b4:	d017      	beq.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093bc:	d871      	bhi.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ca:	d004      	beq.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80093cc:	e069      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80093ce:	f7fb fe0d 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 80093d2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80093d4:	e068      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d6:	f107 0314 	add.w	r3, r7, #20
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fd ff12 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093e4:	e060      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe f876 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093f4:	e058      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093f6:	4b2d      	ldr	r3, [pc, #180]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b02      	cmp	r3, #2
 8009402:	d103      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800940a:	e04d      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009410:	e04a      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009412:	4b26      	ldr	r3, [pc, #152]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800941c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009420:	d103      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009422:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009426:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009428:	e03e      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800942e:	e03b      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009430:	4b1e      	ldr	r3, [pc, #120]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009436:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800943a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800943c:	4b1b      	ldr	r3, [pc, #108]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b02      	cmp	r3, #2
 8009446:	d10c      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800944e:	4b17      	ldr	r3, [pc, #92]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	08db      	lsrs	r3, r3, #3
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	4a15      	ldr	r2, [pc, #84]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800945a:	fa22 f303 	lsr.w	r3, r2, r3
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009460:	e01e      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009462:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800946a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800946e:	d106      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009476:	d102      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009478:	4b0e      	ldr	r3, [pc, #56]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
 800947c:	e010      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800947e:	4b0b      	ldr	r3, [pc, #44]	@ (80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800948a:	d106      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800948c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009492:	d102      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009494:	4b08      	ldr	r3, [pc, #32]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009496:	637b      	str	r3, [r7, #52]	@ 0x34
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80094a0:	e002      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094a6:	bf00      	nop
          }
        }
        break;
 80094a8:	f000 bccf 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094ac:	44020c00 	.word	0x44020c00
 80094b0:	03d09000 	.word	0x03d09000
 80094b4:	003d0900 	.word	0x003d0900
 80094b8:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80094bc:	4b9e      	ldr	r3, [pc, #632]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80094c2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80094c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ce:	d056      	beq.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094d6:	f200 808b 	bhi.w	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e0:	d03e      	beq.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e8:	f200 8082 	bhi.w	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094f2:	d027      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094fa:	d879      	bhi.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009502:	d017      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800950a:	d871      	bhi.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009518:	d004      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800951a:	e069      	b.n	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800951c:	f7fb fd66 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8009520:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009522:	e068      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	4618      	mov	r0, r3
 800952a:	f7fd fe6b 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009532:	e060      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009534:	f107 0308 	add.w	r3, r7, #8
 8009538:	4618      	mov	r0, r3
 800953a:	f7fd ffcf 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009542:	e058      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009544:	4b7c      	ldr	r3, [pc, #496]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800954a:	f003 0302 	and.w	r3, r3, #2
 800954e:	2b02      	cmp	r3, #2
 8009550:	d103      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009556:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009558:	e04d      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800955e:	e04a      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009560:	4b75      	ldr	r3, [pc, #468]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009566:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800956a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800956e:	d103      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009570:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009576:	e03e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800957c:	e03b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800957e:	4b6e      	ldr	r3, [pc, #440]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009584:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009588:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800958a:	4b6b      	ldr	r3, [pc, #428]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b02      	cmp	r3, #2
 8009594:	d10c      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800959c:	4b66      	ldr	r3, [pc, #408]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	08db      	lsrs	r3, r3, #3
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	4a65      	ldr	r2, [pc, #404]	@ (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80095a8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ae:	e01e      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095b0:	4b61      	ldr	r3, [pc, #388]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095bc:	d106      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095c4:	d102      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80095c6:	4b5e      	ldr	r3, [pc, #376]	@ (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80095c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ca:	e010      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095cc:	4b5a      	ldr	r3, [pc, #360]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095d8:	d106      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80095da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095e0:	d102      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80095e2:	4b58      	ldr	r3, [pc, #352]	@ (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80095e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e6:	e002      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80095ec:	e003      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80095ee:	e002      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095f4:	bf00      	nop
          }
        }
        break;
 80095f6:	f000 bc28 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80095fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009604:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009606:	4b4c      	ldr	r3, [pc, #304]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800960e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009612:	d106      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800961a:	4b4a      	ldr	r3, [pc, #296]	@ (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800961e:	f000 bc14 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009628:	d108      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800962a:	f107 0320 	add.w	r3, r7, #32
 800962e:	4618      	mov	r0, r3
 8009630:	f7fd fc7c 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009638:	f000 bc07 	b.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009642:	d107      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009644:	f107 0314 	add.w	r3, r7, #20
 8009648:	4618      	mov	r0, r3
 800964a:	f7fd fddb 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009652:	e3fa      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009658:	e3f7      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800965a:	4b37      	ldr	r3, [pc, #220]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800965c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	633b      	str	r3, [r7, #48]	@ 0x30
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	2b04      	cmp	r3, #4
 800966a:	d861      	bhi.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800966c:	a201      	add	r2, pc, #4	@ (adr r2, 8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	08009689 	.word	0x08009689
 8009678:	08009699 	.word	0x08009699
 800967c:	080096a9 	.word	0x080096a9
 8009680:	080096b9 	.word	0x080096b9
 8009684:	080096bf 	.word	0x080096bf
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009688:	f107 0320 	add.w	r3, r7, #32
 800968c:	4618      	mov	r0, r3
 800968e:	f7fd fc4d 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009696:	e04e      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	4618      	mov	r0, r3
 800969e:	f7fd fdb1 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a6:	e046      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fd ff15 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096b6:	e03e      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80096b8:	4b23      	ldr	r3, [pc, #140]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096bc:	e03b      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096be:	4b1e      	ldr	r3, [pc, #120]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d10c      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096dc:	4b16      	ldr	r3, [pc, #88]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	08db      	lsrs	r3, r3, #3
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	4a15      	ldr	r2, [pc, #84]	@ (800973c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80096e8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ee:	e01e      	b.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096f0:	4b11      	ldr	r3, [pc, #68]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096fc:	d106      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009704:	d102      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009706:	4b0e      	ldr	r3, [pc, #56]	@ (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009708:	637b      	str	r3, [r7, #52]	@ 0x34
 800970a:	e010      	b.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800970c:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009718:	d106      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800971a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009720:	d102      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009722:	4b08      	ldr	r3, [pc, #32]	@ (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
 8009726:	e002      	b.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800972c:	e003      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800972e:	e002      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009734:	bf00      	nop
          }
        }
        break;
 8009736:	e388      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009738:	44020c00 	.word	0x44020c00
 800973c:	03d09000 	.word	0x03d09000
 8009740:	003d0900 	.word	0x003d0900
 8009744:	007a1200 	.word	0x007a1200
 8009748:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800974c:	4ba9      	ldr	r3, [pc, #676]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800974e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009756:	633b      	str	r3, [r7, #48]	@ 0x30
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2b20      	cmp	r3, #32
 800975c:	f200 809a 	bhi.w	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009760:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	080097ed 	.word	0x080097ed
 800976c:	08009895 	.word	0x08009895
 8009770:	08009895 	.word	0x08009895
 8009774:	08009895 	.word	0x08009895
 8009778:	08009895 	.word	0x08009895
 800977c:	08009895 	.word	0x08009895
 8009780:	08009895 	.word	0x08009895
 8009784:	08009895 	.word	0x08009895
 8009788:	080097fd 	.word	0x080097fd
 800978c:	08009895 	.word	0x08009895
 8009790:	08009895 	.word	0x08009895
 8009794:	08009895 	.word	0x08009895
 8009798:	08009895 	.word	0x08009895
 800979c:	08009895 	.word	0x08009895
 80097a0:	08009895 	.word	0x08009895
 80097a4:	08009895 	.word	0x08009895
 80097a8:	0800980d 	.word	0x0800980d
 80097ac:	08009895 	.word	0x08009895
 80097b0:	08009895 	.word	0x08009895
 80097b4:	08009895 	.word	0x08009895
 80097b8:	08009895 	.word	0x08009895
 80097bc:	08009895 	.word	0x08009895
 80097c0:	08009895 	.word	0x08009895
 80097c4:	08009895 	.word	0x08009895
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009895 	.word	0x08009895
 80097d0:	08009895 	.word	0x08009895
 80097d4:	08009895 	.word	0x08009895
 80097d8:	08009895 	.word	0x08009895
 80097dc:	08009895 	.word	0x08009895
 80097e0:	08009895 	.word	0x08009895
 80097e4:	08009895 	.word	0x08009895
 80097e8:	08009823 	.word	0x08009823
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ec:	f107 0320 	add.w	r3, r7, #32
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fd fb9b 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097fa:	e04e      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097fc:	f107 0314 	add.w	r3, r7, #20
 8009800:	4618      	mov	r0, r3
 8009802:	f7fd fcff 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800980a:	e046      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	4618      	mov	r0, r3
 8009812:	f7fd fe63 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800981a:	e03e      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800981c:	4b76      	ldr	r3, [pc, #472]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009820:	e03b      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009822:	4b74      	ldr	r3, [pc, #464]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009828:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800982c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800982e:	4b71      	ldr	r3, [pc, #452]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b02      	cmp	r3, #2
 8009838:	d10c      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009840:	4b6c      	ldr	r3, [pc, #432]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	08db      	lsrs	r3, r3, #3
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	4a6c      	ldr	r2, [pc, #432]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800984c:	fa22 f303 	lsr.w	r3, r2, r3
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
 8009852:	e01e      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009854:	4b67      	ldr	r3, [pc, #412]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800985c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009860:	d106      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009868:	d102      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800986a:	4b65      	ldr	r3, [pc, #404]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
 800986e:	e010      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009870:	4b60      	ldr	r3, [pc, #384]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800987c:	d106      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009884:	d102      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009886:	4b5f      	ldr	r3, [pc, #380]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
 800988a:	e002      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009890:	e003      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009892:	e002      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009898:	bf00      	nop
          }
        }
        break;
 800989a:	e2d6      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800989c:	4b55      	ldr	r3, [pc, #340]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800989e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80098a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80098a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ae:	d031      	beq.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d866      	bhi.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80098bc:	d027      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80098c2:	d860      	bhi.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	2b80      	cmp	r3, #128	@ 0x80
 80098c8:	d019      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	2b80      	cmp	r3, #128	@ 0x80
 80098ce:	d85a      	bhi.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d8:	2b40      	cmp	r3, #64	@ 0x40
 80098da:	d008      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80098dc:	e053      	b.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098de:	f107 0320 	add.w	r3, r7, #32
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd fb22 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80098e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098ec:	e04e      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ee:	f107 0314 	add.w	r3, r7, #20
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fd fc86 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098fc:	e046      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	4618      	mov	r0, r3
 8009904:	f7fd fdea 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800990c:	e03e      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800990e:	4b3a      	ldr	r3, [pc, #232]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009910:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009912:	e03b      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009914:	4b37      	ldr	r3, [pc, #220]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800991a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800991e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009920:	4b34      	ldr	r3, [pc, #208]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b02      	cmp	r3, #2
 800992a:	d10c      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d109      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009932:	4b30      	ldr	r3, [pc, #192]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	08db      	lsrs	r3, r3, #3
 8009938:	f003 0303 	and.w	r3, r3, #3
 800993c:	4a2f      	ldr	r2, [pc, #188]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800993e:	fa22 f303 	lsr.w	r3, r2, r3
 8009942:	637b      	str	r3, [r7, #52]	@ 0x34
 8009944:	e01e      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009946:	4b2b      	ldr	r3, [pc, #172]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800994e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009952:	d106      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800995a:	d102      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800995c:	4b28      	ldr	r3, [pc, #160]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800995e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009960:	e010      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009962:	4b24      	ldr	r3, [pc, #144]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800996a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800996e:	d106      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009976:	d102      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009978:	4b22      	ldr	r3, [pc, #136]	@ (8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800997a:	637b      	str	r3, [r7, #52]	@ 0x34
 800997c:	e002      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009982:	e003      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009984:	e002      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800998a:	bf00      	nop
          }
        }
        break;
 800998c:	e25d      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800998e:	4b19      	ldr	r3, [pc, #100]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009994:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009998:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80099a0:	f7fb fb0e 	bl	8004fc0 <HAL_RCC_GetPCLK2Freq>
 80099a4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80099a6:	e250      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80099a8:	4b12      	ldr	r3, [pc, #72]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099b4:	d10b      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099bc:	d107      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099be:	f107 0314 	add.w	r3, r7, #20
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fd fc1e 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80099cc:	e04f      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80099ce:	4b09      	ldr	r3, [pc, #36]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099da:	d115      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e2:	d111      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fd fd77 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f2:	e03c      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80099f4:	44020c00 	.word	0x44020c00
 80099f8:	00bb8000 	.word	0x00bb8000
 80099fc:	03d09000 	.word	0x03d09000
 8009a00:	003d0900 	.word	0x003d0900
 8009a04:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009a08:	4b94      	ldr	r3, [pc, #592]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d10d      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009a1a:	d109      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	08db      	lsrs	r3, r3, #3
 8009a22:	f003 0303 	and.w	r3, r3, #3
 8009a26:	4a8e      	ldr	r2, [pc, #568]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
 8009a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2e:	e01e      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009a30:	4b8a      	ldr	r3, [pc, #552]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a3c:	d106      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a44:	d102      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009a46:	4b87      	ldr	r3, [pc, #540]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a4a:	e010      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009a4c:	4b83      	ldr	r3, [pc, #524]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a58:	d106      	bne.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009a60:	d102      	bne.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009a62:	4b81      	ldr	r3, [pc, #516]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a66:	e002      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a6c:	e1ed      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a6e:	e1ec      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009a70:	4b7a      	ldr	r3, [pc, #488]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009a7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009a82:	f7fb fab3 	bl	8004fec <HAL_RCC_GetPCLK3Freq>
 8009a86:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009a88:	e1df      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009a8a:	4b74      	ldr	r3, [pc, #464]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a96:	d10b      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a9e:	d107      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa0:	f107 0314 	add.w	r3, r7, #20
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd fbad 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aae:	e045      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d10b      	bne.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ac4:	d107      	bne.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac6:	f107 0308 	add.w	r3, r7, #8
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd fd06 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad4:	e032      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009ad6:	4b61      	ldr	r3, [pc, #388]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d10d      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ae8:	d109      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aea:	4b5c      	ldr	r3, [pc, #368]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	08db      	lsrs	r3, r3, #3
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	4a5a      	ldr	r2, [pc, #360]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009af6:	fa22 f303 	lsr.w	r3, r2, r3
 8009afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009afc:	e01e      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009afe:	4b57      	ldr	r3, [pc, #348]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b0a:	d106      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b12:	d102      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009b14:	4b53      	ldr	r3, [pc, #332]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b18:	e010      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009b1a:	4b50      	ldr	r3, [pc, #320]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b26:	d106      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009b2e:	d102      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009b30:	4b4d      	ldr	r3, [pc, #308]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b34:	e002      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b3a:	e186      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b3c:	e185      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009b3e:	4b47      	ldr	r3, [pc, #284]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b44:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009b48:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d103      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009b50:	f7fb fa36 	bl	8004fc0 <HAL_RCC_GetPCLK2Freq>
 8009b54:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009b56:	e178      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009b58:	4b40      	ldr	r3, [pc, #256]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b64:	d10b      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b6c:	d107      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b6e:	f107 0314 	add.w	r3, r7, #20
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fd fb46 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7c:	e045      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009b7e:	4b37      	ldr	r3, [pc, #220]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b8a:	d10b      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b92:	d107      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b94:	f107 0308 	add.w	r3, r7, #8
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fd fc9f 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba2:	e032      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d10d      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009bb6:	d109      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bb8:	4b28      	ldr	r3, [pc, #160]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	08db      	lsrs	r3, r3, #3
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	4a27      	ldr	r2, [pc, #156]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bca:	e01e      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009bcc:	4b23      	ldr	r3, [pc, #140]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bd8:	d106      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be0:	d102      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009be2:	4b20      	ldr	r3, [pc, #128]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be6:	e010      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009be8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bf4:	d106      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009bfc:	d102      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c02:	e002      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c08:	e11f      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c0a:	e11e      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009c0c:	4b13      	ldr	r3, [pc, #76]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d85f      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c6d 	.word	0x08009c6d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009c34:	f7fb f992 	bl	8004f5c <HAL_RCC_GetHCLKFreq>
 8009c38:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009c3a:	e053      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c3c:	f107 0320 	add.w	r3, r7, #32
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fd f973 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c4a:	e04b      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c4c:	f107 0314 	add.w	r3, r7, #20
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd fad7 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c5a:	e043      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009c5c:	44020c00 	.word	0x44020c00
 8009c60:	03d09000 	.word	0x03d09000
 8009c64:	003d0900 	.word	0x003d0900
 8009c68:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c6c:	4b79      	ldr	r3, [pc, #484]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c72:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c78:	4b76      	ldr	r3, [pc, #472]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d10c      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c8a:	4b72      	ldr	r3, [pc, #456]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	08db      	lsrs	r3, r3, #3
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	4a70      	ldr	r2, [pc, #448]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009c96:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9c:	e01e      	b.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009caa:	d106      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cb2:	d102      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009cb4:	4b69      	ldr	r3, [pc, #420]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb8:	e010      	b.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cba:	4b66      	ldr	r3, [pc, #408]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cc6:	d106      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cce:	d102      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009cd0:	4b63      	ldr	r3, [pc, #396]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd4:	e002      	b.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009cda:	e003      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009cdc:	e002      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ce2:	bf00      	nop
          }
        }
        break;
 8009ce4:	e0b1      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009ce6:	4b5b      	ldr	r3, [pc, #364]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009cf0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009cf2:	4b58      	ldr	r3, [pc, #352]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d106      	bne.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d0c:	e01f      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009d0e:	4b51      	ldr	r3, [pc, #324]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d103      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009d24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d2a:	e010      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009d2c:	4b49      	ldr	r3, [pc, #292]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d38:	d106      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	2b80      	cmp	r3, #128	@ 0x80
 8009d3e:	d103      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009d40:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d46:	e002      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009d4c:	e07d      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d4e:	e07c      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009d50:	4b40      	ldr	r3, [pc, #256]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d5a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d68:	d105      	bne.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d102      	bne.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009d70:	4b3c      	ldr	r3, [pc, #240]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d74:	e031      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009d76:	4b37      	ldr	r3, [pc, #220]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d82:	d10a      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	2b10      	cmp	r3, #16
 8009d88:	d107      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d8a:	f107 0320 	add.w	r3, r7, #32
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fd f8cc 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d98:	e01f      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d106      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009daa:	2b20      	cmp	r3, #32
 8009dac:	d103      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db4:	e011      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009db6:	4b27      	ldr	r3, [pc, #156]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dc4:	d106      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	2b30      	cmp	r3, #48	@ 0x30
 8009dca:	d103      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009dcc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd2:	e002      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009dd8:	e037      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dda:	e036      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009dde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009de2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009de6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d107      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dee:	f107 0320 	add.w	r3, r7, #32
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fd f89a 	bl	8006f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009dfc:	e025      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009dfe:	4b15      	ldr	r3, [pc, #84]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e0a:	d10a      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d107      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fd fb60 	bl	80074dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e20:	e00f      	b.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009e22:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e2e:	d105      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	2b30      	cmp	r3, #48	@ 0x30
 8009e34:	d102      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009e36:	4b0b      	ldr	r3, [pc, #44]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e3a:	e002      	b.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009e40:	e003      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e42:	e002      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e48:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	373c      	adds	r7, #60	@ 0x3c
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	44020c00 	.word	0x44020c00
 8009e58:	03d09000 	.word	0x03d09000
 8009e5c:	003d0900 	.word	0x003d0900
 8009e60:	007a1200 	.word	0x007a1200
 8009e64:	02dc6c00 	.word	0x02dc6c00

08009e68 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009e70:	4b48      	ldr	r3, [pc, #288]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a47      	ldr	r2, [pc, #284]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009e76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e7c:	f7f7 ff18 	bl	8001cb0 <HAL_GetTick>
 8009e80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e82:	e008      	b.n	8009e96 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e84:	f7f7 ff14 	bl	8001cb0 <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d901      	bls.n	8009e96 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e07a      	b.n	8009f8c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e96:	4b3f      	ldr	r3, [pc, #252]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f0      	bne.n	8009e84 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009eaa:	f023 0303 	bic.w	r3, r3, #3
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	6811      	ldr	r1, [r2, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6852      	ldr	r2, [r2, #4]
 8009eb6:	0212      	lsls	r2, r2, #8
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	4936      	ldr	r1, [pc, #216]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	025b      	lsls	r3, r3, #9
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	041b      	lsls	r3, r3, #16
 8009ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	061b      	lsls	r3, r3, #24
 8009eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ef0:	4928      	ldr	r1, [pc, #160]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009ef6:	4b27      	ldr	r3, [pc, #156]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efa:	f023 020c 	bic.w	r2, r3, #12
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	4924      	ldr	r1, [pc, #144]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009f08:	4b22      	ldr	r3, [pc, #136]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	f023 0220 	bic.w	r2, r3, #32
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	491f      	ldr	r1, [pc, #124]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f22:	491c      	ldr	r1, [pc, #112]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009f28:	4b1a      	ldr	r3, [pc, #104]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2c:	4a19      	ldr	r2, [pc, #100]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f2e:	f023 0310 	bic.w	r3, r3, #16
 8009f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009f34:	4b17      	ldr	r3, [pc, #92]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f3c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6a12      	ldr	r2, [r2, #32]
 8009f44:	00d2      	lsls	r2, r2, #3
 8009f46:	4913      	ldr	r1, [pc, #76]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009f4c:	4b11      	ldr	r3, [pc, #68]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f50:	4a10      	ldr	r2, [pc, #64]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f52:	f043 0310 	orr.w	r3, r3, #16
 8009f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009f58:	4b0e      	ldr	r3, [pc, #56]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f64:	f7f7 fea4 	bl	8001cb0 <HAL_GetTick>
 8009f68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f6a:	e008      	b.n	8009f7e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f6c:	f7f7 fea0 	bl	8001cb0 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d901      	bls.n	8009f7e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e006      	b.n	8009f8c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f7e:	4b05      	ldr	r3, [pc, #20]	@ (8009f94 <RCCEx_PLL2_Config+0x12c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0f0      	beq.n	8009f6c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0

}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	44020c00 	.word	0x44020c00

08009f98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009fa0:	4b48      	ldr	r3, [pc, #288]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a47      	ldr	r2, [pc, #284]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 8009fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009faa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fac:	f7f7 fe80 	bl	8001cb0 <HAL_GetTick>
 8009fb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fb2:	e008      	b.n	8009fc6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fb4:	f7f7 fe7c 	bl	8001cb0 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d901      	bls.n	8009fc6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e07a      	b.n	800a0bc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fc6:	4b3f      	ldr	r3, [pc, #252]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f0      	bne.n	8009fb4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009fd2:	4b3c      	ldr	r3, [pc, #240]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6811      	ldr	r1, [r2, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6852      	ldr	r2, [r2, #4]
 8009fe6:	0212      	lsls	r2, r2, #8
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	4936      	ldr	r1, [pc, #216]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	630b      	str	r3, [r1, #48]	@ 0x30
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	025b      	lsls	r3, r3, #9
 800a002:	b29b      	uxth	r3, r3
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	041b      	lsls	r3, r3, #16
 800a00e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	3b01      	subs	r3, #1
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a020:	4928      	ldr	r1, [pc, #160]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a022:	4313      	orrs	r3, r2
 800a024:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a026:	4b27      	ldr	r3, [pc, #156]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02a:	f023 020c 	bic.w	r2, r3, #12
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	4924      	ldr	r1, [pc, #144]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a034:	4313      	orrs	r3, r2
 800a036:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a038:	4b22      	ldr	r3, [pc, #136]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a03c:	f023 0220 	bic.w	r2, r3, #32
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	491f      	ldr	r1, [pc, #124]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a046:	4313      	orrs	r3, r2
 800a048:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a04a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a04c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a052:	491c      	ldr	r1, [pc, #112]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a054:	4313      	orrs	r3, r2
 800a056:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a058:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05c:	4a19      	ldr	r2, [pc, #100]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a05e:	f023 0310 	bic.w	r3, r3, #16
 800a062:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a064:	4b17      	ldr	r3, [pc, #92]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a068:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a06c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	6a12      	ldr	r2, [r2, #32]
 800a074:	00d2      	lsls	r2, r2, #3
 800a076:	4913      	ldr	r1, [pc, #76]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a07c:	4b11      	ldr	r3, [pc, #68]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a080:	4a10      	ldr	r2, [pc, #64]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a082:	f043 0310 	orr.w	r3, r3, #16
 800a086:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a088:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a08e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a092:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a094:	f7f7 fe0c 	bl	8001cb0 <HAL_GetTick>
 800a098:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a09a:	e008      	b.n	800a0ae <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a09c:	f7f7 fe08 	bl	8001cb0 <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d901      	bls.n	800a0ae <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e006      	b.n	800a0bc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0ae:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <RCCEx_PLL3_Config+0x12c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0f0      	beq.n	800a09c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	44020c00 	.word	0x44020c00

0800a0c8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e08c      	b.n	800a1f4 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7a5b      	ldrb	r3, [r3, #9]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7f6 ff4e 	bl	8000f8c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0204 	bic.w	r2, r2, #4
 800a104:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6859      	ldr	r1, [r3, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4b3b      	ldr	r3, [pc, #236]	@ (800a1fc <HAL_RNG_Init+0x134>)
 800a110:	430b      	orrs	r3, r1
 800a112:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a11c:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a37      	ldr	r2, [pc, #220]	@ (800a200 <HAL_RNG_Init+0x138>)
 800a124:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a134:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a136:	f7f7 fdbb 	bl	8001cb0 <HAL_GetTick>
 800a13a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a13c:	e016      	b.n	800a16c <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a13e:	f7f7 fdb7 	bl	8001cb0 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d90f      	bls.n	800a16c <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a15a:	d107      	bne.n	800a16c <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2202      	movs	r2, #2
 800a166:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e043      	b.n	800a1f4 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a17a:	d0e0      	beq.n	800a13e <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f042 0204 	orr.w	r2, r2, #4
 800a18a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a196:	2b40      	cmp	r3, #64	@ 0x40
 800a198:	d104      	bne.n	800a1a4 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2204      	movs	r2, #4
 800a19e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e027      	b.n	800a1f4 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a1a4:	f7f7 fd84 	bl	8001cb0 <HAL_GetTick>
 800a1a8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a1aa:	e015      	b.n	800a1d8 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a1ac:	f7f7 fd80 	bl	8001cb0 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d90e      	bls.n	800a1d8 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d007      	beq.n	800a1d8 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e00d      	b.n	800a1f4 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d1e2      	bne.n	800a1ac <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40f00e00 	.word	0x40f00e00
 800a200:	0003af66 	.word	0x0003af66

0800a204 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d071      	beq.n	800a2fa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7f6 ff06 	bl	800103c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a238:	4b32      	ldr	r3, [pc, #200]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b10      	cmp	r3, #16
 800a242:	d051      	beq.n	800a2e8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a244:	4b2f      	ldr	r3, [pc, #188]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a246:	22ca      	movs	r2, #202	@ 0xca
 800a248:	625a      	str	r2, [r3, #36]	@ 0x24
 800a24a:	4b2e      	ldr	r3, [pc, #184]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a24c:	2253      	movs	r2, #83	@ 0x53
 800a24e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f9a3 	bl	800a59c <RTC_EnterInitMode>
 800a256:	4603      	mov	r3, r0
 800a258:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d13f      	bne.n	800a2e0 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a260:	4b28      	ldr	r3, [pc, #160]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	4a27      	ldr	r2, [pc, #156]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a266:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a26a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a26e:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a270:	4b24      	ldr	r3, [pc, #144]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6859      	ldr	r1, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	4319      	orrs	r1, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	430b      	orrs	r3, r1
 800a284:	491f      	ldr	r1, [pc, #124]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a286:	4313      	orrs	r3, r2
 800a288:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	041b      	lsls	r3, r3, #16
 800a294:	491b      	ldr	r1, [pc, #108]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a296:	4313      	orrs	r3, r2
 800a298:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a29a:	4b1a      	ldr	r3, [pc, #104]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	4915      	ldr	r1, [pc, #84]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9ae 	bl	800a614 <RTC_ExitInitMode>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10e      	bne.n	800a2e0 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a2c2:	4b10      	ldr	r3, [pc, #64]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a19      	ldr	r1, [r3, #32]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	4319      	orrs	r1, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	490a      	ldr	r1, [pc, #40]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2e0:	4b08      	ldr	r3, [pc, #32]	@ (800a304 <HAL_RTC_Init+0x100>)
 800a2e2:	22ff      	movs	r2, #255	@ 0xff
 800a2e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2e6:	e001      	b.n	800a2ec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	44007800 	.word	0x44007800

0800a308 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_RTC_SetTime+0x1a>
 800a31e:	2302      	movs	r3, #2
 800a320:	e07e      	b.n	800a420 <HAL_RTC_SetTime+0x118>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2202      	movs	r2, #2
 800a32e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a332:	4b3d      	ldr	r3, [pc, #244]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a334:	22ca      	movs	r2, #202	@ 0xca
 800a336:	625a      	str	r2, [r3, #36]	@ 0x24
 800a338:	4b3b      	ldr	r3, [pc, #236]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a33a:	2253      	movs	r2, #83	@ 0x53
 800a33c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f92c 	bl	800a59c <RTC_EnterInitMode>
 800a344:	4603      	mov	r3, r0
 800a346:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a348:	7cfb      	ldrb	r3, [r7, #19]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d159      	bne.n	800a402 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a34e:	4b36      	ldr	r3, [pc, #216]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a35a:	d04d      	beq.n	800a3f8 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d125      	bne.n	800a3ae <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a362:	4b31      	ldr	r3, [pc, #196]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2200      	movs	r2, #0
 800a372:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 f989 	bl	800a690 <RTC_ByteToBcd2>
 800a37e:	4603      	mov	r3, r0
 800a380:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	4618      	mov	r0, r3
 800a388:	f000 f982 	bl	800a690 <RTC_ByteToBcd2>
 800a38c:	4603      	mov	r3, r0
 800a38e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a390:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	789b      	ldrb	r3, [r3, #2]
 800a396:	4618      	mov	r0, r3
 800a398:	f000 f97a 	bl	800a690 <RTC_ByteToBcd2>
 800a39c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a39e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	78db      	ldrb	r3, [r3, #3]
 800a3a6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e017      	b.n	800a3de <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	785b      	ldrb	r3, [r3, #1]
 800a3ca:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3cc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3d2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	78db      	ldrb	r3, [r3, #3]
 800a3d8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a3de:	4a12      	ldr	r2, [pc, #72]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a3e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a3ea:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a3f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3f6:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f90b 	bl	800a614 <RTC_ExitInitMode>
 800a3fe:	4603      	mov	r3, r0
 800a400:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a402:	4b09      	ldr	r3, [pc, #36]	@ (800a428 <HAL_RTC_SetTime+0x120>)
 800a404:	22ff      	movs	r2, #255	@ 0xff
 800a406:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a408:	7cfb      	ldrb	r3, [r7, #19]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a41e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a420:	4618      	mov	r0, r3
 800a422:	371c      	adds	r7, #28
 800a424:	46bd      	mov	sp, r7
 800a426:	bd90      	pop	{r4, r7, pc}
 800a428:	44007800 	.word	0x44007800

0800a42c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <HAL_RTC_SetDate+0x1a>
 800a442:	2302      	movs	r3, #2
 800a444:	e071      	b.n	800a52a <HAL_RTC_SetDate+0xfe>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2202      	movs	r2, #2
 800a452:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10e      	bne.n	800a47a <HAL_RTC_SetDate+0x4e>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	f003 0310 	and.w	r3, r3, #16
 800a464:	2b00      	cmp	r3, #0
 800a466:	d008      	beq.n	800a47a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	785b      	ldrb	r3, [r3, #1]
 800a46c:	f023 0310 	bic.w	r3, r3, #16
 800a470:	b2db      	uxtb	r3, r3
 800a472:	330a      	adds	r3, #10
 800a474:	b2da      	uxtb	r2, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11c      	bne.n	800a4ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	78db      	ldrb	r3, [r3, #3]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f903 	bl	800a690 <RTC_ByteToBcd2>
 800a48a:	4603      	mov	r3, r0
 800a48c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	4618      	mov	r0, r3
 800a494:	f000 f8fc 	bl	800a690 <RTC_ByteToBcd2>
 800a498:	4603      	mov	r3, r0
 800a49a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a49c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	789b      	ldrb	r3, [r3, #2]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 f8f4 	bl	800a690 <RTC_ByteToBcd2>
 800a4a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a4aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e00e      	b.n	800a4d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	78db      	ldrb	r3, [r3, #3]
 800a4be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	785b      	ldrb	r3, [r3, #1]
 800a4c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a4c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a4cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4d8:	4b16      	ldr	r3, [pc, #88]	@ (800a534 <HAL_RTC_SetDate+0x108>)
 800a4da:	22ca      	movs	r2, #202	@ 0xca
 800a4dc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4de:	4b15      	ldr	r3, [pc, #84]	@ (800a534 <HAL_RTC_SetDate+0x108>)
 800a4e0:	2253      	movs	r2, #83	@ 0x53
 800a4e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f859 	bl	800a59c <RTC_EnterInitMode>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a4ee:	7cfb      	ldrb	r3, [r7, #19]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10b      	bne.n	800a50c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a4f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a534 <HAL_RTC_SetDate+0x108>)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a4fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a500:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f886 	bl	800a614 <RTC_ExitInitMode>
 800a508:	4603      	mov	r3, r0
 800a50a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a50c:	4b09      	ldr	r3, [pc, #36]	@ (800a534 <HAL_RTC_SetDate+0x108>)
 800a50e:	22ff      	movs	r2, #255	@ 0xff
 800a510:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a512:	7cfb      	ldrb	r3, [r7, #19]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d103      	bne.n	800a520 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a528:	7cfb      	ldrb	r3, [r7, #19]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd90      	pop	{r4, r7, pc}
 800a532:	bf00      	nop
 800a534:	44007800 	.word	0x44007800

0800a538 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a540:	4b15      	ldr	r3, [pc, #84]	@ (800a598 <HAL_RTC_WaitForSynchro+0x60>)
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	4a14      	ldr	r2, [pc, #80]	@ (800a598 <HAL_RTC_WaitForSynchro+0x60>)
 800a546:	f023 0320 	bic.w	r3, r3, #32
 800a54a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a54c:	f7f7 fbb0 	bl	8001cb0 <HAL_GetTick>
 800a550:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a552:	e013      	b.n	800a57c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a554:	f7f7 fbac 	bl	8001cb0 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a562:	d90b      	bls.n	800a57c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <HAL_RTC_WaitForSynchro+0x60>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0320 	and.w	r3, r3, #32
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10c      	bne.n	800a58a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2203      	movs	r2, #3
 800a574:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e008      	b.n	800a58e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a57c:	4b06      	ldr	r3, [pc, #24]	@ (800a598 <HAL_RTC_WaitForSynchro+0x60>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f003 0320 	and.w	r3, r3, #32
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0e5      	beq.n	800a554 <HAL_RTC_WaitForSynchro+0x1c>
 800a588:	e000      	b.n	800a58c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a58a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	44007800 	.word	0x44007800

0800a59c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a5a8:	4b19      	ldr	r3, [pc, #100]	@ (800a610 <RTC_EnterInitMode+0x74>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d128      	bne.n	800a606 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a5b4:	4b16      	ldr	r3, [pc, #88]	@ (800a610 <RTC_EnterInitMode+0x74>)
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	4a15      	ldr	r2, [pc, #84]	@ (800a610 <RTC_EnterInitMode+0x74>)
 800a5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5be:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a5c0:	f7f7 fb76 	bl	8001cb0 <HAL_GetTick>
 800a5c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5c6:	e013      	b.n	800a5f0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a5c8:	f7f7 fb72 	bl	8001cb0 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5d6:	d90b      	bls.n	800a5f0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a5d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a610 <RTC_EnterInitMode+0x74>)
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10f      	bne.n	800a604 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5f0:	4b07      	ldr	r3, [pc, #28]	@ (800a610 <RTC_EnterInitMode+0x74>)
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d104      	bne.n	800a606 <RTC_EnterInitMode+0x6a>
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d1e2      	bne.n	800a5c8 <RTC_EnterInitMode+0x2c>
 800a602:	e000      	b.n	800a606 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a604:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	44007800 	.word	0x44007800

0800a614 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a620:	4b1a      	ldr	r3, [pc, #104]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	4a19      	ldr	r2, [pc, #100]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a62a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a62c:	4b17      	ldr	r3, [pc, #92]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10c      	bne.n	800a652 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff ff7d 	bl	800a538 <HAL_RTC_WaitForSynchro>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01e      	beq.n	800a682 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2203      	movs	r2, #3
 800a648:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	73fb      	strb	r3, [r7, #15]
 800a650:	e017      	b.n	800a682 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a652:	4b0e      	ldr	r3, [pc, #56]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	4a0d      	ldr	r2, [pc, #52]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a658:	f023 0320 	bic.w	r3, r3, #32
 800a65c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff ff6a 	bl	800a538 <HAL_RTC_WaitForSynchro>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d005      	beq.n	800a676 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2203      	movs	r2, #3
 800a66e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a676:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	4a04      	ldr	r2, [pc, #16]	@ (800a68c <RTC_ExitInitMode+0x78>)
 800a67c:	f043 0320 	orr.w	r3, r3, #32
 800a680:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	44007800 	.word	0x44007800

0800a690 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800a6a2:	e005      	b.n	800a6b0 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	3b0a      	subs	r3, #10
 800a6ae:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800a6b0:	7afb      	ldrb	r3, [r7, #11]
 800a6b2:	2b09      	cmp	r3, #9
 800a6b4:	d8f6      	bhi.n	800a6a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	b2db      	uxtb	r3, r3
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	4910      	ldr	r1, [pc, #64]	@ (800a724 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	490c      	ldr	r1, [pc, #48]	@ (800a728 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a728 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	6919      	ldr	r1, [r3, #16]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	041b      	lsls	r3, r3, #16
 800a70e:	430b      	orrs	r3, r1
 800a710:	4905      	ldr	r1, [pc, #20]	@ (800a728 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a712:	4313      	orrs	r3, r2
 800a714:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	44007800 	.word	0x44007800
 800a728:	44007c00 	.word	0x44007c00

0800a72c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e162      	b.n	800aa04 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a70      	ldr	r2, [pc, #448]	@ (800a904 <HAL_SPI_Init+0x1d8>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d018      	beq.n	800a77a <HAL_SPI_Init+0x4e>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a6e      	ldr	r2, [pc, #440]	@ (800a908 <HAL_SPI_Init+0x1dc>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d013      	beq.n	800a77a <HAL_SPI_Init+0x4e>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a6d      	ldr	r2, [pc, #436]	@ (800a90c <HAL_SPI_Init+0x1e0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00e      	beq.n	800a77a <HAL_SPI_Init+0x4e>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a6b      	ldr	r2, [pc, #428]	@ (800a910 <HAL_SPI_Init+0x1e4>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d009      	beq.n	800a77a <HAL_SPI_Init+0x4e>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a6a      	ldr	r2, [pc, #424]	@ (800a914 <HAL_SPI_Init+0x1e8>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d004      	beq.n	800a77a <HAL_SPI_Init+0x4e>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a68      	ldr	r2, [pc, #416]	@ (800a918 <HAL_SPI_Init+0x1ec>)
 800a776:	4293      	cmp	r3, r2
 800a778:	e000      	b.n	800a77c <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a77a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a5f      	ldr	r2, [pc, #380]	@ (800a904 <HAL_SPI_Init+0x1d8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d018      	beq.n	800a7be <HAL_SPI_Init+0x92>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a5d      	ldr	r2, [pc, #372]	@ (800a908 <HAL_SPI_Init+0x1dc>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d013      	beq.n	800a7be <HAL_SPI_Init+0x92>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a5c      	ldr	r2, [pc, #368]	@ (800a90c <HAL_SPI_Init+0x1e0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00e      	beq.n	800a7be <HAL_SPI_Init+0x92>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a5a      	ldr	r2, [pc, #360]	@ (800a910 <HAL_SPI_Init+0x1e4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d009      	beq.n	800a7be <HAL_SPI_Init+0x92>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a59      	ldr	r2, [pc, #356]	@ (800a914 <HAL_SPI_Init+0x1e8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d004      	beq.n	800a7be <HAL_SPI_Init+0x92>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a57      	ldr	r2, [pc, #348]	@ (800a918 <HAL_SPI_Init+0x1ec>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d105      	bne.n	800a7ca <HAL_SPI_Init+0x9e>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	2b0f      	cmp	r3, #15
 800a7c4:	d901      	bls.n	800a7ca <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e11c      	b.n	800aa04 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f91e 	bl	800aa0c <SPI_GetPacketSize>
 800a7d0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a4b      	ldr	r2, [pc, #300]	@ (800a904 <HAL_SPI_Init+0x1d8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d018      	beq.n	800a80e <HAL_SPI_Init+0xe2>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a49      	ldr	r2, [pc, #292]	@ (800a908 <HAL_SPI_Init+0x1dc>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d013      	beq.n	800a80e <HAL_SPI_Init+0xe2>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a48      	ldr	r2, [pc, #288]	@ (800a90c <HAL_SPI_Init+0x1e0>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d00e      	beq.n	800a80e <HAL_SPI_Init+0xe2>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a46      	ldr	r2, [pc, #280]	@ (800a910 <HAL_SPI_Init+0x1e4>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d009      	beq.n	800a80e <HAL_SPI_Init+0xe2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a45      	ldr	r2, [pc, #276]	@ (800a914 <HAL_SPI_Init+0x1e8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d004      	beq.n	800a80e <HAL_SPI_Init+0xe2>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a43      	ldr	r2, [pc, #268]	@ (800a918 <HAL_SPI_Init+0x1ec>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d102      	bne.n	800a814 <HAL_SPI_Init+0xe8>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b08      	cmp	r3, #8
 800a812:	d820      	bhi.n	800a856 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a818:	4a40      	ldr	r2, [pc, #256]	@ (800a91c <HAL_SPI_Init+0x1f0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d018      	beq.n	800a850 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a3f      	ldr	r2, [pc, #252]	@ (800a920 <HAL_SPI_Init+0x1f4>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d013      	beq.n	800a850 <HAL_SPI_Init+0x124>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a3d      	ldr	r2, [pc, #244]	@ (800a924 <HAL_SPI_Init+0x1f8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00e      	beq.n	800a850 <HAL_SPI_Init+0x124>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a3c      	ldr	r2, [pc, #240]	@ (800a928 <HAL_SPI_Init+0x1fc>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d009      	beq.n	800a850 <HAL_SPI_Init+0x124>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a3a      	ldr	r2, [pc, #232]	@ (800a92c <HAL_SPI_Init+0x200>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d004      	beq.n	800a850 <HAL_SPI_Init+0x124>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a39      	ldr	r2, [pc, #228]	@ (800a930 <HAL_SPI_Init+0x204>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d104      	bne.n	800a85a <HAL_SPI_Init+0x12e>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b10      	cmp	r3, #16
 800a854:	d901      	bls.n	800a85a <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e0d4      	b.n	800aa04 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d106      	bne.n	800a874 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7f6 fc44 	bl	80010fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 0201 	bic.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a896:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8a0:	d119      	bne.n	800a8d6 <HAL_SPI_Init+0x1aa>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8aa:	d103      	bne.n	800a8b4 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d008      	beq.n	800a8c6 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10c      	bne.n	800a8d6 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a8c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8c4:	d107      	bne.n	800a8d6 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a8d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d028      	beq.n	800a934 <HAL_SPI_Init+0x208>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	2b06      	cmp	r3, #6
 800a8e8:	d924      	bls.n	800a934 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e020      	b.n	800a944 <HAL_SPI_Init+0x218>
 800a902:	bf00      	nop
 800a904:	40014c00 	.word	0x40014c00
 800a908:	50014c00 	.word	0x50014c00
 800a90c:	44002000 	.word	0x44002000
 800a910:	54002000 	.word	0x54002000
 800a914:	40015000 	.word	0x40015000
 800a918:	50015000 	.word	0x50015000
 800a91c:	40013000 	.word	0x40013000
 800a920:	50013000 	.word	0x50013000
 800a924:	40003800 	.word	0x40003800
 800a928:	50003800 	.word	0x50003800
 800a92c:	40003c00 	.word	0x40003c00
 800a930:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a942:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94c:	431a      	orrs	r2, r3
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	431a      	orrs	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a956:	ea42 0103 	orr.w	r1, r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96e:	431a      	orrs	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a974:	431a      	orrs	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	431a      	orrs	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	431a      	orrs	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
 800a98c:	431a      	orrs	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	431a      	orrs	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a998:	431a      	orrs	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	431a      	orrs	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9a4:	431a      	orrs	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9b0:	ea42 0103 	orr.w	r1, r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f022 0201 	bic.w	r2, r2, #1
 800a9ce:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa18:	095b      	lsrs	r3, r3, #5
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	3307      	adds	r3, #7
 800aa2a:	08db      	lsrs	r3, r3, #3
 800aa2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e042      	b.n	800aada <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f6 fc04 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2224      	movs	r2, #36	@ 0x24
 800aa70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa17 	bl	800aec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f826 	bl	800aae4 <UART_SetConfig>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e01b      	b.n	800aada <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aab0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aac0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f042 0201 	orr.w	r2, r2, #1
 800aad0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa96 	bl	800b004 <UART_CheckIdleState>
 800aad8:	4603      	mov	r3, r0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aae8:	b094      	sub	sp, #80	@ 0x50
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	4b78      	ldr	r3, [pc, #480]	@ (800acdc <UART_SetConfig+0x1f8>)
 800aafa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	431a      	orrs	r2, r3
 800ab06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4971      	ldr	r1, [pc, #452]	@ (800ace0 <UART_SetConfig+0x1fc>)
 800ab1c:	4019      	ands	r1, r3
 800ab1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab24:	430b      	orrs	r3, r1
 800ab26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	68d9      	ldr	r1, [r3, #12]
 800ab36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	ea40 0301 	orr.w	r3, r0, r1
 800ab3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b64      	ldr	r3, [pc, #400]	@ (800acdc <UART_SetConfig+0x1f8>)
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d009      	beq.n	800ab64 <UART_SetConfig+0x80>
 800ab50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	4b63      	ldr	r3, [pc, #396]	@ (800ace4 <UART_SetConfig+0x200>)
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d004      	beq.n	800ab64 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5c:	6a1a      	ldr	r2, [r3, #32]
 800ab5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab60:	4313      	orrs	r3, r2
 800ab62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ab6e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ab72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab82:	f023 000f 	bic.w	r0, r3, #15
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ab8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	ea40 0301 	orr.w	r3, r0, r1
 800ab92:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	4b53      	ldr	r3, [pc, #332]	@ (800ace8 <UART_SetConfig+0x204>)
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d102      	bne.n	800aba4 <UART_SetConfig+0xc0>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba2:	e066      	b.n	800ac72 <UART_SetConfig+0x18e>
 800aba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	4b50      	ldr	r3, [pc, #320]	@ (800acec <UART_SetConfig+0x208>)
 800abaa:	429a      	cmp	r2, r3
 800abac:	d102      	bne.n	800abb4 <UART_SetConfig+0xd0>
 800abae:	2302      	movs	r3, #2
 800abb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb2:	e05e      	b.n	800ac72 <UART_SetConfig+0x18e>
 800abb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	4b4d      	ldr	r3, [pc, #308]	@ (800acf0 <UART_SetConfig+0x20c>)
 800abba:	429a      	cmp	r2, r3
 800abbc:	d102      	bne.n	800abc4 <UART_SetConfig+0xe0>
 800abbe:	2304      	movs	r3, #4
 800abc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abc2:	e056      	b.n	800ac72 <UART_SetConfig+0x18e>
 800abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4b4a      	ldr	r3, [pc, #296]	@ (800acf4 <UART_SetConfig+0x210>)
 800abca:	429a      	cmp	r2, r3
 800abcc:	d102      	bne.n	800abd4 <UART_SetConfig+0xf0>
 800abce:	2308      	movs	r3, #8
 800abd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd2:	e04e      	b.n	800ac72 <UART_SetConfig+0x18e>
 800abd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	4b47      	ldr	r3, [pc, #284]	@ (800acf8 <UART_SetConfig+0x214>)
 800abda:	429a      	cmp	r2, r3
 800abdc:	d102      	bne.n	800abe4 <UART_SetConfig+0x100>
 800abde:	2310      	movs	r3, #16
 800abe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abe2:	e046      	b.n	800ac72 <UART_SetConfig+0x18e>
 800abe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	4b44      	ldr	r3, [pc, #272]	@ (800acfc <UART_SetConfig+0x218>)
 800abea:	429a      	cmp	r2, r3
 800abec:	d102      	bne.n	800abf4 <UART_SetConfig+0x110>
 800abee:	2320      	movs	r3, #32
 800abf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abf2:	e03e      	b.n	800ac72 <UART_SetConfig+0x18e>
 800abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4b41      	ldr	r3, [pc, #260]	@ (800ad00 <UART_SetConfig+0x21c>)
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d102      	bne.n	800ac04 <UART_SetConfig+0x120>
 800abfe:	2340      	movs	r3, #64	@ 0x40
 800ac00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac02:	e036      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	4b3e      	ldr	r3, [pc, #248]	@ (800ad04 <UART_SetConfig+0x220>)
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d102      	bne.n	800ac14 <UART_SetConfig+0x130>
 800ac0e:	2380      	movs	r3, #128	@ 0x80
 800ac10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac12:	e02e      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	4b3b      	ldr	r3, [pc, #236]	@ (800ad08 <UART_SetConfig+0x224>)
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d103      	bne.n	800ac26 <UART_SetConfig+0x142>
 800ac1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac24:	e025      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	4b38      	ldr	r3, [pc, #224]	@ (800ad0c <UART_SetConfig+0x228>)
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d103      	bne.n	800ac38 <UART_SetConfig+0x154>
 800ac30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac36:	e01c      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	4b34      	ldr	r3, [pc, #208]	@ (800ad10 <UART_SetConfig+0x22c>)
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d103      	bne.n	800ac4a <UART_SetConfig+0x166>
 800ac42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac48:	e013      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	4b31      	ldr	r3, [pc, #196]	@ (800ad14 <UART_SetConfig+0x230>)
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d103      	bne.n	800ac5c <UART_SetConfig+0x178>
 800ac54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac5a:	e00a      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	4b1e      	ldr	r3, [pc, #120]	@ (800acdc <UART_SetConfig+0x1f8>)
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d103      	bne.n	800ac6e <UART_SetConfig+0x18a>
 800ac66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac6c:	e001      	b.n	800ac72 <UART_SetConfig+0x18e>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	4b19      	ldr	r3, [pc, #100]	@ (800acdc <UART_SetConfig+0x1f8>)
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d005      	beq.n	800ac88 <UART_SetConfig+0x1a4>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b18      	ldr	r3, [pc, #96]	@ (800ace4 <UART_SetConfig+0x200>)
 800ac82:	429a      	cmp	r2, r3
 800ac84:	f040 8094 	bne.w	800adb0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	623b      	str	r3, [r7, #32]
 800ac8e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ac90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ac94:	f7fc fd8e 	bl	80077b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac98:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80f7 	beq.w	800ae90 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca6:	4a1c      	ldr	r2, [pc, #112]	@ (800ad18 <UART_SetConfig+0x234>)
 800aca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acac:	461a      	mov	r2, r3
 800acae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	4613      	mov	r3, r2
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d305      	bcc.n	800acd2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800accc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acce:	429a      	cmp	r2, r3
 800acd0:	d924      	bls.n	800ad1c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800acd8:	e069      	b.n	800adae <UART_SetConfig+0x2ca>
 800acda:	bf00      	nop
 800acdc:	44002400 	.word	0x44002400
 800ace0:	cfff69f3 	.word	0xcfff69f3
 800ace4:	54002400 	.word	0x54002400
 800ace8:	40013800 	.word	0x40013800
 800acec:	40004400 	.word	0x40004400
 800acf0:	40004800 	.word	0x40004800
 800acf4:	40004c00 	.word	0x40004c00
 800acf8:	40005000 	.word	0x40005000
 800acfc:	40006400 	.word	0x40006400
 800ad00:	40007800 	.word	0x40007800
 800ad04:	40007c00 	.word	0x40007c00
 800ad08:	40008000 	.word	0x40008000
 800ad0c:	40006800 	.word	0x40006800
 800ad10:	40006c00 	.word	0x40006c00
 800ad14:	40008400 	.word	0x40008400
 800ad18:	0801fc00 	.word	0x0801fc00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad1e:	2200      	movs	r2, #0
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	61fa      	str	r2, [r7, #28]
 800ad24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad28:	4a64      	ldr	r2, [pc, #400]	@ (800aebc <UART_SetConfig+0x3d8>)
 800ad2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	2200      	movs	r2, #0
 800ad32:	613b      	str	r3, [r7, #16]
 800ad34:	617a      	str	r2, [r7, #20]
 800ad36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ad3e:	f7f5 faad 	bl	800029c <__aeabi_uldivmod>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4610      	mov	r0, r2
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	020b      	lsls	r3, r1, #8
 800ad54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad58:	0202      	lsls	r2, r0, #8
 800ad5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad5c:	6849      	ldr	r1, [r1, #4]
 800ad5e:	0849      	lsrs	r1, r1, #1
 800ad60:	2000      	movs	r0, #0
 800ad62:	460c      	mov	r4, r1
 800ad64:	4605      	mov	r5, r0
 800ad66:	eb12 0804 	adds.w	r8, r2, r4
 800ad6a:	eb43 0905 	adc.w	r9, r3, r5
 800ad6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	60fa      	str	r2, [r7, #12]
 800ad78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fa8c 	bl	800029c <__aeabi_uldivmod>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4613      	mov	r3, r2
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad92:	d308      	bcc.n	800ada6 <UART_SetConfig+0x2c2>
 800ad94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad9a:	d204      	bcs.n	800ada6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800ad9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ada2:	60da      	str	r2, [r3, #12]
 800ada4:	e003      	b.n	800adae <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800adac:	e070      	b.n	800ae90 <UART_SetConfig+0x3ac>
 800adae:	e06f      	b.n	800ae90 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adb8:	d13c      	bne.n	800ae34 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800adba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adbc:	2200      	movs	r2, #0
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	607a      	str	r2, [r7, #4]
 800adc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adc6:	f7fc fcf5 	bl	80077b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800adca:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adce:	2b00      	cmp	r3, #0
 800add0:	d05e      	beq.n	800ae90 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add6:	4a39      	ldr	r2, [pc, #228]	@ (800aebc <UART_SetConfig+0x3d8>)
 800add8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800addc:	461a      	mov	r2, r3
 800adde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ade0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade4:	005a      	lsls	r2, r3, #1
 800ade6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	085b      	lsrs	r3, r3, #1
 800adec:	441a      	add	r2, r3
 800adee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfa:	2b0f      	cmp	r3, #15
 800adfc:	d916      	bls.n	800ae2c <UART_SetConfig+0x348>
 800adfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae04:	d212      	bcs.n	800ae2c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	f023 030f 	bic.w	r3, r3, #15
 800ae0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ae22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ae28:	60da      	str	r2, [r3, #12]
 800ae2a:	e031      	b.n	800ae90 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ae32:	e02d      	b.n	800ae90 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ae34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae36:	2200      	movs	r2, #0
 800ae38:	469a      	mov	sl, r3
 800ae3a:	4693      	mov	fp, r2
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	4659      	mov	r1, fp
 800ae40:	f7fc fcb8 	bl	80077b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ae44:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ae46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d021      	beq.n	800ae90 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae50:	4a1a      	ldr	r2, [pc, #104]	@ (800aebc <UART_SetConfig+0x3d8>)
 800ae52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	441a      	add	r2, r3
 800ae66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d909      	bls.n	800ae8a <UART_SetConfig+0x3a6>
 800ae76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae7c:	d205      	bcs.n	800ae8a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60da      	str	r2, [r3, #12]
 800ae88:	e002      	b.n	800ae90 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae92:	2201      	movs	r2, #1
 800ae94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea2:	2200      	movs	r2, #0
 800aea4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea8:	2200      	movs	r2, #0
 800aeaa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aeac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3750      	adds	r7, #80	@ 0x50
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aeba:	bf00      	nop
 800aebc:	0801fc00 	.word	0x0801fc00

0800aec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00a      	beq.n	800aeea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	430a      	orrs	r2, r1
 800aee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	430a      	orrs	r2, r1
 800af0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af10:	f003 0302 	and.w	r3, r3, #2
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	f003 0310 	and.w	r3, r3, #16
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01a      	beq.n	800afd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afbe:	d10a      	bne.n	800afd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	605a      	str	r2, [r3, #4]
  }
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b098      	sub	sp, #96	@ 0x60
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b014:	f7f6 fe4c 	bl	8001cb0 <HAL_GetTick>
 800b018:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0308 	and.w	r3, r3, #8
 800b024:	2b08      	cmp	r3, #8
 800b026:	d12f      	bne.n	800b088 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b030:	2200      	movs	r2, #0
 800b032:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f88e 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d022      	beq.n	800b088 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	e853 3f00 	ldrex	r3, [r3]
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b056:	653b      	str	r3, [r7, #80]	@ 0x50
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b060:	647b      	str	r3, [r7, #68]	@ 0x44
 800b062:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e6      	bne.n	800b042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2220      	movs	r2, #32
 800b078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e063      	b.n	800b150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0304 	and.w	r3, r3, #4
 800b092:	2b04      	cmp	r3, #4
 800b094:	d149      	bne.n	800b12a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b096:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f857 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d03c      	beq.n	800b12a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e6      	bne.n	800b0b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f023 0301 	bic.w	r3, r3, #1
 800b0f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3308      	adds	r3, #8
 800b100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b102:	61fa      	str	r2, [r7, #28]
 800b104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	69b9      	ldr	r1, [r7, #24]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	617b      	str	r3, [r7, #20]
   return(result);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e5      	bne.n	800b0e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2220      	movs	r2, #32
 800b11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e012      	b.n	800b150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3758      	adds	r7, #88	@ 0x58
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b168:	e04f      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b170:	d04b      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b172:	f7f6 fd9d 	bl	8001cb0 <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d302      	bcc.n	800b188 <UART_WaitOnFlagUntilTimeout+0x30>
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e04e      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0304 	and.w	r3, r3, #4
 800b196:	2b00      	cmp	r3, #0
 800b198:	d037      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b80      	cmp	r3, #128	@ 0x80
 800b19e:	d034      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b40      	cmp	r3, #64	@ 0x40
 800b1a4:	d031      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	f003 0308 	and.w	r3, r3, #8
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d110      	bne.n	800b1d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 f838 	bl	800b232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e029      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1e4:	d111      	bne.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 f81e 	bl	800b232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e00f      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69da      	ldr	r2, [r3, #28]
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	4013      	ands	r3, r2
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	429a      	cmp	r2, r3
 800b218:	bf0c      	ite	eq
 800b21a:	2301      	moveq	r3, #1
 800b21c:	2300      	movne	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	461a      	mov	r2, r3
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	429a      	cmp	r2, r3
 800b226:	d0a0      	beq.n	800b16a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b232:	b480      	push	{r7}
 800b234:	b095      	sub	sp, #84	@ 0x54
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b24e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	461a      	mov	r2, r3
 800b256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b258:	643b      	str	r3, [r7, #64]	@ 0x40
 800b25a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b25e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b260:	e841 2300 	strex	r3, r2, [r1]
 800b264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1e6      	bne.n	800b23a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	e853 3f00 	ldrex	r3, [r3]
 800b27a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b282:	f023 0301 	bic.w	r3, r3, #1
 800b286:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3308      	adds	r3, #8
 800b28e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b290:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b298:	e841 2300 	strex	r3, r2, [r1]
 800b29c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1e3      	bne.n	800b26c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d118      	bne.n	800b2de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f023 0310 	bic.w	r3, r3, #16
 800b2c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2ca:	61bb      	str	r3, [r7, #24]
 800b2cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	6979      	ldr	r1, [r7, #20]
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e6      	bne.n	800b2ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2220      	movs	r2, #32
 800b2e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b2f2:	bf00      	nop
 800b2f4:	3754      	adds	r7, #84	@ 0x54
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d101      	bne.n	800b314 <HAL_UARTEx_DisableFifoMode+0x16>
 800b310:	2302      	movs	r3, #2
 800b312:	e027      	b.n	800b364 <HAL_UARTEx_DisableFifoMode+0x66>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2224      	movs	r2, #36	@ 0x24
 800b320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f022 0201 	bic.w	r2, r2, #1
 800b33a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b342:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2220      	movs	r2, #32
 800b356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b380:	2b01      	cmp	r3, #1
 800b382:	d101      	bne.n	800b388 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b384:	2302      	movs	r3, #2
 800b386:	e02d      	b.n	800b3e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2224      	movs	r2, #36	@ 0x24
 800b394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f022 0201 	bic.w	r2, r2, #1
 800b3ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f84f 	bl	800b468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d101      	bne.n	800b404 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b400:	2302      	movs	r3, #2
 800b402:	e02d      	b.n	800b460 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2224      	movs	r2, #36	@ 0x24
 800b410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f022 0201 	bic.w	r2, r2, #1
 800b42a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	430a      	orrs	r2, r1
 800b43e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f811 	bl	800b468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b474:	2b00      	cmp	r3, #0
 800b476:	d108      	bne.n	800b48a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b488:	e031      	b.n	800b4ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b48a:	2308      	movs	r3, #8
 800b48c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b48e:	2308      	movs	r3, #8
 800b490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	0e5b      	lsrs	r3, r3, #25
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	f003 0307 	and.w	r3, r3, #7
 800b4a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	0f5b      	lsrs	r3, r3, #29
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	f003 0307 	and.w	r3, r3, #7
 800b4b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	7b3a      	ldrb	r2, [r7, #12]
 800b4b6:	4911      	ldr	r1, [pc, #68]	@ (800b4fc <UARTEx_SetNbDataToProcess+0x94>)
 800b4b8:	5c8a      	ldrb	r2, [r1, r2]
 800b4ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4be:	7b3a      	ldrb	r2, [r7, #12]
 800b4c0:	490f      	ldr	r1, [pc, #60]	@ (800b500 <UARTEx_SetNbDataToProcess+0x98>)
 800b4c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
 800b4d2:	7b7a      	ldrb	r2, [r7, #13]
 800b4d4:	4909      	ldr	r1, [pc, #36]	@ (800b4fc <UARTEx_SetNbDataToProcess+0x94>)
 800b4d6:	5c8a      	ldrb	r2, [r1, r2]
 800b4d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4dc:	7b7a      	ldrb	r2, [r7, #13]
 800b4de:	4908      	ldr	r1, [pc, #32]	@ (800b500 <UARTEx_SetNbDataToProcess+0x98>)
 800b4e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b4ee:	bf00      	nop
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	0801fc18 	.word	0x0801fc18
 800b500:	0801fc20 	.word	0x0801fc20

0800b504 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b510:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51c:	f043 0201 	orr.w	r2, r3, #1
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b532:	b084      	sub	sp, #16
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	f107 001c 	add.w	r0, r7, #28
 800b540:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e008      	b.n	800b560 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff ffd8 	bl	800b504 <USB_CoreReset>
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b56a:	b004      	add	sp, #16
 800b56c:	4770      	bx	lr

0800b56e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b56e:	b480      	push	{r7}
 800b570:	b085      	sub	sp, #20
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b57c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b580:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b59e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b5a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	43db      	mvns	r3, r3
 800b5ac:	401a      	ands	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b5cc:	78fb      	ldrb	r3, [r7, #3]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d106      	bne.n	800b5e0 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	641a      	str	r2, [r3, #64]	@ 0x40
 800b5de:	e00b      	b.n	800b5f8 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b5e0:	78fb      	ldrb	r3, [r7, #3]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d106      	bne.n	800b5f4 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	641a      	str	r2, [r3, #64]	@ 0x40
 800b5f2:	e001      	b.n	800b5f8 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e000      	b.n	800b5fa <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b606:	b084      	sub	sp, #16
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	f107 001c 	add.w	r0, r7, #28
 800b614:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b622:	f023 0201 	bic.w	r2, r3, #1
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b62a:	2100      	movs	r1, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7ff ffc7 	bl	800b5c0 <USB_SetCurrentMode>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b648:	b004      	add	sp, #16
 800b64a:	4770      	bx	lr

0800b64c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b09f      	sub	sp, #124	@ 0x7c
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	4ba0      	ldr	r3, [pc, #640]	@ (800b8ec <USB_ActivateEndpoint+0x2a0>)
 800b66a:	4013      	ands	r3, r2
 800b66c:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	78db      	ldrb	r3, [r3, #3]
 800b672:	2b03      	cmp	r3, #3
 800b674:	d819      	bhi.n	800b6aa <USB_ActivateEndpoint+0x5e>
 800b676:	a201      	add	r2, pc, #4	@ (adr r2, 800b67c <USB_ActivateEndpoint+0x30>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b68d 	.word	0x0800b68d
 800b680:	0800b6a1 	.word	0x0800b6a1
 800b684:	0800b6b3 	.word	0x0800b6b3
 800b688:	0800b697 	.word	0x0800b697
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b68c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b68e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b692:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b694:	e00e      	b.n	800b6b4 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b698:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b69c:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b69e:	e009      	b.n	800b6b4 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b6a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b6a6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b6a8:	e004      	b.n	800b6b4 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800b6b0:	e000      	b.n	800b6b4 <USB_ActivateEndpoint+0x68>
      break;
 800b6b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	441a      	add	r2, r3
 800b6be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6c8:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	4b86      	ldr	r3, [pc, #536]	@ (800b8f0 <USB_ActivateEndpoint+0x2a4>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	7812      	ldrb	r2, [r2, #0]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	441a      	add	r2, r3
 800b6ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6f6:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	7b1b      	ldrb	r3, [r3, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 8177 	bne.w	800b9f0 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d079      	beq.n	800b7fe <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b714:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b724:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b728:	0c12      	lsrs	r2, r2, #16
 800b72a:	0412      	lsls	r2, r2, #16
 800b72c:	601a      	str	r2, [r3, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b738:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b73c:	6819      	ldr	r1, [r3, #0]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	88db      	ldrh	r3, [r3, #6]
 800b742:	089b      	lsrs	r3, r3, #2
 800b744:	b29b      	uxth	r3, r3
 800b746:	009a      	lsls	r2, r3, #2
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b756:	430a      	orrs	r2, r1
 800b758:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	61bb      	str	r3, [r7, #24]
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d013      	beq.n	800b79a <USB_ActivateEndpoint+0x14e>
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b5c      	ldr	r3, [pc, #368]	@ (800b8f0 <USB_ActivateEndpoint+0x2a4>)
 800b780:	4013      	ands	r3, r2
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	441a      	add	r2, r3
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b794:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b798:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	78db      	ldrb	r3, [r3, #3]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d018      	beq.n	800b7d4 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	4b51      	ldr	r3, [pc, #324]	@ (800b8f4 <USB_ActivateEndpoint+0x2a8>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f083 0320 	eor.w	r3, r3, #32
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	441a      	add	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	e28c      	b.n	800bcee <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4b44      	ldr	r3, [pc, #272]	@ (800b8f4 <USB_ActivateEndpoint+0x2a8>)
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	441a      	add	r2, r3
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7fa:	6013      	str	r3, [r2, #0]
 800b7fc:	e277      	b.n	800bcee <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b818:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b81c:	0c12      	lsrs	r2, r2, #16
 800b81e:	0412      	lsls	r2, r2, #16
 800b820:	605a      	str	r2, [r3, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b82c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b830:	6859      	ldr	r1, [r3, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	88db      	ldrh	r3, [r3, #6]
 800b836:	089b      	lsrs	r3, r3, #2
 800b838:	b29b      	uxth	r3, r3
 800b83a:	009a      	lsls	r2, r3, #2
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b846:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b84a:	430a      	orrs	r2, r1
 800b84c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b858:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	00db      	lsls	r3, r3, #3
 800b864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b868:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b86c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b870:	605a      	str	r2, [r3, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d112      	bne.n	800b8a0 <USB_ActivateEndpoint+0x254>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b884:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b894:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b898:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b89c:	605a      	str	r2, [r3, #4]
 800b89e:	e04d      	b.n	800b93c <USB_ActivateEndpoint+0x2f0>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8a6:	d827      	bhi.n	800b8f8 <USB_ActivateEndpoint+0x2ac>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	085b      	lsrs	r3, r3, #1
 800b8ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <USB_ActivateEndpoint+0x276>
 800b8bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8be:	3301      	adds	r3, #1
 800b8c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8d0:	6859      	ldr	r1, [r3, #4]
 800b8d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d4:	069a      	lsls	r2, r3, #26
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	605a      	str	r2, [r3, #4]
 800b8e8:	e028      	b.n	800b93c <USB_ActivateEndpoint+0x2f0>
 800b8ea:	bf00      	nop
 800b8ec:	07ff898f 	.word	0x07ff898f
 800b8f0:	07ff8f8f 	.word	0x07ff8f8f
 800b8f4:	07ff8fbf 	.word	0x07ff8fbf
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	095b      	lsrs	r3, r3, #5
 800b8fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	f003 031f 	and.w	r3, r3, #31
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <USB_ActivateEndpoint+0x2c6>
 800b90c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b90e:	3b01      	subs	r3, #1
 800b910:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b91c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b924:	069b      	lsls	r3, r3, #26
 800b926:	431a      	orrs	r2, r3
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b932:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b936:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b93a:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4413      	add	r3, r2
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d013      	beq.n	800b97c <USB_ActivateEndpoint+0x330>
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	4b9c      	ldr	r3, [pc, #624]	@ (800bbd4 <USB_ActivateEndpoint+0x588>)
 800b962:	4013      	ands	r3, r2
 800b964:	627b      	str	r3, [r7, #36]	@ 0x24
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	441a      	add	r2, r3
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b97a:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d11c      	bne.n	800b9be <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	4b91      	ldr	r3, [pc, #580]	@ (800bbd8 <USB_ActivateEndpoint+0x58c>)
 800b992:	4013      	ands	r3, r2
 800b994:	61fb      	str	r3, [r7, #28]
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b99c:	61fb      	str	r3, [r7, #28]
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9a4:	61fb      	str	r3, [r7, #28]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	441a      	add	r2, r3
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	e197      	b.n	800bcee <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	4b83      	ldr	r3, [pc, #524]	@ (800bbd8 <USB_ActivateEndpoint+0x58c>)
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	623b      	str	r3, [r7, #32]
 800b9d0:	6a3b      	ldr	r3, [r7, #32]
 800b9d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9d6:	623b      	str	r3, [r7, #32]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	441a      	add	r2, r3
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	e17e      	b.n	800bcee <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	78db      	ldrb	r3, [r3, #3]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d114      	bne.n	800ba22 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4413      	add	r3, r2
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	4b73      	ldr	r3, [pc, #460]	@ (800bbd4 <USB_ActivateEndpoint+0x588>)
 800ba06:	4013      	ands	r3, r2
 800ba08:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	441a      	add	r2, r3
 800ba14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ba1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	e013      	b.n	800ba4a <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	4b6b      	ldr	r3, [pc, #428]	@ (800bbdc <USB_ActivateEndpoint+0x590>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	441a      	add	r2, r3
 800ba3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba48:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba68:	0c12      	lsrs	r2, r2, #16
 800ba6a:	0412      	lsls	r2, r2, #16
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba7c:	6819      	ldr	r1, [r3, #0]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	891b      	ldrh	r3, [r3, #8]
 800ba82:	089b      	lsrs	r3, r3, #2
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	009a      	lsls	r2, r3, #2
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba96:	430a      	orrs	r2, r1
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800baa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bab4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bab8:	0c12      	lsrs	r2, r2, #16
 800baba:	0412      	lsls	r2, r2, #16
 800babc:	605a      	str	r2, [r3, #4]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bac8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bacc:	6859      	ldr	r1, [r3, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	895b      	ldrh	r3, [r3, #10]
 800bad2:	089b      	lsrs	r3, r3, #2
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	009a      	lsls	r2, r3, #2
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bae2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bae6:	430a      	orrs	r2, r1
 800bae8:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d178      	bne.n	800bbe4 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d013      	beq.n	800bb32 <USB_ActivateEndpoint+0x4e6>
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b2f      	ldr	r3, [pc, #188]	@ (800bbd4 <USB_ActivateEndpoint+0x588>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	441a      	add	r2, r3
 800bb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb30:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d013      	beq.n	800bb72 <USB_ActivateEndpoint+0x526>
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b1f      	ldr	r3, [pc, #124]	@ (800bbd4 <USB_ActivateEndpoint+0x588>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	441a      	add	r2, r3
 800bb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb70:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	4b16      	ldr	r3, [pc, #88]	@ (800bbd8 <USB_ActivateEndpoint+0x58c>)
 800bb80:	4013      	ands	r3, r2
 800bb82:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bb8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bb92:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	441a      	add	r2, r3
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bba8:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <USB_ActivateEndpoint+0x594>)
 800bbb8:	4013      	ands	r3, r2
 800bbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	441a      	add	r2, r3
 800bbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	e08c      	b.n	800bcee <USB_ActivateEndpoint+0x6a2>
 800bbd4:	07ff8f8f 	.word	0x07ff8f8f
 800bbd8:	07ffbf8f 	.word	0x07ffbf8f
 800bbdc:	07ff8e8f 	.word	0x07ff8e8f
 800bbe0:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d013      	beq.n	800bc24 <USB_ActivateEndpoint+0x5d8>
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	4b3d      	ldr	r3, [pc, #244]	@ (800bd00 <USB_ActivateEndpoint+0x6b4>)
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	441a      	add	r2, r3
 800bc18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc22:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d013      	beq.n	800bc64 <USB_ActivateEndpoint+0x618>
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	4b2d      	ldr	r3, [pc, #180]	@ (800bd00 <USB_ActivateEndpoint+0x6b4>)
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	441a      	add	r2, r3
 800bc58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	78db      	ldrb	r3, [r3, #3]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d018      	beq.n	800bc9e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	4b22      	ldr	r3, [pc, #136]	@ (800bd04 <USB_ActivateEndpoint+0x6b8>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc80:	f083 0320 	eor.w	r3, r3, #32
 800bc84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	441a      	add	r2, r3
 800bc90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc9a:	6013      	str	r3, [r2, #0]
 800bc9c:	e013      	b.n	800bcc6 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4b16      	ldr	r3, [pc, #88]	@ (800bd04 <USB_ActivateEndpoint+0x6b8>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	441a      	add	r2, r3
 800bcba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc4:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd08 <USB_ActivateEndpoint+0x6bc>)
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	441a      	add	r2, r3
 800bce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcec:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bcee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	377c      	adds	r7, #124	@ 0x7c
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	07ff8f8f 	.word	0x07ff8f8f
 800bd04:	07ff8fbf 	.word	0x07ff8fbf
 800bd08:	07ffbf8f 	.word	0x07ffbf8f

0800bd0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b097      	sub	sp, #92	@ 0x5c
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	7b1b      	ldrb	r3, [r3, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d16d      	bne.n	800bdfa <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	785b      	ldrb	r3, [r3, #1]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d034      	beq.n	800bd90 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d013      	beq.n	800bd66 <USB_DeactivateEndpoint+0x5a>
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	4b6d      	ldr	r3, [pc, #436]	@ (800bf00 <USB_DeactivateEndpoint+0x1f4>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	441a      	add	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd64:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b64      	ldr	r3, [pc, #400]	@ (800bf04 <USB_DeactivateEndpoint+0x1f8>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	441a      	add	r2, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	e139      	b.n	800c004 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	61fb      	str	r3, [r7, #28]
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d013      	beq.n	800bdd0 <USB_DeactivateEndpoint+0xc4>
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	4b52      	ldr	r3, [pc, #328]	@ (800bf00 <USB_DeactivateEndpoint+0x1f4>)
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	441a      	add	r2, r3
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdce:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	4b4a      	ldr	r3, [pc, #296]	@ (800bf08 <USB_DeactivateEndpoint+0x1fc>)
 800bdde:	4013      	ands	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	441a      	add	r2, r3
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	e104      	b.n	800c004 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f040 8084 	bne.w	800bf0c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d013      	beq.n	800be44 <USB_DeactivateEndpoint+0x138>
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	4b35      	ldr	r3, [pc, #212]	@ (800bf00 <USB_DeactivateEndpoint+0x1f4>)
 800be2a:	4013      	ands	r3, r2
 800be2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	441a      	add	r2, r3
 800be38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be42:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	633b      	str	r3, [r7, #48]	@ 0x30
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d013      	beq.n	800be84 <USB_DeactivateEndpoint+0x178>
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	4b25      	ldr	r3, [pc, #148]	@ (800bf00 <USB_DeactivateEndpoint+0x1f4>)
 800be6a:	4013      	ands	r3, r2
 800be6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	441a      	add	r2, r3
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be82:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	4b1b      	ldr	r3, [pc, #108]	@ (800bf00 <USB_DeactivateEndpoint+0x1f4>)
 800be92:	4013      	ands	r3, r2
 800be94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	441a      	add	r2, r3
 800bea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800beaa:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	4b13      	ldr	r3, [pc, #76]	@ (800bf08 <USB_DeactivateEndpoint+0x1fc>)
 800beba:	4013      	ands	r3, r2
 800bebc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	441a      	add	r2, r3
 800bec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bed2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	4b08      	ldr	r3, [pc, #32]	@ (800bf04 <USB_DeactivateEndpoint+0x1f8>)
 800bee2:	4013      	ands	r3, r2
 800bee4:	623b      	str	r3, [r7, #32]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	441a      	add	r2, r3
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	e082      	b.n	800c004 <USB_DeactivateEndpoint+0x2f8>
 800befe:	bf00      	nop
 800bf00:	07ff8f8f 	.word	0x07ff8f8f
 800bf04:	07ff8fbf 	.word	0x07ff8fbf
 800bf08:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d013      	beq.n	800bf4c <USB_DeactivateEndpoint+0x240>
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	4b38      	ldr	r3, [pc, #224]	@ (800c014 <USB_DeactivateEndpoint+0x308>)
 800bf32:	4013      	ands	r3, r2
 800bf34:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	441a      	add	r2, r3
 800bf40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf4a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d013      	beq.n	800bf8c <USB_DeactivateEndpoint+0x280>
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	4b28      	ldr	r3, [pc, #160]	@ (800c014 <USB_DeactivateEndpoint+0x308>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	441a      	add	r2, r3
 800bf80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf8a:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	4b1e      	ldr	r3, [pc, #120]	@ (800c014 <USB_DeactivateEndpoint+0x308>)
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	441a      	add	r2, r3
 800bfa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	4b15      	ldr	r3, [pc, #84]	@ (800c018 <USB_DeactivateEndpoint+0x30c>)
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	441a      	add	r2, r3
 800bfd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	4b0c      	ldr	r3, [pc, #48]	@ (800c01c <USB_DeactivateEndpoint+0x310>)
 800bfea:	4013      	ands	r3, r2
 800bfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	441a      	add	r2, r3
 800bff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c002:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	375c      	adds	r7, #92	@ 0x5c
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	07ff8f8f 	.word	0x07ff8f8f
 800c018:	07ff8fbf 	.word	0x07ff8fbf
 800c01c:	07ffbf8f 	.word	0x07ffbf8f

0800c020 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b096      	sub	sp, #88	@ 0x58
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	785b      	ldrb	r3, [r3, #1]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	f040 84ed 	bne.w	800ca0e <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	699a      	ldr	r2, [r3, #24]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d903      	bls.n	800c048 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	657b      	str	r3, [r7, #84]	@ 0x54
 800c046:	e002      	b.n	800c04e <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	7b1b      	ldrb	r3, [r3, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d12e      	bne.n	800c0b4 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	6959      	ldr	r1, [r3, #20]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	88da      	ldrh	r2, [r3, #6]
 800c05e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c060:	b29b      	uxth	r3, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f001 f963 	bl	800d32e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c072:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c082:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c086:	b292      	uxth	r2, r2
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c094:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c098:	6819      	ldr	r1, [r3, #0]
 800c09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c09c:	041a      	lsls	r2, r3, #16
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	f000 bc90 	b.w	800c9d4 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	78db      	ldrb	r3, [r3, #3]
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	f040 8332 	bne.w	800c722 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	6a1a      	ldr	r2, [r3, #32]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	f240 82e4 	bls.w	800c694 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	4ba4      	ldr	r3, [pc, #656]	@ (800c36c <USB_EPStartXfer+0x34c>)
 800c0da:	4013      	ands	r3, r2
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	441a      	add	r2, r3
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0f2:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	6a1a      	ldr	r2, [r3, #32]
 800c0f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0fa:	1ad2      	subs	r2, r2, r3
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 8161 	beq.w	800c3d8 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	785b      	ldrb	r3, [r3, #1]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d16a      	bne.n	800c1f4 <USB_EPStartXfer+0x1d4>
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c128:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c138:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c13c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c140:	605a      	str	r2, [r3, #4]
 800c142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c144:	2b00      	cmp	r3, #0
 800c146:	d112      	bne.n	800c16e <USB_EPStartXfer+0x14e>
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	00db      	lsls	r3, r3, #3
 800c14e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c152:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c162:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c166:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c16a:	605a      	str	r2, [r3, #4]
 800c16c:	e06a      	b.n	800c244 <USB_EPStartXfer+0x224>
 800c16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c170:	2b3e      	cmp	r3, #62	@ 0x3e
 800c172:	d81e      	bhi.n	800c1b2 <USB_EPStartXfer+0x192>
 800c174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c176:	085b      	lsrs	r3, r3, #1
 800c178:	653b      	str	r3, [r7, #80]	@ 0x50
 800c17a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <USB_EPStartXfer+0x16a>
 800c184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c186:	3301      	adds	r3, #1
 800c188:	653b      	str	r3, [r7, #80]	@ 0x50
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c198:	6859      	ldr	r1, [r3, #4]
 800c19a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19c:	069a      	lsls	r2, r3, #26
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	605a      	str	r2, [r3, #4]
 800c1b0:	e048      	b.n	800c244 <USB_EPStartXfer+0x224>
 800c1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1b4:	095b      	lsrs	r3, r3, #5
 800c1b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ba:	f003 031f 	and.w	r3, r3, #31
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d102      	bne.n	800c1c8 <USB_EPStartXfer+0x1a8>
 800c1c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	00db      	lsls	r3, r3, #3
 800c1ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1da:	069b      	lsls	r3, r3, #26
 800c1dc:	431a      	orrs	r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c1f0:	605a      	str	r2, [r3, #4]
 800c1f2:	e027      	b.n	800c244 <USB_EPStartXfer+0x224>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	785b      	ldrb	r3, [r3, #1]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d123      	bne.n	800c244 <USB_EPStartXfer+0x224>
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	00db      	lsls	r3, r3, #3
 800c202:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c206:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c216:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c21a:	b292      	uxth	r2, r2
 800c21c:	605a      	str	r2, [r3, #4]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c228:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c22c:	6859      	ldr	r1, [r3, #4]
 800c22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c230:	041a      	lsls	r2, r3, #16
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c23c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c240:	430a      	orrs	r2, r1
 800c242:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	895b      	ldrh	r3, [r3, #10]
 800c248:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	6959      	ldr	r1, [r3, #20]
 800c24e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c250:	b29b      	uxth	r3, r3
 800c252:	8b7a      	ldrh	r2, [r7, #26]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f001 f86a 	bl	800d32e <USB_WritePMA>
            ep->xfer_buff += len;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	695a      	ldr	r2, [r3, #20]
 800c25e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c260:	441a      	add	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	6a1a      	ldr	r2, [r3, #32]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d906      	bls.n	800c280 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	6a1a      	ldr	r2, [r3, #32]
 800c276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c278:	1ad2      	subs	r2, r2, r3
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	621a      	str	r2, [r3, #32]
 800c27e:	e005      	b.n	800c28c <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	6a1b      	ldr	r3, [r3, #32]
 800c284:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2200      	movs	r2, #0
 800c28a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	785b      	ldrb	r3, [r3, #1]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d16d      	bne.n	800c370 <USB_EPStartXfer+0x350>
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c29e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2b2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d112      	bne.n	800c2e4 <USB_EPStartXfer+0x2c4>
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	e06d      	b.n	800c3c0 <USB_EPStartXfer+0x3a0>
 800c2e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2e8:	d81e      	bhi.n	800c328 <USB_EPStartXfer+0x308>
 800c2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2ec:	085b      	lsrs	r3, r3, #1
 800c2ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <USB_EPStartXfer+0x2e0>
 800c2fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	00db      	lsls	r3, r3, #3
 800c306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c30e:	6819      	ldr	r1, [r3, #0]
 800c310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c312:	069a      	lsls	r2, r3, #26
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c31e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c322:	430a      	orrs	r2, r1
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	e04b      	b.n	800c3c0 <USB_EPStartXfer+0x3a0>
 800c328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c32a:	095b      	lsrs	r3, r3, #5
 800c32c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c330:	f003 031f 	and.w	r3, r3, #31
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <USB_EPStartXfer+0x31e>
 800c338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c33a:	3b01      	subs	r3, #1
 800c33c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c348:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c350:	069b      	lsls	r3, r3, #26
 800c352:	431a      	orrs	r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	00db      	lsls	r3, r3, #3
 800c35a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c35e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c362:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	e02a      	b.n	800c3c0 <USB_EPStartXfer+0x3a0>
 800c36a:	bf00      	nop
 800c36c:	07ff8f8f 	.word	0x07ff8f8f
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	785b      	ldrb	r3, [r3, #1]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d123      	bne.n	800c3c0 <USB_EPStartXfer+0x3a0>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c382:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c392:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c396:	b292      	uxth	r2, r2
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3a8:	6819      	ldr	r1, [r3, #0]
 800c3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ac:	041a      	lsls	r2, r3, #16
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	891b      	ldrh	r3, [r3, #8]
 800c3c4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	6959      	ldr	r1, [r3, #20]
 800c3ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	8b7a      	ldrh	r2, [r7, #26]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 ffac 	bl	800d32e <USB_WritePMA>
 800c3d6:	e2fd      	b.n	800c9d4 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	785b      	ldrb	r3, [r3, #1]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d16a      	bne.n	800c4b6 <USB_EPStartXfer+0x496>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	00db      	lsls	r3, r3, #3
 800c3f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3fe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c406:	2b00      	cmp	r3, #0
 800c408:	d112      	bne.n	800c430 <USB_EPStartXfer+0x410>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c424:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c428:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	e06a      	b.n	800c506 <USB_EPStartXfer+0x4e6>
 800c430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c432:	2b3e      	cmp	r3, #62	@ 0x3e
 800c434:	d81e      	bhi.n	800c474 <USB_EPStartXfer+0x454>
 800c436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c438:	085b      	lsrs	r3, r3, #1
 800c43a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <USB_EPStartXfer+0x42c>
 800c446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c448:	3301      	adds	r3, #1
 800c44a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c45a:	6819      	ldr	r1, [r3, #0]
 800c45c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c45e:	069a      	lsls	r2, r3, #26
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c46a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c46e:	430a      	orrs	r2, r1
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	e048      	b.n	800c506 <USB_EPStartXfer+0x4e6>
 800c474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c476:	095b      	lsrs	r3, r3, #5
 800c478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c47c:	f003 031f 	and.w	r3, r3, #31
 800c480:	2b00      	cmp	r3, #0
 800c482:	d102      	bne.n	800c48a <USB_EPStartXfer+0x46a>
 800c484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c486:	3b01      	subs	r3, #1
 800c488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c494:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c49c:	069b      	lsls	r3, r3, #26
 800c49e:	431a      	orrs	r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	e027      	b.n	800c506 <USB_EPStartXfer+0x4e6>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d123      	bne.n	800c506 <USB_EPStartXfer+0x4e6>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4dc:	b292      	uxth	r2, r2
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4ee:	6819      	ldr	r1, [r3, #0]
 800c4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4f2:	041a      	lsls	r2, r3, #16
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	00db      	lsls	r3, r3, #3
 800c4fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c502:	430a      	orrs	r2, r1
 800c504:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	891b      	ldrh	r3, [r3, #8]
 800c50a:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	6959      	ldr	r1, [r3, #20]
 800c510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c512:	b29b      	uxth	r3, r3
 800c514:	8b7a      	ldrh	r2, [r7, #26]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 ff09 	bl	800d32e <USB_WritePMA>
            ep->xfer_buff += len;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	695a      	ldr	r2, [r3, #20]
 800c520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c522:	441a      	add	r2, r3
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	6a1a      	ldr	r2, [r3, #32]
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	429a      	cmp	r2, r3
 800c532:	d906      	bls.n	800c542 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	6a1a      	ldr	r2, [r3, #32]
 800c538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c53a:	1ad2      	subs	r2, r2, r3
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	621a      	str	r2, [r3, #32]
 800c540:	e005      	b.n	800c54e <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	785b      	ldrb	r3, [r3, #1]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d16a      	bne.n	800c62c <USB_EPStartXfer+0x60c>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c560:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c570:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c574:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c578:	605a      	str	r2, [r3, #4]
 800c57a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d112      	bne.n	800c5a6 <USB_EPStartXfer+0x586>
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c58a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	00db      	lsls	r3, r3, #3
 800c596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c59a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c59e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c5a2:	605a      	str	r2, [r3, #4]
 800c5a4:	e06a      	b.n	800c67c <USB_EPStartXfer+0x65c>
 800c5a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5aa:	d81e      	bhi.n	800c5ea <USB_EPStartXfer+0x5ca>
 800c5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ae:	085b      	lsrs	r3, r3, #1
 800c5b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <USB_EPStartXfer+0x5a2>
 800c5bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5be:	3301      	adds	r3, #1
 800c5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	00db      	lsls	r3, r3, #3
 800c5c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5d0:	6859      	ldr	r1, [r3, #4]
 800c5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d4:	069a      	lsls	r2, r3, #26
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	605a      	str	r2, [r3, #4]
 800c5e8:	e048      	b.n	800c67c <USB_EPStartXfer+0x65c>
 800c5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ec:	095b      	lsrs	r3, r3, #5
 800c5ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f2:	f003 031f 	and.w	r3, r3, #31
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <USB_EPStartXfer+0x5e0>
 800c5fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	00db      	lsls	r3, r3, #3
 800c606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c60a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c612:	069b      	lsls	r3, r3, #26
 800c614:	431a      	orrs	r2, r3
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c620:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c624:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c628:	605a      	str	r2, [r3, #4]
 800c62a:	e027      	b.n	800c67c <USB_EPStartXfer+0x65c>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d123      	bne.n	800c67c <USB_EPStartXfer+0x65c>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c63e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c642:	685a      	ldr	r2, [r3, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c64e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c652:	b292      	uxth	r2, r2
 800c654:	605a      	str	r2, [r3, #4]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c664:	6859      	ldr	r1, [r3, #4]
 800c666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c668:	041a      	lsls	r2, r3, #16
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c674:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c678:	430a      	orrs	r2, r1
 800c67a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	895b      	ldrh	r3, [r3, #10]
 800c680:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	6959      	ldr	r1, [r3, #20]
 800c686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c688:	b29b      	uxth	r3, r3
 800c68a:	8b7a      	ldrh	r2, [r7, #26]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fe4e 	bl	800d32e <USB_WritePMA>
 800c692:	e19f      	b.n	800c9d4 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	6a1b      	ldr	r3, [r3, #32]
 800c698:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4413      	add	r3, r2
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4ba0      	ldr	r3, [pc, #640]	@ (800c928 <USB_EPStartXfer+0x908>)
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	617b      	str	r3, [r7, #20]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	441a      	add	r2, r3
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6c0:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6e0:	b292      	uxth	r2, r2
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6f2:	6819      	ldr	r1, [r3, #0]
 800c6f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6f6:	041a      	lsls	r2, r3, #16
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	00db      	lsls	r3, r3, #3
 800c6fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c702:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c706:	430a      	orrs	r2, r1
 800c708:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	891b      	ldrh	r3, [r3, #8]
 800c70e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	6959      	ldr	r1, [r3, #20]
 800c714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c716:	b29b      	uxth	r3, r3
 800c718:	8b7a      	ldrh	r2, [r7, #26]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fe07 	bl	800d32e <USB_WritePMA>
 800c720:	e158      	b.n	800c9d4 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	6a1a      	ldr	r2, [r3, #32]
 800c726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c728:	1ad2      	subs	r2, r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 80a3 	beq.w	800c88a <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d16a      	bne.n	800c822 <USB_EPStartXfer+0x802>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c756:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c766:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c76a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c76e:	605a      	str	r2, [r3, #4]
 800c770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c772:	2b00      	cmp	r3, #0
 800c774:	d112      	bne.n	800c79c <USB_EPStartXfer+0x77c>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c790:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c794:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c798:	605a      	str	r2, [r3, #4]
 800c79a:	e06a      	b.n	800c872 <USB_EPStartXfer+0x852>
 800c79c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c79e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7a0:	d81e      	bhi.n	800c7e0 <USB_EPStartXfer+0x7c0>
 800c7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a4:	085b      	lsrs	r3, r3, #1
 800c7a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <USB_EPStartXfer+0x798>
 800c7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c6:	6859      	ldr	r1, [r3, #4]
 800c7c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7ca:	069a      	lsls	r2, r3, #26
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	605a      	str	r2, [r3, #4]
 800c7de:	e048      	b.n	800c872 <USB_EPStartXfer+0x852>
 800c7e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e2:	095b      	lsrs	r3, r3, #5
 800c7e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e8:	f003 031f 	and.w	r3, r3, #31
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <USB_EPStartXfer+0x7d6>
 800c7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c800:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c808:	069b      	lsls	r3, r3, #26
 800c80a:	431a      	orrs	r2, r3
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c816:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c81a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c81e:	605a      	str	r2, [r3, #4]
 800c820:	e027      	b.n	800c872 <USB_EPStartXfer+0x852>
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	785b      	ldrb	r3, [r3, #1]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d123      	bne.n	800c872 <USB_EPStartXfer+0x852>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c838:	685a      	ldr	r2, [r3, #4]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c844:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c848:	b292      	uxth	r2, r2
 800c84a:	605a      	str	r2, [r3, #4]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c856:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c85a:	6859      	ldr	r1, [r3, #4]
 800c85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c85e:	041a      	lsls	r2, r3, #16
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c86a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c86e:	430a      	orrs	r2, r1
 800c870:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	6959      	ldr	r1, [r3, #20]
 800c87c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c87e:	b29b      	uxth	r3, r3
 800c880:	8b7a      	ldrh	r2, [r7, #26]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fd53 	bl	800d32e <USB_WritePMA>
 800c888:	e0a4      	b.n	800c9d4 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	785b      	ldrb	r3, [r3, #1]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d16d      	bne.n	800c96e <USB_EPStartXfer+0x94e>
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	00db      	lsls	r3, r3, #3
 800c898:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c89c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	00db      	lsls	r3, r3, #3
 800c8a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8b0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d112      	bne.n	800c8e2 <USB_EPStartXfer+0x8c2>
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	00db      	lsls	r3, r3, #3
 800c8d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	e06d      	b.n	800c9be <USB_EPStartXfer+0x99e>
 800c8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8e6:	d821      	bhi.n	800c92c <USB_EPStartXfer+0x90c>
 800c8e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8ea:	085b      	lsrs	r3, r3, #1
 800c8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d002      	beq.n	800c8fe <USB_EPStartXfer+0x8de>
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c908:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c90c:	6819      	ldr	r1, [r3, #0]
 800c90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c910:	069a      	lsls	r2, r3, #26
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c91c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c920:	430a      	orrs	r2, r1
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	e04b      	b.n	800c9be <USB_EPStartXfer+0x99e>
 800c926:	bf00      	nop
 800c928:	07ff8e8f 	.word	0x07ff8e8f
 800c92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c92e:	095b      	lsrs	r3, r3, #5
 800c930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c934:	f003 031f 	and.w	r3, r3, #31
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <USB_EPStartXfer+0x922>
 800c93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c93e:	3b01      	subs	r3, #1
 800c940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c94c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c954:	069b      	lsls	r3, r3, #26
 800c956:	431a      	orrs	r2, r3
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c962:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c966:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	e027      	b.n	800c9be <USB_EPStartXfer+0x99e>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d123      	bne.n	800c9be <USB_EPStartXfer+0x99e>
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c980:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c994:	b292      	uxth	r2, r2
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9a6:	6819      	ldr	r1, [r3, #0]
 800c9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9aa:	041a      	lsls	r2, r3, #16
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	891b      	ldrh	r3, [r3, #8]
 800c9c2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	6959      	ldr	r1, [r3, #20]
 800c9c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	8b7a      	ldrh	r2, [r7, #26]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fcad 	bl	800d32e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	4b8b      	ldr	r3, [pc, #556]	@ (800cc10 <USB_EPStartXfer+0xbf0>)
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f083 0310 	eor.w	r3, r3, #16
 800c9ec:	60fb      	str	r3, [r7, #12]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f083 0320 	eor.w	r3, r3, #32
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	441a      	add	r2, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	e36b      	b.n	800d0e6 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	7b1b      	ldrb	r3, [r3, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f040 8081 	bne.w	800cb1a <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	699a      	ldr	r2, [r3, #24]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d909      	bls.n	800ca38 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	699a      	ldr	r2, [r3, #24]
 800ca2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca30:	1ad2      	subs	r2, r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	619a      	str	r2, [r3, #24]
 800ca36:	e005      	b.n	800ca44 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2200      	movs	r2, #0
 800ca42:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca62:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca66:	605a      	str	r2, [r3, #4]
 800ca68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d112      	bne.n	800ca94 <USB_EPStartXfer+0xa74>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	e30c      	b.n	800d0ae <USB_EPStartXfer+0x108e>
 800ca94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca96:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca98:	d81e      	bhi.n	800cad8 <USB_EPStartXfer+0xab8>
 800ca9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca9c:	085b      	lsrs	r3, r3, #1
 800ca9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caa2:	f003 0301 	and.w	r3, r3, #1
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <USB_EPStartXfer+0xa90>
 800caaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caac:	3301      	adds	r3, #1
 800caae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cabe:	6859      	ldr	r1, [r3, #4]
 800cac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac2:	069a      	lsls	r2, r3, #26
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cace:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cad2:	430a      	orrs	r2, r1
 800cad4:	605a      	str	r2, [r3, #4]
 800cad6:	e2ea      	b.n	800d0ae <USB_EPStartXfer+0x108e>
 800cad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cada:	095b      	lsrs	r3, r3, #5
 800cadc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cae0:	f003 031f 	and.w	r3, r3, #31
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <USB_EPStartXfer+0xace>
 800cae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caea:	3b01      	subs	r3, #1
 800caec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb00:	069b      	lsls	r3, r3, #26
 800cb02:	431a      	orrs	r2, r3
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb16:	605a      	str	r2, [r3, #4]
 800cb18:	e2c9      	b.n	800d0ae <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	78db      	ldrb	r3, [r3, #3]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	f040 8176 	bne.w	800ce10 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d173      	bne.n	800cc14 <USB_EPStartXfer+0xbf4>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb4a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d112      	bne.n	800cb7e <USB_EPStartXfer+0xb5e>
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	e073      	b.n	800cc66 <USB_EPStartXfer+0xc46>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb84:	d820      	bhi.n	800cbc8 <USB_EPStartXfer+0xba8>
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	085b      	lsrs	r3, r3, #1
 800cb8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d002      	beq.n	800cba0 <USB_EPStartXfer+0xb80>
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbae:	6819      	ldr	r1, [r3, #0]
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb2:	069a      	lsls	r2, r3, #26
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbc2:	430a      	orrs	r2, r1
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	e04e      	b.n	800cc66 <USB_EPStartXfer+0xc46>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	095b      	lsrs	r3, r3, #5
 800cbce:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f003 031f 	and.w	r3, r3, #31
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <USB_EPStartXfer+0xbc2>
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf4:	069b      	lsls	r3, r3, #26
 800cbf6:	431a      	orrs	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	e02b      	b.n	800cc66 <USB_EPStartXfer+0xc46>
 800cc0e:	bf00      	nop
 800cc10:	07ff8fbf 	.word	0x07ff8fbf
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	785b      	ldrb	r3, [r3, #1]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d124      	bne.n	800cc66 <USB_EPStartXfer+0xc46>
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc3a:	b292      	uxth	r2, r2
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc4c:	6819      	ldr	r1, [r3, #0]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	041a      	lsls	r2, r3, #16
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc62:	430a      	orrs	r2, r1
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	785b      	ldrb	r3, [r3, #1]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d170      	bne.n	800cd50 <USB_EPStartXfer+0xd30>
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	00db      	lsls	r3, r3, #3
 800cc84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc8c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc90:	605a      	str	r2, [r3, #4]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d112      	bne.n	800ccc0 <USB_EPStartXfer+0xca0>
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cca4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccb8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ccbc:	605a      	str	r2, [r3, #4]
 800ccbe:	e070      	b.n	800cda2 <USB_EPStartXfer+0xd82>
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccc6:	d820      	bhi.n	800cd0a <USB_EPStartXfer+0xcea>
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	085b      	lsrs	r3, r3, #1
 800ccce:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	f003 0301 	and.w	r3, r3, #1
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d002      	beq.n	800cce2 <USB_EPStartXfer+0xcc2>
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccde:	3301      	adds	r3, #1
 800cce0:	633b      	str	r3, [r7, #48]	@ 0x30
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccf0:	6859      	ldr	r1, [r3, #4]
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	069a      	lsls	r2, r3, #26
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd04:	430a      	orrs	r2, r1
 800cd06:	605a      	str	r2, [r3, #4]
 800cd08:	e04b      	b.n	800cda2 <USB_EPStartXfer+0xd82>
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	095b      	lsrs	r3, r3, #5
 800cd10:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	f003 031f 	and.w	r3, r3, #31
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d102      	bne.n	800cd24 <USB_EPStartXfer+0xd04>
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd20:	3b01      	subs	r3, #1
 800cd22:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd36:	069b      	lsls	r3, r3, #26
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd48:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	e028      	b.n	800cda2 <USB_EPStartXfer+0xd82>
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d124      	bne.n	800cda2 <USB_EPStartXfer+0xd82>
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd76:	b292      	uxth	r2, r2
 800cd78:	605a      	str	r2, [r3, #4]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd88:	6859      	ldr	r1, [r3, #4]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	041a      	lsls	r2, r3, #16
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	69db      	ldr	r3, [r3, #28]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 8181 	beq.w	800d0ae <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cdba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d004      	beq.n	800cdce <USB_EPStartXfer+0xdae>
 800cdc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10b      	bne.n	800cde6 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cdce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f040 816a 	bne.w	800d0ae <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cdda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f040 8164 	bne.w	800d0ae <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	4b98      	ldr	r3, [pc, #608]	@ (800d054 <USB_EPStartXfer+0x1034>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	623b      	str	r3, [r7, #32]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	441a      	add	r2, r3
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce0c:	6013      	str	r3, [r2, #0]
 800ce0e:	e14e      	b.n	800d0ae <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	78db      	ldrb	r3, [r3, #3]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	f040 8148 	bne.w	800d0aa <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	699a      	ldr	r2, [r3, #24]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d909      	bls.n	800ce3a <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	699a      	ldr	r2, [r3, #24]
 800ce30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce32:	1ad2      	subs	r2, r2, r3
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	619a      	str	r2, [r3, #24]
 800ce38:	e005      	b.n	800ce46 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2200      	movs	r2, #0
 800ce44:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	785b      	ldrb	r3, [r3, #1]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d16a      	bne.n	800cf24 <USB_EPStartXfer+0xf04>
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce6c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce70:	601a      	str	r2, [r3, #0]
 800ce72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d112      	bne.n	800ce9e <USB_EPStartXfer+0xe7e>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	e06a      	b.n	800cf74 <USB_EPStartXfer+0xf54>
 800ce9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cea2:	d81e      	bhi.n	800cee2 <USB_EPStartXfer+0xec2>
 800cea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea6:	085b      	lsrs	r3, r3, #1
 800cea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <USB_EPStartXfer+0xe9a>
 800ceb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cec4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cec8:	6819      	ldr	r1, [r3, #0]
 800ceca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cecc:	069a      	lsls	r2, r3, #26
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ced8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cedc:	430a      	orrs	r2, r1
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	e048      	b.n	800cf74 <USB_EPStartXfer+0xf54>
 800cee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee4:	095b      	lsrs	r3, r3, #5
 800cee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceea:	f003 031f 	and.w	r3, r3, #31
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d102      	bne.n	800cef8 <USB_EPStartXfer+0xed8>
 800cef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef4:	3b01      	subs	r3, #1
 800cef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	00db      	lsls	r3, r3, #3
 800cefe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0a:	069b      	lsls	r3, r3, #26
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf1c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	e027      	b.n	800cf74 <USB_EPStartXfer+0xf54>
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	785b      	ldrb	r3, [r3, #1]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d123      	bne.n	800cf74 <USB_EPStartXfer+0xf54>
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf4a:	b292      	uxth	r2, r2
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf5c:	6819      	ldr	r1, [r3, #0]
 800cf5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf60:	041a      	lsls	r2, r3, #16
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf70:	430a      	orrs	r2, r1
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	785b      	ldrb	r3, [r3, #1]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d16d      	bne.n	800d058 <USB_EPStartXfer+0x1038>
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf8a:	685a      	ldr	r2, [r3, #4]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	00db      	lsls	r3, r3, #3
 800cf92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf9a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cf9e:	605a      	str	r2, [r3, #4]
 800cfa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d112      	bne.n	800cfcc <USB_EPStartXfer+0xfac>
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	00db      	lsls	r3, r3, #3
 800cfac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfc4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cfc8:	605a      	str	r2, [r3, #4]
 800cfca:	e070      	b.n	800d0ae <USB_EPStartXfer+0x108e>
 800cfcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfce:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfd0:	d81e      	bhi.n	800d010 <USB_EPStartXfer+0xff0>
 800cfd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd4:	085b      	lsrs	r3, r3, #1
 800cfd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfda:	f003 0301 	and.w	r3, r3, #1
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d002      	beq.n	800cfe8 <USB_EPStartXfer+0xfc8>
 800cfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cff6:	6859      	ldr	r1, [r3, #4]
 800cff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffa:	069a      	lsls	r2, r3, #26
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d00a:	430a      	orrs	r2, r1
 800d00c:	605a      	str	r2, [r3, #4]
 800d00e:	e04e      	b.n	800d0ae <USB_EPStartXfer+0x108e>
 800d010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d012:	095b      	lsrs	r3, r3, #5
 800d014:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d018:	f003 031f 	and.w	r3, r3, #31
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d102      	bne.n	800d026 <USB_EPStartXfer+0x1006>
 800d020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d022:	3b01      	subs	r3, #1
 800d024:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d038:	069b      	lsls	r3, r3, #26
 800d03a:	431a      	orrs	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d046:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d04a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d04e:	605a      	str	r2, [r3, #4]
 800d050:	e02d      	b.n	800d0ae <USB_EPStartXfer+0x108e>
 800d052:	bf00      	nop
 800d054:	07ff8f8f 	.word	0x07ff8f8f
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	785b      	ldrb	r3, [r3, #1]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d126      	bne.n	800d0ae <USB_EPStartXfer+0x108e>
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d06a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d07a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d07e:	b292      	uxth	r2, r2
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d08c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d090:	6859      	ldr	r1, [r3, #4]
 800d092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d094:	041a      	lsls	r2, r3, #16
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	605a      	str	r2, [r3, #4]
 800d0a8:	e001      	b.n	800d0ae <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e01c      	b.n	800d0e8 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f0 <USB_EPStartXfer+0x10d0>)
 800d0bc:	4013      	ands	r3, r2
 800d0be:	61fb      	str	r3, [r7, #28]
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d0c6:	61fb      	str	r3, [r7, #28]
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d0ce:	61fb      	str	r3, [r7, #28]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	441a      	add	r2, r3
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3758      	adds	r7, #88	@ 0x58
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	07ffbf8f 	.word	0x07ffbf8f

0800d0f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d018      	beq.n	800d138 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	4b19      	ldr	r3, [pc, #100]	@ (800d178 <USB_EPSetStall+0x84>)
 800d114:	4013      	ands	r3, r2
 800d116:	60bb      	str	r3, [r7, #8]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	f083 0310 	eor.w	r3, r3, #16
 800d11e:	60bb      	str	r3, [r7, #8]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	441a      	add	r2, r3
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	e017      	b.n	800d168 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	4b0d      	ldr	r3, [pc, #52]	@ (800d17c <USB_EPSetStall+0x88>)
 800d146:	4013      	ands	r3, r2
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d150:	60fb      	str	r3, [r7, #12]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	441a      	add	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	07ff8fbf 	.word	0x07ff8fbf
 800d17c:	07ffbf8f 	.word	0x07ffbf8f

0800d180 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d180:	b480      	push	{r7}
 800d182:	b089      	sub	sp, #36	@ 0x24
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	7b1b      	ldrb	r3, [r3, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d17c      	bne.n	800d28c <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d03c      	beq.n	800d214 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	613b      	str	r3, [r7, #16]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d013      	beq.n	800d1da <USB_EPClearStall+0x5a>
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	4b37      	ldr	r3, [pc, #220]	@ (800d29c <USB_EPClearStall+0x11c>)
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	441a      	add	r2, r3
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d1d8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	78db      	ldrb	r3, [r3, #3]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d054      	beq.n	800d28c <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	4b2c      	ldr	r3, [pc, #176]	@ (800d2a0 <USB_EPClearStall+0x120>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	60bb      	str	r3, [r7, #8]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	f083 0320 	eor.w	r3, r3, #32
 800d1fa:	60bb      	str	r3, [r7, #8]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	441a      	add	r2, r3
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d20c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d210:	6013      	str	r3, [r2, #0]
 800d212:	e03b      	b.n	800d28c <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	61fb      	str	r3, [r7, #28]
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d013      	beq.n	800d254 <USB_EPClearStall+0xd4>
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	4b18      	ldr	r3, [pc, #96]	@ (800d29c <USB_EPClearStall+0x11c>)
 800d23a:	4013      	ands	r3, r2
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	441a      	add	r2, r3
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d252:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	4413      	add	r3, r2
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	4b10      	ldr	r3, [pc, #64]	@ (800d2a4 <USB_EPClearStall+0x124>)
 800d262:	4013      	ands	r3, r2
 800d264:	617b      	str	r3, [r7, #20]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d26c:	617b      	str	r3, [r7, #20]
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d274:	617b      	str	r3, [r7, #20]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	441a      	add	r2, r3
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d28a:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3724      	adds	r7, #36	@ 0x24
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	07ff8f8f 	.word	0x07ff8f8f
 800d2a0:	07ff8fbf 	.word	0x07ff8fbf
 800d2a4:	07ffbf8f 	.word	0x07ffbf8f

0800d2a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d2b4:	78fb      	ldrb	r3, [r7, #3]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d102      	bne.n	800d2c0 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2280      	movs	r2, #128	@ 0x80
 800d2be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2da:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	370c      	adds	r7, #12
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d312:	b480      	push	{r7}
 800d314:	b085      	sub	sp, #20
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d320:	68fb      	ldr	r3, [r7, #12]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d32e:	b480      	push	{r7}
 800d330:	b08b      	sub	sp, #44	@ 0x2c
 800d332:	af00      	add	r7, sp, #0
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	4611      	mov	r1, r2
 800d33a:	461a      	mov	r2, r3
 800d33c:	460b      	mov	r3, r1
 800d33e:	80fb      	strh	r3, [r7, #6]
 800d340:	4613      	mov	r3, r2
 800d342:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d344:	88bb      	ldrh	r3, [r7, #4]
 800d346:	3303      	adds	r3, #3
 800d348:	089b      	lsrs	r3, r3, #2
 800d34a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d34c:	88bb      	ldrh	r3, [r7, #4]
 800d34e:	f003 0303 	and.w	r3, r3, #3
 800d352:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d358:	8afb      	ldrh	r3, [r7, #22]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d002      	beq.n	800d364 <USB_WritePMA+0x36>
  {
    NbWords--;
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	3b01      	subs	r3, #1
 800d362:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d364:	88fb      	ldrh	r3, [r7, #6]
 800d366:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d36a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d36e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	623b      	str	r3, [r7, #32]
 800d374:	e015      	b.n	800d3a2 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	3304      	adds	r3, #4
 800d382:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	3301      	adds	r3, #1
 800d388:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	3301      	adds	r3, #1
 800d38e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	3301      	adds	r3, #1
 800d394:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	3301      	adds	r3, #1
 800d39a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	623b      	str	r3, [r7, #32]
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e6      	bne.n	800d376 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d3a8:	8afb      	ldrh	r3, [r7, #22]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01a      	beq.n	800d3e4 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	00db      	lsls	r3, r3, #3
 800d3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d3c6:	6a3b      	ldr	r3, [r7, #32]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d3d2:	8afb      	ldrh	r3, [r7, #22]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d3d8:	8afb      	ldrh	r3, [r7, #22]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1e9      	bne.n	800d3b2 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3e2:	601a      	str	r2, [r3, #0]
  }
}
 800d3e4:	bf00      	nop
 800d3e6:	372c      	adds	r7, #44	@ 0x2c
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b08b      	sub	sp, #44	@ 0x2c
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	460b      	mov	r3, r1
 800d400:	80fb      	strh	r3, [r7, #6]
 800d402:	4613      	mov	r3, r2
 800d404:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d406:	88bb      	ldrh	r3, [r7, #4]
 800d408:	3303      	adds	r3, #3
 800d40a:	089b      	lsrs	r3, r3, #2
 800d40c:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d40e:	88bb      	ldrh	r3, [r7, #4]
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d41a:	88fb      	ldrh	r3, [r7, #6]
 800d41c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d420:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d424:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d426:	8b7b      	ldrh	r3, [r7, #26]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	3b01      	subs	r3, #1
 800d430:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	627b      	str	r3, [r7, #36]	@ 0x24
 800d436:	e015      	b.n	800d464 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d438:	6a3b      	ldr	r3, [r7, #32]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d440:	6a3b      	ldr	r3, [r7, #32]
 800d442:	3304      	adds	r3, #4
 800d444:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	3301      	adds	r3, #1
 800d44a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	3301      	adds	r3, #1
 800d450:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	3301      	adds	r3, #1
 800d456:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	3301      	adds	r3, #1
 800d45c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d460:	3b01      	subs	r3, #1
 800d462:	627b      	str	r3, [r7, #36]	@ 0x24
 800d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e6      	bne.n	800d438 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d46a:	8b7b      	ldrh	r3, [r7, #26]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d017      	beq.n	800d4a0 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d470:	6a3b      	ldr	r3, [r7, #32]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	fa22 f303 	lsr.w	r3, r2, r3
 800d482:	b2da      	uxtb	r2, r3
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	701a      	strb	r2, [r3, #0]
      count++;
 800d488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48a:	3301      	adds	r3, #1
 800d48c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	3301      	adds	r3, #1
 800d492:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d494:	8b7b      	ldrh	r3, [r7, #26]
 800d496:	3b01      	subs	r3, #1
 800d498:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800d49a:	8b7b      	ldrh	r3, [r7, #26]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1ea      	bne.n	800d476 <USB_ReadPMA+0x86>
  }
}
 800d4a0:	bf00      	nop
 800d4a2:	372c      	adds	r7, #44	@ 0x2c
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d4b8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d4bc:	f000 ffa4 	bl	800e408 <USBD_static_malloc>
 800d4c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d109      	bne.n	800d4dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	32b0      	adds	r2, #176	@ 0xb0
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e0d4      	b.n	800d686 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d4dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f002 fb11 	bl	800fb0a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	32b0      	adds	r2, #176	@ 0xb0
 800d4f2:	68f9      	ldr	r1, [r7, #12]
 800d4f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	32b0      	adds	r2, #176	@ 0xb0
 800d502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	7c1b      	ldrb	r3, [r3, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d138      	bne.n	800d586 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d514:	4b5e      	ldr	r3, [pc, #376]	@ (800d690 <USBD_CDC_Init+0x1e4>)
 800d516:	7819      	ldrb	r1, [r3, #0]
 800d518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d51c:	2202      	movs	r2, #2
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fe79 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d524:	4b5a      	ldr	r3, [pc, #360]	@ (800d690 <USBD_CDC_Init+0x1e4>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f003 020f 	and.w	r2, r3, #15
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	4613      	mov	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	440b      	add	r3, r1
 800d538:	3324      	adds	r3, #36	@ 0x24
 800d53a:	2201      	movs	r2, #1
 800d53c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d53e:	4b55      	ldr	r3, [pc, #340]	@ (800d694 <USBD_CDC_Init+0x1e8>)
 800d540:	7819      	ldrb	r1, [r3, #0]
 800d542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d546:	2202      	movs	r2, #2
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fe64 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d54e:	4b51      	ldr	r3, [pc, #324]	@ (800d694 <USBD_CDC_Init+0x1e8>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	f003 020f 	and.w	r2, r3, #15
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4613      	mov	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	440b      	add	r3, r1
 800d562:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d566:	2201      	movs	r2, #1
 800d568:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d56a:	4b4b      	ldr	r3, [pc, #300]	@ (800d698 <USBD_CDC_Init+0x1ec>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	f003 020f 	and.w	r2, r3, #15
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	4613      	mov	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4413      	add	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	440b      	add	r3, r1
 800d57e:	3326      	adds	r3, #38	@ 0x26
 800d580:	2210      	movs	r2, #16
 800d582:	801a      	strh	r2, [r3, #0]
 800d584:	e035      	b.n	800d5f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d586:	4b42      	ldr	r3, [pc, #264]	@ (800d690 <USBD_CDC_Init+0x1e4>)
 800d588:	7819      	ldrb	r1, [r3, #0]
 800d58a:	2340      	movs	r3, #64	@ 0x40
 800d58c:	2202      	movs	r2, #2
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fe41 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d594:	4b3e      	ldr	r3, [pc, #248]	@ (800d690 <USBD_CDC_Init+0x1e4>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 020f 	and.w	r2, r3, #15
 800d59c:	6879      	ldr	r1, [r7, #4]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	440b      	add	r3, r1
 800d5a8:	3324      	adds	r3, #36	@ 0x24
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d5ae:	4b39      	ldr	r3, [pc, #228]	@ (800d694 <USBD_CDC_Init+0x1e8>)
 800d5b0:	7819      	ldrb	r1, [r3, #0]
 800d5b2:	2340      	movs	r3, #64	@ 0x40
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fe2d 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d5bc:	4b35      	ldr	r3, [pc, #212]	@ (800d694 <USBD_CDC_Init+0x1e8>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	f003 020f 	and.w	r2, r3, #15
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	440b      	add	r3, r1
 800d5d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d5d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d698 <USBD_CDC_Init+0x1ec>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	f003 020f 	and.w	r2, r3, #15
 800d5e0:	6879      	ldr	r1, [r7, #4]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	440b      	add	r3, r1
 800d5ec:	3326      	adds	r3, #38	@ 0x26
 800d5ee:	2210      	movs	r2, #16
 800d5f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d5f2:	4b29      	ldr	r3, [pc, #164]	@ (800d698 <USBD_CDC_Init+0x1ec>)
 800d5f4:	7819      	ldrb	r1, [r3, #0]
 800d5f6:	2308      	movs	r3, #8
 800d5f8:	2203      	movs	r2, #3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fe0b 	bl	800e216 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d600:	4b25      	ldr	r3, [pc, #148]	@ (800d698 <USBD_CDC_Init+0x1ec>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	f003 020f 	and.w	r2, r3, #15
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	440b      	add	r3, r1
 800d614:	3324      	adds	r3, #36	@ 0x24
 800d616:	2201      	movs	r2, #1
 800d618:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	33b0      	adds	r3, #176	@ 0xb0
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d650:	2302      	movs	r3, #2
 800d652:	e018      	b.n	800d686 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	7c1b      	ldrb	r3, [r3, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10a      	bne.n	800d672 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d65c:	4b0d      	ldr	r3, [pc, #52]	@ (800d694 <USBD_CDC_Init+0x1e8>)
 800d65e:	7819      	ldrb	r1, [r3, #0]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fe9e 	bl	800e3ac <USBD_LL_PrepareReceive>
 800d670:	e008      	b.n	800d684 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d672:	4b08      	ldr	r3, [pc, #32]	@ (800d694 <USBD_CDC_Init+0x1e8>)
 800d674:	7819      	ldrb	r1, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d67c:	2340      	movs	r3, #64	@ 0x40
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fe94 	bl	800e3ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	200000af 	.word	0x200000af
 800d694:	200000b0 	.word	0x200000b0
 800d698:	200000b1 	.word	0x200000b1

0800d69c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d6a8:	4b3a      	ldr	r3, [pc, #232]	@ (800d794 <USBD_CDC_DeInit+0xf8>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fdd1 	bl	800e256 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d6b4:	4b37      	ldr	r3, [pc, #220]	@ (800d794 <USBD_CDC_DeInit+0xf8>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	f003 020f 	and.w	r2, r3, #15
 800d6bc:	6879      	ldr	r1, [r7, #4]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	440b      	add	r3, r1
 800d6c8:	3324      	adds	r3, #36	@ 0x24
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d6ce:	4b32      	ldr	r3, [pc, #200]	@ (800d798 <USBD_CDC_DeInit+0xfc>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fdbe 	bl	800e256 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d6da:	4b2f      	ldr	r3, [pc, #188]	@ (800d798 <USBD_CDC_DeInit+0xfc>)
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	f003 020f 	and.w	r2, r3, #15
 800d6e2:	6879      	ldr	r1, [r7, #4]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	440b      	add	r3, r1
 800d6ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d6f6:	4b29      	ldr	r3, [pc, #164]	@ (800d79c <USBD_CDC_DeInit+0x100>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fdaa 	bl	800e256 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d702:	4b26      	ldr	r3, [pc, #152]	@ (800d79c <USBD_CDC_DeInit+0x100>)
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f003 020f 	and.w	r2, r3, #15
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	4613      	mov	r3, r2
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	4413      	add	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	440b      	add	r3, r1
 800d716:	3324      	adds	r3, #36	@ 0x24
 800d718:	2200      	movs	r2, #0
 800d71a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d71c:	4b1f      	ldr	r3, [pc, #124]	@ (800d79c <USBD_CDC_DeInit+0x100>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	f003 020f 	and.w	r2, r3, #15
 800d724:	6879      	ldr	r1, [r7, #4]
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	3326      	adds	r3, #38	@ 0x26
 800d732:	2200      	movs	r2, #0
 800d734:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	32b0      	adds	r2, #176	@ 0xb0
 800d740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d01f      	beq.n	800d788 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	33b0      	adds	r3, #176	@ 0xb0
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4413      	add	r3, r2
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	32b0      	adds	r2, #176	@ 0xb0
 800d766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fe5a 	bl	800e424 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	32b0      	adds	r2, #176	@ 0xb0
 800d77a:	2100      	movs	r1, #0
 800d77c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	200000af 	.word	0x200000af
 800d798:	200000b0 	.word	0x200000b0
 800d79c:	200000b1 	.word	0x200000b1

0800d7a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	32b0      	adds	r2, #176	@ 0xb0
 800d7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d101      	bne.n	800d7d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	e0bf      	b.n	800d950 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d050      	beq.n	800d87e <USBD_CDC_Setup+0xde>
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	f040 80af 	bne.w	800d940 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	88db      	ldrh	r3, [r3, #6]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d03a      	beq.n	800d860 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	b25b      	sxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	da1b      	bge.n	800d82c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	33b0      	adds	r3, #176	@ 0xb0
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4413      	add	r3, r2
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d80a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	88d2      	ldrh	r2, [r2, #6]
 800d810:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	88db      	ldrh	r3, [r3, #6]
 800d816:	2b07      	cmp	r3, #7
 800d818:	bf28      	it	cs
 800d81a:	2307      	movcs	r3, #7
 800d81c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	89fa      	ldrh	r2, [r7, #14]
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f002 f8f0 	bl	800fa0a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d82a:	e090      	b.n	800d94e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	785a      	ldrb	r2, [r3, #1]
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	88db      	ldrh	r3, [r3, #6]
 800d83a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d83c:	d803      	bhi.n	800d846 <USBD_CDC_Setup+0xa6>
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	88db      	ldrh	r3, [r3, #6]
 800d842:	b2da      	uxtb	r2, r3
 800d844:	e000      	b.n	800d848 <USBD_CDC_Setup+0xa8>
 800d846:	2240      	movs	r2, #64	@ 0x40
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d84e:	6939      	ldr	r1, [r7, #16]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d856:	461a      	mov	r2, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f002 f902 	bl	800fa62 <USBD_CtlPrepareRx>
      break;
 800d85e:	e076      	b.n	800d94e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	33b0      	adds	r3, #176	@ 0xb0
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4413      	add	r3, r2
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	7850      	ldrb	r0, [r2, #1]
 800d876:	2200      	movs	r2, #0
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	4798      	blx	r3
      break;
 800d87c:	e067      	b.n	800d94e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	785b      	ldrb	r3, [r3, #1]
 800d882:	2b0b      	cmp	r3, #11
 800d884:	d851      	bhi.n	800d92a <USBD_CDC_Setup+0x18a>
 800d886:	a201      	add	r2, pc, #4	@ (adr r2, 800d88c <USBD_CDC_Setup+0xec>)
 800d888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d88c:	0800d8bd 	.word	0x0800d8bd
 800d890:	0800d939 	.word	0x0800d939
 800d894:	0800d92b 	.word	0x0800d92b
 800d898:	0800d92b 	.word	0x0800d92b
 800d89c:	0800d92b 	.word	0x0800d92b
 800d8a0:	0800d92b 	.word	0x0800d92b
 800d8a4:	0800d92b 	.word	0x0800d92b
 800d8a8:	0800d92b 	.word	0x0800d92b
 800d8ac:	0800d92b 	.word	0x0800d92b
 800d8b0:	0800d92b 	.word	0x0800d92b
 800d8b4:	0800d8e7 	.word	0x0800d8e7
 800d8b8:	0800d911 	.word	0x0800d911
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d107      	bne.n	800d8d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d8c8:	f107 030a 	add.w	r3, r7, #10
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f002 f89a 	bl	800fa0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8d6:	e032      	b.n	800d93e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d8d8:	6839      	ldr	r1, [r7, #0]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f001 ff17 	bl	800f70e <USBD_CtlError>
            ret = USBD_FAIL;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	75fb      	strb	r3, [r7, #23]
          break;
 800d8e4:	e02b      	b.n	800d93e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	d107      	bne.n	800d902 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d8f2:	f107 030d 	add.w	r3, r7, #13
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f002 f885 	bl	800fa0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d900:	e01d      	b.n	800d93e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d902:	6839      	ldr	r1, [r7, #0]
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f001 ff02 	bl	800f70e <USBD_CtlError>
            ret = USBD_FAIL;
 800d90a:	2303      	movs	r3, #3
 800d90c:	75fb      	strb	r3, [r7, #23]
          break;
 800d90e:	e016      	b.n	800d93e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d00f      	beq.n	800d93c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f001 fef5 	bl	800f70e <USBD_CtlError>
            ret = USBD_FAIL;
 800d924:	2303      	movs	r3, #3
 800d926:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d928:	e008      	b.n	800d93c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 feee 	bl	800f70e <USBD_CtlError>
          ret = USBD_FAIL;
 800d932:	2303      	movs	r3, #3
 800d934:	75fb      	strb	r3, [r7, #23]
          break;
 800d936:	e002      	b.n	800d93e <USBD_CDC_Setup+0x19e>
          break;
 800d938:	bf00      	nop
 800d93a:	e008      	b.n	800d94e <USBD_CDC_Setup+0x1ae>
          break;
 800d93c:	bf00      	nop
      }
      break;
 800d93e:	e006      	b.n	800d94e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f001 fee3 	bl	800f70e <USBD_CtlError>
      ret = USBD_FAIL;
 800d948:	2303      	movs	r3, #3
 800d94a:	75fb      	strb	r3, [r7, #23]
      break;
 800d94c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d96a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	32b0      	adds	r2, #176	@ 0xb0
 800d976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d97e:	2303      	movs	r3, #3
 800d980:	e065      	b.n	800da4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	32b0      	adds	r2, #176	@ 0xb0
 800d98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d990:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d992:	78fb      	ldrb	r3, [r7, #3]
 800d994:	f003 020f 	and.w	r2, r3, #15
 800d998:	6879      	ldr	r1, [r7, #4]
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	440b      	add	r3, r1
 800d9a4:	3318      	adds	r3, #24
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d02f      	beq.n	800da0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d9ac:	78fb      	ldrb	r3, [r7, #3]
 800d9ae:	f003 020f 	and.w	r2, r3, #15
 800d9b2:	6879      	ldr	r1, [r7, #4]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	3318      	adds	r3, #24
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	78fb      	ldrb	r3, [r7, #3]
 800d9c4:	f003 010f 	and.w	r1, r3, #15
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	440b      	add	r3, r1
 800d9d0:	00db      	lsls	r3, r3, #3
 800d9d2:	4403      	add	r3, r0
 800d9d4:	3324      	adds	r3, #36	@ 0x24
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d9dc:	fb01 f303 	mul.w	r3, r1, r3
 800d9e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d112      	bne.n	800da0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d9e6:	78fb      	ldrb	r3, [r7, #3]
 800d9e8:	f003 020f 	and.w	r2, r3, #15
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	4413      	add	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	440b      	add	r3, r1
 800d9f8:	3318      	adds	r3, #24
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d9fe:	78f9      	ldrb	r1, [r7, #3]
 800da00:	2300      	movs	r3, #0
 800da02:	2200      	movs	r2, #0
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fcb6 	bl	800e376 <USBD_LL_Transmit>
 800da0a:	e01f      	b.n	800da4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	33b0      	adds	r3, #176	@ 0xb0
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	4413      	add	r3, r2
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d010      	beq.n	800da4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	33b0      	adds	r3, #176	@ 0xb0
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4413      	add	r3, r2
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800da48:	78fa      	ldrb	r2, [r7, #3]
 800da4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
 800da5e:	460b      	mov	r3, r1
 800da60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	32b0      	adds	r2, #176	@ 0xb0
 800da6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	32b0      	adds	r2, #176	@ 0xb0
 800da7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800da84:	2303      	movs	r3, #3
 800da86:	e01a      	b.n	800dabe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da88:	78fb      	ldrb	r3, [r7, #3]
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fca8 	bl	800e3e2 <USBD_LL_GetRxDataSize>
 800da92:	4602      	mov	r2, r0
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	33b0      	adds	r3, #176	@ 0xb0
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4413      	add	r3, r2
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800dab8:	4611      	mov	r1, r2
 800daba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b084      	sub	sp, #16
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	32b0      	adds	r2, #176	@ 0xb0
 800dad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dadc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d101      	bne.n	800dae8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e024      	b.n	800db32 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	33b0      	adds	r3, #176	@ 0xb0
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d019      	beq.n	800db30 <USBD_CDC_EP0_RxReady+0x6a>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800db02:	2bff      	cmp	r3, #255	@ 0xff
 800db04:	d014      	beq.n	800db30 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	33b0      	adds	r3, #176	@ 0xb0
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800db1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800db26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	22ff      	movs	r2, #255	@ 0xff
 800db2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
	...

0800db3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db44:	2182      	movs	r1, #130	@ 0x82
 800db46:	4818      	ldr	r0, [pc, #96]	@ (800dba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db48:	f000 ffab 	bl	800eaa2 <USBD_GetEpDesc>
 800db4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db4e:	2101      	movs	r1, #1
 800db50:	4815      	ldr	r0, [pc, #84]	@ (800dba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db52:	f000 ffa6 	bl	800eaa2 <USBD_GetEpDesc>
 800db56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db58:	2181      	movs	r1, #129	@ 0x81
 800db5a:	4813      	ldr	r0, [pc, #76]	@ (800dba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db5c:	f000 ffa1 	bl	800eaa2 <USBD_GetEpDesc>
 800db60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2210      	movs	r2, #16
 800db6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	2200      	movs	r2, #0
 800db78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db7c:	711a      	strb	r2, [r3, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d006      	beq.n	800db96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db90:	711a      	strb	r2, [r3, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2243      	movs	r2, #67	@ 0x43
 800db9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db9c:	4b02      	ldr	r3, [pc, #8]	@ (800dba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	2000006c 	.word	0x2000006c

0800dbac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dbb4:	2182      	movs	r1, #130	@ 0x82
 800dbb6:	4818      	ldr	r0, [pc, #96]	@ (800dc18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dbb8:	f000 ff73 	bl	800eaa2 <USBD_GetEpDesc>
 800dbbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dbbe:	2101      	movs	r1, #1
 800dbc0:	4815      	ldr	r0, [pc, #84]	@ (800dc18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dbc2:	f000 ff6e 	bl	800eaa2 <USBD_GetEpDesc>
 800dbc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dbc8:	2181      	movs	r1, #129	@ 0x81
 800dbca:	4813      	ldr	r0, [pc, #76]	@ (800dc18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dbcc:	f000 ff69 	bl	800eaa2 <USBD_GetEpDesc>
 800dbd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2210      	movs	r2, #16
 800dbdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d006      	beq.n	800dbf2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	711a      	strb	r2, [r3, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f042 0202 	orr.w	r2, r2, #2
 800dbf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d006      	beq.n	800dc06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	711a      	strb	r2, [r3, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f042 0202 	orr.w	r2, r2, #2
 800dc04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2243      	movs	r2, #67	@ 0x43
 800dc0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc0c:	4b02      	ldr	r3, [pc, #8]	@ (800dc18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	2000006c 	.word	0x2000006c

0800dc1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc24:	2182      	movs	r1, #130	@ 0x82
 800dc26:	4818      	ldr	r0, [pc, #96]	@ (800dc88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dc28:	f000 ff3b 	bl	800eaa2 <USBD_GetEpDesc>
 800dc2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc2e:	2101      	movs	r1, #1
 800dc30:	4815      	ldr	r0, [pc, #84]	@ (800dc88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dc32:	f000 ff36 	bl	800eaa2 <USBD_GetEpDesc>
 800dc36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc38:	2181      	movs	r1, #129	@ 0x81
 800dc3a:	4813      	ldr	r0, [pc, #76]	@ (800dc88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dc3c:	f000 ff31 	bl	800eaa2 <USBD_GetEpDesc>
 800dc40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d002      	beq.n	800dc4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2210      	movs	r2, #16
 800dc4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d006      	beq.n	800dc62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc5c:	711a      	strb	r2, [r3, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d006      	beq.n	800dc76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc70:	711a      	strb	r2, [r3, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2243      	movs	r2, #67	@ 0x43
 800dc7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc7c:	4b02      	ldr	r3, [pc, #8]	@ (800dc88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	2000006c 	.word	0x2000006c

0800dc8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	220a      	movs	r2, #10
 800dc98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc9a:	4b03      	ldr	r3, [pc, #12]	@ (800dca8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr
 800dca8:	20000028 	.word	0x20000028

0800dcac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	e009      	b.n	800dcd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	33b0      	adds	r3, #176	@ 0xb0
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	32b0      	adds	r2, #176	@ 0xb0
 800dcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dd02:	2303      	movs	r3, #3
 800dd04:	e008      	b.n	800dd18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	371c      	adds	r7, #28
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	32b0      	adds	r2, #176	@ 0xb0
 800dd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dd44:	2303      	movs	r3, #3
 800dd46:	e004      	b.n	800dd52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
	...

0800dd60 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	32b0      	adds	r2, #176	@ 0xb0
 800dd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd76:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dd82:	2303      	movs	r3, #3
 800dd84:	e025      	b.n	800ddd2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d11f      	bne.n	800ddd0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dd98:	4b10      	ldr	r3, [pc, #64]	@ (800dddc <USBD_CDC_TransmitPacket+0x7c>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f003 020f 	and.w	r2, r3, #15
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4403      	add	r3, r0
 800ddb2:	3318      	adds	r3, #24
 800ddb4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ddb6:	4b09      	ldr	r3, [pc, #36]	@ (800dddc <USBD_CDC_TransmitPacket+0x7c>)
 800ddb8:	7819      	ldrb	r1, [r3, #0]
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fad5 	bl	800e376 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	200000af 	.word	0x200000af

0800dde0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	32b0      	adds	r2, #176	@ 0xb0
 800ddf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddf6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	32b0      	adds	r2, #176	@ 0xb0
 800de02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d101      	bne.n	800de0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e018      	b.n	800de40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7c1b      	ldrb	r3, [r3, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10a      	bne.n	800de2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de16:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <USBD_CDC_ReceivePacket+0x68>)
 800de18:	7819      	ldrb	r1, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800de20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fac1 	bl	800e3ac <USBD_LL_PrepareReceive>
 800de2a:	e008      	b.n	800de3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de2c:	4b06      	ldr	r3, [pc, #24]	@ (800de48 <USBD_CDC_ReceivePacket+0x68>)
 800de2e:	7819      	ldrb	r1, [r3, #0]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800de36:	2340      	movs	r3, #64	@ 0x40
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fab7 	bl	800e3ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	200000b0 	.word	0x200000b0

0800de4c <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de50:	2200      	movs	r2, #0
 800de52:	4905      	ldr	r1, [pc, #20]	@ (800de68 <TEMPLATE_Init+0x1c>)
 800de54:	4805      	ldr	r0, [pc, #20]	@ (800de6c <TEMPLATE_Init+0x20>)
 800de56:	f7ff ff43 	bl	800dce0 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de5a:	4905      	ldr	r1, [pc, #20]	@ (800de70 <TEMPLATE_Init+0x24>)
 800de5c:	4803      	ldr	r0, [pc, #12]	@ (800de6c <TEMPLATE_Init+0x20>)
 800de5e:	f7ff ff61 	bl	800dd24 <USBD_CDC_SetRxBuffer>
      return (0);
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	bd80      	pop	{r7, pc}
 800de68:	20000c40 	.word	0x20000c40
 800de6c:	200006c0 	.word	0x200006c0
 800de70:	20000a40 	.word	0x20000a40

0800de74 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800de74:	b480      	push	{r7}
 800de76:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <TEMPLATE_Transmit>:

uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800de90:	2300      	movs	r3, #0
 800de92:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800de94:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <TEMPLATE_Transmit+0x48>)
 800de96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e00b      	b.n	800dec2 <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800deaa:	887b      	ldrh	r3, [r7, #2]
 800deac:	461a      	mov	r2, r3
 800deae:	6879      	ldr	r1, [r7, #4]
 800deb0:	4806      	ldr	r0, [pc, #24]	@ (800decc <TEMPLATE_Transmit+0x48>)
 800deb2:	f7ff ff15 	bl	800dce0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800deb6:	4805      	ldr	r0, [pc, #20]	@ (800decc <TEMPLATE_Transmit+0x48>)
 800deb8:	f7ff ff52 	bl	800dd60 <USBD_CDC_TransmitPacket>
 800debc:	4603      	mov	r3, r0
 800debe:	73fb      	strb	r3, [r7, #15]
  return result;
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	200006c0 	.word	0x200006c0

0800ded0 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	4603      	mov	r3, r0
 800ded8:	6039      	str	r1, [r7, #0]
 800deda:	71fb      	strb	r3, [r7, #7]
 800dedc:	4613      	mov	r3, r2
 800dede:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	2b23      	cmp	r3, #35	@ 0x23
 800dee4:	f200 8098 	bhi.w	800e018 <TEMPLATE_Control+0x148>
 800dee8:	a201      	add	r2, pc, #4	@ (adr r2, 800def0 <TEMPLATE_Control+0x20>)
 800deea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deee:	bf00      	nop
 800def0:	0800e019 	.word	0x0800e019
 800def4:	0800e019 	.word	0x0800e019
 800def8:	0800e019 	.word	0x0800e019
 800defc:	0800e019 	.word	0x0800e019
 800df00:	0800e019 	.word	0x0800e019
 800df04:	0800e019 	.word	0x0800e019
 800df08:	0800e019 	.word	0x0800e019
 800df0c:	0800e019 	.word	0x0800e019
 800df10:	0800e019 	.word	0x0800e019
 800df14:	0800e019 	.word	0x0800e019
 800df18:	0800e019 	.word	0x0800e019
 800df1c:	0800e019 	.word	0x0800e019
 800df20:	0800e019 	.word	0x0800e019
 800df24:	0800e019 	.word	0x0800e019
 800df28:	0800e019 	.word	0x0800e019
 800df2c:	0800e019 	.word	0x0800e019
 800df30:	0800e019 	.word	0x0800e019
 800df34:	0800e019 	.word	0x0800e019
 800df38:	0800e019 	.word	0x0800e019
 800df3c:	0800e019 	.word	0x0800e019
 800df40:	0800e019 	.word	0x0800e019
 800df44:	0800e019 	.word	0x0800e019
 800df48:	0800e019 	.word	0x0800e019
 800df4c:	0800e019 	.word	0x0800e019
 800df50:	0800e019 	.word	0x0800e019
 800df54:	0800e019 	.word	0x0800e019
 800df58:	0800e019 	.word	0x0800e019
 800df5c:	0800e019 	.word	0x0800e019
 800df60:	0800e019 	.word	0x0800e019
 800df64:	0800e019 	.word	0x0800e019
 800df68:	0800e019 	.word	0x0800e019
 800df6c:	0800e019 	.word	0x0800e019
 800df70:	0800df81 	.word	0x0800df81
 800df74:	0800dfc5 	.word	0x0800dfc5
 800df78:	0800e019 	.word	0x0800e019
 800df7c:	0800e019 	.word	0x0800e019
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	461a      	mov	r2, r3
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	021b      	lsls	r3, r3, #8
 800df8e:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	3302      	adds	r3, #2
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800df98:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	3303      	adds	r3, #3
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	061b      	lsls	r3, r3, #24
 800dfa2:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4b20      	ldr	r3, [pc, #128]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfa8:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	791a      	ldrb	r2, [r3, #4]
 800dfae:	4b1e      	ldr	r3, [pc, #120]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfb0:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	795a      	ldrb	r2, [r3, #5]
 800dfb6:	4b1c      	ldr	r3, [pc, #112]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfb8:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	799a      	ldrb	r2, [r3, #6]
 800dfbe:	4b1a      	ldr	r3, [pc, #104]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfc0:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800dfc2:	e02a      	b.n	800e01a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800dfc4:	4b18      	ldr	r3, [pc, #96]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800dfce:	4b16      	ldr	r3, [pc, #88]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	0a1a      	lsrs	r2, r3, #8
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b2d2      	uxtb	r2, r2
 800dfda:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800dfdc:	4b12      	ldr	r3, [pc, #72]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	0c1a      	lsrs	r2, r3, #16
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	3302      	adds	r3, #2
 800dfe6:	b2d2      	uxtb	r2, r2
 800dfe8:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800dfea:	4b0f      	ldr	r3, [pc, #60]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	0e1a      	lsrs	r2, r3, #24
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	3303      	adds	r3, #3
 800dff4:	b2d2      	uxtb	r2, r2
 800dff6:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	3304      	adds	r3, #4
 800dffc:	4a0a      	ldr	r2, [pc, #40]	@ (800e028 <TEMPLATE_Control+0x158>)
 800dffe:	7912      	ldrb	r2, [r2, #4]
 800e000:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	3305      	adds	r3, #5
 800e006:	4a08      	ldr	r2, [pc, #32]	@ (800e028 <TEMPLATE_Control+0x158>)
 800e008:	7952      	ldrb	r2, [r2, #5]
 800e00a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	3306      	adds	r3, #6
 800e010:	4a05      	ldr	r2, [pc, #20]	@ (800e028 <TEMPLATE_Control+0x158>)
 800e012:	7992      	ldrb	r2, [r2, #6]
 800e014:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e016:	e000      	b.n	800e01a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e018:	bf00      	nop
  }

  return (0);
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	200000c8 	.word	0x200000c8

0800e02c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b31      	cmp	r3, #49	@ 0x31
 800e03c:	d105      	bne.n	800e04a <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800e03e:	2201      	movs	r2, #1
 800e040:	2120      	movs	r1, #32
 800e042:	480a      	ldr	r0, [pc, #40]	@ (800e06c <TEMPLATE_Receive+0x40>)
 800e044:	f7f4 f9ce 	bl	80023e4 <HAL_GPIO_WritePin>
 800e048:	e008      	b.n	800e05c <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b30      	cmp	r3, #48	@ 0x30
 800e050:	d104      	bne.n	800e05c <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800e052:	2200      	movs	r2, #0
 800e054:	2120      	movs	r1, #32
 800e056:	4805      	ldr	r0, [pc, #20]	@ (800e06c <TEMPLATE_Receive+0x40>)
 800e058:	f7f4 f9c4 	bl	80023e4 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e05c:	4804      	ldr	r0, [pc, #16]	@ (800e070 <TEMPLATE_Receive+0x44>)
 800e05e:	f7ff febf 	bl	800dde0 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	42020000 	.word	0x42020000
 800e070:	200006c0 	.word	0x200006c0

0800e074 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	4613      	mov	r3, r2
 800e080:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	f000 faa5 	bl	800e5f6 <USBD_LL_SetupStage>
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e0c6:	78fa      	ldrb	r2, [r7, #3]
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	00db      	lsls	r3, r3, #3
 800e0d2:	440b      	add	r3, r1
 800e0d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f000 fadf 	bl	800e6a0 <USBD_LL_DataOutStage>
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b082      	sub	sp, #8
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e0fc:	78fa      	ldrb	r2, [r7, #3]
 800e0fe:	6879      	ldr	r1, [r7, #4]
 800e100:	4613      	mov	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	440b      	add	r3, r1
 800e10a:	3328      	adds	r3, #40	@ 0x28
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	78fb      	ldrb	r3, [r7, #3]
 800e110:	4619      	mov	r1, r3
 800e112:	f000 fb78 	bl	800e806 <USBD_LL_DataInStage>
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b082      	sub	sp, #8
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e12c:	4618      	mov	r0, r3
 800e12e:	f000 fc7e 	bl	800ea2e <USBD_LL_SOF>
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e142:	2301      	movs	r3, #1
 800e144:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	79db      	ldrb	r3, [r3, #7]
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d001      	beq.n	800e152 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e14e:	f7f2 fe65 	bl	8000e1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e158:	7bfa      	ldrb	r2, [r7, #15]
 800e15a:	4611      	mov	r1, r2
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 fc56 	bl	800ea0e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 fbfe 	bl	800e96a <USBD_LL_Reset>
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a19      	ldr	r2, [pc, #100]	@ (800e1e8 <USBD_LL_Init+0x70>)
 800e184:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e18e:	2340      	movs	r3, #64	@ 0x40
 800e190:	2200      	movs	r2, #0
 800e192:	2100      	movs	r1, #0
 800e194:	f7f5 ff42 	bl	800401c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e19e:	2380      	movs	r3, #128	@ 0x80
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	2180      	movs	r1, #128	@ 0x80
 800e1a4:	f7f5 ff3a 	bl	800401c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e1ae:	23c0      	movs	r3, #192	@ 0xc0
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	2181      	movs	r1, #129	@ 0x81
 800e1b4:	f7f5 ff32 	bl	800401c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e1be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	f7f5 ff29 	bl	800401c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e1d0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	2182      	movs	r1, #130	@ 0x82
 800e1d8:	f7f5 ff20 	bl	800401c <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200003dc 	.word	0x200003dc

0800e1ec <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f4 fbf2 	bl	80029e4 <HAL_PCD_Start>
 800e200:	4603      	mov	r3, r0
 800e202:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e204:	7bfb      	ldrb	r3, [r7, #15]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 f916 	bl	800e438 <USBD_Get_USB_Status>
 800e20c:	4603      	mov	r3, r0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b084      	sub	sp, #16
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	4608      	mov	r0, r1
 800e220:	4611      	mov	r1, r2
 800e222:	461a      	mov	r2, r3
 800e224:	4603      	mov	r3, r0
 800e226:	70fb      	strb	r3, [r7, #3]
 800e228:	460b      	mov	r3, r1
 800e22a:	70bb      	strb	r3, [r7, #2]
 800e22c:	4613      	mov	r3, r2
 800e22e:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e236:	78bb      	ldrb	r3, [r7, #2]
 800e238:	883a      	ldrh	r2, [r7, #0]
 800e23a:	78f9      	ldrb	r1, [r7, #3]
 800e23c:	f7f4 fd21 	bl	8002c82 <HAL_PCD_EP_Open>
 800e240:	4603      	mov	r3, r0
 800e242:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e244:	7bfb      	ldrb	r3, [r7, #15]
 800e246:	4618      	mov	r0, r3
 800e248:	f000 f8f6 	bl	800e438 <USBD_Get_USB_Status>
 800e24c:	4603      	mov	r3, r0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b084      	sub	sp, #16
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	460b      	mov	r3, r1
 800e260:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e268:	78fa      	ldrb	r2, [r7, #3]
 800e26a:	4611      	mov	r1, r2
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7f4 fd69 	bl	8002d44 <HAL_PCD_EP_Close>
 800e272:	4603      	mov	r3, r0
 800e274:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e276:	7bfb      	ldrb	r3, [r7, #15]
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 f8dd 	bl	800e438 <USBD_Get_USB_Status>
 800e27e:	4603      	mov	r3, r0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	460b      	mov	r3, r1
 800e292:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e29a:	78fa      	ldrb	r2, [r7, #3]
 800e29c:	4611      	mov	r1, r2
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f4 fe1c 	bl	8002edc <HAL_PCD_EP_SetStall>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 f8c4 	bl	800e438 <USBD_Get_USB_Status>
 800e2b0:	4603      	mov	r3, r0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b084      	sub	sp, #16
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2cc:	78fa      	ldrb	r2, [r7, #3]
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f4 fe57 	bl	8002f84 <HAL_PCD_EP_ClrStall>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f000 f8ab 	bl	800e438 <USBD_Get_USB_Status>
 800e2e2:	4603      	mov	r3, r0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2fe:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e304:	2b00      	cmp	r3, #0
 800e306:	da0b      	bge.n	800e320 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e30e:	68f9      	ldr	r1, [r7, #12]
 800e310:	4613      	mov	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	00db      	lsls	r3, r3, #3
 800e318:	440b      	add	r3, r1
 800e31a:	3316      	adds	r3, #22
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	e00b      	b.n	800e338 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e320:	78fb      	ldrb	r3, [r7, #3]
 800e322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e326:	68f9      	ldr	r1, [r7, #12]
 800e328:	4613      	mov	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4413      	add	r3, r2
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	440b      	add	r3, r1
 800e332:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e336:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	460b      	mov	r3, r1
 800e34e:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e356:	78fa      	ldrb	r2, [r7, #3]
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7f4 fc6d 	bl	8002c3a <HAL_PCD_SetAddress>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f866 	bl	800e438 <USBD_Get_USB_Status>
 800e36c:	4603      	mov	r3, r0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b086      	sub	sp, #24
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	60f8      	str	r0, [r7, #12]
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	603b      	str	r3, [r7, #0]
 800e382:	460b      	mov	r3, r1
 800e384:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e38c:	7af9      	ldrb	r1, [r7, #11]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	f7f4 fd6b 	bl	8002e6c <HAL_PCD_EP_Transmit>
 800e396:	4603      	mov	r3, r0
 800e398:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e39a:	7dfb      	ldrb	r3, [r7, #23]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 f84b 	bl	800e438 <USBD_Get_USB_Status>
 800e3a2:	4603      	mov	r3, r0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	607a      	str	r2, [r7, #4]
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3c2:	7af9      	ldrb	r1, [r7, #11]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	f7f4 fd06 	bl	8002dd8 <HAL_PCD_EP_Receive>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e3d0:	7dfb      	ldrb	r3, [r7, #23]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 f830 	bl	800e438 <USBD_Get_USB_Status>
 800e3d8:	4603      	mov	r3, r0
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b082      	sub	sp, #8
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3f4:	78fa      	ldrb	r2, [r7, #3]
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f4 fd1f 	bl	8002e3c <HAL_PCD_EP_GetRxCount>
 800e3fe:	4603      	mov	r3, r0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e410:	4b03      	ldr	r3, [pc, #12]	@ (800e420 <USBD_static_malloc+0x18>)
}
 800e412:	4618      	mov	r0, r3
 800e414:	370c      	adds	r7, #12
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	20000e40 	.word	0x20000e40

0800e424 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	2b03      	cmp	r3, #3
 800e44a:	d817      	bhi.n	800e47c <USBD_Get_USB_Status+0x44>
 800e44c:	a201      	add	r2, pc, #4	@ (adr r2, 800e454 <USBD_Get_USB_Status+0x1c>)
 800e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e452:	bf00      	nop
 800e454:	0800e465 	.word	0x0800e465
 800e458:	0800e46b 	.word	0x0800e46b
 800e45c:	0800e471 	.word	0x0800e471
 800e460:	0800e477 	.word	0x0800e477
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	73fb      	strb	r3, [r7, #15]
             break;
 800e468:	e00b      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e46a:	2303      	movs	r3, #3
 800e46c:	73fb      	strb	r3, [r7, #15]
             break;
 800e46e:	e008      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e470:	2301      	movs	r3, #1
 800e472:	73fb      	strb	r3, [r7, #15]
             break;
 800e474:	e005      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e476:	2303      	movs	r3, #3
 800e478:	73fb      	strb	r3, [r7, #15]
             break;
 800e47a:	e002      	b.n	800e482 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e47c:	2303      	movs	r3, #3
 800e47e:	73fb      	strb	r3, [r7, #15]
             break;
 800e480:	bf00      	nop
      }
      return usb_status;
 800e482:	7bfb      	ldrb	r3, [r7, #15]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3714      	adds	r7, #20
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	4613      	mov	r3, r2
 800e49c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e4a4:	2303      	movs	r3, #3
 800e4a6:	e01f      	b.n	800e4e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d003      	beq.n	800e4ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	79fa      	ldrb	r2, [r7, #7]
 800e4da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f7ff fe4b 	bl	800e178 <USBD_LL_Init>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e4e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d101      	bne.n	800e508 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e504:	2303      	movs	r3, #3
 800e506:	e025      	b.n	800e554 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	32ae      	adds	r2, #174	@ 0xae
 800e51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00f      	beq.n	800e544 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	32ae      	adds	r2, #174	@ 0xae
 800e52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e534:	f107 020e 	add.w	r2, r7, #14
 800e538:	4610      	mov	r0, r2
 800e53a:	4798      	blx	r3
 800e53c:	4602      	mov	r2, r0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7ff fe41 	bl	800e1ec <USBD_LL_Start>
 800e56a:	4603      	mov	r3, r0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e57c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	460b      	mov	r3, r1
 800e594:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d009      	beq.n	800e5b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	78fa      	ldrb	r2, [r7, #3]
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	4798      	blx	r3
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	78fa      	ldrb	r2, [r7, #3]
 800e5dc:	4611      	mov	r1, r2
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	4618      	mov	r0, r3
 800e60a:	f001 f846 	bl	800f69a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e61c:	461a      	mov	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e62a:	f003 031f 	and.w	r3, r3, #31
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d01a      	beq.n	800e668 <USBD_LL_SetupStage+0x72>
 800e632:	2b02      	cmp	r3, #2
 800e634:	d822      	bhi.n	800e67c <USBD_LL_SetupStage+0x86>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <USBD_LL_SetupStage+0x4a>
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d00a      	beq.n	800e654 <USBD_LL_SetupStage+0x5e>
 800e63e:	e01d      	b.n	800e67c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fa9d 	bl	800eb88 <USBD_StdDevReq>
 800e64e:	4603      	mov	r3, r0
 800e650:	73fb      	strb	r3, [r7, #15]
      break;
 800e652:	e020      	b.n	800e696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 fb05 	bl	800ec6c <USBD_StdItfReq>
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
      break;
 800e666:	e016      	b.n	800e696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fb67 	bl	800ed44 <USBD_StdEPReq>
 800e676:	4603      	mov	r3, r0
 800e678:	73fb      	strb	r3, [r7, #15]
      break;
 800e67a:	e00c      	b.n	800e696 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e682:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e686:	b2db      	uxtb	r3, r3
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff fdfc 	bl	800e288 <USBD_LL_StallEP>
 800e690:	4603      	mov	r3, r0
 800e692:	73fb      	strb	r3, [r7, #15]
      break;
 800e694:	bf00      	nop
  }

  return ret;
 800e696:	7bfb      	ldrb	r3, [r7, #15]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d16e      	bne.n	800e796 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e6be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	f040 8098 	bne.w	800e7fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	689a      	ldr	r2, [r3, #8]
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d913      	bls.n	800e700 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	689a      	ldr	r2, [r3, #8]
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	1ad2      	subs	r2, r2, r3
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	bf28      	it	cs
 800e6f2:	4613      	movcs	r3, r2
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f001 f9cf 	bl	800fa9c <USBD_CtlContinueRx>
 800e6fe:	e07d      	b.n	800e7fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e706:	f003 031f 	and.w	r3, r3, #31
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d014      	beq.n	800e738 <USBD_LL_DataOutStage+0x98>
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d81d      	bhi.n	800e74e <USBD_LL_DataOutStage+0xae>
 800e712:	2b00      	cmp	r3, #0
 800e714:	d002      	beq.n	800e71c <USBD_LL_DataOutStage+0x7c>
 800e716:	2b01      	cmp	r3, #1
 800e718:	d003      	beq.n	800e722 <USBD_LL_DataOutStage+0x82>
 800e71a:	e018      	b.n	800e74e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e71c:	2300      	movs	r3, #0
 800e71e:	75bb      	strb	r3, [r7, #22]
            break;
 800e720:	e018      	b.n	800e754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	4619      	mov	r1, r3
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 f99e 	bl	800ea6e <USBD_CoreFindIF>
 800e732:	4603      	mov	r3, r0
 800e734:	75bb      	strb	r3, [r7, #22]
            break;
 800e736:	e00d      	b.n	800e754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	4619      	mov	r1, r3
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f000 f9a0 	bl	800ea88 <USBD_CoreFindEP>
 800e748:	4603      	mov	r3, r0
 800e74a:	75bb      	strb	r3, [r7, #22]
            break;
 800e74c:	e002      	b.n	800e754 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e74e:	2300      	movs	r3, #0
 800e750:	75bb      	strb	r3, [r7, #22]
            break;
 800e752:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e754:	7dbb      	ldrb	r3, [r7, #22]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d119      	bne.n	800e78e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b03      	cmp	r3, #3
 800e764:	d113      	bne.n	800e78e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e766:	7dba      	ldrb	r2, [r7, #22]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	32ae      	adds	r2, #174	@ 0xae
 800e76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00b      	beq.n	800e78e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e776:	7dba      	ldrb	r2, [r7, #22]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e77e:	7dba      	ldrb	r2, [r7, #22]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	32ae      	adds	r2, #174	@ 0xae
 800e784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f001 f995 	bl	800fabe <USBD_CtlSendStatus>
 800e794:	e032      	b.n	800e7fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e796:	7afb      	ldrb	r3, [r7, #11]
 800e798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	4619      	mov	r1, r3
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f000 f971 	bl	800ea88 <USBD_CoreFindEP>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7aa:	7dbb      	ldrb	r3, [r7, #22]
 800e7ac:	2bff      	cmp	r3, #255	@ 0xff
 800e7ae:	d025      	beq.n	800e7fc <USBD_LL_DataOutStage+0x15c>
 800e7b0:	7dbb      	ldrb	r3, [r7, #22]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d122      	bne.n	800e7fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d117      	bne.n	800e7f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e7c2:	7dba      	ldrb	r2, [r7, #22]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	32ae      	adds	r2, #174	@ 0xae
 800e7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7cc:	699b      	ldr	r3, [r3, #24]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00f      	beq.n	800e7f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e7d2:	7dba      	ldrb	r2, [r7, #22]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e7da:	7dba      	ldrb	r2, [r7, #22]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	32ae      	adds	r2, #174	@ 0xae
 800e7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	7afa      	ldrb	r2, [r7, #11]
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	4798      	blx	r3
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	e000      	b.n	800e7fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3718      	adds	r7, #24
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b086      	sub	sp, #24
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	460b      	mov	r3, r1
 800e810:	607a      	str	r2, [r7, #4]
 800e812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e814:	7afb      	ldrb	r3, [r7, #11]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d16f      	bne.n	800e8fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3314      	adds	r3, #20
 800e81e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e826:	2b02      	cmp	r3, #2
 800e828:	d15a      	bne.n	800e8e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	689a      	ldr	r2, [r3, #8]
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	429a      	cmp	r2, r3
 800e834:	d914      	bls.n	800e860 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	689a      	ldr	r2, [r3, #8]
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	1ad2      	subs	r2, r2, r3
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	461a      	mov	r2, r3
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f001 f8f7 	bl	800fa40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e852:	2300      	movs	r3, #0
 800e854:	2200      	movs	r2, #0
 800e856:	2100      	movs	r1, #0
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f7ff fda7 	bl	800e3ac <USBD_LL_PrepareReceive>
 800e85e:	e03f      	b.n	800e8e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d11c      	bne.n	800e8a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e874:	429a      	cmp	r2, r3
 800e876:	d316      	bcc.n	800e8a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e882:	429a      	cmp	r2, r3
 800e884:	d20f      	bcs.n	800e8a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e886:	2200      	movs	r2, #0
 800e888:	2100      	movs	r1, #0
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f001 f8d8 	bl	800fa40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e898:	2300      	movs	r3, #0
 800e89a:	2200      	movs	r2, #0
 800e89c:	2100      	movs	r1, #0
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f7ff fd84 	bl	800e3ac <USBD_LL_PrepareReceive>
 800e8a4:	e01c      	b.n	800e8e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d10f      	bne.n	800e8d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d009      	beq.n	800e8d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8d2:	2180      	movs	r1, #128	@ 0x80
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff fcd7 	bl	800e288 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f001 f902 	bl	800fae4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d03a      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f7ff fe42 	bl	800e574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e8f8:	e032      	b.n	800e960 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e8fa:	7afb      	ldrb	r3, [r7, #11]
 800e8fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e900:	b2db      	uxtb	r3, r3
 800e902:	4619      	mov	r1, r3
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f000 f8bf 	bl	800ea88 <USBD_CoreFindEP>
 800e90a:	4603      	mov	r3, r0
 800e90c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e90e:	7dfb      	ldrb	r3, [r7, #23]
 800e910:	2bff      	cmp	r3, #255	@ 0xff
 800e912:	d025      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
 800e914:	7dfb      	ldrb	r3, [r7, #23]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d122      	bne.n	800e960 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b03      	cmp	r3, #3
 800e924:	d11c      	bne.n	800e960 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e926:	7dfa      	ldrb	r2, [r7, #23]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	32ae      	adds	r2, #174	@ 0xae
 800e92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d014      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e936:	7dfa      	ldrb	r2, [r7, #23]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e93e:	7dfa      	ldrb	r2, [r7, #23]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	32ae      	adds	r2, #174	@ 0xae
 800e944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	7afa      	ldrb	r2, [r7, #11]
 800e94c:	4611      	mov	r1, r2
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	4798      	blx	r3
 800e952:	4603      	mov	r3, r0
 800e954:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e956:	7dbb      	ldrb	r3, [r7, #22]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e95c:	7dbb      	ldrb	r3, [r7, #22]
 800e95e:	e000      	b.n	800e962 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3718      	adds	r7, #24
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b084      	sub	sp, #16
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d014      	beq.n	800e9d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00e      	beq.n	800e9d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	6852      	ldr	r2, [r2, #4]
 800e9be:	b2d2      	uxtb	r2, r2
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	4798      	blx	r3
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e9cc:	2303      	movs	r3, #3
 800e9ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9d0:	2340      	movs	r3, #64	@ 0x40
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7ff fc1d 	bl	800e216 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2240      	movs	r2, #64	@ 0x40
 800e9e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9ec:	2340      	movs	r3, #64	@ 0x40
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2180      	movs	r1, #128	@ 0x80
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7ff fc0f 	bl	800e216 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2240      	movs	r2, #64	@ 0x40
 800ea02:	621a      	str	r2, [r3, #32]

  return ret;
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	370c      	adds	r7, #12
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b082      	sub	sp, #8
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d110      	bne.n	800ea64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00b      	beq.n	800ea64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea52:	69db      	ldr	r3, [r3, #28]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d005      	beq.n	800ea64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea5e:	69db      	ldr	r3, [r3, #28]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b083      	sub	sp, #12
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	460b      	mov	r3, r1
 800ea78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ea7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ea94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b086      	sub	sp, #24
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	885b      	ldrh	r3, [r3, #2]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d91f      	bls.n	800eb08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800eace:	e013      	b.n	800eaf8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ead0:	f107 030a 	add.w	r3, r7, #10
 800ead4:	4619      	mov	r1, r3
 800ead6:	6978      	ldr	r0, [r7, #20]
 800ead8:	f000 f81b 	bl	800eb12 <USBD_GetNextDesc>
 800eadc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	785b      	ldrb	r3, [r3, #1]
 800eae2:	2b05      	cmp	r3, #5
 800eae4:	d108      	bne.n	800eaf8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	789b      	ldrb	r3, [r3, #2]
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d008      	beq.n	800eb06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	897b      	ldrh	r3, [r7, #10]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d8e5      	bhi.n	800ead0 <USBD_GetEpDesc+0x2e>
 800eb04:	e000      	b.n	800eb08 <USBD_GetEpDesc+0x66>
          break;
 800eb06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800eb08:	693b      	ldr	r3, [r7, #16]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800eb12:	b480      	push	{r7}
 800eb14:	b085      	sub	sp, #20
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	7812      	ldrb	r2, [r2, #0]
 800eb28:	4413      	add	r3, r2
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	461a      	mov	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4413      	add	r3, r2
 800eb3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b087      	sub	sp, #28
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb68:	8a3b      	ldrh	r3, [r7, #16]
 800eb6a:	021b      	lsls	r3, r3, #8
 800eb6c:	b21a      	sxth	r2, r3
 800eb6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb72:	4313      	orrs	r3, r2
 800eb74:	b21b      	sxth	r3, r3
 800eb76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb78:	89fb      	ldrh	r3, [r7, #14]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	371c      	adds	r7, #28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr
	...

0800eb88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb9e:	2b40      	cmp	r3, #64	@ 0x40
 800eba0:	d005      	beq.n	800ebae <USBD_StdDevReq+0x26>
 800eba2:	2b40      	cmp	r3, #64	@ 0x40
 800eba4:	d857      	bhi.n	800ec56 <USBD_StdDevReq+0xce>
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00f      	beq.n	800ebca <USBD_StdDevReq+0x42>
 800ebaa:	2b20      	cmp	r3, #32
 800ebac:	d153      	bne.n	800ec56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	32ae      	adds	r2, #174	@ 0xae
 800ebb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	4798      	blx	r3
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc8:	e04a      	b.n	800ec60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	785b      	ldrb	r3, [r3, #1]
 800ebce:	2b09      	cmp	r3, #9
 800ebd0:	d83b      	bhi.n	800ec4a <USBD_StdDevReq+0xc2>
 800ebd2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd8 <USBD_StdDevReq+0x50>)
 800ebd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd8:	0800ec2d 	.word	0x0800ec2d
 800ebdc:	0800ec41 	.word	0x0800ec41
 800ebe0:	0800ec4b 	.word	0x0800ec4b
 800ebe4:	0800ec37 	.word	0x0800ec37
 800ebe8:	0800ec4b 	.word	0x0800ec4b
 800ebec:	0800ec0b 	.word	0x0800ec0b
 800ebf0:	0800ec01 	.word	0x0800ec01
 800ebf4:	0800ec4b 	.word	0x0800ec4b
 800ebf8:	0800ec23 	.word	0x0800ec23
 800ebfc:	0800ec15 	.word	0x0800ec15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fa3c 	bl	800f080 <USBD_GetDescriptor>
          break;
 800ec08:	e024      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fba1 	bl	800f354 <USBD_SetAddress>
          break;
 800ec12:	e01f      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ec14:	6839      	ldr	r1, [r7, #0]
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fbe0 	bl	800f3dc <USBD_SetConfig>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ec20:	e018      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fc83 	bl	800f530 <USBD_GetConfig>
          break;
 800ec2a:	e013      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 fcb4 	bl	800f59c <USBD_GetStatus>
          break;
 800ec34:	e00e      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fce3 	bl	800f604 <USBD_SetFeature>
          break;
 800ec3e:	e009      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 fd07 	bl	800f656 <USBD_ClrFeature>
          break;
 800ec48:	e004      	b.n	800ec54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 fd5e 	bl	800f70e <USBD_CtlError>
          break;
 800ec52:	bf00      	nop
      }
      break;
 800ec54:	e004      	b.n	800ec60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ec56:	6839      	ldr	r1, [r7, #0]
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 fd58 	bl	800f70e <USBD_CtlError>
      break;
 800ec5e:	bf00      	nop
  }

  return ret;
 800ec60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop

0800ec6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec82:	2b40      	cmp	r3, #64	@ 0x40
 800ec84:	d005      	beq.n	800ec92 <USBD_StdItfReq+0x26>
 800ec86:	2b40      	cmp	r3, #64	@ 0x40
 800ec88:	d852      	bhi.n	800ed30 <USBD_StdItfReq+0xc4>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <USBD_StdItfReq+0x26>
 800ec8e:	2b20      	cmp	r3, #32
 800ec90:	d14e      	bne.n	800ed30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d840      	bhi.n	800ed22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	889b      	ldrh	r3, [r3, #4]
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d836      	bhi.n	800ed18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	889b      	ldrh	r3, [r3, #4]
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7ff fedb 	bl	800ea6e <USBD_CoreFindIF>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecbc:	7bbb      	ldrb	r3, [r7, #14]
 800ecbe:	2bff      	cmp	r3, #255	@ 0xff
 800ecc0:	d01d      	beq.n	800ecfe <USBD_StdItfReq+0x92>
 800ecc2:	7bbb      	ldrb	r3, [r7, #14]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d11a      	bne.n	800ecfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ecc8:	7bba      	ldrb	r2, [r7, #14]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	32ae      	adds	r2, #174	@ 0xae
 800ecce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00f      	beq.n	800ecf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ecd8:	7bba      	ldrb	r2, [r7, #14]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ece0:	7bba      	ldrb	r2, [r7, #14]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	32ae      	adds	r2, #174	@ 0xae
 800ece6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	4798      	blx	r3
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ecf6:	e004      	b.n	800ed02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ecfc:	e001      	b.n	800ed02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	88db      	ldrh	r3, [r3, #6]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d110      	bne.n	800ed2c <USBD_StdItfReq+0xc0>
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10d      	bne.n	800ed2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fed4 	bl	800fabe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ed16:	e009      	b.n	800ed2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 fcf7 	bl	800f70e <USBD_CtlError>
          break;
 800ed20:	e004      	b.n	800ed2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 fcf2 	bl	800f70e <USBD_CtlError>
          break;
 800ed2a:	e000      	b.n	800ed2e <USBD_StdItfReq+0xc2>
          break;
 800ed2c:	bf00      	nop
      }
      break;
 800ed2e:	e004      	b.n	800ed3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ed30:	6839      	ldr	r1, [r7, #0]
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 fceb 	bl	800f70e <USBD_CtlError>
      break;
 800ed38:	bf00      	nop
  }

  return ret;
 800ed3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	889b      	ldrh	r3, [r3, #4]
 800ed56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed60:	2b40      	cmp	r3, #64	@ 0x40
 800ed62:	d007      	beq.n	800ed74 <USBD_StdEPReq+0x30>
 800ed64:	2b40      	cmp	r3, #64	@ 0x40
 800ed66:	f200 817f 	bhi.w	800f068 <USBD_StdEPReq+0x324>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d02a      	beq.n	800edc4 <USBD_StdEPReq+0x80>
 800ed6e:	2b20      	cmp	r3, #32
 800ed70:	f040 817a 	bne.w	800f068 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff fe85 	bl	800ea88 <USBD_CoreFindEP>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed82:	7b7b      	ldrb	r3, [r7, #13]
 800ed84:	2bff      	cmp	r3, #255	@ 0xff
 800ed86:	f000 8174 	beq.w	800f072 <USBD_StdEPReq+0x32e>
 800ed8a:	7b7b      	ldrb	r3, [r7, #13]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f040 8170 	bne.w	800f072 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ed92:	7b7a      	ldrb	r2, [r7, #13]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ed9a:	7b7a      	ldrb	r2, [r7, #13]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	32ae      	adds	r2, #174	@ 0xae
 800eda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 8163 	beq.w	800f072 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800edac:	7b7a      	ldrb	r2, [r7, #13]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	32ae      	adds	r2, #174	@ 0xae
 800edb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	6839      	ldr	r1, [r7, #0]
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	4798      	blx	r3
 800edbe:	4603      	mov	r3, r0
 800edc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800edc2:	e156      	b.n	800f072 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	785b      	ldrb	r3, [r3, #1]
 800edc8:	2b03      	cmp	r3, #3
 800edca:	d008      	beq.n	800edde <USBD_StdEPReq+0x9a>
 800edcc:	2b03      	cmp	r3, #3
 800edce:	f300 8145 	bgt.w	800f05c <USBD_StdEPReq+0x318>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f000 809b 	beq.w	800ef0e <USBD_StdEPReq+0x1ca>
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d03c      	beq.n	800ee56 <USBD_StdEPReq+0x112>
 800eddc:	e13e      	b.n	800f05c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d002      	beq.n	800edf0 <USBD_StdEPReq+0xac>
 800edea:	2b03      	cmp	r3, #3
 800edec:	d016      	beq.n	800ee1c <USBD_StdEPReq+0xd8>
 800edee:	e02c      	b.n	800ee4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800edf0:	7bbb      	ldrb	r3, [r7, #14]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00d      	beq.n	800ee12 <USBD_StdEPReq+0xce>
 800edf6:	7bbb      	ldrb	r3, [r7, #14]
 800edf8:	2b80      	cmp	r3, #128	@ 0x80
 800edfa:	d00a      	beq.n	800ee12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800edfc:	7bbb      	ldrb	r3, [r7, #14]
 800edfe:	4619      	mov	r1, r3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff fa41 	bl	800e288 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee06:	2180      	movs	r1, #128	@ 0x80
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff fa3d 	bl	800e288 <USBD_LL_StallEP>
 800ee0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee10:	e020      	b.n	800ee54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 fc7a 	bl	800f70e <USBD_CtlError>
              break;
 800ee1a:	e01b      	b.n	800ee54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	885b      	ldrh	r3, [r3, #2]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10e      	bne.n	800ee42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee24:	7bbb      	ldrb	r3, [r7, #14]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00b      	beq.n	800ee42 <USBD_StdEPReq+0xfe>
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
 800ee2c:	2b80      	cmp	r3, #128	@ 0x80
 800ee2e:	d008      	beq.n	800ee42 <USBD_StdEPReq+0xfe>
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	88db      	ldrh	r3, [r3, #6]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d104      	bne.n	800ee42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee38:	7bbb      	ldrb	r3, [r7, #14]
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff fa23 	bl	800e288 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fe3b 	bl	800fabe <USBD_CtlSendStatus>

              break;
 800ee48:	e004      	b.n	800ee54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fc5e 	bl	800f70e <USBD_CtlError>
              break;
 800ee52:	bf00      	nop
          }
          break;
 800ee54:	e107      	b.n	800f066 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d002      	beq.n	800ee68 <USBD_StdEPReq+0x124>
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d016      	beq.n	800ee94 <USBD_StdEPReq+0x150>
 800ee66:	e04b      	b.n	800ef00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00d      	beq.n	800ee8a <USBD_StdEPReq+0x146>
 800ee6e:	7bbb      	ldrb	r3, [r7, #14]
 800ee70:	2b80      	cmp	r3, #128	@ 0x80
 800ee72:	d00a      	beq.n	800ee8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee74:	7bbb      	ldrb	r3, [r7, #14]
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff fa05 	bl	800e288 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee7e:	2180      	movs	r1, #128	@ 0x80
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7ff fa01 	bl	800e288 <USBD_LL_StallEP>
 800ee86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee88:	e040      	b.n	800ef0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ee8a:	6839      	ldr	r1, [r7, #0]
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fc3e 	bl	800f70e <USBD_CtlError>
              break;
 800ee92:	e03b      	b.n	800ef0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	885b      	ldrh	r3, [r3, #2]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d136      	bne.n	800ef0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ee9c:	7bbb      	ldrb	r3, [r7, #14]
 800ee9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d004      	beq.n	800eeb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eea6:	7bbb      	ldrb	r3, [r7, #14]
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff fa05 	bl	800e2ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 fe04 	bl	800fabe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff fde4 	bl	800ea88 <USBD_CoreFindEP>
 800eec0:	4603      	mov	r3, r0
 800eec2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eec4:	7b7b      	ldrb	r3, [r7, #13]
 800eec6:	2bff      	cmp	r3, #255	@ 0xff
 800eec8:	d01f      	beq.n	800ef0a <USBD_StdEPReq+0x1c6>
 800eeca:	7b7b      	ldrb	r3, [r7, #13]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d11c      	bne.n	800ef0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800eed0:	7b7a      	ldrb	r2, [r7, #13]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800eed8:	7b7a      	ldrb	r2, [r7, #13]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	32ae      	adds	r2, #174	@ 0xae
 800eede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d010      	beq.n	800ef0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eee8:	7b7a      	ldrb	r2, [r7, #13]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	32ae      	adds	r2, #174	@ 0xae
 800eeee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	6839      	ldr	r1, [r7, #0]
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	4798      	blx	r3
 800eefa:	4603      	mov	r3, r0
 800eefc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800eefe:	e004      	b.n	800ef0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 fc03 	bl	800f70e <USBD_CtlError>
              break;
 800ef08:	e000      	b.n	800ef0c <USBD_StdEPReq+0x1c8>
              break;
 800ef0a:	bf00      	nop
          }
          break;
 800ef0c:	e0ab      	b.n	800f066 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b02      	cmp	r3, #2
 800ef18:	d002      	beq.n	800ef20 <USBD_StdEPReq+0x1dc>
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d032      	beq.n	800ef84 <USBD_StdEPReq+0x240>
 800ef1e:	e097      	b.n	800f050 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d007      	beq.n	800ef36 <USBD_StdEPReq+0x1f2>
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
 800ef28:	2b80      	cmp	r3, #128	@ 0x80
 800ef2a:	d004      	beq.n	800ef36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ef2c:	6839      	ldr	r1, [r7, #0]
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fbed 	bl	800f70e <USBD_CtlError>
                break;
 800ef34:	e091      	b.n	800f05a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	da0b      	bge.n	800ef56 <USBD_StdEPReq+0x212>
 800ef3e:	7bbb      	ldrb	r3, [r7, #14]
 800ef40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef44:	4613      	mov	r3, r2
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	3310      	adds	r3, #16
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	4413      	add	r3, r2
 800ef52:	3304      	adds	r3, #4
 800ef54:	e00b      	b.n	800ef6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef56:	7bbb      	ldrb	r3, [r7, #14]
 800ef58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2202      	movs	r2, #2
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fd44 	bl	800fa0a <USBD_CtlSendData>
              break;
 800ef82:	e06a      	b.n	800f05a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ef84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	da11      	bge.n	800efb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef8c:	7bbb      	ldrb	r3, [r7, #14]
 800ef8e:	f003 020f 	and.w	r2, r3, #15
 800ef92:	6879      	ldr	r1, [r7, #4]
 800ef94:	4613      	mov	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4413      	add	r3, r2
 800ef9a:	009b      	lsls	r3, r3, #2
 800ef9c:	440b      	add	r3, r1
 800ef9e:	3324      	adds	r3, #36	@ 0x24
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d117      	bne.n	800efd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800efa6:	6839      	ldr	r1, [r7, #0]
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 fbb0 	bl	800f70e <USBD_CtlError>
                  break;
 800efae:	e054      	b.n	800f05a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efb0:	7bbb      	ldrb	r3, [r7, #14]
 800efb2:	f003 020f 	and.w	r2, r3, #15
 800efb6:	6879      	ldr	r1, [r7, #4]
 800efb8:	4613      	mov	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4413      	add	r3, r2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	440b      	add	r3, r1
 800efc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d104      	bne.n	800efd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 fb9d 	bl	800f70e <USBD_CtlError>
                  break;
 800efd4:	e041      	b.n	800f05a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	da0b      	bge.n	800eff6 <USBD_StdEPReq+0x2b2>
 800efde:	7bbb      	ldrb	r3, [r7, #14]
 800efe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800efe4:	4613      	mov	r3, r2
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4413      	add	r3, r2
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	3310      	adds	r3, #16
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	4413      	add	r3, r2
 800eff2:	3304      	adds	r3, #4
 800eff4:	e00b      	b.n	800f00e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eff6:	7bbb      	ldrb	r3, [r7, #14]
 800eff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	4413      	add	r3, r2
 800f00c:	3304      	adds	r3, #4
 800f00e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f010:	7bbb      	ldrb	r3, [r7, #14]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d002      	beq.n	800f01c <USBD_StdEPReq+0x2d8>
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	2b80      	cmp	r3, #128	@ 0x80
 800f01a:	d103      	bne.n	800f024 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	2200      	movs	r2, #0
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	e00e      	b.n	800f042 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	4619      	mov	r1, r3
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7ff f95f 	bl	800e2ec <USBD_LL_IsStallEP>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d003      	beq.n	800f03c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2201      	movs	r2, #1
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	e002      	b.n	800f042 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2200      	movs	r2, #0
 800f040:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	2202      	movs	r2, #2
 800f046:	4619      	mov	r1, r3
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 fcde 	bl	800fa0a <USBD_CtlSendData>
              break;
 800f04e:	e004      	b.n	800f05a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 fb5b 	bl	800f70e <USBD_CtlError>
              break;
 800f058:	bf00      	nop
          }
          break;
 800f05a:	e004      	b.n	800f066 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 fb55 	bl	800f70e <USBD_CtlError>
          break;
 800f064:	bf00      	nop
      }
      break;
 800f066:	e005      	b.n	800f074 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f068:	6839      	ldr	r1, [r7, #0]
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fb4f 	bl	800f70e <USBD_CtlError>
      break;
 800f070:	e000      	b.n	800f074 <USBD_StdEPReq+0x330>
      break;
 800f072:	bf00      	nop
  }

  return ret;
 800f074:	7bfb      	ldrb	r3, [r7, #15]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
	...

0800f080 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f092:	2300      	movs	r3, #0
 800f094:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	885b      	ldrh	r3, [r3, #2]
 800f09a:	0a1b      	lsrs	r3, r3, #8
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	2b06      	cmp	r3, #6
 800f0a2:	f200 8128 	bhi.w	800f2f6 <USBD_GetDescriptor+0x276>
 800f0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0ac <USBD_GetDescriptor+0x2c>)
 800f0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ac:	0800f0c9 	.word	0x0800f0c9
 800f0b0:	0800f0e1 	.word	0x0800f0e1
 800f0b4:	0800f121 	.word	0x0800f121
 800f0b8:	0800f2f7 	.word	0x0800f2f7
 800f0bc:	0800f2f7 	.word	0x0800f2f7
 800f0c0:	0800f297 	.word	0x0800f297
 800f0c4:	0800f2c3 	.word	0x0800f2c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	7c12      	ldrb	r2, [r2, #16]
 800f0d4:	f107 0108 	add.w	r1, r7, #8
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
 800f0dc:	60f8      	str	r0, [r7, #12]
      break;
 800f0de:	e112      	b.n	800f306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7c1b      	ldrb	r3, [r3, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10d      	bne.n	800f104 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f0:	f107 0208 	add.w	r2, r7, #8
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	4798      	blx	r3
 800f0f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	2202      	movs	r2, #2
 800f100:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f102:	e100      	b.n	800f306 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f10c:	f107 0208 	add.w	r2, r7, #8
 800f110:	4610      	mov	r0, r2
 800f112:	4798      	blx	r3
 800f114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3301      	adds	r3, #1
 800f11a:	2202      	movs	r2, #2
 800f11c:	701a      	strb	r2, [r3, #0]
      break;
 800f11e:	e0f2      	b.n	800f306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	885b      	ldrh	r3, [r3, #2]
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b05      	cmp	r3, #5
 800f128:	f200 80ac 	bhi.w	800f284 <USBD_GetDescriptor+0x204>
 800f12c:	a201      	add	r2, pc, #4	@ (adr r2, 800f134 <USBD_GetDescriptor+0xb4>)
 800f12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f132:	bf00      	nop
 800f134:	0800f14d 	.word	0x0800f14d
 800f138:	0800f181 	.word	0x0800f181
 800f13c:	0800f1b5 	.word	0x0800f1b5
 800f140:	0800f1e9 	.word	0x0800f1e9
 800f144:	0800f21d 	.word	0x0800f21d
 800f148:	0800f251 	.word	0x0800f251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00b      	beq.n	800f170 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	7c12      	ldrb	r2, [r2, #16]
 800f164:	f107 0108 	add.w	r1, r7, #8
 800f168:	4610      	mov	r0, r2
 800f16a:	4798      	blx	r3
 800f16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f16e:	e091      	b.n	800f294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 facb 	bl	800f70e <USBD_CtlError>
            err++;
 800f178:	7afb      	ldrb	r3, [r7, #11]
 800f17a:	3301      	adds	r3, #1
 800f17c:	72fb      	strb	r3, [r7, #11]
          break;
 800f17e:	e089      	b.n	800f294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00b      	beq.n	800f1a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	7c12      	ldrb	r2, [r2, #16]
 800f198:	f107 0108 	add.w	r1, r7, #8
 800f19c:	4610      	mov	r0, r2
 800f19e:	4798      	blx	r3
 800f1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1a2:	e077      	b.n	800f294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1a4:	6839      	ldr	r1, [r7, #0]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fab1 	bl	800f70e <USBD_CtlError>
            err++;
 800f1ac:	7afb      	ldrb	r3, [r7, #11]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f1b2:	e06f      	b.n	800f294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00b      	beq.n	800f1d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	7c12      	ldrb	r2, [r2, #16]
 800f1cc:	f107 0108 	add.w	r1, r7, #8
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	4798      	blx	r3
 800f1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1d6:	e05d      	b.n	800f294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fa97 	bl	800f70e <USBD_CtlError>
            err++;
 800f1e0:	7afb      	ldrb	r3, [r7, #11]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f1e6:	e055      	b.n	800f294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ee:	691b      	ldr	r3, [r3, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00b      	beq.n	800f20c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1fa:	691b      	ldr	r3, [r3, #16]
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	7c12      	ldrb	r2, [r2, #16]
 800f200:	f107 0108 	add.w	r1, r7, #8
 800f204:	4610      	mov	r0, r2
 800f206:	4798      	blx	r3
 800f208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f20a:	e043      	b.n	800f294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fa7d 	bl	800f70e <USBD_CtlError>
            err++;
 800f214:	7afb      	ldrb	r3, [r7, #11]
 800f216:	3301      	adds	r3, #1
 800f218:	72fb      	strb	r3, [r7, #11]
          break;
 800f21a:	e03b      	b.n	800f294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	7c12      	ldrb	r2, [r2, #16]
 800f234:	f107 0108 	add.w	r1, r7, #8
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
 800f23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f23e:	e029      	b.n	800f294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f240:	6839      	ldr	r1, [r7, #0]
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fa63 	bl	800f70e <USBD_CtlError>
            err++;
 800f248:	7afb      	ldrb	r3, [r7, #11]
 800f24a:	3301      	adds	r3, #1
 800f24c:	72fb      	strb	r3, [r7, #11]
          break;
 800f24e:	e021      	b.n	800f294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	7c12      	ldrb	r2, [r2, #16]
 800f268:	f107 0108 	add.w	r1, r7, #8
 800f26c:	4610      	mov	r0, r2
 800f26e:	4798      	blx	r3
 800f270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f272:	e00f      	b.n	800f294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fa49 	bl	800f70e <USBD_CtlError>
            err++;
 800f27c:	7afb      	ldrb	r3, [r7, #11]
 800f27e:	3301      	adds	r3, #1
 800f280:	72fb      	strb	r3, [r7, #11]
          break;
 800f282:	e007      	b.n	800f294 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fa41 	bl	800f70e <USBD_CtlError>
          err++;
 800f28c:	7afb      	ldrb	r3, [r7, #11]
 800f28e:	3301      	adds	r3, #1
 800f290:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f292:	bf00      	nop
      }
      break;
 800f294:	e037      	b.n	800f306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	7c1b      	ldrb	r3, [r3, #16]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d109      	bne.n	800f2b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2a6:	f107 0208 	add.w	r2, r7, #8
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	4798      	blx	r3
 800f2ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2b0:	e029      	b.n	800f306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fa2a 	bl	800f70e <USBD_CtlError>
        err++;
 800f2ba:	7afb      	ldrb	r3, [r7, #11]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	72fb      	strb	r3, [r7, #11]
      break;
 800f2c0:	e021      	b.n	800f306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	7c1b      	ldrb	r3, [r3, #16]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10d      	bne.n	800f2e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2d2:	f107 0208 	add.w	r2, r7, #8
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	4798      	blx	r3
 800f2da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	2207      	movs	r2, #7
 800f2e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2e4:	e00f      	b.n	800f306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fa10 	bl	800f70e <USBD_CtlError>
        err++;
 800f2ee:	7afb      	ldrb	r3, [r7, #11]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800f2f4:	e007      	b.n	800f306 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 fa08 	bl	800f70e <USBD_CtlError>
      err++;
 800f2fe:	7afb      	ldrb	r3, [r7, #11]
 800f300:	3301      	adds	r3, #1
 800f302:	72fb      	strb	r3, [r7, #11]
      break;
 800f304:	bf00      	nop
  }

  if (err != 0U)
 800f306:	7afb      	ldrb	r3, [r7, #11]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d11e      	bne.n	800f34a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	88db      	ldrh	r3, [r3, #6]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d016      	beq.n	800f342 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f314:	893b      	ldrh	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00e      	beq.n	800f338 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	88da      	ldrh	r2, [r3, #6]
 800f31e:	893b      	ldrh	r3, [r7, #8]
 800f320:	4293      	cmp	r3, r2
 800f322:	bf28      	it	cs
 800f324:	4613      	movcs	r3, r2
 800f326:	b29b      	uxth	r3, r3
 800f328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f32a:	893b      	ldrh	r3, [r7, #8]
 800f32c:	461a      	mov	r2, r3
 800f32e:	68f9      	ldr	r1, [r7, #12]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fb6a 	bl	800fa0a <USBD_CtlSendData>
 800f336:	e009      	b.n	800f34c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f9e7 	bl	800f70e <USBD_CtlError>
 800f340:	e004      	b.n	800f34c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fbbb 	bl	800fabe <USBD_CtlSendStatus>
 800f348:	e000      	b.n	800f34c <USBD_GetDescriptor+0x2cc>
    return;
 800f34a:	bf00      	nop
  }
}
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop

0800f354 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	889b      	ldrh	r3, [r3, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d131      	bne.n	800f3ca <USBD_SetAddress+0x76>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	88db      	ldrh	r3, [r3, #6]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d12d      	bne.n	800f3ca <USBD_SetAddress+0x76>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	885b      	ldrh	r3, [r3, #2]
 800f372:	2b7f      	cmp	r3, #127	@ 0x7f
 800f374:	d829      	bhi.n	800f3ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	885b      	ldrh	r3, [r3, #2]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b03      	cmp	r3, #3
 800f38c:	d104      	bne.n	800f398 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f38e:	6839      	ldr	r1, [r7, #0]
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 f9bc 	bl	800f70e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f396:	e01d      	b.n	800f3d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	7bfa      	ldrb	r2, [r7, #15]
 800f39c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f3a0:	7bfb      	ldrb	r3, [r7, #15]
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7fe ffcd 	bl	800e344 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 fb87 	bl	800fabe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d004      	beq.n	800f3c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2202      	movs	r2, #2
 800f3ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3be:	e009      	b.n	800f3d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c8:	e004      	b.n	800f3d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 f99e 	bl	800f70e <USBD_CtlError>
  }
}
 800f3d2:	bf00      	nop
 800f3d4:	bf00      	nop
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	885b      	ldrh	r3, [r3, #2]
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	4b4e      	ldr	r3, [pc, #312]	@ (800f52c <USBD_SetConfig+0x150>)
 800f3f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f3f4:	4b4d      	ldr	r3, [pc, #308]	@ (800f52c <USBD_SetConfig+0x150>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d905      	bls.n	800f408 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f985 	bl	800f70e <USBD_CtlError>
    return USBD_FAIL;
 800f404:	2303      	movs	r3, #3
 800f406:	e08c      	b.n	800f522 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	2b02      	cmp	r3, #2
 800f412:	d002      	beq.n	800f41a <USBD_SetConfig+0x3e>
 800f414:	2b03      	cmp	r3, #3
 800f416:	d029      	beq.n	800f46c <USBD_SetConfig+0x90>
 800f418:	e075      	b.n	800f506 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f41a:	4b44      	ldr	r3, [pc, #272]	@ (800f52c <USBD_SetConfig+0x150>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d020      	beq.n	800f464 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f422:	4b42      	ldr	r3, [pc, #264]	@ (800f52c <USBD_SetConfig+0x150>)
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	461a      	mov	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f42c:	4b3f      	ldr	r3, [pc, #252]	@ (800f52c <USBD_SetConfig+0x150>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff f8a9 	bl	800e58a <USBD_SetClassConfig>
 800f438:	4603      	mov	r3, r0
 800f43a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f43c:	7bfb      	ldrb	r3, [r7, #15]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d008      	beq.n	800f454 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f962 	bl	800f70e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2202      	movs	r2, #2
 800f44e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f452:	e065      	b.n	800f520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fb32 	bl	800fabe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2203      	movs	r2, #3
 800f45e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f462:	e05d      	b.n	800f520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 fb2a 	bl	800fabe <USBD_CtlSendStatus>
      break;
 800f46a:	e059      	b.n	800f520 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f46c:	4b2f      	ldr	r3, [pc, #188]	@ (800f52c <USBD_SetConfig+0x150>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d112      	bne.n	800f49a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2202      	movs	r2, #2
 800f478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f47c:	4b2b      	ldr	r3, [pc, #172]	@ (800f52c <USBD_SetConfig+0x150>)
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	461a      	mov	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f486:	4b29      	ldr	r3, [pc, #164]	@ (800f52c <USBD_SetConfig+0x150>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff f898 	bl	800e5c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fb13 	bl	800fabe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f498:	e042      	b.n	800f520 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f49a:	4b24      	ldr	r3, [pc, #144]	@ (800f52c <USBD_SetConfig+0x150>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d02a      	beq.n	800f4fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7ff f886 	bl	800e5c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f4b6:	4b1d      	ldr	r3, [pc, #116]	@ (800f52c <USBD_SetConfig+0x150>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800f52c <USBD_SetConfig+0x150>)
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff f85f 	bl	800e58a <USBD_SetClassConfig>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00f      	beq.n	800f4f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f918 	bl	800f70e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff f86b 	bl	800e5c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2202      	movs	r2, #2
 800f4f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f4f4:	e014      	b.n	800f520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fae1 	bl	800fabe <USBD_CtlSendStatus>
      break;
 800f4fc:	e010      	b.n	800f520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fadd 	bl	800fabe <USBD_CtlSendStatus>
      break;
 800f504:	e00c      	b.n	800f520 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f506:	6839      	ldr	r1, [r7, #0]
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f900 	bl	800f70e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f50e:	4b07      	ldr	r3, [pc, #28]	@ (800f52c <USBD_SetConfig+0x150>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	4619      	mov	r1, r3
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7ff f854 	bl	800e5c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f51a:	2303      	movs	r3, #3
 800f51c:	73fb      	strb	r3, [r7, #15]
      break;
 800f51e:	bf00      	nop
  }

  return ret;
 800f520:	7bfb      	ldrb	r3, [r7, #15]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	20001060 	.word	0x20001060

0800f530 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	88db      	ldrh	r3, [r3, #6]
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d004      	beq.n	800f54c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f542:	6839      	ldr	r1, [r7, #0]
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 f8e2 	bl	800f70e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f54a:	e023      	b.n	800f594 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f552:	b2db      	uxtb	r3, r3
 800f554:	2b02      	cmp	r3, #2
 800f556:	dc02      	bgt.n	800f55e <USBD_GetConfig+0x2e>
 800f558:	2b00      	cmp	r3, #0
 800f55a:	dc03      	bgt.n	800f564 <USBD_GetConfig+0x34>
 800f55c:	e015      	b.n	800f58a <USBD_GetConfig+0x5a>
 800f55e:	2b03      	cmp	r3, #3
 800f560:	d00b      	beq.n	800f57a <USBD_GetConfig+0x4a>
 800f562:	e012      	b.n	800f58a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	3308      	adds	r3, #8
 800f56e:	2201      	movs	r2, #1
 800f570:	4619      	mov	r1, r3
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 fa49 	bl	800fa0a <USBD_CtlSendData>
        break;
 800f578:	e00c      	b.n	800f594 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	3304      	adds	r3, #4
 800f57e:	2201      	movs	r2, #1
 800f580:	4619      	mov	r1, r3
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fa41 	bl	800fa0a <USBD_CtlSendData>
        break;
 800f588:	e004      	b.n	800f594 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 f8be 	bl	800f70e <USBD_CtlError>
        break;
 800f592:	bf00      	nop
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	d81e      	bhi.n	800f5f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	88db      	ldrh	r3, [r3, #6]
 800f5b8:	2b02      	cmp	r3, #2
 800f5ba:	d004      	beq.n	800f5c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f8a5 	bl	800f70e <USBD_CtlError>
        break;
 800f5c4:	e01a      	b.n	800f5fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d005      	beq.n	800f5e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	f043 0202 	orr.w	r2, r3, #2
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	330c      	adds	r3, #12
 800f5e6:	2202      	movs	r2, #2
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fa0d 	bl	800fa0a <USBD_CtlSendData>
      break;
 800f5f0:	e004      	b.n	800f5fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f5f2:	6839      	ldr	r1, [r7, #0]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f88a 	bl	800f70e <USBD_CtlError>
      break;
 800f5fa:	bf00      	nop
  }
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	885b      	ldrh	r3, [r3, #2]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d107      	bne.n	800f626 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2201      	movs	r2, #1
 800f61a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fa4d 	bl	800fabe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f624:	e013      	b.n	800f64e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	885b      	ldrh	r3, [r3, #2]
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	d10b      	bne.n	800f646 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	889b      	ldrh	r3, [r3, #4]
 800f632:	0a1b      	lsrs	r3, r3, #8
 800f634:	b29b      	uxth	r3, r3
 800f636:	b2da      	uxtb	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fa3d 	bl	800fabe <USBD_CtlSendStatus>
}
 800f644:	e003      	b.n	800f64e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 f860 	bl	800f70e <USBD_CtlError>
}
 800f64e:	bf00      	nop
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b082      	sub	sp, #8
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f666:	b2db      	uxtb	r3, r3
 800f668:	3b01      	subs	r3, #1
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	d80b      	bhi.n	800f686 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	885b      	ldrh	r3, [r3, #2]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d10c      	bne.n	800f690 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fa1d 	bl	800fabe <USBD_CtlSendStatus>
      }
      break;
 800f684:	e004      	b.n	800f690 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f840 	bl	800f70e <USBD_CtlError>
      break;
 800f68e:	e000      	b.n	800f692 <USBD_ClrFeature+0x3c>
      break;
 800f690:	bf00      	nop
  }
}
 800f692:	bf00      	nop
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b084      	sub	sp, #16
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	781a      	ldrb	r2, [r3, #0]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f7ff fa40 	bl	800eb4a <SWAPBYTE>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7ff fa33 	bl	800eb4a <SWAPBYTE>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f7ff fa26 	bl	800eb4a <SWAPBYTE>
 800f6fe:	4603      	mov	r3, r0
 800f700:	461a      	mov	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	80da      	strh	r2, [r3, #6]
}
 800f706:	bf00      	nop
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b082      	sub	sp, #8
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f718:	2180      	movs	r1, #128	@ 0x80
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7fe fdb4 	bl	800e288 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f720:	2100      	movs	r1, #0
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7fe fdb0 	bl	800e288 <USBD_LL_StallEP>
}
 800f728:	bf00      	nop
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b086      	sub	sp, #24
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f73c:	2300      	movs	r3, #0
 800f73e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d036      	beq.n	800f7b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f74a:	6938      	ldr	r0, [r7, #16]
 800f74c:	f000 f836 	bl	800f7bc <USBD_GetLen>
 800f750:	4603      	mov	r3, r0
 800f752:	3301      	adds	r3, #1
 800f754:	b29b      	uxth	r3, r3
 800f756:	005b      	lsls	r3, r3, #1
 800f758:	b29a      	uxth	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f75e:	7dfb      	ldrb	r3, [r7, #23]
 800f760:	68ba      	ldr	r2, [r7, #8]
 800f762:	4413      	add	r3, r2
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	7812      	ldrb	r2, [r2, #0]
 800f768:	701a      	strb	r2, [r3, #0]
  idx++;
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	3301      	adds	r3, #1
 800f76e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	4413      	add	r3, r2
 800f776:	2203      	movs	r2, #3
 800f778:	701a      	strb	r2, [r3, #0]
  idx++;
 800f77a:	7dfb      	ldrb	r3, [r7, #23]
 800f77c:	3301      	adds	r3, #1
 800f77e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f780:	e013      	b.n	800f7aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f782:	7dfb      	ldrb	r3, [r7, #23]
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	4413      	add	r3, r2
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	7812      	ldrb	r2, [r2, #0]
 800f78c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	3301      	adds	r3, #1
 800f792:	613b      	str	r3, [r7, #16]
    idx++;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	3301      	adds	r3, #1
 800f798:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f79a:	7dfb      	ldrb	r3, [r7, #23]
 800f79c:	68ba      	ldr	r2, [r7, #8]
 800f79e:	4413      	add	r3, r2
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1e7      	bne.n	800f782 <USBD_GetString+0x52>
 800f7b2:	e000      	b.n	800f7b6 <USBD_GetString+0x86>
    return;
 800f7b4:	bf00      	nop
  }
}
 800f7b6:	3718      	adds	r7, #24
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f7cc:	e005      	b.n	800f7da <USBD_GetLen+0x1e>
  {
    len++;
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1f5      	bne.n	800f7ce <USBD_GetLen+0x12>
  }

  return len;
 800f7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3714      	adds	r7, #20
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	6039      	str	r1, [r7, #0]
 800f7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2212      	movs	r2, #18
 800f800:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800f802:	4b03      	ldr	r3, [pc, #12]	@ (800f810 <USBD_Class_DeviceDescriptor+0x20>)
}
 800f804:	4618      	mov	r0, r3
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr
 800f810:	200000ec 	.word	0x200000ec

0800f814 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	4603      	mov	r3, r0
 800f81c:	6039      	str	r1, [r7, #0]
 800f81e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	2204      	movs	r2, #4
 800f824:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800f826:	4b03      	ldr	r3, [pc, #12]	@ (800f834 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800f828:	4618      	mov	r0, r3
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	20000100 	.word	0x20000100

0800f838 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	6039      	str	r1, [r7, #0]
 800f842:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f844:	79fb      	ldrb	r3, [r7, #7]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800f84a:	683a      	ldr	r2, [r7, #0]
 800f84c:	4907      	ldr	r1, [pc, #28]	@ (800f86c <USBD_Class_ProductStrDescriptor+0x34>)
 800f84e:	4808      	ldr	r0, [pc, #32]	@ (800f870 <USBD_Class_ProductStrDescriptor+0x38>)
 800f850:	f7ff ff6e 	bl	800f730 <USBD_GetString>
 800f854:	e004      	b.n	800f860 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800f856:	683a      	ldr	r2, [r7, #0]
 800f858:	4904      	ldr	r1, [pc, #16]	@ (800f86c <USBD_Class_ProductStrDescriptor+0x34>)
 800f85a:	4805      	ldr	r0, [pc, #20]	@ (800f870 <USBD_Class_ProductStrDescriptor+0x38>)
 800f85c:	f7ff ff68 	bl	800f730 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f860:	4b02      	ldr	r3, [pc, #8]	@ (800f86c <USBD_Class_ProductStrDescriptor+0x34>)
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20001064 	.word	0x20001064
 800f870:	0801fb94 	.word	0x0801fb94

0800f874 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4603      	mov	r3, r0
 800f87c:	6039      	str	r1, [r7, #0]
 800f87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f880:	683a      	ldr	r2, [r7, #0]
 800f882:	4904      	ldr	r1, [pc, #16]	@ (800f894 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800f884:	4804      	ldr	r0, [pc, #16]	@ (800f898 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800f886:	f7ff ff53 	bl	800f730 <USBD_GetString>
  return USBD_StrDesc;
 800f88a:	4b02      	ldr	r3, [pc, #8]	@ (800f894 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	20001064 	.word	0x20001064
 800f898:	0801fbac 	.word	0x0801fbac

0800f89c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	6039      	str	r1, [r7, #0]
 800f8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	221a      	movs	r2, #26
 800f8ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800f8ae:	f000 f843 	bl	800f938 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800f8b2:	4b02      	ldr	r3, [pc, #8]	@ (800f8bc <USBD_Class_SerialStrDescriptor+0x20>)
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20000104 	.word	0x20000104

0800f8c0 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	6039      	str	r1, [r7, #0]
 800f8ca:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f8cc:	79fb      	ldrb	r3, [r7, #7]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d105      	bne.n	800f8de <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	4907      	ldr	r1, [pc, #28]	@ (800f8f4 <USBD_Class_ConfigStrDescriptor+0x34>)
 800f8d6:	4808      	ldr	r0, [pc, #32]	@ (800f8f8 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f8d8:	f7ff ff2a 	bl	800f730 <USBD_GetString>
 800f8dc:	e004      	b.n	800f8e8 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800f8de:	683a      	ldr	r2, [r7, #0]
 800f8e0:	4904      	ldr	r1, [pc, #16]	@ (800f8f4 <USBD_Class_ConfigStrDescriptor+0x34>)
 800f8e2:	4805      	ldr	r0, [pc, #20]	@ (800f8f8 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f8e4:	f7ff ff24 	bl	800f730 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8e8:	4b02      	ldr	r3, [pc, #8]	@ (800f8f4 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3708      	adds	r7, #8
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	20001064 	.word	0x20001064
 800f8f8:	0801fbc0 	.word	0x0801fbc0

0800f8fc <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	6039      	str	r1, [r7, #0]
 800f906:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f908:	79fb      	ldrb	r3, [r7, #7]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d105      	bne.n	800f91a <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	4907      	ldr	r1, [pc, #28]	@ (800f930 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f912:	4808      	ldr	r0, [pc, #32]	@ (800f934 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f914:	f7ff ff0c 	bl	800f730 <USBD_GetString>
 800f918:	e004      	b.n	800f924 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	4904      	ldr	r1, [pc, #16]	@ (800f930 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f91e:	4805      	ldr	r0, [pc, #20]	@ (800f934 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f920:	f7ff ff06 	bl	800f730 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f924:	4b02      	ldr	r3, [pc, #8]	@ (800f930 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800f926:	4618      	mov	r0, r3
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20001064 	.word	0x20001064
 800f934:	0801fbcc 	.word	0x0801fbcc

0800f938 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800f93e:	4b0f      	ldr	r3, [pc, #60]	@ (800f97c <Get_SerialNum+0x44>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800f944:	4b0e      	ldr	r3, [pc, #56]	@ (800f980 <Get_SerialNum+0x48>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800f94a:	4b0e      	ldr	r3, [pc, #56]	@ (800f984 <Get_SerialNum+0x4c>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4413      	add	r3, r2
 800f956:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d009      	beq.n	800f972 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800f95e:	2208      	movs	r2, #8
 800f960:	4909      	ldr	r1, [pc, #36]	@ (800f988 <Get_SerialNum+0x50>)
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f000 f814 	bl	800f990 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800f968:	2204      	movs	r2, #4
 800f96a:	4908      	ldr	r1, [pc, #32]	@ (800f98c <Get_SerialNum+0x54>)
 800f96c:	68b8      	ldr	r0, [r7, #8]
 800f96e:	f000 f80f 	bl	800f990 <IntToUnicode>
  }
}
 800f972:	bf00      	nop
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	08fff800 	.word	0x08fff800
 800f980:	08fff804 	.word	0x08fff804
 800f984:	08fff808 	.word	0x08fff808
 800f988:	20000106 	.word	0x20000106
 800f98c:	20000116 	.word	0x20000116

0800f990 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800f990:	b480      	push	{r7}
 800f992:	b087      	sub	sp, #28
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	4613      	mov	r3, r2
 800f99c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	75fb      	strb	r3, [r7, #23]
 800f9a6:	e025      	b.n	800f9f4 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	0f1b      	lsrs	r3, r3, #28
 800f9ac:	2b09      	cmp	r3, #9
 800f9ae:	d80a      	bhi.n	800f9c6 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	0f1b      	lsrs	r3, r3, #28
 800f9b4:	b2da      	uxtb	r2, r3
 800f9b6:	7dfb      	ldrb	r3, [r7, #23]
 800f9b8:	005b      	lsls	r3, r3, #1
 800f9ba:	68b9      	ldr	r1, [r7, #8]
 800f9bc:	440b      	add	r3, r1
 800f9be:	3230      	adds	r2, #48	@ 0x30
 800f9c0:	b2d2      	uxtb	r2, r2
 800f9c2:	701a      	strb	r2, [r3, #0]
 800f9c4:	e009      	b.n	800f9da <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	0f1b      	lsrs	r3, r3, #28
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	005b      	lsls	r3, r3, #1
 800f9d0:	68b9      	ldr	r1, [r7, #8]
 800f9d2:	440b      	add	r3, r1
 800f9d4:	3237      	adds	r2, #55	@ 0x37
 800f9d6:	b2d2      	uxtb	r2, r2
 800f9d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	011b      	lsls	r3, r3, #4
 800f9de:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800f9e0:	7dfb      	ldrb	r3, [r7, #23]
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800f9ee:	7dfb      	ldrb	r3, [r7, #23]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	75fb      	strb	r3, [r7, #23]
 800f9f4:	7dfa      	ldrb	r2, [r7, #23]
 800f9f6:	79fb      	ldrb	r3, [r7, #7]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d3d5      	bcc.n	800f9a8 <IntToUnicode+0x18>
  }
}
 800f9fc:	bf00      	nop
 800f9fe:	bf00      	nop
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b084      	sub	sp, #16
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	60f8      	str	r0, [r7, #12]
 800fa12:	60b9      	str	r1, [r7, #8]
 800fa14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2202      	movs	r2, #2
 800fa1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	2100      	movs	r1, #0
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7fe fca0 	bl	800e376 <USBD_LL_Transmit>

  return USBD_OK;
 800fa36:	2300      	movs	r3, #0
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	2100      	movs	r1, #0
 800fa52:	68f8      	ldr	r0, [r7, #12]
 800fa54:	f7fe fc8f 	bl	800e376 <USBD_LL_Transmit>

  return USBD_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b084      	sub	sp, #16
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2203      	movs	r2, #3
 800fa72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	68ba      	ldr	r2, [r7, #8]
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f7fe fc8d 	bl	800e3ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	2100      	movs	r1, #0
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	f7fe fc7c 	bl	800e3ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b082      	sub	sp, #8
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2204      	movs	r2, #4
 800faca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800face:	2300      	movs	r3, #0
 800fad0:	2200      	movs	r2, #0
 800fad2:	2100      	movs	r1, #0
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7fe fc4e 	bl	800e376 <USBD_LL_Transmit>

  return USBD_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2205      	movs	r2, #5
 800faf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800faf4:	2300      	movs	r3, #0
 800faf6:	2200      	movs	r2, #0
 800faf8:	2100      	movs	r1, #0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7fe fc56 	bl	800e3ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <memset>:
 800fb0a:	4402      	add	r2, r0
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d100      	bne.n	800fb14 <memset+0xa>
 800fb12:	4770      	bx	lr
 800fb14:	f803 1b01 	strb.w	r1, [r3], #1
 800fb18:	e7f9      	b.n	800fb0e <memset+0x4>
	...

0800fb1c <__libc_init_array>:
 800fb1c:	b570      	push	{r4, r5, r6, lr}
 800fb1e:	4d0d      	ldr	r5, [pc, #52]	@ (800fb54 <__libc_init_array+0x38>)
 800fb20:	2600      	movs	r6, #0
 800fb22:	4c0d      	ldr	r4, [pc, #52]	@ (800fb58 <__libc_init_array+0x3c>)
 800fb24:	1b64      	subs	r4, r4, r5
 800fb26:	10a4      	asrs	r4, r4, #2
 800fb28:	42a6      	cmp	r6, r4
 800fb2a:	d109      	bne.n	800fb40 <__libc_init_array+0x24>
 800fb2c:	4d0b      	ldr	r5, [pc, #44]	@ (800fb5c <__libc_init_array+0x40>)
 800fb2e:	2600      	movs	r6, #0
 800fb30:	4c0b      	ldr	r4, [pc, #44]	@ (800fb60 <__libc_init_array+0x44>)
 800fb32:	f000 f825 	bl	800fb80 <_init>
 800fb36:	1b64      	subs	r4, r4, r5
 800fb38:	10a4      	asrs	r4, r4, #2
 800fb3a:	42a6      	cmp	r6, r4
 800fb3c:	d105      	bne.n	800fb4a <__libc_init_array+0x2e>
 800fb3e:	bd70      	pop	{r4, r5, r6, pc}
 800fb40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb44:	3601      	adds	r6, #1
 800fb46:	4798      	blx	r3
 800fb48:	e7ee      	b.n	800fb28 <__libc_init_array+0xc>
 800fb4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb4e:	3601      	adds	r6, #1
 800fb50:	4798      	blx	r3
 800fb52:	e7f2      	b.n	800fb3a <__libc_init_array+0x1e>
 800fb54:	0801fc30 	.word	0x0801fc30
 800fb58:	0801fc30 	.word	0x0801fc30
 800fb5c:	0801fc30 	.word	0x0801fc30
 800fb60:	0801fc34 	.word	0x0801fc34

0800fb64 <memcpy>:
 800fb64:	440a      	add	r2, r1
 800fb66:	1e43      	subs	r3, r0, #1
 800fb68:	4291      	cmp	r1, r2
 800fb6a:	d100      	bne.n	800fb6e <memcpy+0xa>
 800fb6c:	4770      	bx	lr
 800fb6e:	b510      	push	{r4, lr}
 800fb70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb74:	4291      	cmp	r1, r2
 800fb76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb7a:	d1f9      	bne.n	800fb70 <memcpy+0xc>
 800fb7c:	bd10      	pop	{r4, pc}
	...

0800fb80 <_init>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	bf00      	nop
 800fb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb86:	bc08      	pop	{r3}
 800fb88:	469e      	mov	lr, r3
 800fb8a:	4770      	bx	lr

0800fb8c <_fini>:
 800fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb8e:	bf00      	nop
 800fb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb92:	bc08      	pop	{r3}
 800fb94:	469e      	mov	lr, r3
 800fb96:	4770      	bx	lr
