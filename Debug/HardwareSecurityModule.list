
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f814  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800fa60  0800fa60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800faf4  0800faf4  00011120  2**0
                  CONTENTS
  4 .ARM          00000008  0800faf4  0800faf4  00010af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fafc  0800fafc  00011120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fafc  0800fafc  00010afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb00  0800fb00  00010b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  0800fb04  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  20000120  0800fc24  00011120  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20001164  0800fc24  00011164  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002587a  00000000  00000000  00011156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049e3  00000000  00000000  000369d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd0  00000000  00000000  0003b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  0003d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ee7  00000000  00000000  0003e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002872c  00000000  00000000  00045591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149502  00000000  00000000  0006dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b71bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad0  00000000  00000000  001b7204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001becd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000120 	.word	0x20000120
 8000268:	00000000 	.word	0x00000000
 800026c:	0800fa48 	.word	0x0800fa48

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000124 	.word	0x20000124
 8000288:	0800fa48 	.word	0x0800fa48

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 faa8 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f85a 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fb10 	bl	8000bd4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005b4:	f000 faac 	bl	8000b10 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 fa12 	bl	80009e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005bc:	f000 f8e2 	bl	8000784 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005c0:	f000 f9b8 	bl	8000934 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80005c4:	f000 fa58 	bl	8000a78 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80005c8:	f000 f932 	bl	8000830 <MX_RTC_Init>
  MX_RNG_Init();
 80005cc:	f000 f91a 	bl	8000804 <MX_RNG_Init>
  MX_HASH_Init();
 80005d0:	f000 f8be 	bl	8000750 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80005d4:	bf00      	nop
 80005d6:	4b21      	ldr	r3, [pc, #132]	@ (800065c <main+0xb8>)
 80005d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0fa      	beq.n	80005d6 <main+0x32>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f001 f88d 	bl	8001700 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 f88a 	bl	8001700 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f001 f887 	bl	8001700 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005f2:	2101      	movs	r1, #1
 80005f4:	2000      	movs	r0, #0
 80005f6:	f001 f923 	bl	8001840 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <main+0xbc>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000600:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <main+0xbc>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <main+0xbc>)
 800060a:	2200      	movs	r2, #0
 800060c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <main+0xbc>)
 8000610:	2200      	movs	r2, #0
 8000612:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <main+0xbc>)
 8000616:	2200      	movs	r2, #0
 8000618:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800061a:	4911      	ldr	r1, [pc, #68]	@ (8000660 <main+0xbc>)
 800061c:	2000      	movs	r0, #0
 800061e:	f001 f9a9 	bl	8001974 <BSP_COM_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <main+0x88>
  {
    Error_Handler();
 8000628:	f000 fbd0 	bl	8000dcc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BSP_LED_Toggle(LED_GREEN);
 800062c:	2000      	movs	r0, #0
 800062e:	f001 f8dd 	bl	80017ec <BSP_LED_Toggle>
	HAL_Delay(333);
 8000632:	f240 104d 	movw	r0, #333	@ 0x14d
 8000636:	f001 fb1f 	bl	8001c78 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);
 800063a:	2002      	movs	r0, #2
 800063c:	f001 f8d6 	bl	80017ec <BSP_LED_Toggle>
	HAL_Delay(333);
 8000640:	f240 104d 	movw	r0, #333	@ 0x14d
 8000644:	f001 fb18 	bl	8001c78 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW);
 8000648:	2001      	movs	r0, #1
 800064a:	f001 f8cf 	bl	80017ec <BSP_LED_Toggle>
	HAL_Delay(333);
 800064e:	f240 104d 	movw	r0, #333	@ 0x14d
 8000652:	f001 fb11 	bl	8001c78 <HAL_Delay>
	BSP_LED_Toggle(LED_GREEN);
 8000656:	bf00      	nop
 8000658:	e7e8      	b.n	800062c <main+0x88>
 800065a:	bf00      	nop
 800065c:	200006c0 	.word	0x200006c0
 8000660:	2000013c 	.word	0x2000013c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	@ 0x70
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2250      	movs	r2, #80	@ 0x50
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00f f9bb 	bl	800f9ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068a:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <SystemClock_Config+0xe4>)
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	4a2e      	ldr	r2, [pc, #184]	@ (8000748 <SystemClock_Config+0xe4>)
 8000690:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000694:	6113      	str	r3, [r2, #16]
 8000696:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <SystemClock_Config+0xe4>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a2:	bf00      	nop
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <SystemClock_Config+0xe4>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	d1f9      	bne.n	80006a4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80006b0:	2329      	movs	r3, #41	@ 0x29
 80006b2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006ca:	2303      	movs	r3, #3
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006d2:	23fa      	movs	r3, #250	@ 0xfa
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fcee 	bl	80040d4 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fe:	f000 fb65 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	231f      	movs	r3, #31
 8000704:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f90f 	bl	8004944 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800072c:	f000 fb4e 	bl	8000dcc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <SystemClock_Config+0xe8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <SystemClock_Config+0xe8>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	@ 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	44020800 	.word	0x44020800
 800074c:	40022000 	.word	0x40022000

08000750 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_HASH_Init+0x2c>)
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <MX_HASH_Init+0x30>)
 8000758:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_HASH_Init+0x2c>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_HASH_Init+0x2c>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_HASH_Init+0x2c>)
 8000768:	f001 fe46 	bl	80023f8 <HAL_HASH_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8000772:	f000 fb2b 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000014c 	.word	0x2000014c
 8000780:	420c0400 	.word	0x420c0400

08000784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007c0:	f001 fe52 	bl	8002468 <HAL_I2C_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ca:	f000 faff 	bl	8000dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007d2:	f001 fee4 	bl	800259e <HAL_I2CEx_ConfigAnalogFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 faf6 	bl	8000dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007e4:	f001 ff26 	bl	8002634 <HAL_I2CEx_ConfigDigitalFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 faed 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000018c 	.word	0x2000018c
 80007fc:	40005400 	.word	0x40005400
 8000800:	10c043e5 	.word	0x10c043e5

08000804 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_RNG_Init+0x24>)
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_RNG_Init+0x28>)
 800080c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_RNG_Init+0x24>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_RNG_Init+0x24>)
 8000816:	f009 fc2f 	bl	800a078 <HAL_RNG_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000820:	f000 fad4 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200001e0 	.word	0x200001e0
 800082c:	420c0800 	.word	0x420c0800

08000830 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	@ 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800085e:	4b33      	ldr	r3, [pc, #204]	@ (800092c <MX_RTC_Init+0xfc>)
 8000860:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <MX_RTC_Init+0x100>)
 8000862:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_RTC_Init+0xfc>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_RTC_Init+0xfc>)
 800086c:	227f      	movs	r2, #127	@ 0x7f
 800086e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000870:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_RTC_Init+0xfc>)
 8000872:	22ff      	movs	r2, #255	@ 0xff
 8000874:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_RTC_Init+0xfc>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800087c:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_RTC_Init+0xfc>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_RTC_Init+0xfc>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_RTC_Init+0xfc>)
 800088a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000890:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_RTC_Init+0xfc>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_RTC_Init+0xfc>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089c:	4823      	ldr	r0, [pc, #140]	@ (800092c <MX_RTC_Init+0xfc>)
 800089e:	f009 fc89 	bl	800a1b4 <HAL_RTC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 fa90 	bl	8000dcc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	481a      	ldr	r0, [pc, #104]	@ (800092c <MX_RTC_Init+0xfc>)
 80008c4:	f009 fedc 	bl	800a680 <HAL_RTCEx_PrivilegeModeSet>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008ce:	f000 fa7d 	bl	8000dcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80008da:	2300      	movs	r3, #0
 80008dc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	480f      	ldr	r0, [pc, #60]	@ (800092c <MX_RTC_Init+0xfc>)
 80008f0:	f009 fce2 	bl	800a2b8 <HAL_RTC_SetTime>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80008fa:	f000 fa67 	bl	8000dcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008fe:	2301      	movs	r3, #1
 8000900:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000902:	2301      	movs	r3, #1
 8000904:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000906:	2301      	movs	r3, #1
 8000908:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2201      	movs	r2, #1
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_RTC_Init+0xfc>)
 8000916:	f009 fd61 	bl	800a3dc <HAL_RTC_SetDate>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000920:	f000 fa54 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3738      	adds	r7, #56	@ 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001f4 	.word	0x200001f4
 8000930:	44007800 	.word	0x44007800

08000934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <MX_SPI1_Init+0xa8>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000940:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800094e:	2207      	movs	r2, #7
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000960:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000968:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800096c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000980:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000990:	2200      	movs	r2, #0
 8000992:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000994:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009c6:	f009 fe89 	bl	800a6dc <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80009d0:	f000 f9fc 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000224 	.word	0x20000224
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 80009e6:	4a23      	ldr	r2, [pc, #140]	@ (8000a74 <MX_USART2_UART_Init+0x94>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a28:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a2a:	f009 ffe2 	bl	800a9f2 <HAL_UART_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a34:	f000 f9ca 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a3c:	f00a fc70 	bl	800b320 <HAL_UARTEx_SetTxFifoThreshold>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a46:	f000 f9c1 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4808      	ldr	r0, [pc, #32]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a4e:	f00a fca5 	bl	800b39c <HAL_UARTEx_SetRxFifoThreshold>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a58:	f000 f9b8 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_USART2_UART_Init+0x90>)
 8000a5e:	f00a fc26 	bl	800b2ae <HAL_UARTEx_DisableFifoMode>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a68:	f000 f9b0 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200002b4 	.word	0x200002b4
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	@ (8000b0c <MX_USART6_UART_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a82:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ac0:	4811      	ldr	r0, [pc, #68]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000ac2:	f009 ff96 	bl	800a9f2 <HAL_UART_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f97e 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000ad4:	f00a fc24 	bl	800b320 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000ade:	f000 f975 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4808      	ldr	r0, [pc, #32]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000ae6:	f00a fc59 	bl	800b39c <HAL_UARTEx_SetRxFifoThreshold>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 f96c 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <MX_USART6_UART_Init+0x90>)
 8000af6:	f00a fbda 	bl	800b2ae <HAL_UARTEx_DisableFifoMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 f964 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000348 	.word	0x20000348
 8000b0c:	40006400 	.word	0x40006400

08000b10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b16:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc0 <MX_USB_PCD_Init+0xb0>)
 8000b18:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b1e:	4a29      	ldr	r2, [pc, #164]	@ (8000bc4 <MX_USB_PCD_Init+0xb4>)
 8000b20:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000b22:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b24:	2208      	movs	r2, #8
 8000b26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000b28:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b34:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000b5e:	4817      	ldr	r0, [pc, #92]	@ (8000bbc <MX_USB_PCD_Init+0xac>)
 8000b60:	f001 fe17 	bl	8002792 <HAL_PCD_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000b6a:	f000 f92f 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4915      	ldr	r1, [pc, #84]	@ (8000bc8 <MX_USB_PCD_Init+0xb8>)
 8000b72:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <MX_USB_PCD_Init+0xb0>)
 8000b74:	f00d fbfe 	bl	800e374 <USBD_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000b7e:	f000 f925 	bl	8000dcc <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000b82:	4912      	ldr	r1, [pc, #72]	@ (8000bcc <MX_USB_PCD_Init+0xbc>)
 8000b84:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <MX_USB_PCD_Init+0xb0>)
 8000b86:	f00d fc25 	bl	800e3d4 <USBD_RegisterClass>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000b90:	f000 f91c 	bl	8000dcc <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000b94:	490e      	ldr	r1, [pc, #56]	@ (8000bd0 <MX_USB_PCD_Init+0xc0>)
 8000b96:	480a      	ldr	r0, [pc, #40]	@ (8000bc0 <MX_USB_PCD_Init+0xb0>)
 8000b98:	f00d f860 	bl	800dc5c <USBD_CDC_RegisterInterface>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000ba2:	f000 f913 	bl	8000dcc <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <MX_USB_PCD_Init+0xb0>)
 8000ba8:	f00d fc4a 	bl	800e440 <USBD_Start>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000bb2:	f000 f90b 	bl	8000dcc <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200003dc 	.word	0x200003dc
 8000bc0:	200006c0 	.word	0x200006c0
 8000bc4:	40016000 	.word	0x40016000
 8000bc8:	200000d0 	.word	0x200000d0
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	200000b4 	.word	0x200000b4

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	@ 0x30
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	4b72      	ldr	r3, [pc, #456]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf0:	4a70      	ldr	r2, [pc, #448]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b6a      	ldr	r3, [pc, #424]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0e:	4a69      	ldr	r2, [pc, #420]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c18:	4b66      	ldr	r3, [pc, #408]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	4b63      	ldr	r3, [pc, #396]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c2c:	4a61      	ldr	r2, [pc, #388]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c36:	4b5f      	ldr	r3, [pc, #380]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b5b      	ldr	r3, [pc, #364]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c54:	4b57      	ldr	r3, [pc, #348]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c68:	4a52      	ldr	r2, [pc, #328]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c72:	4b50      	ldr	r3, [pc, #320]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c80:	4b4c      	ldr	r3, [pc, #304]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c86:	4a4b      	ldr	r2, [pc, #300]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c90:	4b48      	ldr	r3, [pc, #288]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca4:	4a43      	ldr	r2, [pc, #268]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cae:	4b41      	ldr	r3, [pc, #260]	@ (8000db4 <MX_GPIO_Init+0x1e0>)
 8000cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cbc:	2332      	movs	r3, #50	@ 0x32
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4838      	ldr	r0, [pc, #224]	@ (8000db8 <MX_GPIO_Init+0x1e4>)
 8000cd8:	f001 fa0a 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cdc:	2384      	movs	r3, #132	@ 0x84
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4831      	ldr	r0, [pc, #196]	@ (8000dbc <MX_GPIO_Init+0x1e8>)
 8000cf8:	f001 f9fa 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	482b      	ldr	r0, [pc, #172]	@ (8000dbc <MX_GPIO_Init+0x1e8>)
 8000d10:	f001 f9ee 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000d14:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4825      	ldr	r0, [pc, #148]	@ (8000dc0 <MX_GPIO_Init+0x1ec>)
 8000d2a:	f001 f9e1 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d40:	230b      	movs	r3, #11
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481d      	ldr	r0, [pc, #116]	@ (8000dc0 <MX_GPIO_Init+0x1ec>)
 8000d4c:	f001 f9d0 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_GPIO_Init+0x1f0>)
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4819      	ldr	r0, [pc, #100]	@ (8000dc8 <MX_GPIO_Init+0x1f4>)
 8000d64:	f001 f9c4 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000d68:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <MX_GPIO_Init+0x1f4>)
 8000d86:	f001 f9b3 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000d8a:	23c0      	movs	r3, #192	@ 0xc0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_GPIO_Init+0x1ec>)
 8000da6:	f001 f9a3 	bl	80020f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	@ 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	44020c00 	.word	0x44020c00
 8000db8:	42020800 	.word	0x42020800
 8000dbc:	42020000 	.word	0x42020000
 8000dc0:	42020400 	.word	0x42020400
 8000dc4:	10110000 	.word	0x10110000
 8000dc8:	42021800 	.word	0x42021800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <Error_Handler+0x8>

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_HASH_MspInit+0x34>)
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df6:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <HAL_HASH_MspInit+0x34>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_HASH_MspInit+0x34>)
 8000e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	44020c00 	.word	0x44020c00

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0cc      	sub	sp, #304	@ 0x130
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e2e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e44:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	f00e fdcc 	bl	800f9ee <memset>
  if(hi2c->Instance==I2C1)
 8000e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a33      	ldr	r2, [pc, #204]	@ (8000f30 <HAL_I2C_MspInit+0x110>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d15e      	bne.n	8000f26 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e6c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e80:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e84:	2200      	movs	r2, #0
 8000e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 f89a 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000e9a:	f7ff ff97 	bl	8000dcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b25      	ldr	r3, [pc, #148]	@ (8000f34 <HAL_I2C_MspInit+0x114>)
 8000ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea4:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <HAL_I2C_MspInit+0x114>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <HAL_I2C_MspInit+0x114>)
 8000eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb4:	f003 0202 	and.w	r2, r3, #2
 8000eb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ebc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ec6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000eca:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ecc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed4:	2312      	movs	r3, #18
 8000ed6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4811      	ldr	r0, [pc, #68]	@ (8000f38 <HAL_I2C_MspInit+0x118>)
 8000ef4:	f001 f8fc 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_I2C_MspInit+0x114>)
 8000efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000efe:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <HAL_I2C_MspInit+0x114>)
 8000f00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f04:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_I2C_MspInit+0x114>)
 8000f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f0e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000f12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f20:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f24:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f26:	bf00      	nop
 8000f28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40005400 	.word	0x40005400
 8000f34:	44020c00 	.word	0x44020c00
 8000f38:	42020400 	.word	0x42020400

08000f3c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0c6      	sub	sp, #280	@ 0x118
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f4a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f54:	4618      	mov	r0, r3
 8000f56:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f00e fd46 	bl	800f9ee <memset>
  if(hrng->Instance==RNG)
 8000f62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_RNG_MspInit+0xa8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d131      	bne.n	8000fd8 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000f74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f78:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8000f7c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000f88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f90:	2200      	movs	r2, #0
 8000f92:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 f814 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8000fa6:	f7ff ff11 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_RNG_MspInit+0xac>)
 8000fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <HAL_RNG_MspInit+0xac>)
 8000fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_RNG_MspInit+0xac>)
 8000fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc0:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8000fc4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fd6:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000fd8:	bf00      	nop
 8000fda:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	420c0800 	.word	0x420c0800
 8000fe8:	44020c00 	.word	0x44020c00

08000fec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0c6      	sub	sp, #280	@ 0x118
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ff6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ffa:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ffc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001004:	4618      	mov	r0, r3
 8001006:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800100a:	461a      	mov	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f00e fcee 	bl	800f9ee <memset>
  if(hrtc->Instance==RTC)
 8001012:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001016:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <HAL_RTC_MspInit+0xb8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d13a      	bne.n	800109a <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001024:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001028:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800102c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001038:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800103c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001044:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f003 ffbb 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001058:	f7ff feb8 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_RTC_MspInit+0xbc>)
 800105e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001062:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <HAL_RTC_MspInit+0xbc>)
 8001064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001068:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_RTC_MspInit+0xbc>)
 800106e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_RTC_MspInit+0xbc>)
 8001074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001078:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_RTC_MspInit+0xbc>)
 800107e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001082:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001086:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800108a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001094:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001098:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800109a:	bf00      	nop
 800109c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	44007800 	.word	0x44007800
 80010a8:	44020c00 	.word	0x44020c00

080010ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ce      	sub	sp, #312	@ 0x138
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010d4:	4618      	mov	r0, r3
 80010d6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80010da:	461a      	mov	r2, r3
 80010dc:	2100      	movs	r1, #0
 80010de:	f00e fc86 	bl	800f9ee <memset>
  if(hspi->Instance==SPI1)
 80010e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <HAL_SPI_MspInit+0x168>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	f040 808a 	bne.w	800120a <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010fa:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80010fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800110a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800110e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001112:	2200      	movs	r2, #0
 8001114:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f003 ff53 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001128:	f7ff fe50 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 800112e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001132:	4a39      	ldr	r2, [pc, #228]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 8001134:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001138:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800113c:	4b36      	ldr	r3, [pc, #216]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 800113e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001142:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800114a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001154:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001158:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 800115c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001160:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800116a:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 800116c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001170:	f003 0201 	and.w	r2, r3, #1
 8001174:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001178:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001182:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001186:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 800118a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <HAL_SPI_MspInit+0x16c>)
 800119a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800119e:	f003 0208 	and.w	r2, r3, #8
 80011a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011b4:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011b6:	2360      	movs	r3, #96	@ 0x60
 80011b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80011d8:	4619      	mov	r1, r3
 80011da:	4810      	ldr	r0, [pc, #64]	@ (800121c <HAL_SPI_MspInit+0x170>)
 80011dc:	f000 ff88 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f8:	2305      	movs	r3, #5
 80011fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001202:	4619      	mov	r1, r3
 8001204:	4806      	ldr	r0, [pc, #24]	@ (8001220 <HAL_SPI_MspInit+0x174>)
 8001206:	f000 ff73 	bl	80020f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800120a:	bf00      	nop
 800120c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40013000 	.word	0x40013000
 8001218:	44020c00 	.word	0x44020c00
 800121c:	42020000 	.word	0x42020000
 8001220:	42020c00 	.word	0x42020c00

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0d0      	sub	sp, #320	@ 0x140
 8001228:	af00      	add	r7, sp, #0
 800122a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800122e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001232:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001244:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001248:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800124c:	4618      	mov	r0, r3
 800124e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	f00e fbca 	bl	800f9ee <memset>
  if(huart->Instance==USART2)
 800125a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800125e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7c      	ldr	r2, [pc, #496]	@ (8001458 <HAL_UART_MspInit+0x234>)
 8001268:	4293      	cmp	r3, r2
 800126a:	f040 808a 	bne.w	8001382 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800126e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001272:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001276:	f04f 0202 	mov.w	r2, #2
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001282:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001286:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800128a:	2200      	movs	r2, #0
 800128c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fe98 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800129e:	f7ff fd95 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a2:	4b6e      	ldr	r3, [pc, #440]	@ (800145c <HAL_UART_MspInit+0x238>)
 80012a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012a8:	4a6c      	ldr	r2, [pc, #432]	@ (800145c <HAL_UART_MspInit+0x238>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012b2:	4b6a      	ldr	r3, [pc, #424]	@ (800145c <HAL_UART_MspInit+0x238>)
 80012b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012b8:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80012bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012ce:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b62      	ldr	r3, [pc, #392]	@ (800145c <HAL_UART_MspInit+0x238>)
 80012d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d6:	4a61      	ldr	r2, [pc, #388]	@ (800145c <HAL_UART_MspInit+0x238>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012e0:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <HAL_UART_MspInit+0x238>)
 80012e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012fc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b57      	ldr	r3, [pc, #348]	@ (800145c <HAL_UART_MspInit+0x238>)
 8001300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001304:	4a55      	ldr	r2, [pc, #340]	@ (800145c <HAL_UART_MspInit+0x238>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130e:	4b53      	ldr	r3, [pc, #332]	@ (800145c <HAL_UART_MspInit+0x238>)
 8001310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001314:	f003 0208 	and.w	r2, r3, #8
 8001318:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800131c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001326:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800132a:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800132c:	2308      	movs	r3, #8
 800132e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001344:	2307      	movs	r3, #7
 8001346:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800134e:	4619      	mov	r1, r3
 8001350:	4843      	ldr	r0, [pc, #268]	@ (8001460 <HAL_UART_MspInit+0x23c>)
 8001352:	f000 fecd 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001356:	2320      	movs	r3, #32
 8001358:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136e:	2307      	movs	r3, #7
 8001370:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001378:	4619      	mov	r1, r3
 800137a:	483a      	ldr	r0, [pc, #232]	@ (8001464 <HAL_UART_MspInit+0x240>)
 800137c:	f000 feb8 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001380:	e065      	b.n	800144e <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8001382:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001386:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a36      	ldr	r2, [pc, #216]	@ (8001468 <HAL_UART_MspInit+0x244>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d15c      	bne.n	800144e <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001394:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001398:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800139c:	f04f 0220 	mov.w	r2, #32
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80013a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013b0:	2200      	movs	r2, #0
 80013b2:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fe05 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80013c4:	f7ff fd02 	bl	8000dcc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013c8:	4b24      	ldr	r3, [pc, #144]	@ (800145c <HAL_UART_MspInit+0x238>)
 80013ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ce:	4a23      	ldr	r2, [pc, #140]	@ (800145c <HAL_UART_MspInit+0x238>)
 80013d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_UART_MspInit+0x238>)
 80013da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013de:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80013e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013f4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_UART_MspInit+0x238>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_UART_MspInit+0x238>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_UART_MspInit+0x238>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	f003 0204 	and.w	r2, r3, #4
 8001410:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001414:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800141e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001422:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001424:	23c0      	movs	r3, #192	@ 0xc0
 8001426:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800143c:	2307      	movs	r3, #7
 800143e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001446:	4619      	mov	r1, r3
 8001448:	4808      	ldr	r0, [pc, #32]	@ (800146c <HAL_UART_MspInit+0x248>)
 800144a:	f000 fe51 	bl	80020f0 <HAL_GPIO_Init>
}
 800144e:	bf00      	nop
 8001450:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004400 	.word	0x40004400
 800145c:	44020c00 	.word	0x44020c00
 8001460:	42020000 	.word	0x42020000
 8001464:	42020c00 	.word	0x42020c00
 8001468:	40006400 	.word	0x40006400
 800146c:	42020800 	.word	0x42020800

08001470 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0c6      	sub	sp, #280	@ 0x118
 8001474:	af00      	add	r7, sp, #0
 8001476:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800147a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800147e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001488:	4618      	mov	r0, r3
 800148a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800148e:	461a      	mov	r2, r3
 8001490:	2100      	movs	r1, #0
 8001492:	f00e faac 	bl	800f9ee <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001496:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a22      	ldr	r2, [pc, #136]	@ (800152c <HAL_PCD_MspInit+0xbc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d13b      	bne.n	8001520 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ac:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0310 	mov.w	r3, #16
 80014b8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80014bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014c4:	2230      	movs	r2, #48	@ 0x30
 80014c6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fd7a 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80014da:	f7ff fc77 	bl	8000dcc <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80014de:	f002 fde9 	bl	80040b4 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_PCD_MspInit+0xc0>)
 80014e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_PCD_MspInit+0xc0>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <HAL_PCD_MspInit+0xc0>)
 80014f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014f8:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80014fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001500:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800150a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800150e:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	204a      	movs	r0, #74	@ 0x4a
 8001516:	f000 fc8b 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800151a:	204a      	movs	r0, #74	@ 0x4a
 800151c:	f000 fca2 	bl	8001e64 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001520:	bf00      	nop
 8001522:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40016000 	.word	0x40016000
 8001530:	44020c00 	.word	0x44020c00

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <NMI_Handler+0x4>

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <MemManage_Handler+0x4>

0800154c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <UsageFault_Handler+0x4>

0800155c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158a:	f000 fb55 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}

08001592 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f9ca 	bl	8001930 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <USB_DRD_FS_IRQHandler+0x10>)
 80015a6:	f001 fa17 	bl	80029d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200003dc 	.word	0x200003dc

080015b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <SystemInit+0xdc>)
 80015bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c0:	4a33      	ldr	r2, [pc, #204]	@ (8001690 <SystemInit+0xdc>)
 80015c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80015ca:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <SystemInit+0xe0>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80015d0:	4b30      	ldr	r3, [pc, #192]	@ (8001694 <SystemInit+0xe0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80015d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001694 <SystemInit+0xe0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <SystemInit+0xe0>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	492c      	ldr	r1, [pc, #176]	@ (8001694 <SystemInit+0xe0>)
 80015e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <SystemInit+0xe4>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <SystemInit+0xe0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <SystemInit+0xe0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80015f4:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <SystemInit+0xe0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <SystemInit+0xe0>)
 80015fc:	4a27      	ldr	r2, [pc, #156]	@ (800169c <SystemInit+0xe8>)
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <SystemInit+0xe0>)
 8001602:	2200      	movs	r2, #0
 8001604:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001606:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <SystemInit+0xe0>)
 8001608:	4a24      	ldr	r2, [pc, #144]	@ (800169c <SystemInit+0xe8>)
 800160a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <SystemInit+0xe0>)
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <SystemInit+0xe0>)
 8001614:	4a21      	ldr	r2, [pc, #132]	@ (800169c <SystemInit+0xe8>)
 8001616:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <SystemInit+0xe0>)
 800161a:	2200      	movs	r2, #0
 800161c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <SystemInit+0xe0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <SystemInit+0xe0>)
 8001624:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001628:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <SystemInit+0xe0>)
 800162c:	2200      	movs	r2, #0
 800162e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <SystemInit+0xdc>)
 8001632:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001636:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <SystemInit+0xec>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001640:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001648:	d003      	beq.n	8001652 <SystemInit+0x9e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001650:	d117      	bne.n	8001682 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <SystemInit+0xec>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <SystemInit+0xec>)
 8001660:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <SystemInit+0xf0>)
 8001662:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <SystemInit+0xec>)
 8001666:	4a10      	ldr	r2, [pc, #64]	@ (80016a8 <SystemInit+0xf4>)
 8001668:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <SystemInit+0xec>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <SystemInit+0xec>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <SystemInit+0xec>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <SystemInit+0xec>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	61d3      	str	r3, [r2, #28]
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00
 8001694:	44020c00 	.word	0x44020c00
 8001698:	eae2eae3 	.word	0xeae2eae3
 800169c:	01010280 	.word	0x01010280
 80016a0:	40022000 	.word	0x40022000
 80016a4:	08192a3b 	.word	0x08192a3b
 80016a8:	4c5d6e7f 	.word	0x4c5d6e7f

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b0:	f7ff ff80 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	@ (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	@ (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016da:	f00e f991 	bl	800fa00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7fe ff61 	bl	80005a4 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   r0, =_estack
 80016e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80016f0:	0800fb04 	.word	0x0800fb04
  ldr r2, =_sbss
 80016f4:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80016f8:	20001164 	.word	0x20001164

080016fc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_IRQHandler>
	...

08001700 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d009      	beq.n	8001728 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <BSP_LED_Init+0x28>
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d003      	beq.n	8001728 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001720:	f06f 0301 	mvn.w	r3, #1
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001726:	e055      	b.n	80017d4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10f      	bne.n	800174e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800172e:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001734:	4a2a      	ldr	r2, [pc, #168]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001736:	f043 0320 	orr.w	r3, r3, #32
 800173a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	e021      	b.n	8001792 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10f      	bne.n	8001774 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175a:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <BSP_LED_Init+0xe0>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	e00e      	b.n	8001792 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177a:	4a19      	ldr	r2, [pc, #100]	@ (80017e0 <BSP_LED_Init+0xe0>)
 800177c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001780:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <BSP_LED_Init+0xe0>)
 8001786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a13      	ldr	r2, [pc, #76]	@ (80017e4 <BSP_LED_Init+0xe4>)
 8001796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800179a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4a0f      	ldr	r2, [pc, #60]	@ (80017e8 <BSP_LED_Init+0xe8>)
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	f107 0218 	add.w	r2, r7, #24
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fc9a 	bl	80020f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <BSP_LED_Init+0xe8>)
 80017c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a07      	ldr	r2, [pc, #28]	@ (80017e4 <BSP_LED_Init+0xe4>)
 80017c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	f000 fde0 	bl	8002394 <HAL_GPIO_WritePin>
  }

  return ret;
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3730      	adds	r7, #48	@ 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	44020c00 	.word	0x44020c00
 80017e4:	0800fac0 	.word	0x0800fac0
 80017e8:	20000008 	.word	0x20000008

080017ec <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d009      	beq.n	8001814 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <BSP_LED_Toggle+0x28>
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d003      	beq.n	8001814 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800180c:	f06f 0301 	mvn.w	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e00b      	b.n	800182c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <BSP_LED_Toggle+0x4c>)
 8001818:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4907      	ldr	r1, [pc, #28]	@ (800183c <BSP_LED_Toggle+0x50>)
 8001820:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f000 fdcc 	bl	80023c4 <HAL_GPIO_TogglePin>
  }

  return ret;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008
 800183c:	0800fac0 	.word	0x0800fac0

08001840 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	460a      	mov	r2, r1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	4613      	mov	r3, r2
 800184e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001850:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <BSP_PB_Init+0xd4>)
 8001852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001856:	4a2f      	ldr	r2, [pc, #188]	@ (8001914 <BSP_PB_Init+0xd4>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001860:	4b2c      	ldr	r3, [pc, #176]	@ (8001914 <BSP_PB_Init+0xd4>)
 8001862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800186e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001872:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001874:	2302      	movs	r3, #2
 8001876:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <BSP_PB_Init+0xd8>)
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	f107 020c 	add.w	r2, r7, #12
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fc2b 	bl	80020f0 <HAL_GPIO_Init>
 800189a:	e036      	b.n	800190a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <BSP_PB_Init+0xdc>)
 800189e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <BSP_PB_Init+0xd8>)
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	f107 020c 	add.w	r2, r7, #12
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fc1e 	bl	80020f0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <BSP_PB_Init+0xe0>)
 80018c0:	441a      	add	r2, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4917      	ldr	r1, [pc, #92]	@ (8001924 <BSP_PB_Init+0xe4>)
 80018c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f000 fbb3 	bl	8002038 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <BSP_PB_Init+0xe0>)
 80018de:	1898      	adds	r0, r3, r2
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <BSP_PB_Init+0xe8>)
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	461a      	mov	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f000 fb78 	bl	8001fe0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018f0:	2018      	movs	r0, #24
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <BSP_PB_Init+0xec>)
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	f000 fa97 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001902:	2318      	movs	r3, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f000 faad 	bl	8001e64 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	44020c00 	.word	0x44020c00
 8001918:	20000014 	.word	0x20000014
 800191c:	10110000 	.word	0x10110000
 8001920:	2000099c 	.word	0x2000099c
 8001924:	0800fac8 	.word	0x0800fac8
 8001928:	20000018 	.word	0x20000018
 800192c:	2000001c 	.word	0x2000001c

08001930 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <BSP_PB_IRQHandler+0x28>)
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fb89 	bl	8002060 <HAL_EXTI_IRQHandler>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000099c 	.word	0x2000099c

0800195c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800198a:	f06f 0301 	mvn.w	r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e018      	b.n	80019c4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2294      	movs	r2, #148	@ 0x94
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <BSP_COM_Init+0x5c>)
 800199c:	4413      	add	r3, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f854 	bl	8001a4c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2294      	movs	r2, #148	@ 0x94
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <BSP_COM_Init+0x5c>)
 80019ae:	4413      	add	r3, r2
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f80e 	bl	80019d4 <MX_USART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019be:	f06f 0303 	mvn.w	r3, #3
 80019c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200009a8 	.word	0x200009a8

080019d4 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <MX_USART_Init+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	220c      	movs	r2, #12
 80019f2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	895b      	ldrh	r3, [r3, #10]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	891b      	ldrh	r3, [r3, #8]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	899b      	ldrh	r3, [r3, #12]
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a20:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f008 ffe2 	bl	800a9f2 <HAL_UART_Init>
 8001a2e:	4603      	mov	r3, r0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000004 	.word	0x20000004

08001a3c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff ff8b 	bl	800195c <BSP_PB_Callback>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5a:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a78:	4a1e      	ldr	r2, [pc, #120]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <COM1_MspInit+0xa8>)
 8001aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <COM1_MspInit+0xac>)
 8001acc:	f000 fb10 	bl	80020f0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ada:	2307      	movs	r3, #7
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <COM1_MspInit+0xac>)
 8001ae6:	f000 fb03 	bl	80020f0 <HAL_GPIO_Init>
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	44020c00 	.word	0x44020c00
 8001af8:	42020c00 	.word	0x42020c00

08001afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f98a 	bl	8001e1a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b06:	f003 f8d5 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_Init+0x44>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	490b      	ldr	r1, [pc, #44]	@ (8001b44 <HAL_Init+0x48>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <HAL_Init+0x4c>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b20:	2004      	movs	r0, #4
 8001b22:	f000 f9cf 	bl	8001ec4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f810 	bl	8001b4c <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e002      	b.n	8001b3c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b36:	f7ff f94f 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	44020c00 	.word	0x44020c00
 8001b44:	0800faa8 	.word	0x0800faa8
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b58:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <HAL_InitTick+0xdc>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e05c      	b.n	8001c1e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001b64:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_InitTick+0xe0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d10c      	bne.n	8001b8a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001b70:	4b2f      	ldr	r3, [pc, #188]	@ (8001c30 <HAL_InitTick+0xe4>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_InitTick+0xdc>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e037      	b.n	8001bfa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001b8a:	f000 f9f3 	bl	8001f74 <HAL_SYSTICK_GetCLKSourceConfig>
 8001b8e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d023      	beq.n	8001bde <HAL_InitTick+0x92>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d82d      	bhi.n	8001bf8 <HAL_InitTick+0xac>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_InitTick+0x5e>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001ba8:	e026      	b.n	8001bf8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001baa:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <HAL_InitTick+0xe4>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <HAL_InitTick+0xdc>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
        break;
 8001bc2:	e01a      	b.n	8001bfa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_InitTick+0xdc>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bd2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	60fb      	str	r3, [r7, #12]
        break;
 8001bdc:	e00d      	b.n	8001bfa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0xdc>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	60fb      	str	r3, [r7, #12]
        break;
 8001bf6:	e000      	b.n	8001bfa <HAL_InitTick+0xae>
        break;
 8001bf8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f940 	bl	8001e80 <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e009      	b.n	8001c1e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c12:	f000 f90d 	bl	8001e30 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001c16:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_InitTick+0xe8>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000024 	.word	0x20000024
 8001c2c:	e000e010 	.word	0xe000e010
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000020 	.word	0x20000020

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000024 	.word	0x20000024
 8001c5c:	20000a3c 	.word	0x20000a3c

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000a3c 	.word	0x20000a3c

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000024 	.word	0x20000024

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	@ (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	@ (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	@ (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	@ 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff4c 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3e:	f7ff ff63 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff ffb3 	bl	8001db4 <NVIC_EncodePriority>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff82 	bl	8001d60 <__NVIC_SetPriority>
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff56 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00d      	b.n	8001eb2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <HAL_SYSTICK_Config+0x40>)
 8001eaa:	f043 0303 	orr.w	r3, r3, #3
 8001eae:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d844      	bhi.n	8001f5c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001efb 	.word	0x08001efb
 8001edc:	08001f19 	.word	0x08001f19
 8001ee0:	08001f3b 	.word	0x08001f3b
 8001ee4:	08001f5d 	.word	0x08001f5d
 8001ee8:	08001eed 	.word	0x08001eed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6013      	str	r3, [r2, #0]
      break;
 8001ef8:	e031      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f0c:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f0e:	f023 030c 	bic.w	r3, r3, #12
 8001f12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f16:	e022      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f2a:	f023 030c 	bic.w	r3, r3, #12
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f38:	e011      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f4c:	f023 030c 	bic.w	r3, r3, #12
 8001f50:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f5a:	e000      	b.n	8001f5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f5c:	bf00      	nop
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010
 8001f70:	44020c00 	.word	0x44020c00

08001f74 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001f7a:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001f86:	2304      	movs	r3, #4
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	e01e      	b.n	8001fca <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d00f      	beq.n	8001fbe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d80f      	bhi.n	8001fc4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d003      	beq.n	8001fb8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001fb0:	e008      	b.n	8001fc4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
        break;
 8001fb6:	e008      	b.n	8001fca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
        break;
 8001fbc:	e005      	b.n	8001fca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	607b      	str	r3, [r7, #4]
        break;
 8001fc2:	e002      	b.n	8001fca <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
        break;
 8001fc8:	bf00      	nop
    }
  }
  return systick_source;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e010 	.word	0xe000e010
 8001fdc:	44020c00 	.word	0x44020c00

08001fe0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d011      	beq.n	800201c <HAL_EXTI_RegisterCallback+0x3c>
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	dc13      	bgt.n	8002024 <HAL_EXTI_RegisterCallback+0x44>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_EXTI_RegisterCallback+0x26>
 8002000:	2b01      	cmp	r3, #1
 8002002:	d007      	beq.n	8002014 <HAL_EXTI_RegisterCallback+0x34>
 8002004:	e00e      	b.n	8002024 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	609a      	str	r2, [r3, #8]
      break;
 8002012:	e00a      	b.n	800202a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	605a      	str	r2, [r3, #4]
      break;
 800201a:	e006      	b.n	800202a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	609a      	str	r2, [r3, #8]
      break;
 8002022:	e002      	b.n	800202a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
      break;
 8002028:	bf00      	nop
  }

  return status;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e003      	b.n	8002054 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002052:	2300      	movs	r3, #0
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2201      	movs	r2, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_EXTI_IRQHandler+0x88>)
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_EXTI_IRQHandler+0x8c>)
 80020b8:	4413      	add	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4798      	blx	r3
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	4402200c 	.word	0x4402200c
 80020ec:	44022010 	.word	0x44022010

080020f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020fe:	e136      	b.n	800236e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8128 	beq.w	8002368 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x38>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b12      	cmp	r3, #18
 8002126:	d125      	bne.n	8002174 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	6979      	ldr	r1, [r7, #20]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00b      	beq.n	80021c8 <HAL_GPIO_Init+0xd8>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d130      	bne.n	800222a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fe:	2201      	movs	r2, #1
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4013      	ands	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0201 	and.w	r2, r3, #1
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d017      	beq.n	8002262 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4013      	ands	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d07c      	beq.n	8002368 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800226e:	4a47      	ldr	r2, [pc, #284]	@ (800238c <HAL_GPIO_Init+0x29c>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3318      	adds	r3, #24
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0a9a      	lsrs	r2, r3, #10
 8002296:	4b3e      	ldr	r3, [pc, #248]	@ (8002390 <HAL_GPIO_Init+0x2a0>)
 8002298:	4013      	ands	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	00d2      	lsls	r2, r2, #3
 80022a2:	4093      	lsls	r3, r2
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022aa:	4938      	ldr	r1, [pc, #224]	@ (800238c <HAL_GPIO_Init+0x29c>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3318      	adds	r3, #24
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022b8:	4b34      	ldr	r3, [pc, #208]	@ (800238c <HAL_GPIO_Init+0x29c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80022dc:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <HAL_GPIO_Init+0x29c>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <HAL_GPIO_Init+0x29c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4013      	ands	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002306:	4a21      	ldr	r2, [pc, #132]	@ (800238c <HAL_GPIO_Init+0x29c>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <HAL_GPIO_Init+0x29c>)
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002312:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4013      	ands	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002332:	4a16      	ldr	r2, [pc, #88]	@ (800238c <HAL_GPIO_Init+0x29c>)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <HAL_GPIO_Init+0x29c>)
 800233c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002340:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_GPIO_Init+0x29c>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	3301      	adds	r3, #1
 800236c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	f47f aec1 	bne.w	8002100 <HAL_GPIO_Init+0x10>
  }
}
 800237e:	bf00      	nop
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	44022000 	.word	0x44022000
 8002390:	002f7f7f 	.word	0x002f7f7f

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43d9      	mvns	r1, r3
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	400b      	ands	r3, r1
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e02a      	b.n	8002460 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fce2 	bl	8000de8 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800243a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	430b      	orrs	r3, r1
 8002446:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e08d      	b.n	8002596 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fcc6 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	@ 0x24
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	e006      	b.n	80024f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d108      	bne.n	800250a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	e007      	b.n	800251a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002518:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800252c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800253c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69d9      	ldr	r1, [r3, #28]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d138      	bne.n	8002626 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025be:	2302      	movs	r3, #2
 80025c0:	e032      	b.n	8002628 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2224      	movs	r2, #36	@ 0x24
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b20      	cmp	r3, #32
 8002648:	d139      	bne.n	80026be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002654:	2302      	movs	r3, #2
 8002656:	e033      	b.n	80026c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002686:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80026d8:	230a      	movs	r3, #10
 80026da:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80026dc:	e002      	b.n	80026e4 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002700:	b29b      	uxth	r3, r3
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800271a:	230a      	movs	r3, #10
 800271c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800271e:	e002      	b.n	8002726 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b01      	subs	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f9      	bne.n	8002720 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002734:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	b29b      	uxth	r3, r3
 800273e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002742:	b29b      	uxth	r3, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800275c:	230a      	movs	r3, #10
 800275e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002760:	e002      	b.n	8002768 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3b01      	subs	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f9      	bne.n	8002762 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002776:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	b29b      	uxth	r3, r3
 8002780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002784:	b29b      	uxth	r3, r3
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af02      	add	r7, sp, #8
 8002798:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0f3      	b.n	800298c <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7fe fe59 	bl	8001470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f008 febb 	bl	800b546 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7c1a      	ldrb	r2, [r3, #16]
 80027d8:	f88d 2000 	strb.w	r2, [sp]
 80027dc:	3304      	adds	r3, #4
 80027de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e0:	f008 fe7f 	bl	800b4e2 <USB_CoreInit>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0ca      	b.n	800298c <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f008 feb7 	bl	800b570 <USB_SetCurrentMode>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0bb      	b.n	800298c <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	e03f      	b.n	800289a <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	3315      	adds	r3, #21
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	3314      	adds	r3, #20
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3317      	adds	r3, #23
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3324      	adds	r3, #36	@ 0x24
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3328      	adds	r3, #40	@ 0x28
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	3304      	adds	r3, #4
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	3301      	adds	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	791b      	ldrb	r3, [r3, #4]
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3ba      	bcc.n	800281a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e044      	b.n	8002934 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	3301      	adds	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	791b      	ldrb	r3, [r3, #4]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	429a      	cmp	r2, r3
 800293c:	d3b5      	bcc.n	80028aa <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7c1a      	ldrb	r2, [r3, #16]
 8002946:	f88d 2000 	strb.w	r2, [sp]
 800294a:	3304      	adds	r3, #4
 800294c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294e:	f008 fe32 	bl	800b5b6 <USB_DevInit>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e013      	b.n	800298c <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7b1b      	ldrb	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f001 fb6b 	bl	8004056 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f00a fc8b 	bl	800d2a0 <USB_DevDisconnect>

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_Start+0x16>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e012      	b.n	80029d0 <HAL_PCD_Start+0x3c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f008 fdb1 	bl	800b51e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00a fc5c 	bl	800d27e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f00a fc6c 	bl	800d2c2 <USB_ReadInterrupts>
 80029ea:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 faf2 	bl	8002fe0 <PCD_EP_ISR_Handler>

    return;
 80029fc:	e0de      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002a16:	400b      	ands	r3, r1
 8002a18:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f00b faff 	bl	800e01e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a20:	2100      	movs	r1, #0
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8e1 	bl	8002bea <HAL_PCD_SetAddress>

    return;
 8002a28:	e0c8      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002a42:	400b      	ands	r3, r1
 8002a44:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002a46:	e0b9      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002a60:	400b      	ands	r3, r1
 8002a62:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002a64:	e0aa      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d029      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0208 	bic.w	r2, r2, #8
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f001 faf8 	bl	800409a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f893 	bl	8002bd6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002abe:	400b      	ands	r3, r1
 8002ac0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002ac2:	e07b      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01c      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0208 	orr.w	r2, r2, #8
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002aec:	400b      	ands	r3, r1
 8002aee:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0204 	orr.w	r2, r2, #4
 8002afe:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f85e 	bl	8002bc2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b06:	e059      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d033      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002b20:	400b      	ands	r3, r1
 8002b22:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d121      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0204 	orr.w	r2, r2, #4
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0208 	orr.w	r2, r2, #8
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f001 fa95 	bl	800409a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b70:	e024      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f825 	bl	8002bc2 <HAL_PCD_SuspendCallback>
    return;
 8002b78:	e020      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8002b92:	400b      	ands	r3, r1
 8002b94:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f00b fa33 	bl	800e002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b9c:	e00e      	b.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002bba:	bf00      	nop
  }
}
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_SetAddress+0x1a>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e012      	b.n	8002c2a <HAL_PCD_SetAddress+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f00a fb1c 	bl	800d258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	4608      	mov	r0, r1
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	70fb      	strb	r3, [r7, #3]
 8002c44:	460b      	mov	r3, r1
 8002c46:	803b      	strh	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da0f      	bge.n	8002c78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 0207 	and.w	r2, r3, #7
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	3310      	adds	r3, #16
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
 8002c76:	e00f      	b.n	8002c98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 0207 	and.w	r2, r3, #7
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ca4:	883b      	ldrh	r3, [r7, #0]
 8002ca6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	78ba      	ldrb	r2, [r7, #2]
 8002cb2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb4:	78bb      	ldrb	r3, [r7, #2]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_EP_Open+0x9c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e00e      	b.n	8002cec <HAL_PCD_EP_Open+0xba>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f008 fc8d 	bl	800b5fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0f      	bge.n	8002d28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0207 	and.w	r2, r3, #7
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3310      	adds	r3, #16
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
 8002d26:	e00f      	b.n	8002d48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 0207 	and.w	r2, r3, #7
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_PCD_EP_Close+0x6e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e00e      	b.n	8002d80 <HAL_PCD_EP_Close+0x8c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f008 ffa3 	bl	800bcbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6979      	ldr	r1, [r7, #20]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f009 f8f7 	bl	800bfd0 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0207 	and.w	r2, r3, #7
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	7afb      	ldrb	r3, [r7, #11]
 8002e2e:	f003 0207 	and.w	r2, r3, #7
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	3310      	adds	r3, #16
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2201      	movs	r2, #1
 8002e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f009 f8a7 	bl	800bfd0 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	7912      	ldrb	r2, [r2, #4]
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e040      	b.n	8002f2c <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da0f      	bge.n	8002ed2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 0207 	and.w	r2, r3, #7
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	705a      	strb	r2, [r3, #1]
 8002ed0:	e00d      	b.n	8002eee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_PCD_EP_SetStall+0x82>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00e      	b.n	8002f2c <HAL_PCD_EP_SetStall+0xa0>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00a f8c1 	bl	800d0a4 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	7912      	ldrb	r2, [r2, #4]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e042      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0f      	bge.n	8002f7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 0207 	and.w	r2, r3, #7
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	3310      	adds	r3, #16
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00f      	b.n	8002f9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 0207 	and.w	r2, r3, #7
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_EP_ClrStall+0x86>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e00e      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0xa4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f00a f8b1 	bl	800d130 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08e      	sub	sp, #56	@ 0x38
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fe8:	e326      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff0:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002ff2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002ffe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 8124 	bne.w	8003250 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003008:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d13e      	bne.n	8003090 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b89      	ldr	r3, [pc, #548]	@ (8003240 <PCD_EP_ISR_Handler+0x260>)
 800301a:	4013      	ands	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003028:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3314      	adds	r3, #20
 800302e:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800303a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800304a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	441a      	add	r2, r3
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003056:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003058:	2100      	movs	r1, #0
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f00a ffb7 	bl	800dfce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7c5b      	ldrb	r3, [r3, #17]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 82e6 	beq.w	8003638 <PCD_EP_ISR_Handler+0x658>
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 82e1 	bne.w	8003638 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7c5b      	ldrb	r3, [r3, #17]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003080:	b2da      	uxtb	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	745a      	strb	r2, [r3, #17]
 800308e:	e2d3      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80030a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d027      	beq.n	80030fa <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7ff fb09 	bl	80026cc <PCD_GET_EP_RX_CNT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80030cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f00a f963 	bl	800d3a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b58      	ldr	r3, [pc, #352]	@ (8003244 <PCD_EP_ISR_Handler+0x264>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030f0:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f00a ff3e 	bl	800df74 <HAL_PCD_SetupStageCallback>
 80030f8:	e29e      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80030fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f280 829a 	bge.w	8003638 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <PCD_EP_ISR_Handler+0x264>)
 800310c:	4013      	ands	r3, r2
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003116:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800311a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f7ff fad0 	bl	80026cc <PCD_GET_EP_RX_CNT>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003132:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d019      	beq.n	8003170 <PCD_EP_ISR_Handler+0x190>
 800313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314a:	6959      	ldr	r1, [r3, #20]
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003152:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003154:	b29b      	uxth	r3, r3
 8003156:	f00a f923 	bl	800d3a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	441a      	add	r2, r3
 8003164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003166:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003168:	2100      	movs	r1, #0
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f00a ff14 	bl	800df98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003178:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800317a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 825a 	bne.w	8003638 <PCD_EP_ISR_Handler+0x658>
 8003184:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003186:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800318a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800318e:	f000 8253 	beq.w	8003638 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003192:	4b2d      	ldr	r3, [pc, #180]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a2c      	ldr	r2, [pc, #176]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 8003198:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800319c:	6053      	str	r3, [r2, #4]
 800319e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <PCD_EP_ISR_Handler+0x1d4>
 80031a6:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 80031ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031b0:	6053      	str	r3, [r2, #4]
 80031b2:	e02e      	b.n	8003212 <PCD_EP_ISR_Handler+0x232>
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80031ba:	d814      	bhi.n	80031e6 <PCD_EP_ISR_Handler+0x206>
 80031bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <PCD_EP_ISR_Handler+0x1f6>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	069b      	lsls	r3, r3, #26
 80031de:	491a      	ldr	r1, [pc, #104]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	e015      	b.n	8003212 <PCD_EP_ISR_Handler+0x232>
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <PCD_EP_ISR_Handler+0x220>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	4313      	orrs	r3, r2
 800320a:	4a0f      	ldr	r2, [pc, #60]	@ (8003248 <PCD_EP_ISR_Handler+0x268>)
 800320c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003210:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <PCD_EP_ISR_Handler+0x26c>)
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e1fb      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
 8003240:	07ff8f0f 	.word	0x07ff8f0f
 8003244:	07ff0f8f 	.word	0x07ff0f8f
 8003248:	40016400 	.word	0x40016400
 800324c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8003262:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003266:	2b00      	cmp	r3, #0
 8003268:	f280 80bd 	bge.w	80033e6 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b9e      	ldr	r3, [pc, #632]	@ (80034f8 <PCD_EP_ISR_Handler+0x518>)
 800327e:	4013      	ands	r3, r2
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003296:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003298:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	7b1b      	ldrb	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7ff fa02 	bl	80026cc <PCD_GET_EP_RX_CNT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 80032cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d067      	beq.n	80033a2 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d8:	6959      	ldr	r1, [r3, #20]
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	88da      	ldrh	r2, [r3, #6]
 80032de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e0:	f00a f85e 	bl	800d3a0 <USB_ReadPMA>
 80032e4:	e05d      	b.n	80033a2 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d108      	bne.n	8003300 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80032ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80032f0:	461a      	mov	r2, r3
 80032f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f9ad 	bl	8003654 <HAL_PCD_EP_DB_Receive>
 80032fa:	4603      	mov	r3, r0
 80032fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80032fe:	e050      	b.n	80033a2 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b7a      	ldr	r3, [pc, #488]	@ (80034fc <PCD_EP_ISR_Handler+0x51c>)
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	441a      	add	r2, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800332a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800332e:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d016      	beq.n	8003376 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7ff f9db 	bl	800270e <PCD_GET_EP_DBUF0_CNT>
 8003358:	4603      	mov	r3, r0
 800335a:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 800335c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01f      	beq.n	80033a2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336c:	891a      	ldrh	r2, [r3, #8]
 800336e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003370:	f00a f816 	bl	800d3a0 <USB_ReadPMA>
 8003374:	e015      	b.n	80033a2 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7ff f9e5 	bl	8002750 <PCD_GET_EP_DBUF1_CNT>
 8003386:	4603      	mov	r3, r0
 8003388:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 800338a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003396:	6959      	ldr	r1, [r3, #20]
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	895a      	ldrh	r2, [r3, #10]
 800339c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800339e:	f009 ffff 	bl	800d3a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033a8:	441a      	add	r2, r3
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80033ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033b4:	441a      	add	r2, r3
 80033b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <PCD_EP_ISR_Handler+0x3ec>
 80033c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d206      	bcs.n	80033da <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f00a fde0 	bl	800df98 <HAL_PCD_DataOutStageCallback>
 80033d8:	e005      	b.n	80033e6 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80033e0:	4618      	mov	r0, r3
 80033e2:	f008 fdf5 	bl	800bfd0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80033e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80033e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8123 	beq.w	8003638 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80033f2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3310      	adds	r3, #16
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b39      	ldr	r3, [pc, #228]	@ (8003500 <PCD_EP_ISR_Handler+0x520>)
 800341a:	4013      	ands	r3, r2
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003432:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 80b8 	bne.w	80035ae <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 800343e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	7b1b      	ldrb	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a9 	beq.w	80035a0 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800344e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d055      	beq.n	8003504 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d124      	bne.n	80034aa <PCD_EP_ISR_Handler+0x4ca>
 8003460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800346a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800347a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800347e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800348e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800349e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e07a      	b.n	80035a0 <PCD_EP_ISR_Handler+0x5c0>
 80034aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d176      	bne.n	80035a0 <PCD_EP_ISR_Handler+0x5c0>
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034d0:	b292      	uxth	r2, r2
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80034de:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80034e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e054      	b.n	80035a0 <PCD_EP_ISR_Handler+0x5c0>
 80034f6:	bf00      	nop
 80034f8:	07ff0f8f 	.word	0x07ff0f8f
 80034fc:	07ff8f8f 	.word	0x07ff8f8f
 8003500:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d124      	bne.n	8003556 <PCD_EP_ISR_Handler+0x576>
 800350c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003516:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003526:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800352a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800353a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800354a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800354e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	e024      	b.n	80035a0 <PCD_EP_ISR_Handler+0x5c0>
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d120      	bne.n	80035a0 <PCD_EP_ISR_Handler+0x5c0>
 800355e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003568:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003578:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800357c:	b292      	uxth	r2, r2
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800358a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800358e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800359c:	6852      	ldr	r2, [r2, #4]
 800359e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f00a fd11 	bl	800dfce <HAL_PCD_DataInStageCallback>
 80035ac:	e044      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d139      	bne.n	800362c <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 80035d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035d8:	429a      	cmp	r2, r3
 80035da:	d906      	bls.n	80035ea <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035e2:	1ad2      	subs	r2, r2, r3
 80035e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e6:	619a      	str	r2, [r3, #24]
 80035e8:	e002      	b.n	80035f0 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f00a fce5 	bl	800dfce <HAL_PCD_DataInStageCallback>
 8003604:	e018      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800360c:	441a      	add	r2, r3
 800360e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003610:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003618:	441a      	add	r2, r3
 800361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003624:	4618      	mov	r0, r3
 8003626:	f008 fcd3 	bl	800bfd0 <USB_EPStartXfer>
 800362a:	e005      	b.n	8003638 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800362c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800362e:	461a      	mov	r2, r3
 8003630:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8e8 	bl	8003808 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003642:	2b00      	cmp	r3, #0
 8003644:	f47f acd1 	bne.w	8002fea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3738      	adds	r7, #56	@ 0x38
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop

08003654 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	@ 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d062      	beq.n	8003732 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f7ff f849 	bl	800270e <PCD_GET_EP_DBUF0_CNT>
 800367c:	4603      	mov	r3, r0
 800367e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	8bfb      	ldrh	r3, [r7, #30]
 8003686:	429a      	cmp	r2, r3
 8003688:	d306      	bcc.n	8003698 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	8bfb      	ldrh	r3, [r7, #30]
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	619a      	str	r2, [r3, #24]
 8003696:	e002      	b.n	800369e <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11b      	bne.n	80036de <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b52      	ldr	r3, [pc, #328]	@ (8003800 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036dc:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b42      	ldr	r3, [pc, #264]	@ (8003804 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003712:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003716:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003718:	8bfb      	ldrh	r3, [r7, #30]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06b      	beq.n	80037f6 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	891a      	ldrh	r2, [r3, #8]
 800372a:	8bfb      	ldrh	r3, [r7, #30]
 800372c:	f009 fe38 	bl	800d3a0 <USB_ReadPMA>
 8003730:	e061      	b.n	80037f6 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f7ff f807 	bl	8002750 <PCD_GET_EP_DBUF1_CNT>
 8003742:	4603      	mov	r3, r0
 8003744:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	8bfb      	ldrh	r3, [r7, #30]
 800374c:	429a      	cmp	r2, r3
 800374e:	d306      	bcc.n	800375e <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	8bfb      	ldrh	r3, [r7, #30]
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	619a      	str	r2, [r3, #24]
 800375c:	e002      	b.n	8003764 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11b      	bne.n	80037a4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800377e:	4013      	ands	r3, r2
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800379e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a2:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d117      	bne.n	80037de <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037dc:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80037de:	8bfb      	ldrh	r3, [r7, #30]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6959      	ldr	r1, [r3, #20]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	895a      	ldrh	r2, [r3, #10]
 80037f0:	8bfb      	ldrh	r3, [r7, #30]
 80037f2:	f009 fdd5 	bl	800d3a0 <USB_ReadPMA>
    }
  }

  return count;
 80037f6:	8bfb      	ldrh	r3, [r7, #30]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3728      	adds	r7, #40	@ 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	07ffbf8f 	.word	0x07ffbf8f
 8003804:	07ff8f8f 	.word	0x07ff8f8f

08003808 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	@ 0x38
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 81d5 	beq.w	8003bcc <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7fe ff6e 	bl	800270e <PCD_GET_EP_DBUF0_CNT>
 8003832:	4603      	mov	r3, r0
 8003834:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	8bfb      	ldrh	r3, [r7, #30]
 800383c:	429a      	cmp	r2, r3
 800383e:	d906      	bls.n	800384e <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	8bfb      	ldrh	r3, [r7, #30]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	e002      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 80c1 	bne.w	80039e0 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d124      	bne.n	80038b0 <HAL_PCD_EP_DB_Transmit+0xa8>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003884:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003894:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e024      	b.n	80038fa <HAL_PCD_EP_DB_Transmit+0xf2>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d120      	bne.n	80038fa <HAL_PCD_EP_DB_Transmit+0xf2>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038d6:	b292      	uxth	r2, r2
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80038e4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d124      	bne.n	800394c <HAL_PCD_EP_DB_Transmit+0x144>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800390c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800391c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003920:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003930:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003940:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003944:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e024      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x18e>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d120      	bne.n	8003996 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003972:	b292      	uxth	r2, r2
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003980:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800398e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003992:	6852      	ldr	r2, [r2, #4]
 8003994:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f00a fb16 	bl	800dfce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 82e5 	beq.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf8 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e2cb      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf8 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a18:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 82a9 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	8bfb      	ldrh	r3, [r7, #30]
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	8bfb      	ldrh	r3, [r7, #30]
 8003a38:	441a      	add	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d309      	bcc.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	1ad2      	subs	r2, r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	621a      	str	r2, [r3, #32]
 8003a5c:	e014      	b.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003a66:	8bfb      	ldrh	r3, [r7, #30]
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a72:	e009      	b.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2200      	movs	r2, #0
 8003a86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d16a      	bne.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x35e>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003aae:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d112      	bne.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ac4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ad8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e06a      	b.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ae4:	d81e      	bhi.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	3301      	adds	r3, #1
 8003afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	069a      	lsls	r2, r3, #26
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e048      	b.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x332>
 8003b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b36:	3b01      	subs	r3, #1
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4c:	069b      	lsls	r3, r3, #26
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e027      	b.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d123      	bne.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	041a      	lsls	r2, r3, #16
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6959      	ldr	r1, [r3, #20]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	891a      	ldrh	r2, [r3, #8]
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f009 fb8a 	bl	800d2de <USB_WritePMA>
 8003bca:	e1d5      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f7fe fdba 	bl	8002750 <PCD_GET_EP_DBUF1_CNT>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	8bfb      	ldrh	r3, [r7, #30]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d308      	bcc.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	8bfb      	ldrh	r3, [r7, #30]
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	619a      	str	r2, [r3, #24]
 8003bf6:	e004      	b.n	8003c02 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003bf8:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 80c1 	bne.w	8003d8e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d124      	bne.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x456>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c32:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c56:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e024      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d120      	bne.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c84:	b292      	uxth	r2, r2
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003c92:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ca0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d124      	bne.n	8003cfa <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cce:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cf2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	e024      	b.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d120      	bne.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d20:	b292      	uxth	r2, r2
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003d2e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d40:	6852      	ldr	r2, [r2, #4]
 8003d42:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f00a f93f 	bl	800dfce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 810e 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b95      	ldr	r3, [pc, #596]	@ (8003fc4 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e0f4      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d117      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b86      	ldr	r3, [pc, #536]	@ (8003fc4 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	441a      	add	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc6:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	f040 80d2 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	441a      	add	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	8bfb      	ldrh	r3, [r7, #30]
 8003de6:	441a      	add	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d309      	bcc.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	621a      	str	r2, [r3, #32]
 8003e0a:	e014      	b.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003e14:	8bfb      	ldrh	r3, [r7, #30]
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e20:	e009      	b.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d16a      	bne.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x70c>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e5c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d112      	bne.n	8003e8e <HAL_PCD_EP_DB_Transmit+0x686>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e06a      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e92:	d81e      	bhi.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	069a      	lsls	r2, r3, #26
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ec8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	e048      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ef2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	069b      	lsls	r3, r3, #26
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f0c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e027      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d123      	bne.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6959      	ldr	r1, [r3, #20]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	895a      	ldrh	r2, [r3, #10]
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f009 f9b3 	bl	800d2de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	f083 0310 	eor.w	r3, r3, #16
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	f083 0320 	eor.w	r3, r3, #32
 8003f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3738      	adds	r7, #56	@ 0x38
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	07ff8f8f 	.word	0x07ff8f8f
 8003fc8:	07ff8fbf 	.word	0x07ff8fbf

08003fcc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	f003 0207 	and.w	r2, r3, #7
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3310      	adds	r3, #16
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3304      	adds	r3, #4
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e00a      	b.n	800401a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004004:	897a      	ldrh	r2, [r7, #10]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800401a:	893b      	ldrh	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	b29a      	uxth	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	80da      	strh	r2, [r3, #6]
 800402e:	e00b      	b.n	8004048 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2201      	movs	r2, #1
 8004034:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	b29a      	uxth	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	b29a      	uxth	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80040ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040bc:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80040be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	44020800 	.word	0x44020800

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f000 bc28 	b.w	8004938 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e8:	4b94      	ldr	r3, [pc, #592]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f003 0318 	and.w	r3, r3, #24
 80040f0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80040f2:	4b92      	ldr	r3, [pc, #584]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d05b      	beq.n	80041c0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b08      	cmp	r3, #8
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x46>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b18      	cmp	r3, #24
 8004112:	d114      	bne.n	800413e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d111      	bne.n	800413e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f000 bc08 	b.w	8004938 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004128:	4b84      	ldr	r3, [pc, #528]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	4981      	ldr	r1, [pc, #516]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004138:	4313      	orrs	r3, r2
 800413a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800413c:	e040      	b.n	80041c0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d023      	beq.n	800418e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004146:	4b7d      	ldr	r3, [pc, #500]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7c      	ldr	r2, [pc, #496]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd fd85 	bl	8001c60 <HAL_GetTick>
 8004156:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800415a:	f7fd fd81 	bl	8001c60 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e3e5      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800416c:	4b73      	ldr	r3, [pc, #460]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004178:	4b70      	ldr	r3, [pc, #448]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	041b      	lsls	r3, r3, #16
 8004186:	496d      	ldr	r1, [pc, #436]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004188:	4313      	orrs	r3, r2
 800418a:	618b      	str	r3, [r1, #24]
 800418c:	e018      	b.n	80041c0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800418e:	4b6b      	ldr	r3, [pc, #428]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6a      	ldr	r2, [pc, #424]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd fd61 	bl	8001c60 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041a2:	f7fd fd5d 	bl	8001c60 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e3c1      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80041b4:	4b61      	ldr	r3, [pc, #388]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a0 	beq.w	800430e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_OscConfig+0x10c>
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b18      	cmp	r3, #24
 80041d8:	d109      	bne.n	80041ee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 8092 	bne.w	800430e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e3a4      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x132>
 80041f8:	4b50      	ldr	r3, [pc, #320]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a4f      	ldr	r2, [pc, #316]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e058      	b.n	80042b8 <HAL_RCC_OscConfig+0x1e4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x160>
 800420e:	4b4b      	ldr	r3, [pc, #300]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b48      	ldr	r3, [pc, #288]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a47      	ldr	r2, [pc, #284]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004220:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b45      	ldr	r3, [pc, #276]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a44      	ldr	r2, [pc, #272]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800422c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e041      	b.n	80042b8 <HAL_RCC_OscConfig+0x1e4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d112      	bne.n	8004264 <HAL_RCC_OscConfig+0x190>
 800423e:	4b3f      	ldr	r3, [pc, #252]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3e      	ldr	r2, [pc, #248]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b3c      	ldr	r3, [pc, #240]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3b      	ldr	r2, [pc, #236]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004250:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b39      	ldr	r3, [pc, #228]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a38      	ldr	r2, [pc, #224]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e029      	b.n	80042b8 <HAL_RCC_OscConfig+0x1e4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800426c:	d112      	bne.n	8004294 <HAL_RCC_OscConfig+0x1c0>
 800426e:	4b33      	ldr	r3, [pc, #204]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a32      	ldr	r2, [pc, #200]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b30      	ldr	r3, [pc, #192]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2f      	ldr	r2, [pc, #188]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004280:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b2d      	ldr	r3, [pc, #180]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2c      	ldr	r2, [pc, #176]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e011      	b.n	80042b8 <HAL_RCC_OscConfig+0x1e4>
 8004294:	4b29      	ldr	r3, [pc, #164]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a28      	ldr	r2, [pc, #160]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b26      	ldr	r3, [pc, #152]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a25      	ldr	r2, [pc, #148]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b23      	ldr	r3, [pc, #140]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80042b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fcce 	bl	8001c60 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80042c8:	f7fd fcca 	bl	8001c60 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e32e      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1f4>
 80042e6:	e012      	b.n	800430e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd fcba 	bl	8001c60 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80042f0:	f7fd fcb6 	bl	8001c60 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e31a      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004302:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <HAL_RCC_OscConfig+0x268>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 809a 	beq.w	8004450 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x25a>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2b18      	cmp	r3, #24
 8004326:	d149      	bne.n	80043bc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d146      	bne.n	80043bc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e2fe      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
 800433a:	bf00      	nop
 800433c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004346:	4b9a      	ldr	r3, [pc, #616]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0218 	and.w	r2, r3, #24
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	429a      	cmp	r2, r3
 8004354:	d014      	beq.n	8004380 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004356:	4b96      	ldr	r3, [pc, #600]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 0218 	bic.w	r2, r3, #24
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4993      	ldr	r1, [pc, #588]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004368:	f000 fdd0 	bl	8004f0c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800436c:	4b91      	ldr	r3, [pc, #580]	@ (80045b4 <HAL_RCC_OscConfig+0x4e0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fd fbeb 	bl	8001b4c <HAL_InitTick>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e2db      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd fc6e 	bl	8001c60 <HAL_GetTick>
 8004384:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004388:	f7fd fc6a 	bl	8001c60 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e2ce      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800439a:	4b85      	ldr	r3, [pc, #532]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80043a6:	4b82      	ldr	r3, [pc, #520]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	497e      	ldr	r1, [pc, #504]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80043ba:	e049      	b.n	8004450 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02c      	beq.n	800441e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80043c4:	4b7a      	ldr	r3, [pc, #488]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f023 0218 	bic.w	r2, r3, #24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	4977      	ldr	r1, [pc, #476]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80043d6:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a75      	ldr	r2, [pc, #468]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd fc3d 	bl	8001c60 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80043ea:	f7fd fc39 	bl	8001c60 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e29d      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fc:	4b6c      	ldr	r3, [pc, #432]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004408:	4b69      	ldr	r3, [pc, #420]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	4966      	ldr	r1, [pc, #408]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]
 800441c:	e018      	b.n	8004450 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441e:	4b64      	ldr	r3, [pc, #400]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a63      	ldr	r2, [pc, #396]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd fc19 	bl	8001c60 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004432:	f7fd fc15 	bl	8001c60 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e279      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004444:	4b5a      	ldr	r3, [pc, #360]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d03c      	beq.n	80044d6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01c      	beq.n	800449e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004464:	4b52      	ldr	r3, [pc, #328]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800446a:	4a51      	ldr	r2, [pc, #324]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800446c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004470:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd fbf4 	bl	8001c60 <HAL_GetTick>
 8004478:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800447c:	f7fd fbf0 	bl	8001c60 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e254      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800448e:	4b48      	ldr	r3, [pc, #288]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <HAL_RCC_OscConfig+0x3a8>
 800449c:	e01b      	b.n	80044d6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449e:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80044a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a4:	4a42      	ldr	r2, [pc, #264]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80044a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fd fbd7 	bl	8001c60 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80044b6:	f7fd fbd3 	bl	8001c60 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e237      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044c8:	4b39      	ldr	r3, [pc, #228]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80044ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1ef      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80d2 	beq.w	8004688 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044e4:	4b34      	ldr	r3, [pc, #208]	@ (80045b8 <HAL_RCC_OscConfig+0x4e4>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d118      	bne.n	8004522 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80044f0:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <HAL_RCC_OscConfig+0x4e4>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	4a30      	ldr	r2, [pc, #192]	@ (80045b8 <HAL_RCC_OscConfig+0x4e4>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fc:	f7fd fbb0 	bl	8001c60 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004504:	f7fd fbac 	bl	8001c60 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e210      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004516:	4b28      	ldr	r3, [pc, #160]	@ (80045b8 <HAL_RCC_OscConfig+0x4e4>)
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d108      	bne.n	800453c <HAL_RCC_OscConfig+0x468>
 800452a:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800452c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004530:	4a1f      	ldr	r2, [pc, #124]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800453a:	e074      	b.n	8004626 <HAL_RCC_OscConfig+0x552>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d118      	bne.n	8004576 <HAL_RCC_OscConfig+0x4a2>
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800454a:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004554:	4b16      	ldr	r3, [pc, #88]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800455a:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800455c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004560:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800456a:	4a11      	ldr	r2, [pc, #68]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004574:	e057      	b.n	8004626 <HAL_RCC_OscConfig+0x552>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d11e      	bne.n	80045bc <HAL_RCC_OscConfig+0x4e8>
 800457e:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004584:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800458e:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004594:	4a06      	ldr	r2, [pc, #24]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 8004596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800459a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800459e:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80045a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a4:	4a02      	ldr	r2, [pc, #8]	@ (80045b0 <HAL_RCC_OscConfig+0x4dc>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045ae:	e03a      	b.n	8004626 <HAL_RCC_OscConfig+0x552>
 80045b0:	44020c00 	.word	0x44020c00
 80045b4:	20000020 	.word	0x20000020
 80045b8:	44020800 	.word	0x44020800
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b85      	cmp	r3, #133	@ 0x85
 80045c2:	d118      	bne.n	80045f6 <HAL_RCC_OscConfig+0x522>
 80045c4:	4ba2      	ldr	r3, [pc, #648]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ca:	4aa1      	ldr	r2, [pc, #644]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045da:	4a9d      	ldr	r2, [pc, #628]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ea:	4a99      	ldr	r2, [pc, #612]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045f4:	e017      	b.n	8004626 <HAL_RCC_OscConfig+0x552>
 80045f6:	4b96      	ldr	r3, [pc, #600]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045fc:	4a94      	ldr	r2, [pc, #592]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004606:	4b92      	ldr	r3, [pc, #584]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800460c:	4a90      	ldr	r2, [pc, #576]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800460e:	f023 0304 	bic.w	r3, r3, #4
 8004612:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004616:	4b8e      	ldr	r3, [pc, #568]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800461c:	4a8c      	ldr	r2, [pc, #560]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800461e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004622:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fd fb17 	bl	8001c60 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd fb13 	bl	8001c60 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e175      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464c:	4b80      	ldr	r3, [pc, #512]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800464e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ed      	beq.n	8004636 <HAL_RCC_OscConfig+0x562>
 800465a:	e015      	b.n	8004688 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd fb00 	bl	8001c60 <HAL_GetTick>
 8004660:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fd fafc 	bl	8001c60 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e15e      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800467a:	4b75      	ldr	r3, [pc, #468]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800467c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ed      	bne.n	8004664 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d036      	beq.n	8004702 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d019      	beq.n	80046d0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800469c:	4b6c      	ldr	r3, [pc, #432]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80046a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd fada 	bl	8001c60 <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80046b0:	f7fd fad6 	bl	8001c60 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e13a      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046c2:	4b63      	ldr	r3, [pc, #396]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x5dc>
 80046ce:	e018      	b.n	8004702 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046d0:	4b5f      	ldr	r3, [pc, #380]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80046d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fd fac0 	bl	8001c60 <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80046e4:	f7fd fabc 	bl	8001c60 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e120      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046f6:	4b56      	ldr	r3, [pc, #344]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8115 	beq.w	8004936 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b18      	cmp	r3, #24
 8004710:	f000 80af 	beq.w	8004872 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	2b02      	cmp	r3, #2
 800471a:	f040 8086 	bne.w	800482a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800471e:	4b4c      	ldr	r3, [pc, #304]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a4b      	ldr	r2, [pc, #300]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fd fa99 	bl	8001c60 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004732:	f7fd fa95 	bl	8001c60 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e0f9      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004744:	4b42      	ldr	r3, [pc, #264]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004750:	4b3f      	ldr	r3, [pc, #252]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004758:	f023 0303 	bic.w	r3, r3, #3
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004764:	0212      	lsls	r2, r2, #8
 8004766:	430a      	orrs	r2, r1
 8004768:	4939      	ldr	r1, [pc, #228]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800476a:	4313      	orrs	r3, r2
 800476c:	628b      	str	r3, [r1, #40]	@ 0x28
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	3b01      	subs	r3, #1
 8004774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477c:	3b01      	subs	r3, #1
 800477e:	025b      	lsls	r3, r3, #9
 8004780:	b29b      	uxth	r3, r3
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	3b01      	subs	r3, #1
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800479e:	492c      	ldr	r1, [pc, #176]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80047a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	4a29      	ldr	r2, [pc, #164]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047aa:	f023 0310 	bic.w	r3, r3, #16
 80047ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b4:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80047ba:	4b25      	ldr	r3, [pc, #148]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	4a24      	ldr	r2, [pc, #144]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047c0:	f043 0310 	orr.w	r3, r3, #16
 80047c4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80047c6:	4b22      	ldr	r3, [pc, #136]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	f023 020c 	bic.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	491f      	ldr	r1, [pc, #124]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80047d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	f023 0220 	bic.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e4:	491a      	ldr	r1, [pc, #104]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047ea:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80047f6:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a15      	ldr	r2, [pc, #84]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 80047fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fd fa2d 	bl	8001c60 <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800480a:	f7fd fa29 	bl	8001c60 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e08d      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800481c:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x736>
 8004828:	e085      	b.n	8004936 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a08      	ldr	r2, [pc, #32]	@ (8004850 <HAL_RCC_OscConfig+0x77c>)
 8004830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd fa13 	bl	8001c60 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800483e:	f7fd fa0f 	bl	8001c60 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d903      	bls.n	8004854 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e073      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
 8004850:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004854:	4b3a      	ldr	r3, [pc, #232]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ee      	bne.n	800483e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004860:	4b37      	ldr	r3, [pc, #220]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	4a36      	ldr	r2, [pc, #216]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004866:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	6293      	str	r3, [r2, #40]	@ 0x28
 8004870:	e061      	b.n	8004936 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004872:	4b33      	ldr	r3, [pc, #204]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004878:	4b31      	ldr	r3, [pc, #196]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	2b01      	cmp	r3, #1
 8004884:	d031      	beq.n	80048ea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d12a      	bne.n	80048ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d122      	bne.n	80048ea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d11a      	bne.n	80048ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	0a5b      	lsrs	r3, r3, #9
 80048b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d111      	bne.n	80048ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d108      	bne.n	80048ea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	0e1b      	lsrs	r3, r3, #24
 80048dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e024      	b.n	8004938 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80048ee:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 80048f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f2:	08db      	lsrs	r3, r3, #3
 80048f4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d01a      	beq.n	8004936 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004900:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	4a0e      	ldr	r2, [pc, #56]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004906:	f023 0310 	bic.w	r3, r3, #16
 800490a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd f9a8 	bl	8001c60 <HAL_GetTick>
 8004910:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004912:	bf00      	nop
 8004914:	f7fd f9a4 	bl	8001c60 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	4293      	cmp	r3, r2
 800491e:	d0f9      	beq.n	8004914 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004924:	4a06      	ldr	r2, [pc, #24]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800492a:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <HAL_RCC_OscConfig+0x86c>)
 8004930:	f043 0310 	orr.w	r3, r3, #16
 8004934:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	44020c00 	.word	0x44020c00

08004944 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e19e      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004958:	4b83      	ldr	r3, [pc, #524]	@ (8004b68 <HAL_RCC_ClockConfig+0x224>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d910      	bls.n	8004988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b80      	ldr	r3, [pc, #512]	@ (8004b68 <HAL_RCC_ClockConfig+0x224>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 020f 	bic.w	r2, r3, #15
 800496e:	497e      	ldr	r1, [pc, #504]	@ (8004b68 <HAL_RCC_ClockConfig+0x224>)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b7c      	ldr	r3, [pc, #496]	@ (8004b68 <HAL_RCC_ClockConfig+0x224>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e186      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d012      	beq.n	80049ba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	4b74      	ldr	r3, [pc, #464]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d909      	bls.n	80049ba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80049a6:	4b71      	ldr	r3, [pc, #452]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	496d      	ldr	r1, [pc, #436]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d012      	beq.n	80049ec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	4b68      	ldr	r3, [pc, #416]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d909      	bls.n	80049ec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80049d8:	4b64      	ldr	r3, [pc, #400]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	4961      	ldr	r1, [pc, #388]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	4b5b      	ldr	r3, [pc, #364]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d908      	bls.n	8004a1a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004a08:	4b58      	ldr	r3, [pc, #352]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4955      	ldr	r1, [pc, #340]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	4b50      	ldr	r3, [pc, #320]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d908      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004a36:	4b4d      	ldr	r3, [pc, #308]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 020f 	bic.w	r2, r3, #15
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	494a      	ldr	r1, [pc, #296]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8093 	beq.w	8004b7c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a5e:	4b43      	ldr	r3, [pc, #268]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d121      	bne.n	8004aae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e113      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a76:	4b3d      	ldr	r3, [pc, #244]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d115      	bne.n	8004aae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e107      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004a8e:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0fb      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a9e:	4b33      	ldr	r3, [pc, #204]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0f3      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004aae:	4b2f      	ldr	r3, [pc, #188]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	492c      	ldr	r1, [pc, #176]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac0:	f7fd f8ce 	bl	8001c60 <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d112      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fd f8c6 	bl	8001c60 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0d7      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ae6:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 0318 	and.w	r3, r3, #24
 8004aee:	2b18      	cmp	r3, #24
 8004af0:	d1ee      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x18c>
 8004af2:	e043      	b.n	8004b7c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d112      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004afe:	f7fd f8af 	bl	8001c60 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0c0      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b14:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 0318 	and.w	r3, r3, #24
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d1ee      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1ba>
 8004b20:	e02c      	b.n	8004b7c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d122      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fd f898 	bl	8001c60 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e0a9      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b42:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <HAL_RCC_ClockConfig+0x228>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 0318 	and.w	r3, r3, #24
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d1ee      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1e8>
 8004b4e:	e015      	b.n	8004b7c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b50:	f7fd f886 	bl	8001c60 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d906      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e097      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
 8004b66:	bf00      	nop
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 0318 	and.w	r3, r3, #24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e9      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b44      	ldr	r3, [pc, #272]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d208      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004b98:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f023 020f 	bic.w	r2, r3, #15
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	493e      	ldr	r1, [pc, #248]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004baa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <HAL_RCC_ClockConfig+0x360>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d210      	bcs.n	8004bda <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca4 <HAL_RCC_ClockConfig+0x360>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 020f 	bic.w	r2, r3, #15
 8004bc0:	4938      	ldr	r1, [pc, #224]	@ (8004ca4 <HAL_RCC_ClockConfig+0x360>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc8:	4b36      	ldr	r3, [pc, #216]	@ (8004ca4 <HAL_RCC_ClockConfig+0x360>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e05d      	b.n	8004c96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d208      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	4927      	ldr	r1, [pc, #156]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d012      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d209      	bcs.n	8004c3a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004c26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	491a      	ldr	r1, [pc, #104]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d209      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004c58:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	490e      	ldr	r1, [pc, #56]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c6c:	f000 f822 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <HAL_RCC_ClockConfig+0x35c>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	490b      	ldr	r1, [pc, #44]	@ (8004ca8 <HAL_RCC_ClockConfig+0x364>)
 8004c7c:	5ccb      	ldrb	r3, [r1, r3]
 8004c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c82:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <HAL_RCC_ClockConfig+0x368>)
 8004c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <HAL_RCC_ClockConfig+0x36c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc ff5e 	bl	8001b4c <HAL_InitTick>
 8004c90:	4603      	mov	r3, r0
 8004c92:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004c94:	7afb      	ldrb	r3, [r7, #11]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	44020c00 	.word	0x44020c00
 8004ca4:	40022000 	.word	0x40022000
 8004ca8:	0800faa8 	.word	0x0800faa8
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	20000020 	.word	0x20000020

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	@ 0x24
 8004cb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004cba:	4b8c      	ldr	r3, [pc, #560]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 0318 	and.w	r3, r3, #24
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d102      	bne.n	8004ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004cc6:	4b8a      	ldr	r3, [pc, #552]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e107      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ccc:	4b87      	ldr	r3, [pc, #540]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0318 	and.w	r3, r3, #24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d112      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004cd8:	4b84      	ldr	r3, [pc, #528]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ce4:	4b81      	ldr	r3, [pc, #516]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	08db      	lsrs	r3, r3, #3
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	4a81      	ldr	r2, [pc, #516]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e0f1      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004cf8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e0ee      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0318 	and.w	r3, r3, #24
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d102      	bne.n	8004d10 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x244>)
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e0e5      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d10:	4b76      	ldr	r3, [pc, #472]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f003 0318 	and.w	r3, r3, #24
 8004d18:	2b18      	cmp	r3, #24
 8004d1a:	f040 80dd 	bne.w	8004ed8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d1e:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004d28:	4b70      	ldr	r3, [pc, #448]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004d34:	4b6d      	ldr	r3, [pc, #436]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004d40:	4b6a      	ldr	r3, [pc, #424]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d58:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80b7 	beq.w	8004ed2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d003      	beq.n	8004d72 <HAL_RCC_GetSysClockFreq+0xbe>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d056      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x16a>
 8004d70:	e077      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d72:	4b5e      	ldr	r3, [pc, #376]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02d      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	4a5a      	ldr	r2, [pc, #360]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da8:	4b50      	ldr	r3, [pc, #320]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dbc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004efc <HAL_RCC_GetSysClockFreq+0x248>
 8004dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004dd8:	e065      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004f00 <HAL_RCC_GetSysClockFreq+0x24c>
 8004de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dec:	4b3f      	ldr	r3, [pc, #252]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e00:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004efc <HAL_RCC_GetSysClockFreq+0x248>
 8004e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e18:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004e1c:	e043      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e28:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004f04 <HAL_RCC_GetSysClockFreq+0x250>
 8004e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e30:	4b2e      	ldr	r3, [pc, #184]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e44:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004efc <HAL_RCC_GetSysClockFreq+0x248>
 8004e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004e60:	e021      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f08 <HAL_RCC_GetSysClockFreq+0x254>
 8004e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e74:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e88:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004efc <HAL_RCC_GetSysClockFreq+0x248>
 8004e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ea4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004ea6:	4b11      	ldr	r3, [pc, #68]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x238>)
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ebe:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eca:	ee17 3a90 	vmov	r3, s15
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e004      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e001      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x240>)
 8004eda:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3724      	adds	r7, #36	@ 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	44020c00 	.word	0x44020c00
 8004ef0:	003d0900 	.word	0x003d0900
 8004ef4:	03d09000 	.word	0x03d09000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	46000000 	.word	0x46000000
 8004f00:	4c742400 	.word	0x4c742400
 8004f04:	4af42400 	.word	0x4af42400
 8004f08:	4a742400 	.word	0x4a742400

08004f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f10:	f7ff fed0 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b08      	ldr	r3, [pc, #32]	@ (8004f38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f1a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f1e:	4907      	ldr	r1, [pc, #28]	@ (8004f3c <HAL_RCC_GetHCLKFreq+0x30>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f22:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <HAL_RCC_GetHCLKFreq+0x34>)
 8004f2c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004f2e:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <HAL_RCC_GetHCLKFreq+0x34>)
 8004f30:	681b      	ldr	r3, [r3, #0]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	44020c00 	.word	0x44020c00
 8004f3c:	0800faa8 	.word	0x0800faa8
 8004f40:	20000000 	.word	0x20000000

08004f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004f48:	f7ff ffe0 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4904      	ldr	r1, [pc, #16]	@ (8004f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	44020c00 	.word	0x44020c00
 8004f6c:	0800fab8 	.word	0x0800fab8

08004f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004f74:	f7ff ffca 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4904      	ldr	r1, [pc, #16]	@ (8004f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	44020c00 	.word	0x44020c00
 8004f98:	0800fab8 	.word	0x0800fab8

08004f9c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004fa0:	f7ff ffb4 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	0b1b      	lsrs	r3, r3, #12
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4904      	ldr	r1, [pc, #16]	@ (8004fc4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	44020c00 	.word	0x44020c00
 8004fc4:	0800fab8 	.word	0x0800fab8

08004fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b0d8      	sub	sp, #352	@ 0x160
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004fec:	2500      	movs	r5, #0
 8004fee:	ea54 0305 	orrs.w	r3, r4, r5
 8004ff2:	d00b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004ff4:	4bcd      	ldr	r3, [pc, #820]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ffa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005004:	4ac9      	ldr	r2, [pc, #804]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005006:	430b      	orrs	r3, r1
 8005008:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800500c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f002 0801 	and.w	r8, r2, #1
 8005018:	f04f 0900 	mov.w	r9, #0
 800501c:	ea58 0309 	orrs.w	r3, r8, r9
 8005020:	d042      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	2b05      	cmp	r3, #5
 800502a:	d823      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800502c:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	0800507d 	.word	0x0800507d
 8005038:	0800504d 	.word	0x0800504d
 800503c:	08005061 	.word	0x08005061
 8005040:	0800507d 	.word	0x0800507d
 8005044:	0800507d 	.word	0x0800507d
 8005048:	0800507d 	.word	0x0800507d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800504c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005050:	3308      	adds	r3, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f004 fee0 	bl	8009e18 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800505e:	e00e      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005060:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005064:	3330      	adds	r3, #48	@ 0x30
 8005066:	4618      	mov	r0, r3
 8005068:	f004 ff6e 	bl	8009f48 <RCCEx_PLL3_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800507c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005086:	4ba9      	ldr	r3, [pc, #676]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800508c:	f023 0107 	bic.w	r1, r3, #7
 8005090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005096:	4aa5      	ldr	r2, [pc, #660]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005098:	430b      	orrs	r3, r1
 800509a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f002 0a02 	and.w	sl, r2, #2
 80050b4:	f04f 0b00 	mov.w	fp, #0
 80050b8:	ea5a 030b 	orrs.w	r3, sl, fp
 80050bc:	f000 8088 	beq.w	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80050c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c6:	2b28      	cmp	r3, #40	@ 0x28
 80050c8:	d868      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80050ca:	a201      	add	r2, pc, #4	@ (adr r2, 80050d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080051a5 	.word	0x080051a5
 80050d4:	0800519d 	.word	0x0800519d
 80050d8:	0800519d 	.word	0x0800519d
 80050dc:	0800519d 	.word	0x0800519d
 80050e0:	0800519d 	.word	0x0800519d
 80050e4:	0800519d 	.word	0x0800519d
 80050e8:	0800519d 	.word	0x0800519d
 80050ec:	0800519d 	.word	0x0800519d
 80050f0:	08005175 	.word	0x08005175
 80050f4:	0800519d 	.word	0x0800519d
 80050f8:	0800519d 	.word	0x0800519d
 80050fc:	0800519d 	.word	0x0800519d
 8005100:	0800519d 	.word	0x0800519d
 8005104:	0800519d 	.word	0x0800519d
 8005108:	0800519d 	.word	0x0800519d
 800510c:	0800519d 	.word	0x0800519d
 8005110:	08005189 	.word	0x08005189
 8005114:	0800519d 	.word	0x0800519d
 8005118:	0800519d 	.word	0x0800519d
 800511c:	0800519d 	.word	0x0800519d
 8005120:	0800519d 	.word	0x0800519d
 8005124:	0800519d 	.word	0x0800519d
 8005128:	0800519d 	.word	0x0800519d
 800512c:	0800519d 	.word	0x0800519d
 8005130:	080051a5 	.word	0x080051a5
 8005134:	0800519d 	.word	0x0800519d
 8005138:	0800519d 	.word	0x0800519d
 800513c:	0800519d 	.word	0x0800519d
 8005140:	0800519d 	.word	0x0800519d
 8005144:	0800519d 	.word	0x0800519d
 8005148:	0800519d 	.word	0x0800519d
 800514c:	0800519d 	.word	0x0800519d
 8005150:	080051a5 	.word	0x080051a5
 8005154:	0800519d 	.word	0x0800519d
 8005158:	0800519d 	.word	0x0800519d
 800515c:	0800519d 	.word	0x0800519d
 8005160:	0800519d 	.word	0x0800519d
 8005164:	0800519d 	.word	0x0800519d
 8005168:	0800519d 	.word	0x0800519d
 800516c:	0800519d 	.word	0x0800519d
 8005170:	080051a5 	.word	0x080051a5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005178:	3308      	adds	r3, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f004 fe4c 	bl	8009e18 <RCCEx_PLL2_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005186:	e00e      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800518c:	3330      	adds	r3, #48	@ 0x30
 800518e:	4618      	mov	r0, r3
 8005190:	f004 feda 	bl	8009f48 <RCCEx_PLL3_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800519a:	e004      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80051a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80051ae:	4b5f      	ldr	r3, [pc, #380]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051b4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051be:	4a5b      	ldr	r2, [pc, #364]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 0304 	and.w	r3, r2, #4
 80051dc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80051e6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d04e      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80051f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051fa:	d02c      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80051fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005200:	d825      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005206:	d028      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800520c:	d81f      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800520e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005210:	d025      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005212:	2bc0      	cmp	r3, #192	@ 0xc0
 8005214:	d81b      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005216:	2b80      	cmp	r3, #128	@ 0x80
 8005218:	d00f      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800521a:	2b80      	cmp	r3, #128	@ 0x80
 800521c:	d817      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01f      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d113      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522a:	3308      	adds	r3, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f004 fdf3 	bl	8009e18 <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005238:	e014      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800523a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800523e:	3330      	adds	r3, #48	@ 0x30
 8005240:	4618      	mov	r0, r3
 8005242:	f004 fe81 	bl	8009f48 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800524c:	e00a      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005256:	bf00      	nop
 8005258:	e004      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800525a:	bf00      	nop
 800525c:	e002      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10c      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800526c:	4b2f      	ldr	r3, [pc, #188]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800526e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005272:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800527a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800527c:	4a2b      	ldr	r2, [pc, #172]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800527e:	430b      	orrs	r3, r1
 8005280:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800528a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800528e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f002 0308 	and.w	r3, r2, #8
 800529a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80052a4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d056      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80052ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80052b8:	d031      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80052ba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80052be:	d82a      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c4:	d02d      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ca:	d824      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052d0:	d029      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80052d2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052d6:	d81e      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052dc:	d011      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e2:	d818      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ec:	d113      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052f2:	3308      	adds	r3, #8
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 fd8f 	bl	8009e18 <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005300:	e017      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005302:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005306:	3330      	adds	r3, #48	@ 0x30
 8005308:	4618      	mov	r0, r3
 800530a:	f004 fe1d 	bl	8009f48 <RCCEx_PLL3_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005314:	e00d      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800531c:	e009      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800531e:	bf00      	nop
 8005320:	e007      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005322:	bf00      	nop
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005326:	bf00      	nop
 8005328:	e003      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800532a:	bf00      	nop
 800532c:	44020c00 	.word	0x44020c00
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800533a:	4bbb      	ldr	r3, [pc, #748]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800533c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005340:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800534a:	4ab7      	ldr	r2, [pc, #732]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800534c:	430b      	orrs	r3, r1
 800534e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005352:	e003      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800535c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f002 0310 	and.w	r3, r2, #16
 8005368:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005372:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d053      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800537c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005382:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005386:	d031      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005388:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800538c:	d82a      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800538e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005392:	d02d      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005398:	d824      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800539a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800539e:	d029      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80053a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053a4:	d81e      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053aa:	d011      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b0:	d818      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d020      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	d113      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c0:	3308      	adds	r3, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f004 fd28 	bl	8009e18 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80053ce:	e014      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053d4:	3330      	adds	r3, #48	@ 0x30
 80053d6:	4618      	mov	r0, r3
 80053d8:	f004 fdb6 	bl	8009f48 <RCCEx_PLL3_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80053e2:	e00a      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053ea:	e006      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053ec:	bf00      	nop
 80053ee:	e004      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053f0:	bf00      	nop
 80053f2:	e002      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005402:	4b89      	ldr	r3, [pc, #548]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005408:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800540c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005412:	4a85      	ldr	r2, [pc, #532]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005414:	430b      	orrs	r3, r1
 8005416:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005420:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 0320 	and.w	r3, r2, #32
 8005430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800543a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	d053      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800544e:	d031      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005450:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005454:	d82a      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800545a:	d02d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800545c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005460:	d824      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005462:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005466:	d029      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005468:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800546c:	d81e      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800546e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005472:	d011      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005478:	d818      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d020      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005482:	d113      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005488:	3308      	adds	r3, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f004 fcc4 	bl	8009e18 <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005496:	e014      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549c:	3330      	adds	r3, #48	@ 0x30
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 fd52 	bl	8009f48 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80054aa:	e00a      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80054ca:	4b57      	ldr	r3, [pc, #348]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054d0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80054d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054da:	4a53      	ldr	r2, [pc, #332]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005502:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d053      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800550c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005512:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005516:	d031      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005518:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800551c:	d82a      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005522:	d02d      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005528:	d824      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800552a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800552e:	d029      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005530:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005534:	d81e      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005536:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800553a:	d011      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800553c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005540:	d818      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d020      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005546:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800554a:	d113      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800554c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005550:	3308      	adds	r3, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fc60 	bl	8009e18 <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800555e:	e014      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005564:	3330      	adds	r3, #48	@ 0x30
 8005566:	4618      	mov	r0, r3
 8005568:	f004 fcee 	bl	8009f48 <RCCEx_PLL3_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005572:	e00a      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800557a:	e006      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800557c:	bf00      	nop
 800557e:	e004      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005580:	bf00      	nop
 8005582:	e002      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005592:	4b25      	ldr	r3, [pc, #148]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005598:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800559c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	4a21      	ldr	r2, [pc, #132]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80055aa:	e003      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80055ca:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d055      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80055d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80055de:	d033      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80055e0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80055e4:	d82c      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055ea:	d02f      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80055ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055f0:	d826      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80055f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055f6:	d02b      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80055f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055fc:	d820      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80055fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005602:	d013      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005608:	d81a      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d022      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800560e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005612:	d115      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005618:	3308      	adds	r3, #8
 800561a:	4618      	mov	r0, r3
 800561c:	f004 fbfc 	bl	8009e18 <RCCEx_PLL2_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005626:	e016      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005628:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800562c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005630:	3330      	adds	r3, #48	@ 0x30
 8005632:	4618      	mov	r0, r3
 8005634:	f004 fc88 	bl	8009f48 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800563e:	e00a      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005646:	e006      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005648:	bf00      	nop
 800564a:	e004      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800564c:	bf00      	nop
 800564e:	e002      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005650:	bf00      	nop
 8005652:	e000      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800565e:	4bbb      	ldr	r3, [pc, #748]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005664:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800566c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800566e:	4ab7      	ldr	r2, [pc, #732]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005670:	430b      	orrs	r3, r1
 8005672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005676:	e003      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800567c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800568c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005690:	2300      	movs	r3, #0
 8005692:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005696:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800569a:	460b      	mov	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	d053      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80056a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80056aa:	d031      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80056ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80056b0:	d82a      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80056b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056b6:	d02d      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80056b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056bc:	d824      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80056be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056c2:	d029      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80056c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056c8:	d81e      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80056ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056ce:	d011      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80056d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056d4:	d818      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d020      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80056da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056de:	d113      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e4:	3308      	adds	r3, #8
 80056e6:	4618      	mov	r0, r3
 80056e8:	f004 fb96 	bl	8009e18 <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80056f2:	e014      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056f8:	3330      	adds	r3, #48	@ 0x30
 80056fa:	4618      	mov	r0, r3
 80056fc:	f004 fc24 	bl	8009f48 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005706:	e00a      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800570e:	e006      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005710:	bf00      	nop
 8005712:	e004      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005714:	bf00      	nop
 8005716:	e002      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800571c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10c      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005726:	4b89      	ldr	r3, [pc, #548]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800572c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005736:	4a85      	ldr	r2, [pc, #532]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005738:	430b      	orrs	r3, r1
 800573a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800573e:	e003      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005744:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005754:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800575e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d055      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005770:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005774:	d031      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005776:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800577a:	d82a      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800577c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005780:	d02d      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005786:	d824      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005788:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800578c:	d029      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800578e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005792:	d81e      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005798:	d011      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800579a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800579e:	d818      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d020      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80057a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a8:	d113      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ae:	3308      	adds	r3, #8
 80057b0:	4618      	mov	r0, r3
 80057b2:	f004 fb31 	bl	8009e18 <RCCEx_PLL2_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80057bc:	e014      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c2:	3330      	adds	r3, #48	@ 0x30
 80057c4:	4618      	mov	r0, r3
 80057c6:	f004 fbbf 	bl	8009f48 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80057d0:	e00a      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80057da:	bf00      	nop
 80057dc:	e004      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80057de:	bf00      	nop
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80057e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80057f0:	4b56      	ldr	r3, [pc, #344]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057f6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80057fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005802:	4a52      	ldr	r2, [pc, #328]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005804:	430b      	orrs	r3, r1
 8005806:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800580a:	e003      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005810:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005820:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005824:	2300      	movs	r3, #0
 8005826:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800582a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d044      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	2b05      	cmp	r3, #5
 800583e:	d823      	bhi.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005840:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005891 	.word	0x08005891
 800584c:	08005861 	.word	0x08005861
 8005850:	08005875 	.word	0x08005875
 8005854:	08005891 	.word	0x08005891
 8005858:	08005891 	.word	0x08005891
 800585c:	08005891 	.word	0x08005891
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005864:	3308      	adds	r3, #8
 8005866:	4618      	mov	r0, r3
 8005868:	f004 fad6 	bl	8009e18 <RCCEx_PLL2_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005872:	e00e      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005878:	3330      	adds	r3, #48	@ 0x30
 800587a:	4618      	mov	r0, r3
 800587c:	f004 fb64 	bl	8009f48 <RCCEx_PLL3_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005886:	e004      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800589a:	4b2c      	ldr	r3, [pc, #176]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800589c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058a0:	f023 0107 	bic.w	r1, r3, #7
 80058a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ac:	4a27      	ldr	r2, [pc, #156]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80058b4:	e003      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80058be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058ce:	2300      	movs	r3, #0
 80058d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058d4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d04f      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80058de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e6:	2b50      	cmp	r3, #80	@ 0x50
 80058e8:	d029      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80058ea:	2b50      	cmp	r3, #80	@ 0x50
 80058ec:	d823      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058ee:	2b40      	cmp	r3, #64	@ 0x40
 80058f0:	d027      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d81f      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058f6:	2b30      	cmp	r3, #48	@ 0x30
 80058f8:	d025      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80058fa:	2b30      	cmp	r3, #48	@ 0x30
 80058fc:	d81b      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d00f      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005902:	2b20      	cmp	r3, #32
 8005904:	d817      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d022      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800590a:	2b10      	cmp	r3, #16
 800590c:	d113      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800590e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005912:	3308      	adds	r3, #8
 8005914:	4618      	mov	r0, r3
 8005916:	f004 fa7f 	bl	8009e18 <RCCEx_PLL2_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005920:	e017      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005926:	3330      	adds	r3, #48	@ 0x30
 8005928:	4618      	mov	r0, r3
 800592a:	f004 fb0d 	bl	8009f48 <RCCEx_PLL3_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005934:	e00d      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800593c:	e009      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800593e:	bf00      	nop
 8005940:	e007      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005942:	bf00      	nop
 8005944:	e005      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005946:	bf00      	nop
 8005948:	e003      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800594a:	bf00      	nop
 800594c:	44020c00 	.word	0x44020c00
        break;
 8005950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005952:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800595a:	4baf      	ldr	r3, [pc, #700]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800595c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005960:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	4aaa      	ldr	r2, [pc, #680]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800596e:	430b      	orrs	r3, r1
 8005970:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005974:	e003      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800597a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800597e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800598a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005994:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d055      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800599e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80059aa:	d031      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80059ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80059b0:	d82a      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80059b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059b6:	d02d      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80059b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059bc:	d824      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80059be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059c2:	d029      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80059c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059c8:	d81e      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80059ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ce:	d011      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80059d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059d4:	d818      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80059da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059de:	d113      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e4:	3308      	adds	r3, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f004 fa16 	bl	8009e18 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80059f2:	e014      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f8:	3330      	adds	r3, #48	@ 0x30
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 faa4 	bl	8009f48 <RCCEx_PLL3_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005a06:	e00a      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a0e:	e006      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a10:	bf00      	nop
 8005a12:	e004      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a14:	bf00      	nop
 8005a16:	e002      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10d      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005a26:	4b7c      	ldr	r3, [pc, #496]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a2c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a38:	4a77      	ldr	r2, [pc, #476]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a40:	e003      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005a64:	460b      	mov	r3, r1
 8005a66:	4313      	orrs	r3, r2
 8005a68:	d03d      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a76:	d01b      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a7c:	d814      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a82:	d017      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a88:	d80e      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d014      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a92:	d109      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a98:	3330      	adds	r3, #48	@ 0x30
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 fa54 	bl	8009f48 <RCCEx_PLL3_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005aa6:	e008      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005aae:	e004      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ac2:	4b55      	ldr	r3, [pc, #340]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ac8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	4a50      	ldr	r2, [pc, #320]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ae2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005af2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005afc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d03d      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b0e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b12:	d01b      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005b14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b18:	d814      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005b1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b1e:	d017      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005b20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b24:	d80e      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d014      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005b2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b34:	3330      	adds	r3, #48	@ 0x30
 8005b36:	4618      	mov	r0, r3
 8005b38:	f004 fa06 	bl	8009f48 <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005b42:	e008      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b4a:	e004      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005b4c:	bf00      	nop
 8005b4e:	e002      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005b50:	bf00      	nop
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10d      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b64:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b70:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d040      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bae:	d01b      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bb4:	d814      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bba:	d017      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bc0:	d80e      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bca:	d109      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd0:	3330      	adds	r3, #48	@ 0x30
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f004 f9b8 	bl	8009f48 <RCCEx_PLL3_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005bde:	e008      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005be8:	bf00      	nop
 8005bea:	e002      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d110      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005bfa:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c00:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c0c:	4a02      	ldr	r2, [pc, #8]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c14:	e006      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005c16:	bf00      	nop
 8005c18:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d03d      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c50:	d01b      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005c52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c56:	d814      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c5c:	d017      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c62:	d80e      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d014      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c6c:	d109      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c72:	3330      	adds	r3, #48	@ 0x30
 8005c74:	4618      	mov	r0, r3
 8005c76:	f004 f967 	bl	8009f48 <RCCEx_PLL3_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005c80:	e008      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c88:	e004      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005c9c:	4bbe      	ldr	r3, [pc, #760]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ca2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cae:	4aba      	ldr	r2, [pc, #744]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d035      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cec:	d015      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf2:	d80e      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cfc:	d109      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d02:	3330      	adds	r3, #48	@ 0x30
 8005d04:	4618      	mov	r0, r3
 8005d06:	f004 f91f 	bl	8009f48 <RCCEx_PLL3_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005d10:	e006      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d18:	e002      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005d28:	4b9b      	ldr	r3, [pc, #620]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d2e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d3a:	4a97      	ldr	r2, [pc, #604]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	2100      	movs	r1, #0
 8005d56:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	4a89      	ldr	r2, [pc, #548]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d76:	61d3      	str	r3, [r2, #28]
 8005d78:	4b87      	ldr	r3, [pc, #540]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d7a:	69d9      	ldr	r1, [r3, #28]
 8005d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d80:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005d84:	4a84      	ldr	r2, [pc, #528]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d86:	430b      	orrs	r3, r1
 8005d88:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005da0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d055      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005db2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005db6:	d031      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005db8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005dbc:	d82a      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc2:	d02d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc8:	d824      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dce:	d029      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005dd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd4:	d81e      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dda:	d011      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de0:	d818      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d020      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dea:	d113      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df0:	3308      	adds	r3, #8
 8005df2:	4618      	mov	r0, r3
 8005df4:	f004 f810 	bl	8009e18 <RCCEx_PLL2_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005dfe:	e014      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e04:	3330      	adds	r3, #48	@ 0x30
 8005e06:	4618      	mov	r0, r3
 8005e08:	f004 f89e 	bl	8009f48 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005e12:	e00a      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e1a:	e006      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e1c:	bf00      	nop
 8005e1e:	e004      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e20:	bf00      	nop
 8005e22:	e002      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e24:	bf00      	nop
 8005e26:	e000      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10d      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005e32:	4b59      	ldr	r3, [pc, #356]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e38:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e44:	4a54      	ldr	r2, [pc, #336]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e4c:	e003      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e6c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d055      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e82:	d031      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005e84:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e88:	d82a      	bhi.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e8e:	d02d      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e94:	d824      	bhi.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e9a:	d029      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005e9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea0:	d81e      	bhi.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea6:	d011      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eac:	d818      	bhi.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb6:	d113      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f003 ffaa 	bl	8009e18 <RCCEx_PLL2_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005eca:	e014      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ed0:	3330      	adds	r3, #48	@ 0x30
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f004 f838 	bl	8009f48 <RCCEx_PLL3_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ee6:	e006      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005ee8:	bf00      	nop
 8005eea:	e004      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005eec:	bf00      	nop
 8005eee:	e002      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005efe:	4b26      	ldr	r3, [pc, #152]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f10:	4a21      	ldr	r2, [pc, #132]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f12:	430b      	orrs	r3, r1
 8005f14:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005f18:	e003      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d057      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f4e:	d033      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f54:	d82c      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f5a:	d02f      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f60:	d826      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f66:	d02b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f6c:	d820      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f72:	d013      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f78:	d81a      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d022      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f82:	d115      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f88:	3308      	adds	r3, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f003 ff44 	bl	8009e18 <RCCEx_PLL2_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005f96:	e016      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005f98:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fa0:	3330      	adds	r3, #48	@ 0x30
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f003 ffd0 	bl	8009f48 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10d      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005fce:	4bbb      	ldr	r3, [pc, #748]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005fd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fe0:	4ab6      	ldr	r2, [pc, #728]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005fe8:	e003      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006008:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800600c:	460b      	mov	r3, r1
 800600e:	4313      	orrs	r3, r2
 8006010:	d055      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006012:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800601a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800601e:	d031      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006020:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006024:	d82a      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800602a:	d02d      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800602c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006030:	d824      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006036:	d029      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800603c:	d81e      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800603e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006042:	d011      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006048:	d818      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d020      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006052:	d113      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006058:	3308      	adds	r3, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f003 fedc 	bl	8009e18 <RCCEx_PLL2_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006066:	e014      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800606c:	3330      	adds	r3, #48	@ 0x30
 800606e:	4618      	mov	r0, r3
 8006070:	f003 ff6a 	bl	8009f48 <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800607a:	e00a      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006082:	e006      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006084:	bf00      	nop
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006092:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10d      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800609a:	4b88      	ldr	r3, [pc, #544]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800609c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060a0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80060a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060ac:	4a83      	ldr	r2, [pc, #524]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80060ae:	430b      	orrs	r3, r1
 80060b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80060be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	2100      	movs	r1, #0
 80060c8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80060cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d055      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80060de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060ea:	d031      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80060ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060f0:	d82a      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80060f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060f6:	d02d      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80060f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060fc:	d824      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80060fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006102:	d029      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006104:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006108:	d81e      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800610a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800610e:	d011      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006114:	d818      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d020      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800611a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800611e:	d113      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006124:	3308      	adds	r3, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f003 fe76 	bl	8009e18 <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006132:	e014      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006138:	3330      	adds	r3, #48	@ 0x30
 800613a:	4618      	mov	r0, r3
 800613c:	f003 ff04 	bl	8009f48 <RCCEx_PLL3_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006146:	e00a      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006150:	bf00      	nop
 8006152:	e004      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006154:	bf00      	nop
 8006156:	e002      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800615c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006166:	4b55      	ldr	r3, [pc, #340]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006168:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800616c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006178:	4a50      	ldr	r2, [pc, #320]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800617a:	430b      	orrs	r3, r1
 800617c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006186:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800618a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	2100      	movs	r1, #0
 8006194:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061a0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d055      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80061aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061b6:	d031      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80061b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061bc:	d82a      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c2:	d02d      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c8:	d824      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80061ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061ce:	d029      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80061d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061d4:	d81e      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80061d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061da:	d011      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80061dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e0:	d818      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d020      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80061e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ea:	d113      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f0:	3308      	adds	r3, #8
 80061f2:	4618      	mov	r0, r3
 80061f4:	f003 fe10 	bl	8009e18 <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80061fe:	e014      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006204:	3330      	adds	r3, #48	@ 0x30
 8006206:	4618      	mov	r0, r3
 8006208:	f003 fe9e 	bl	8009f48 <RCCEx_PLL3_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006212:	e00a      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800621a:	e006      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800621c:	bf00      	nop
 800621e:	e004      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10d      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006232:	4b22      	ldr	r3, [pc, #136]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006234:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006238:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800623c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006240:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006244:	4a1d      	ldr	r2, [pc, #116]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006246:	430b      	orrs	r3, r1
 8006248:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800624c:	e003      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006252:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006266:	2300      	movs	r3, #0
 8006268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800626c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006270:	460b      	mov	r3, r1
 8006272:	4313      	orrs	r3, r2
 8006274:	d055      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800627e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006282:	d035      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006284:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006288:	d82e      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800628a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800628e:	d031      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006294:	d828      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629a:	d01b      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800629c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a0:	d822      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80062a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062aa:	d009      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80062ac:	e01c      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ae:	4b03      	ldr	r3, [pc, #12]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	4a02      	ldr	r2, [pc, #8]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062ba:	e01c      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80062bc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c4:	3308      	adds	r3, #8
 80062c6:	4618      	mov	r0, r3
 80062c8:	f003 fda6 	bl	8009e18 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062d2:	e010      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d8:	3330      	adds	r3, #48	@ 0x30
 80062da:	4618      	mov	r0, r3
 80062dc:	f003 fe34 	bl	8009f48 <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062e6:	e006      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062ee:	e002      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80062f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10d      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80062fe:	4bc3      	ldr	r3, [pc, #780]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006304:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800630c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006310:	4abe      	ldr	r2, [pc, #760]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006312:	430b      	orrs	r3, r1
 8006314:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006318:	e003      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800631e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800632e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006338:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	d051      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006346:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800634a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800634e:	d033      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006354:	d82c      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006356:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800635a:	d02d      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800635c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006360:	d826      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006366:	d019      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006368:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636c:	d820      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006372:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006376:	d007      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006378:	e01a      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800637a:	4ba4      	ldr	r3, [pc, #656]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800637c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637e:	4aa3      	ldr	r2, [pc, #652]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006384:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006386:	e018      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006388:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800638c:	3308      	adds	r3, #8
 800638e:	4618      	mov	r0, r3
 8006390:	f003 fd42 	bl	8009e18 <RCCEx_PLL2_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800639a:	e00e      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800639c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a0:	3330      	adds	r3, #48	@ 0x30
 80063a2:	4618      	mov	r0, r3
 80063a4:	f003 fdd0 	bl	8009f48 <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063b6:	e000      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80063c2:	4b92      	ldr	r3, [pc, #584]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063c8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80063cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80063d4:	4a8d      	ldr	r2, [pc, #564]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80063e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80063f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063f4:	2300      	movs	r3, #0
 80063f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d032      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800640a:	2b05      	cmp	r3, #5
 800640c:	d80f      	bhi.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800640e:	2b03      	cmp	r3, #3
 8006410:	d211      	bcs.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006412:	2b01      	cmp	r3, #1
 8006414:	d911      	bls.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006416:	2b02      	cmp	r3, #2
 8006418:	d109      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800641a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641e:	3308      	adds	r3, #8
 8006420:	4618      	mov	r0, r3
 8006422:	f003 fcf9 	bl	8009e18 <RCCEx_PLL2_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800642c:	e006      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006434:	e002      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800643a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10d      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006444:	4b71      	ldr	r3, [pc, #452]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800644a:	f023 0107 	bic.w	r1, r3, #7
 800644e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006452:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006456:	4a6d      	ldr	r2, [pc, #436]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006458:	430b      	orrs	r3, r1
 800645a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800645e:	e003      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006464:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	2100      	movs	r1, #0
 8006472:	6739      	str	r1, [r7, #112]	@ 0x70
 8006474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006478:	677b      	str	r3, [r7, #116]	@ 0x74
 800647a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800647e:	460b      	mov	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	d024      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006490:	2b08      	cmp	r3, #8
 8006492:	d005      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800649a:	e002      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80064a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10d      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80064aa:	4b58      	ldr	r3, [pc, #352]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064b0:	f023 0108 	bic.w	r1, r3, #8
 80064b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064bc:	4a53      	ldr	r2, [pc, #332]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80064c4:	e003      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80064da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064dc:	2300      	movs	r3, #0
 80064de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064e4:	460b      	mov	r3, r1
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f000 80b9 	beq.w	800665e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80064ec:	4b48      	ldr	r3, [pc, #288]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	4a47      	ldr	r2, [pc, #284]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064f8:	f7fb fbb2 	bl	8001c60 <HAL_GetTick>
 80064fc:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006500:	e00b      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006502:	f7fb fbad 	bl	8001c60 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d903      	bls.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006518:	e005      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800651a:	4b3d      	ldr	r3, [pc, #244]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0ed      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006526:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 8093 	bne.w	8006656 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006530:	4b36      	ldr	r3, [pc, #216]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800653a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800653e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d023      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006546:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800654a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800654e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006552:	4293      	cmp	r3, r2
 8006554:	d01b      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006556:	4b2d      	ldr	r3, [pc, #180]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800655c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006560:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006564:	4b29      	ldr	r3, [pc, #164]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656a:	4a28      	ldr	r2, [pc, #160]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006574:	4b25      	ldr	r3, [pc, #148]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800657a:	4a24      	ldr	r2, [pc, #144]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800657c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006584:	4a21      	ldr	r2, [pc, #132]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006586:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800658a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800658e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d019      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fb fb61 	bl	8001c60 <HAL_GetTick>
 800659e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a2:	e00d      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a4:	f7fb fb5c 	bl	8001c60 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d903      	bls.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80065be:	e006      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c0:	4b12      	ldr	r3, [pc, #72]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ea      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80065ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d13a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80065d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80065de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e6:	d115      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80065e8:	4b08      	ldr	r3, [pc, #32]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80065fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006602:	4a02      	ldr	r2, [pc, #8]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006604:	430b      	orrs	r3, r1
 8006606:	61d3      	str	r3, [r2, #28]
 8006608:	e00a      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800660a:	bf00      	nop
 800660c:	44020c00 	.word	0x44020c00
 8006610:	44020800 	.word	0x44020800
 8006614:	4b9f      	ldr	r3, [pc, #636]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4a9e      	ldr	r2, [pc, #632]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800661a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800661e:	61d3      	str	r3, [r2, #28]
 8006620:	4b9c      	ldr	r3, [pc, #624]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006626:	4a9b      	ldr	r2, [pc, #620]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006630:	4b98      	ldr	r3, [pc, #608]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006632:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800663a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800663e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006642:	4a94      	ldr	r2, [pc, #592]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006644:	430b      	orrs	r3, r1
 8006646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800664a:	e008      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800664c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006650:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800665a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800665e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800666a:	663b      	str	r3, [r7, #96]	@ 0x60
 800666c:	2300      	movs	r3, #0
 800666e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006670:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d035      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800667a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006682:	2b30      	cmp	r3, #48	@ 0x30
 8006684:	d014      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006686:	2b30      	cmp	r3, #48	@ 0x30
 8006688:	d80e      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800668a:	2b20      	cmp	r3, #32
 800668c:	d012      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800668e:	2b20      	cmp	r3, #32
 8006690:	d80a      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006696:	2b10      	cmp	r3, #16
 8006698:	d106      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669a:	4b7e      	ldr	r3, [pc, #504]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	4a7d      	ldr	r2, [pc, #500]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80066a6:	e008      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066ae:	e004      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80066b0:	bf00      	nop
 80066b2:	e002      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80066b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80066c2:	4b74      	ldr	r3, [pc, #464]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80066cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80066d4:	4a6f      	ldr	r2, [pc, #444]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066d6:	430b      	orrs	r3, r1
 80066d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80066dc:	e003      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80066e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80066f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066f4:	2300      	movs	r3, #0
 80066f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d033      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006702:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006706:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800670e:	2b40      	cmp	r3, #64	@ 0x40
 8006710:	d007      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006712:	e010      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b5f      	ldr	r3, [pc, #380]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	4a5e      	ldr	r2, [pc, #376]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800671e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006720:	e00d      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006726:	3308      	adds	r3, #8
 8006728:	4618      	mov	r0, r3
 800672a:	f003 fb75 	bl	8009e18 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800673c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006746:	4b53      	ldr	r3, [pc, #332]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800674c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006754:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006758:	4a4e      	ldr	r2, [pc, #312]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800675a:	430b      	orrs	r3, r1
 800675c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006760:	e003      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006762:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006766:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800676a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006776:	653b      	str	r3, [r7, #80]	@ 0x50
 8006778:	2300      	movs	r3, #0
 800677a:	657b      	str	r3, [r7, #84]	@ 0x54
 800677c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d033      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800678a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006792:	2b80      	cmp	r3, #128	@ 0x80
 8006794:	d007      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006796:	e010      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006798:	4b3e      	ldr	r3, [pc, #248]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	4a3d      	ldr	r2, [pc, #244]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800679e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80067a4:	e00d      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067aa:	3308      	adds	r3, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f003 fb33 	bl	8009e18 <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80067b8:	e003      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80067ca:	4b32      	ldr	r3, [pc, #200]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067d0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80067d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80067dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80067e4:	e003      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80067ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80067fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067fc:	2300      	movs	r3, #0
 80067fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006800:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006804:	460b      	mov	r3, r1
 8006806:	4313      	orrs	r3, r2
 8006808:	d04a      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800680a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800680e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006812:	2b04      	cmp	r3, #4
 8006814:	d827      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006816:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006831 	.word	0x08006831
 8006820:	0800683f 	.word	0x0800683f
 8006824:	08006853 	.word	0x08006853
 8006828:	0800686f 	.word	0x0800686f
 800682c:	0800686f 	.word	0x0800686f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006830:	4b18      	ldr	r3, [pc, #96]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	4a17      	ldr	r2, [pc, #92]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800683c:	e018      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800683e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006842:	3308      	adds	r3, #8
 8006844:	4618      	mov	r0, r3
 8006846:	f003 fae7 	bl	8009e18 <RCCEx_PLL2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006850:	e00e      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006856:	3330      	adds	r3, #48	@ 0x30
 8006858:	4618      	mov	r0, r3
 800685a:	f003 fb75 	bl	8009f48 <RCCEx_PLL3_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006864:	e004      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800686c:	e000      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800686e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006870:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10f      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006878:	4b06      	ldr	r3, [pc, #24]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800687a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800687e:	f023 0107 	bic.w	r1, r3, #7
 8006882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800688a:	4a02      	ldr	r2, [pc, #8]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800688c:	430b      	orrs	r3, r1
 800688e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006892:	e005      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006894:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800689c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80068a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ae:	2300      	movs	r3, #0
 80068b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068b6:	460b      	mov	r3, r1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f000 8081 	beq.w	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80068be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d85f      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80068ca:	a201      	add	r2, pc, #4	@ (adr r2, 80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006955 	.word	0x08006955
 80068d4:	0800698b 	.word	0x0800698b
 80068d8:	0800698b 	.word	0x0800698b
 80068dc:	0800698b 	.word	0x0800698b
 80068e0:	0800698b 	.word	0x0800698b
 80068e4:	0800698b 	.word	0x0800698b
 80068e8:	0800698b 	.word	0x0800698b
 80068ec:	0800698b 	.word	0x0800698b
 80068f0:	08006963 	.word	0x08006963
 80068f4:	0800698b 	.word	0x0800698b
 80068f8:	0800698b 	.word	0x0800698b
 80068fc:	0800698b 	.word	0x0800698b
 8006900:	0800698b 	.word	0x0800698b
 8006904:	0800698b 	.word	0x0800698b
 8006908:	0800698b 	.word	0x0800698b
 800690c:	0800698b 	.word	0x0800698b
 8006910:	08006977 	.word	0x08006977
 8006914:	0800698b 	.word	0x0800698b
 8006918:	0800698b 	.word	0x0800698b
 800691c:	0800698b 	.word	0x0800698b
 8006920:	0800698b 	.word	0x0800698b
 8006924:	0800698b 	.word	0x0800698b
 8006928:	0800698b 	.word	0x0800698b
 800692c:	0800698b 	.word	0x0800698b
 8006930:	08006993 	.word	0x08006993
 8006934:	0800698b 	.word	0x0800698b
 8006938:	0800698b 	.word	0x0800698b
 800693c:	0800698b 	.word	0x0800698b
 8006940:	0800698b 	.word	0x0800698b
 8006944:	0800698b 	.word	0x0800698b
 8006948:	0800698b 	.word	0x0800698b
 800694c:	0800698b 	.word	0x0800698b
 8006950:	08006993 	.word	0x08006993
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006954:	4bab      	ldr	r3, [pc, #684]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006958:	4aaa      	ldr	r2, [pc, #680]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800695a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800695e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006960:	e018      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006966:	3308      	adds	r3, #8
 8006968:	4618      	mov	r0, r3
 800696a:	f003 fa55 	bl	8009e18 <RCCEx_PLL2_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006974:	e00e      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006976:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697a:	3330      	adds	r3, #48	@ 0x30
 800697c:	4618      	mov	r0, r3
 800697e:	f003 fae3 	bl	8009f48 <RCCEx_PLL3_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006988:	e004      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006990:	e000      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006994:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10d      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800699c:	4b99      	ldr	r3, [pc, #612]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800699e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80069a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ae:	4a95      	ldr	r2, [pc, #596]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069b6:	e003      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80069c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80069cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d04e      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80069dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e8:	d02e      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	d827      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80069f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80069f2:	d02b      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80069f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80069f6:	d823      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80069f8:	2b80      	cmp	r3, #128	@ 0x80
 80069fa:	d017      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80069fc:	2b80      	cmp	r3, #128	@ 0x80
 80069fe:	d81f      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	d007      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006a08:	e01a      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a14:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006a16:	e01a      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f003 f9fa 	bl	8009e18 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e010      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a30:	3330      	adds	r3, #48	@ 0x30
 8006a32:	4618      	mov	r0, r3
 8006a34:	f003 fa88 	bl	8009f48 <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006a3e:	e006      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a46:	e002      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006a48:	bf00      	nop
 8006a4a:	e000      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10d      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006a56:	4b6b      	ldr	r3, [pc, #428]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a68:	4a66      	ldr	r2, [pc, #408]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a88:	2300      	movs	r3, #0
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a90:	460b      	mov	r3, r1
 8006a92:	4313      	orrs	r3, r2
 8006a94:	d055      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006a9e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006aa2:	d031      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006aa4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006aa8:	d82a      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aae:	d02d      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab4:	d824      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006ab6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006aba:	d029      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006abc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ac0:	d81e      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac6:	d011      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006acc:	d818      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d020      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad6:	d113      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006adc:	3308      	adds	r3, #8
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f003 f99a 	bl	8009e18 <RCCEx_PLL2_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006aea:	e014      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006af0:	3330      	adds	r3, #48	@ 0x30
 8006af2:	4618      	mov	r0, r3
 8006af4:	f003 fa28 	bl	8009f48 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006afe:	e00a      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b06:	e006      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e004      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006b1e:	4b39      	ldr	r3, [pc, #228]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b24:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006b30:	4a34      	ldr	r2, [pc, #208]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b32:	430b      	orrs	r3, r1
 8006b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	d058      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b66:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b6a:	d031      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006b6c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b70:	d82a      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b76:	d02d      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b7c:	d824      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b82:	d029      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006b84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b88:	d81e      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b8e:	d011      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b94:	d818      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d020      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b9e:	d113      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f003 f936 	bl	8009e18 <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006bb2:	e014      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb8:	3330      	adds	r3, #48	@ 0x30
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 f9c4 	bl	8009f48 <RCCEx_PLL3_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006bc6:	e00a      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bce:	e006      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006bd0:	bf00      	nop
 8006bd2:	e004      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e002      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006bd8:	bf00      	nop
 8006bda:	e000      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d110      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006be6:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf8:	4902      	ldr	r1, [pc, #8]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006c02:	bf00      	nop
 8006c04:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6239      	str	r1, [r7, #32]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d055      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c34:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006c38:	d031      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006c3a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006c3e:	d82a      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c44:	d02d      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c4a:	d824      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c4c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006c50:	d029      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006c52:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006c56:	d81e      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c5c:	d011      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c62:	d818      	bhi.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d020      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c6c:	d113      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c72:	3308      	adds	r3, #8
 8006c74:	4618      	mov	r0, r3
 8006c76:	f003 f8cf 	bl	8009e18 <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c80:	e014      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c86:	3330      	adds	r3, #48	@ 0x30
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f003 f95d 	bl	8009f48 <RCCEx_PLL3_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c94:	e00a      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c9c:	e006      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006c9e:	bf00      	nop
 8006ca0:	e004      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006ca2:	bf00      	nop
 8006ca4:	e002      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10d      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006cb4:	4b88      	ldr	r3, [pc, #544]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cba:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cc6:	4984      	ldr	r1, [pc, #528]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	61b9      	str	r1, [r7, #24]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	d03d      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d81c      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006d00:	a201      	add	r2, pc, #4	@ (adr r2, 8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d43 	.word	0x08006d43
 8006d0c:	08006d19 	.word	0x08006d19
 8006d10:	08006d27 	.word	0x08006d27
 8006d14:	08006d43 	.word	0x08006d43
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d18:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d22:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006d24:	e00e      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f003 f873 	bl	8009e18 <RCCEx_PLL2_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006d38:	e004      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d40:	e000      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006d4c:	4b62      	ldr	r3, [pc, #392]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d52:	f023 0203 	bic.w	r2, r3, #3
 8006d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d5e:	495e      	ldr	r1, [pc, #376]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006d66:	e003      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6139      	str	r1, [r7, #16]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d86:	460b      	mov	r3, r1
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	d03a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d98:	d00e      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d9e:	d815      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d017      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da8:	d110      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006daa:	4b4b      	ldr	r3, [pc, #300]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	4a4a      	ldr	r2, [pc, #296]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006db6:	e00e      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f003 f82a 	bl	8009e18 <RCCEx_PLL2_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006dca:	e004      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10d      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006dde:	4b3e      	ldr	r3, [pc, #248]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006df0:	4939      	ldr	r1, [pc, #228]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006df8:	e003      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	d038      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006e26:	2b30      	cmp	r3, #48	@ 0x30
 8006e28:	d01b      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006e2a:	2b30      	cmp	r3, #48	@ 0x30
 8006e2c:	d815      	bhi.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d002      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d007      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006e36:	e010      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e38:	4b27      	ldr	r3, [pc, #156]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	4a26      	ldr	r2, [pc, #152]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e44:	e00e      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e4a:	3330      	adds	r3, #48	@ 0x30
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f003 f87b 	bl	8009f48 <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006e58:	e004      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e60:	e000      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e72:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006e7e:	4916      	ldr	r1, [pc, #88]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006e86:	e003      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6039      	str	r1, [r7, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	607b      	str	r3, [r7, #4]
 8006ea2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006eac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006ebe:	4906      	ldr	r1, [pc, #24]	@ (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006ec6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed6:	bf00      	nop
 8006ed8:	44020c00 	.word	0x44020c00

08006edc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b08b      	sub	sp, #44	@ 0x2c
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006ee4:	4bae      	ldr	r3, [pc, #696]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eec:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006eee:	4bac      	ldr	r3, [pc, #688]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006ef8:	4ba9      	ldr	r3, [pc, #676]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f02:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006f04:	4ba6      	ldr	r3, [pc, #664]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f10:	4ba3      	ldr	r3, [pc, #652]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	08db      	lsrs	r3, r3, #3
 8006f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f28:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8126 	beq.w	8007180 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d053      	beq.n	8006fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d86f      	bhi.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d003      	beq.n	8006f4e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d02b      	beq.n	8006fa4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006f4c:	e068      	b.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f4e:	4b94      	ldr	r3, [pc, #592]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	08db      	lsrs	r3, r3, #3
 8006f54:	f003 0303 	and.w	r3, r3, #3
 8006f58:	4a92      	ldr	r2, [pc, #584]	@ (80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f86:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006fa2:	e068      	b.n	8007076 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80071ac <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc0:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fc4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fdc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006fe0:	e049      	b.n	8007076 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80071b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007002:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800701e:	e02a      	b.n	8007076 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007020:	4b5f      	ldr	r3, [pc, #380]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a5e      	ldr	r2, [pc, #376]	@ (80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	ee07 3a90 	vmov	s15, r3
 8007038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	ee07 3a90 	vmov	s15, r3
 8007050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007054:	ed97 6a04 	vldr	s12, [r7, #16]
 8007058:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800705c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007070:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007074:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007076:	4b4a      	ldr	r3, [pc, #296]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007082:	d121      	bne.n	80070c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007084:	4b46      	ldr	r3, [pc, #280]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d017      	beq.n	80070c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007090:	4b43      	ldr	r3, [pc, #268]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007094:	0a5b      	lsrs	r3, r3, #9
 8007096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80070a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80070aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80070ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e006      	b.n	80070ce <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ce:	4b34      	ldr	r3, [pc, #208]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070da:	d121      	bne.n	8007120 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80070dc:	4b30      	ldr	r3, [pc, #192]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d017      	beq.n	8007118 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070e8:	4b2d      	ldr	r3, [pc, #180]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80070fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007102:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800710a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800710e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	e006      	b.n	8007126 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
 800711e:	e002      	b.n	8007126 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007126:	4b1e      	ldr	r3, [pc, #120]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800712e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007132:	d121      	bne.n	8007178 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007134:	4b1a      	ldr	r3, [pc, #104]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d017      	beq.n	8007170 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007140:	4b17      	ldr	r3, [pc, #92]	@ (80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007144:	0e1b      	lsrs	r3, r3, #24
 8007146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007156:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800715a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800715e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007166:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800716e:	e010      	b.n	8007192 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	609a      	str	r2, [r3, #8]
}
 8007176:	e00c      	b.n	8007192 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	609a      	str	r2, [r3, #8]
}
 800717e:	e008      	b.n	8007192 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	609a      	str	r2, [r3, #8]
}
 8007192:	bf00      	nop
 8007194:	372c      	adds	r7, #44	@ 0x2c
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	44020c00 	.word	0x44020c00
 80071a4:	03d09000 	.word	0x03d09000
 80071a8:	46000000 	.word	0x46000000
 80071ac:	4a742400 	.word	0x4a742400
 80071b0:	4af42400 	.word	0x4af42400

080071b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b08b      	sub	sp, #44	@ 0x2c
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80071bc:	4bae      	ldr	r3, [pc, #696]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80071c6:	4bac      	ldr	r3, [pc, #688]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80071d0:	4ba9      	ldr	r3, [pc, #676]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071da:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80071dc:	4ba6      	ldr	r3, [pc, #664]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80071e8:	4ba3      	ldr	r3, [pc, #652]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	08db      	lsrs	r3, r3, #3
 80071ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8126 	beq.w	8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d053      	beq.n	80072ba <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d86f      	bhi.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d003      	beq.n	8007226 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d02b      	beq.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007224:	e068      	b.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007226:	4b94      	ldr	r3, [pc, #592]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	08db      	lsrs	r3, r3, #3
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	4a92      	ldr	r2, [pc, #584]	@ (800747c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a04 	vldr	s12, [r7, #16]
 800725e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800727a:	e068      	b.n	800734e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007298:	ed97 6a04 	vldr	s12, [r7, #16]
 800729c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80072a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80072b8:	e049      	b.n	800734e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007488 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80072c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80072da:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80072f6:	e02a      	b.n	800734e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	4a5e      	ldr	r2, [pc, #376]	@ (800747c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007330:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007348:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800734c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800734e:	4b4a      	ldr	r3, [pc, #296]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800735a:	d121      	bne.n	80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800735c:	4b46      	ldr	r3, [pc, #280]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800735e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d017      	beq.n	8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007368:	4b43      	ldr	r3, [pc, #268]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800736a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736c:	0a5b      	lsrs	r3, r3, #9
 800736e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800737a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800737e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007382:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e006      	b.n	80073a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e002      	b.n	80073a6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073a6:	4b34      	ldr	r3, [pc, #208]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b2:	d121      	bne.n	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80073b4:	4b30      	ldr	r3, [pc, #192]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80073d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073d6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80073da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80073de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e006      	b.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800740a:	d121      	bne.n	8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800740c:	4b1a      	ldr	r3, [pc, #104]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d017      	beq.n	8007448 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007418:	4b17      	ldr	r3, [pc, #92]	@ (8007478 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741c:	0e1b      	lsrs	r3, r3, #24
 800741e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800742a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007432:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007446:	e010      	b.n	800746a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	609a      	str	r2, [r3, #8]
}
 800744e:	e00c      	b.n	800746a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	e008      	b.n	800746a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	609a      	str	r2, [r3, #8]
}
 800746a:	bf00      	nop
 800746c:	372c      	adds	r7, #44	@ 0x2c
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	44020c00 	.word	0x44020c00
 800747c:	03d09000 	.word	0x03d09000
 8007480:	46000000 	.word	0x46000000
 8007484:	4a742400 	.word	0x4a742400
 8007488:	4af42400 	.word	0x4af42400

0800748c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800748c:	b480      	push	{r7}
 800748e:	b08b      	sub	sp, #44	@ 0x2c
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007494:	4bae      	ldr	r3, [pc, #696]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800749e:	4bac      	ldr	r3, [pc, #688]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80074a8:	4ba9      	ldr	r3, [pc, #676]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	0a1b      	lsrs	r3, r3, #8
 80074ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074b2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80074b4:	4ba6      	ldr	r3, [pc, #664]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80074c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c4:	08db      	lsrs	r3, r3, #3
 80074c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8126 	beq.w	8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d053      	beq.n	8007592 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d86f      	bhi.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d003      	beq.n	80074fe <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d02b      	beq.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80074fc:	e068      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074fe:	4b94      	ldr	r3, [pc, #592]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	08db      	lsrs	r3, r3, #3
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	4a92      	ldr	r2, [pc, #584]	@ (8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800750a:	fa22 f303 	lsr.w	r3, r2, r3
 800750e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a04 	vldr	s12, [r7, #16]
 8007536:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007552:	e068      	b.n	8007626 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800775c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007570:	ed97 6a04 	vldr	s12, [r7, #16]
 8007574:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007590:	e049      	b.n	8007626 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80075a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80075b2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80075ce:	e02a      	b.n	8007626 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075d0:	4b5f      	ldr	r3, [pc, #380]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a5e      	ldr	r2, [pc, #376]	@ (8007754 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	ee07 3a90 	vmov	s15, r3
 80075f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007604:	ed97 6a04 	vldr	s12, [r7, #16]
 8007608:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800760c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007620:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007624:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007626:	4b4a      	ldr	r3, [pc, #296]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800762e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007632:	d121      	bne.n	8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007634:	4b46      	ldr	r3, [pc, #280]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d017      	beq.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007640:	4b43      	ldr	r3, [pc, #268]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007644:	0a5b      	lsrs	r3, r3, #9
 8007646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007652:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007656:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800765a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800765e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007666:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e006      	b.n	800767e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e002      	b.n	800767e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800767e:	4b34      	ldr	r3, [pc, #208]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800768a:	d121      	bne.n	80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800768c:	4b30      	ldr	r3, [pc, #192]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007698:	4b2d      	ldr	r3, [pc, #180]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800769a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80076aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80076b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80076b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076be:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]
 80076c6:	e006      	b.n	80076d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	e002      	b.n	80076d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e2:	d121      	bne.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80076e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d017      	beq.n	8007720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076f0:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f4:	0e1b      	lsrs	r3, r3, #24
 80076f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007706:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800770a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800770e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007716:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800771e:	e010      	b.n	8007742 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	609a      	str	r2, [r3, #8]
}
 8007726:	e00c      	b.n	8007742 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	e008      	b.n	8007742 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	609a      	str	r2, [r3, #8]
}
 8007742:	bf00      	nop
 8007744:	372c      	adds	r7, #44	@ 0x2c
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	44020c00 	.word	0x44020c00
 8007754:	03d09000 	.word	0x03d09000
 8007758:	46000000 	.word	0x46000000
 800775c:	4a742400 	.word	0x4a742400
 8007760:	4af42400 	.word	0x4af42400

08007764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b08f      	sub	sp, #60	@ 0x3c
 8007768:	af00      	add	r7, sp, #0
 800776a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800776e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007772:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007776:	4321      	orrs	r1, r4
 8007778:	d150      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800777a:	4b26      	ldr	r3, [pc, #152]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800777c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007784:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007786:	4b23      	ldr	r3, [pc, #140]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b02      	cmp	r3, #2
 8007792:	d108      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800779a:	d104      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800779c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a2:	f002 bb2a 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80077a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077b4:	d108      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077bc:	d104      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80077be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c4:	f002 bb19 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80077c8:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077d4:	d119      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077dc:	d115      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80077e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077ea:	d30a      	bcc.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80077ec:	4b09      	ldr	r3, [pc, #36]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f6:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80077fe:	f002 bafc 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007806:	f002 baf8 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
 800780e:	f002 baf4 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007812:	bf00      	nop
 8007814:	44020c00 	.word	0x44020c00
 8007818:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800781c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007820:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007824:	ea50 0104 	orrs.w	r1, r0, r4
 8007828:	f001 8275 	beq.w	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800782c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007830:	2801      	cmp	r0, #1
 8007832:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007836:	f082 82dd 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800783a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800783e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007842:	ea50 0104 	orrs.w	r1, r0, r4
 8007846:	f001 816c 	beq.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800784a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800784e:	2801      	cmp	r0, #1
 8007850:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007854:	f082 82ce 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800785c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007860:	ea50 0104 	orrs.w	r1, r0, r4
 8007864:	f001 8602 	beq.w	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800786c:	2801      	cmp	r0, #1
 800786e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007872:	f082 82bf 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800787a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800787e:	ea50 0104 	orrs.w	r1, r0, r4
 8007882:	f001 854c 	beq.w	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800788a:	2801      	cmp	r0, #1
 800788c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007890:	f082 82b0 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007898:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800789c:	ea50 0104 	orrs.w	r1, r0, r4
 80078a0:	f001 849e 	beq.w	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80078a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a8:	2801      	cmp	r0, #1
 80078aa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80078ae:	f082 82a1 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078b6:	f1a1 0420 	sub.w	r4, r1, #32
 80078ba:	ea50 0104 	orrs.w	r1, r0, r4
 80078be:	f001 83e8 	beq.w	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80078c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078c6:	2801      	cmp	r0, #1
 80078c8:	f171 0120 	sbcs.w	r1, r1, #32
 80078cc:	f082 8292 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078d4:	f1a1 0410 	sub.w	r4, r1, #16
 80078d8:	ea50 0104 	orrs.w	r1, r0, r4
 80078dc:	f002 8256 	beq.w	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80078e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e4:	2801      	cmp	r0, #1
 80078e6:	f171 0110 	sbcs.w	r1, r1, #16
 80078ea:	f082 8283 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078f2:	f1a1 0408 	sub.w	r4, r1, #8
 80078f6:	ea50 0104 	orrs.w	r1, r0, r4
 80078fa:	f002 81cc 	beq.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80078fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007902:	2801      	cmp	r0, #1
 8007904:	f171 0108 	sbcs.w	r1, r1, #8
 8007908:	f082 8274 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800790c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007910:	1f0c      	subs	r4, r1, #4
 8007912:	ea50 0104 	orrs.w	r1, r0, r4
 8007916:	f001 8648 	beq.w	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800791a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800791e:	2801      	cmp	r0, #1
 8007920:	f171 0104 	sbcs.w	r1, r1, #4
 8007924:	f082 8266 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800792c:	1e8c      	subs	r4, r1, #2
 800792e:	ea50 0104 	orrs.w	r1, r0, r4
 8007932:	f002 8143 	beq.w	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800793a:	2801      	cmp	r0, #1
 800793c:	f171 0102 	sbcs.w	r1, r1, #2
 8007940:	f082 8258 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007948:	1e4c      	subs	r4, r1, #1
 800794a:	ea50 0104 	orrs.w	r1, r0, r4
 800794e:	f002 80ce 	beq.w	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007956:	2801      	cmp	r0, #1
 8007958:	f171 0101 	sbcs.w	r1, r1, #1
 800795c:	f082 824a 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007964:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007968:	4321      	orrs	r1, r4
 800796a:	f002 8059 	beq.w	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800796e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007972:	4cd9      	ldr	r4, [pc, #868]	@ (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007974:	42a0      	cmp	r0, r4
 8007976:	f171 0100 	sbcs.w	r1, r1, #0
 800797a:	f082 823b 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800797e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007982:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007986:	4321      	orrs	r1, r4
 8007988:	f001 87d9 	beq.w	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800798c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007990:	4cd2      	ldr	r4, [pc, #840]	@ (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007992:	42a0      	cmp	r0, r4
 8007994:	f171 0100 	sbcs.w	r1, r1, #0
 8007998:	f082 822c 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800799c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80079a4:	4321      	orrs	r1, r4
 80079a6:	f001 8751 	beq.w	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80079aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ae:	4ccc      	ldr	r4, [pc, #816]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80079b0:	42a0      	cmp	r0, r4
 80079b2:	f171 0100 	sbcs.w	r1, r1, #0
 80079b6:	f082 821d 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079be:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80079c2:	4321      	orrs	r1, r4
 80079c4:	f001 869a 	beq.w	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80079c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079cc:	4cc5      	ldr	r4, [pc, #788]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80079ce:	42a0      	cmp	r0, r4
 80079d0:	f171 0100 	sbcs.w	r1, r1, #0
 80079d4:	f082 820e 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079dc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80079e0:	4321      	orrs	r1, r4
 80079e2:	f001 8612 	beq.w	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80079e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ea:	4cbf      	ldr	r4, [pc, #764]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80079ec:	42a0      	cmp	r0, r4
 80079ee:	f171 0100 	sbcs.w	r1, r1, #0
 80079f2:	f082 81ff 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079fa:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80079fe:	4321      	orrs	r1, r4
 8007a00:	f002 817e 	beq.w	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a08:	4cb8      	ldr	r4, [pc, #736]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007a0a:	42a0      	cmp	r0, r4
 8007a0c:	f171 0100 	sbcs.w	r1, r1, #0
 8007a10:	f082 81f0 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a18:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007a1c:	4321      	orrs	r1, r4
 8007a1e:	f000 829e 	beq.w	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a26:	4cb2      	ldr	r4, [pc, #712]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	f171 0100 	sbcs.w	r1, r1, #0
 8007a2e:	f082 81e1 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a36:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007a3a:	4321      	orrs	r1, r4
 8007a3c:	f000 826d 	beq.w	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a44:	4cab      	ldr	r4, [pc, #684]	@ (8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a46:	42a0      	cmp	r0, r4
 8007a48:	f171 0100 	sbcs.w	r1, r1, #0
 8007a4c:	f082 81d2 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a54:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007a58:	4321      	orrs	r1, r4
 8007a5a:	f001 800d 	beq.w	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a62:	4ca5      	ldr	r4, [pc, #660]	@ (8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007a64:	42a0      	cmp	r0, r4
 8007a66:	f171 0100 	sbcs.w	r1, r1, #0
 8007a6a:	f082 81c3 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a72:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007a76:	4321      	orrs	r1, r4
 8007a78:	f000 81d0 	beq.w	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a80:	4c9e      	ldr	r4, [pc, #632]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a82:	42a0      	cmp	r0, r4
 8007a84:	f171 0100 	sbcs.w	r1, r1, #0
 8007a88:	f082 81b4 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a90:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007a94:	4321      	orrs	r1, r4
 8007a96:	f000 8142 	beq.w	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a9e:	4c98      	ldr	r4, [pc, #608]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	f171 0100 	sbcs.w	r1, r1, #0
 8007aa6:	f082 81a5 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aae:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007ab2:	4321      	orrs	r1, r4
 8007ab4:	f001 824e 	beq.w	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007abc:	4c91      	ldr	r4, [pc, #580]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007abe:	42a0      	cmp	r0, r4
 8007ac0:	f171 0100 	sbcs.w	r1, r1, #0
 8007ac4:	f082 8196 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007acc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007ad0:	4321      	orrs	r1, r4
 8007ad2:	f001 8197 	beq.w	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ada:	4c8b      	ldr	r4, [pc, #556]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	f171 0100 	sbcs.w	r1, r1, #0
 8007ae2:	f082 8187 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aea:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007aee:	4321      	orrs	r1, r4
 8007af0:	f001 8154 	beq.w	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af8:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007afc:	f171 0100 	sbcs.w	r1, r1, #0
 8007b00:	f082 8178 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b08:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007b0c:	4321      	orrs	r1, r4
 8007b0e:	f001 80b7 	beq.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b16:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007b1a:	42a0      	cmp	r0, r4
 8007b1c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b20:	f082 8168 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b28:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007b2c:	4321      	orrs	r1, r4
 8007b2e:	f001 8064 	beq.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b36:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007b3a:	42a0      	cmp	r0, r4
 8007b3c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b40:	f082 8158 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b48:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007b4c:	4321      	orrs	r1, r4
 8007b4e:	f001 8011 	beq.w	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b56:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007b5a:	42a0      	cmp	r0, r4
 8007b5c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b60:	f082 8148 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b68:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007b6c:	4321      	orrs	r1, r4
 8007b6e:	f000 871e 	beq.w	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b76:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007b7a:	42a0      	cmp	r0, r4
 8007b7c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b80:	f082 8138 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b88:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007b8c:	4321      	orrs	r1, r4
 8007b8e:	f000 86a8 	beq.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b96:	f640 0401 	movw	r4, #2049	@ 0x801
 8007b9a:	42a0      	cmp	r0, r4
 8007b9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007ba0:	f082 8128 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007bac:	4321      	orrs	r1, r4
 8007bae:	f000 8632 	beq.w	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb6:	f240 4401 	movw	r4, #1025	@ 0x401
 8007bba:	42a0      	cmp	r0, r4
 8007bbc:	f171 0100 	sbcs.w	r1, r1, #0
 8007bc0:	f082 8118 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007bcc:	4321      	orrs	r1, r4
 8007bce:	f000 85b0 	beq.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd6:	f240 2401 	movw	r4, #513	@ 0x201
 8007bda:	42a0      	cmp	r0, r4
 8007bdc:	f171 0100 	sbcs.w	r1, r1, #0
 8007be0:	f082 8108 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be8:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007bec:	4321      	orrs	r1, r4
 8007bee:	f000 8535 	beq.w	800865c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf6:	f240 1401 	movw	r4, #257	@ 0x101
 8007bfa:	42a0      	cmp	r0, r4
 8007bfc:	f171 0100 	sbcs.w	r1, r1, #0
 8007c00:	f082 80f8 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c08:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007c0c:	4321      	orrs	r1, r4
 8007c0e:	f000 84ba 	beq.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c16:	2881      	cmp	r0, #129	@ 0x81
 8007c18:	f171 0100 	sbcs.w	r1, r1, #0
 8007c1c:	f082 80ea 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c24:	2821      	cmp	r0, #33	@ 0x21
 8007c26:	f171 0100 	sbcs.w	r1, r1, #0
 8007c2a:	d26f      	bcs.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c30:	4301      	orrs	r1, r0
 8007c32:	f002 80df 	beq.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c3a:	1e42      	subs	r2, r0, #1
 8007c3c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007c40:	2a20      	cmp	r2, #32
 8007c42:	f173 0100 	sbcs.w	r1, r3, #0
 8007c46:	f082 80d5 	bcs.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c4a:	2a1f      	cmp	r2, #31
 8007c4c:	f202 80d2 	bhi.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c50:	a101      	add	r1, pc, #4	@ (adr r1, 8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007c52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007fb9 	.word	0x08007fb9
 8007c5c:	08008085 	.word	0x08008085
 8007c60:	08009df5 	.word	0x08009df5
 8007c64:	08008145 	.word	0x08008145
 8007c68:	08009df5 	.word	0x08009df5
 8007c6c:	08009df5 	.word	0x08009df5
 8007c70:	08009df5 	.word	0x08009df5
 8007c74:	08008215 	.word	0x08008215
 8007c78:	08009df5 	.word	0x08009df5
 8007c7c:	08009df5 	.word	0x08009df5
 8007c80:	08009df5 	.word	0x08009df5
 8007c84:	08009df5 	.word	0x08009df5
 8007c88:	08009df5 	.word	0x08009df5
 8007c8c:	08009df5 	.word	0x08009df5
 8007c90:	08009df5 	.word	0x08009df5
 8007c94:	080082f7 	.word	0x080082f7
 8007c98:	08009df5 	.word	0x08009df5
 8007c9c:	08009df5 	.word	0x08009df5
 8007ca0:	08009df5 	.word	0x08009df5
 8007ca4:	08009df5 	.word	0x08009df5
 8007ca8:	08009df5 	.word	0x08009df5
 8007cac:	08009df5 	.word	0x08009df5
 8007cb0:	08009df5 	.word	0x08009df5
 8007cb4:	08009df5 	.word	0x08009df5
 8007cb8:	08009df5 	.word	0x08009df5
 8007cbc:	08009df5 	.word	0x08009df5
 8007cc0:	08009df5 	.word	0x08009df5
 8007cc4:	08009df5 	.word	0x08009df5
 8007cc8:	08009df5 	.word	0x08009df5
 8007ccc:	08009df5 	.word	0x08009df5
 8007cd0:	08009df5 	.word	0x08009df5
 8007cd4:	080083cd 	.word	0x080083cd
 8007cd8:	80000001 	.word	0x80000001
 8007cdc:	40000001 	.word	0x40000001
 8007ce0:	20000001 	.word	0x20000001
 8007ce4:	10000001 	.word	0x10000001
 8007ce8:	08000001 	.word	0x08000001
 8007cec:	04000001 	.word	0x04000001
 8007cf0:	00800001 	.word	0x00800001
 8007cf4:	00400001 	.word	0x00400001
 8007cf8:	00200001 	.word	0x00200001
 8007cfc:	00100001 	.word	0x00100001
 8007d00:	00080001 	.word	0x00080001
 8007d04:	00040001 	.word	0x00040001
 8007d08:	00020001 	.word	0x00020001
 8007d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d10:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007d14:	430b      	orrs	r3, r1
 8007d16:	f000 83c4 	beq.w	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007d1a:	f002 b86b 	b.w	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007d1e:	4ba1      	ldr	r3, [pc, #644]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d24:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d30:	d036      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d38:	d86b      	bhi.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d40:	d02b      	beq.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d48:	d863      	bhi.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d50:	d01b      	beq.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d58:	d85b      	bhi.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d66:	d008      	beq.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007d68:	e053      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d6a:	f107 0320 	add.w	r3, r7, #32
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff f8b4 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d78:	e04e      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d7a:	f107 0314 	add.w	r3, r7, #20
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff fa18 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d88:	e046      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d8a:	f107 0308 	add.w	r3, r7, #8
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fb7c 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d98:	e03e      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007d9a:	4b83      	ldr	r3, [pc, #524]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007d9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d9e:	e03b      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007da0:	4b80      	ldr	r3, [pc, #512]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007da6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dac:	4b7d      	ldr	r3, [pc, #500]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d10c      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dbe:	4b79      	ldr	r3, [pc, #484]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	08db      	lsrs	r3, r3, #3
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	4a78      	ldr	r2, [pc, #480]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007dca:	fa22 f303 	lsr.w	r3, r2, r3
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd0:	e01e      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dd2:	4b74      	ldr	r3, [pc, #464]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dde:	d106      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de6:	d102      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007de8:	4b71      	ldr	r3, [pc, #452]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dec:	e010      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dee:	4b6d      	ldr	r3, [pc, #436]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dfa:	d106      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e02:	d102      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e04:	4b6b      	ldr	r3, [pc, #428]	@ (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e08:	e002      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007e0e:	e003      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e16:	bf00      	nop
          }
        }
        break;
 8007e18:	f001 bfef 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e1c:	4b61      	ldr	r3, [pc, #388]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e22:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e2e:	d036      	beq.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e36:	d86b      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e3e:	d02b      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e46:	d863      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e4e:	d01b      	beq.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e56:	d85b      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007e64:	d008      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007e66:	e053      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e68:	f107 0320 	add.w	r3, r7, #32
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff f835 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e76:	e04e      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e78:	f107 0314 	add.w	r3, r7, #20
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff f999 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e86:	e046      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fafd 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e96:	e03e      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007e98:	4b43      	ldr	r3, [pc, #268]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007e9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e9c:	e03b      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e9e:	4b41      	ldr	r3, [pc, #260]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ea4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d10c      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ebc:	4b39      	ldr	r3, [pc, #228]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	08db      	lsrs	r3, r3, #3
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	4a39      	ldr	r2, [pc, #228]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ece:	e01e      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ed0:	4b34      	ldr	r3, [pc, #208]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007edc:	d106      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee4:	d102      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ee6:	4b32      	ldr	r3, [pc, #200]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eea:	e010      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eec:	4b2d      	ldr	r3, [pc, #180]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef8:	d106      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f00:	d102      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f02:	4b2c      	ldr	r3, [pc, #176]	@ (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f06:	e002      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007f0c:	e003      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007f0e:	e002      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f14:	bf00      	nop
          }
        }
        break;
 8007f16:	f001 bf70 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007f1a:	4b22      	ldr	r3, [pc, #136]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f24:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d108      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f2c:	f107 0320 	add.w	r3, r7, #32
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe ffd3 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f3a:	f001 bf5e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	2b40      	cmp	r3, #64	@ 0x40
 8007f42:	d108      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff f933 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f52:	f001 bf52 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f5a:	f001 bf4e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007f5e:	4b11      	ldr	r3, [pc, #68]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f68:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d108      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f70:	f107 0320 	add.w	r3, r7, #32
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe ffb1 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f7e:	f001 bf3c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	2b80      	cmp	r3, #128	@ 0x80
 8007f86:	d108      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff f911 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f96:	f001 bf30 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f9e:	f001 bf2c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fa2:	bf00      	nop
 8007fa4:	44020c00 	.word	0x44020c00
 8007fa8:	00bb8000 	.word	0x00bb8000
 8007fac:	03d09000 	.word	0x03d09000
 8007fb0:	003d0900 	.word	0x003d0900
 8007fb4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007fb8:	4b9d      	ldr	r3, [pc, #628]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007fca:	f7fc ffd1 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8007fce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fd0:	f001 bf13 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007fd4:	4b96      	ldr	r3, [pc, #600]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe0:	d10a      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff f8e1 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff6:	e043      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007ff8:	4b8d      	ldr	r3, [pc, #564]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008004:	d10a      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	2b02      	cmp	r3, #2
 800800a:	d107      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800c:	f107 0308 	add.w	r3, r7, #8
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fa3b 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	637b      	str	r3, [r7, #52]	@ 0x34
 800801a:	e031      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800801c:	4b84      	ldr	r3, [pc, #528]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b02      	cmp	r3, #2
 8008026:	d10c      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	2b03      	cmp	r3, #3
 800802c:	d109      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800802e:	4b80      	ldr	r3, [pc, #512]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	08db      	lsrs	r3, r3, #3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	4a7e      	ldr	r2, [pc, #504]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800803a:	fa22 f303 	lsr.w	r3, r2, r3
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008040:	e01e      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008042:	4b7b      	ldr	r3, [pc, #492]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800804a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804e:	d105      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	2b04      	cmp	r3, #4
 8008054:	d102      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8008056:	4b78      	ldr	r3, [pc, #480]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
 800805a:	e011      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800805c:	4b74      	ldr	r3, [pc, #464]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800805e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b02      	cmp	r3, #2
 8008068:	d106      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	2b05      	cmp	r3, #5
 800806e:	d103      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
 8008076:	e003      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800807c:	f001 bebd 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008080:	f001 bebb 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008084:	4b6a      	ldr	r3, [pc, #424]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800808a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800808e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008096:	f7fc ff55 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800809a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800809c:	f001 bead 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80080a0:	4b63      	ldr	r3, [pc, #396]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ac:	d10a      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d107      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b4:	f107 0314 	add.w	r3, r7, #20
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff f87b 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	e03d      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d108      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ca:	f107 0308 	add.w	r3, r7, #8
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff f9dc 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080d8:	f001 be8f 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80080dc:	4b54      	ldr	r3, [pc, #336]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d10c      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	2b18      	cmp	r3, #24
 80080ec:	d109      	bne.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080ee:	4b50      	ldr	r3, [pc, #320]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	08db      	lsrs	r3, r3, #3
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	4a4e      	ldr	r2, [pc, #312]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80080fa:	fa22 f303 	lsr.w	r3, r2, r3
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008100:	e01e      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008102:	4b4b      	ldr	r3, [pc, #300]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800810a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810e:	d105      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	2b20      	cmp	r3, #32
 8008114:	d102      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008116:	4b48      	ldr	r3, [pc, #288]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
 800811a:	e011      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800811c:	4b44      	ldr	r3, [pc, #272]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800811e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b02      	cmp	r3, #2
 8008128:	d106      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	2b28      	cmp	r3, #40	@ 0x28
 800812e:	d103      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
 8008136:	e003      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800813c:	f001 be5d 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008140:	f001 be5b 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008144:	4b3a      	ldr	r3, [pc, #232]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008146:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800814a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008156:	f7fc fef5 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800815a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800815c:	f001 be4d 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008160:	4b33      	ldr	r3, [pc, #204]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800816c:	d10a      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	2b40      	cmp	r3, #64	@ 0x40
 8008172:	d107      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff f81b 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	637b      	str	r3, [r7, #52]	@ 0x34
 8008182:	e045      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008184:	4b2a      	ldr	r3, [pc, #168]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800818c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008190:	d10a      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	2b80      	cmp	r3, #128	@ 0x80
 8008196:	d107      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff f975 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a6:	e033      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80081a8:	4b21      	ldr	r3, [pc, #132]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d10c      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80081b8:	d109      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	08db      	lsrs	r3, r3, #3
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80081c6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80081cc:	e020      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80081ce:	4b18      	ldr	r3, [pc, #96]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081da:	d106      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e2:	d102      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80081e4:	4b14      	ldr	r3, [pc, #80]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80081e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e8:	e012      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80081ea:	4b11      	ldr	r3, [pc, #68]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d107      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80081fe:	d103      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008204:	637b      	str	r3, [r7, #52]	@ 0x34
 8008206:	e003      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800820c:	f001 bdf5 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008210:	f001 bdf3 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008214:	4b06      	ldr	r3, [pc, #24]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008216:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800821a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008226:	f7fc fe8d 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800822a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800822c:	f001 bde5 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008230:	44020c00 	.word	0x44020c00
 8008234:	03d09000 	.word	0x03d09000
 8008238:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800823c:	4ba0      	ldr	r3, [pc, #640]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008248:	d10b      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d107      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008252:	f107 0314 	add.w	r3, r7, #20
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe ffac 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008260:	e047      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008262:	4b97      	ldr	r3, [pc, #604]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826e:	d10b      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008276:	d107      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008278:	f107 0308 	add.w	r3, r7, #8
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff f905 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
 8008286:	e034      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008288:	4b8d      	ldr	r3, [pc, #564]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d10d      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800829a:	d109      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800829c:	4b88      	ldr	r3, [pc, #544]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	4a87      	ldr	r2, [pc, #540]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ae:	e020      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80082b0:	4b83      	ldr	r3, [pc, #524]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082bc:	d106      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80082be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082c4:	d102      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80082c6:	4b80      	ldr	r3, [pc, #512]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ca:	e012      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80082cc:	4b7c      	ldr	r3, [pc, #496]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d107      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80082e0:	d103      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e8:	e003      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082ee:	f001 bd84 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082f2:	f001 bd82 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80082f6:	4b72      	ldr	r3, [pc, #456]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008300:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	2b00      	cmp	r3, #0
 8008306:	d104      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008308:	f7fc fe1c 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800830c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800830e:	f001 bd74 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008312:	4b6b      	ldr	r3, [pc, #428]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800831a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800831e:	d10b      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008326:	d107      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe ff41 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	637b      	str	r3, [r7, #52]	@ 0x34
 8008336:	e047      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008338:	4b61      	ldr	r3, [pc, #388]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008344:	d10b      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834c:	d107      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800834e:	f107 0308 	add.w	r3, r7, #8
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff f89a 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e034      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800835e:	4b58      	ldr	r3, [pc, #352]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b02      	cmp	r3, #2
 8008368:	d10d      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008370:	d109      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008372:	4b53      	ldr	r3, [pc, #332]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	08db      	lsrs	r3, r3, #3
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	4a51      	ldr	r2, [pc, #324]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800837e:	fa22 f303 	lsr.w	r3, r2, r3
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
 8008384:	e020      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008386:	4b4e      	ldr	r3, [pc, #312]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800838e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008392:	d106      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800839a:	d102      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800839c:	4b4a      	ldr	r3, [pc, #296]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800839e:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a0:	e012      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80083a2:	4b47      	ldr	r3, [pc, #284]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d107      	bne.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80083b6:	d103      	bne.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80083b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083be:	e003      	b.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083c4:	f001 bd19 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083c8:	f001 bd17 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80083cc:	4b3c      	ldr	r3, [pc, #240]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083d2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80083d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083de:	f7fc fdb1 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 80083e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80083e4:	f001 bd09 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80083e8:	4b35      	ldr	r3, [pc, #212]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083f4:	d10b      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083fc:	d107      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fe:	f107 0314 	add.w	r3, r7, #20
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fed6 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	e047      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800840e:	4b2c      	ldr	r3, [pc, #176]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800841a:	d10b      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800841c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008422:	d107      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff f82f 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
 8008432:	e034      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008434:	4b22      	ldr	r3, [pc, #136]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b02      	cmp	r3, #2
 800843e:	d10d      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008446:	d109      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008448:	4b1d      	ldr	r3, [pc, #116]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	08db      	lsrs	r3, r3, #3
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	637b      	str	r3, [r7, #52]	@ 0x34
 800845a:	e020      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800845c:	4b18      	ldr	r3, [pc, #96]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008468:	d106      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008470:	d102      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008472:	4b15      	ldr	r3, [pc, #84]	@ (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
 8008476:	e012      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008478:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800847a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d107      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800848c:	d103      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800848e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008492:	637b      	str	r3, [r7, #52]	@ 0x34
 8008494:	e003      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800849a:	f001 bcae 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800849e:	f001 bcac 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80084a2:	4b07      	ldr	r3, [pc, #28]	@ (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80084a8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80084ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084b4:	f7fc fd46 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 80084b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80084ba:	f001 bc9e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084be:	bf00      	nop
 80084c0:	44020c00 	.word	0x44020c00
 80084c4:	03d09000 	.word	0x03d09000
 80084c8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80084cc:	4ba0      	ldr	r3, [pc, #640]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084d8:	d10b      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084e0:	d107      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e2:	f107 0314 	add.w	r3, r7, #20
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fe64 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	e047      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80084f2:	4b97      	ldr	r3, [pc, #604]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084fe:	d10b      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008502:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe ffbd 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	e034      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008518:	4b8d      	ldr	r3, [pc, #564]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d10d      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800852a:	d109      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800852c:	4b88      	ldr	r3, [pc, #544]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	08db      	lsrs	r3, r3, #3
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	4a87      	ldr	r2, [pc, #540]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
 800853e:	e020      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008540:	4b83      	ldr	r3, [pc, #524]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854c:	d106      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008554:	d102      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008556:	4b80      	ldr	r3, [pc, #512]	@ (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008558:	637b      	str	r3, [r7, #52]	@ 0x34
 800855a:	e012      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800855c:	4b7c      	ldr	r3, [pc, #496]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800855e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b02      	cmp	r3, #2
 8008568:	d107      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008570:	d103      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34
 8008578:	e003      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800857e:	f001 bc3c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008582:	f001 bc3a 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008586:	4b72      	ldr	r3, [pc, #456]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800858c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008590:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008598:	f7fc fcd4 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800859c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800859e:	f001 bc2c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80085a2:	4b6b      	ldr	r3, [pc, #428]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ae:	d10b      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085b6:	d107      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b8:	f107 0314 	add.w	r3, r7, #20
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fdf9 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c6:	e047      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80085c8:	4b61      	ldr	r3, [pc, #388]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085d4:	d10b      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085dc:	d107      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe ff52 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ec:	e034      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80085ee:	4b58      	ldr	r3, [pc, #352]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d10d      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008600:	d109      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008602:	4b53      	ldr	r3, [pc, #332]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	08db      	lsrs	r3, r3, #3
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	4a51      	ldr	r2, [pc, #324]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	637b      	str	r3, [r7, #52]	@ 0x34
 8008614:	e020      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008616:	4b4e      	ldr	r3, [pc, #312]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800861e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008622:	d106      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800862a:	d102      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800862c:	4b4a      	ldr	r3, [pc, #296]	@ (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008630:	e012      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008632:	4b47      	ldr	r3, [pc, #284]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b02      	cmp	r3, #2
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008646:	d103      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800864c:	637b      	str	r3, [r7, #52]	@ 0x34
 800864e:	e003      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008654:	f001 bbd1 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008658:	f001 bbcf 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800865c:	4b3c      	ldr	r3, [pc, #240]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800865e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008662:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008666:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	d104      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800866e:	f7fc fc69 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008672:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008674:	f001 bbc1 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008678:	4b35      	ldr	r3, [pc, #212]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008684:	d10b      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800868c:	d107      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868e:	f107 0314 	add.w	r3, r7, #20
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fd8e 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34
 800869c:	e047      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800869e:	4b2c      	ldr	r3, [pc, #176]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086aa:	d10b      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b2:	d107      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe fee7 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c2:	e034      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80086c4:	4b22      	ldr	r3, [pc, #136]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d10d      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086d6:	d109      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	08db      	lsrs	r3, r3, #3
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ea:	e020      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80086ec:	4b18      	ldr	r3, [pc, #96]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086f8:	d106      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008700:	d102      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008702:	4b15      	ldr	r3, [pc, #84]	@ (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008704:	637b      	str	r3, [r7, #52]	@ 0x34
 8008706:	e012      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008708:	4b11      	ldr	r3, [pc, #68]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800870a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b02      	cmp	r3, #2
 8008714:	d107      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800871c:	d103      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800871e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008722:	637b      	str	r3, [r7, #52]	@ 0x34
 8008724:	e003      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800872a:	f001 bb66 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800872e:	f001 bb64 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008732:	4b07      	ldr	r3, [pc, #28]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008738:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800873c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fc fbfe 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008748:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800874a:	f001 bb56 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800874e:	bf00      	nop
 8008750:	44020c00 	.word	0x44020c00
 8008754:	03d09000 	.word	0x03d09000
 8008758:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800875c:	4ba1      	ldr	r3, [pc, #644]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008768:	d10b      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008770:	d107      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008772:	f107 0314 	add.w	r3, r7, #20
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fd1c 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008780:	e047      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008782:	4b98      	ldr	r3, [pc, #608]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800878a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878e:	d10b      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008796:	d107      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fe75 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a6:	e034      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80087a8:	4b8e      	ldr	r3, [pc, #568]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d10d      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80087ba:	d109      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087bc:	4b89      	ldr	r3, [pc, #548]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a88      	ldr	r2, [pc, #544]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ce:	e020      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80087d0:	4b84      	ldr	r3, [pc, #528]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087dc:	d106      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e4:	d102      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80087e6:	4b81      	ldr	r3, [pc, #516]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ea:	e012      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80087ec:	4b7d      	ldr	r3, [pc, #500]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d107      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008800:	d103      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
 8008808:	e003      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800880e:	f001 baf4 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008812:	f001 baf2 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008816:	4b73      	ldr	r3, [pc, #460]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008818:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008828:	f7fc fb8c 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 800882c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800882e:	f001 bae4 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008832:	4b6c      	ldr	r3, [pc, #432]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800883e:	d10a      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	2b01      	cmp	r3, #1
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008846:	f107 0314 	add.w	r3, r7, #20
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fcb2 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
 8008854:	e043      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008856:	4b63      	ldr	r3, [pc, #396]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800885e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008862:	d10a      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2b02      	cmp	r3, #2
 8008868:	d107      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fe0c 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	637b      	str	r3, [r7, #52]	@ 0x34
 8008878:	e031      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800887a:	4b5a      	ldr	r3, [pc, #360]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b02      	cmp	r3, #2
 8008884:	d10c      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	2b03      	cmp	r3, #3
 800888a:	d109      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800888c:	4b55      	ldr	r3, [pc, #340]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	08db      	lsrs	r3, r3, #3
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	4a54      	ldr	r2, [pc, #336]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008898:	fa22 f303 	lsr.w	r3, r2, r3
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	e01e      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80088a0:	4b50      	ldr	r3, [pc, #320]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ac:	d105      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80088b4:	4b4d      	ldr	r3, [pc, #308]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b8:	e011      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80088ba:	4b4a      	ldr	r3, [pc, #296]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d106      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	2b05      	cmp	r3, #5
 80088cc:	d103      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d4:	e003      	b.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088da:	f001 ba8e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088de:	f001 ba8c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80088e2:	4b40      	ldr	r3, [pc, #256]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80088e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088f4:	f7fc fb26 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 80088f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80088fa:	f001 ba7e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80088fe:	4b39      	ldr	r3, [pc, #228]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800890a:	d10a      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890e:	2b10      	cmp	r3, #16
 8008910:	d107      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008912:	f107 0314 	add.w	r3, r7, #20
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fc4c 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008920:	e043      	b.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008922:	4b30      	ldr	r3, [pc, #192]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800892a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800892e:	d10a      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	2b20      	cmp	r3, #32
 8008934:	d107      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008936:	f107 0308 	add.w	r3, r7, #8
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fda6 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
 8008944:	e031      	b.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008946:	4b27      	ldr	r3, [pc, #156]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	d10c      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	2b30      	cmp	r3, #48	@ 0x30
 8008956:	d109      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008958:	4b22      	ldr	r3, [pc, #136]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	08db      	lsrs	r3, r3, #3
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	4a21      	ldr	r2, [pc, #132]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	637b      	str	r3, [r7, #52]	@ 0x34
 800896a:	e01e      	b.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800896c:	4b1d      	ldr	r3, [pc, #116]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008978:	d105      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	2b40      	cmp	r3, #64	@ 0x40
 800897e:	d102      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008980:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
 8008984:	e011      	b.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008986:	4b17      	ldr	r3, [pc, #92]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d106      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	2b50      	cmp	r3, #80	@ 0x50
 8008998:	d103      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800899a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a0:	e003      	b.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089a6:	f001 ba28 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089aa:	f001 ba26 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089b4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80089b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d104      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80089c0:	f7fc faec 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 80089c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80089c6:	f001 ba18 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089d0:	d10e      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0314 	add.w	r3, r7, #20
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fbec 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089e0:	f001 ba0b 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089e4:	44020c00 	.word	0x44020c00
 80089e8:	03d09000 	.word	0x03d09000
 80089ec:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089f6:	d108      	bne.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe fd45 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a06:	f001 b9f8 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008a0a:	4ba4      	ldr	r3, [pc, #656]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d10d      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a1c:	d109      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	08db      	lsrs	r3, r3, #3
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	4a9d      	ldr	r2, [pc, #628]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a30:	e020      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008a32:	4b9a      	ldr	r3, [pc, #616]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3e:	d106      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a46:	d102      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008a48:	4b96      	ldr	r3, [pc, #600]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4c:	e012      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008a4e:	4b93      	ldr	r3, [pc, #588]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008a62:	d103      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6a:	e003      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a70:	f001 b9c3 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a74:	f001 b9c1 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008a78:	4b88      	ldr	r3, [pc, #544]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008a8a:	f7fc fa3f 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8008a8e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008a90:	f001 b9b3 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d104      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a9a:	f7fc f90b 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8008a9e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008aa0:	f001 b9ab 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d108      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aaa:	f107 0314 	add.w	r3, r7, #20
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fb80 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ab8:	f001 b99f 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008abc:	4b77      	ldr	r3, [pc, #476]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ac8:	d105      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d102      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008ad0:	4b75      	ldr	r3, [pc, #468]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad4:	e023      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008ad6:	4b71      	ldr	r3, [pc, #452]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d10c      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d109      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	08db      	lsrs	r3, r3, #3
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	4a6b      	ldr	r2, [pc, #428]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afa:	e010      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008afc:	4b67      	ldr	r3, [pc, #412]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b08:	d105      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	2b05      	cmp	r3, #5
 8008b0e:	d102      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008b10:	4b64      	ldr	r3, [pc, #400]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b14:	e003      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b1a:	f001 b96e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b1e:	f001 b96c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008b22:	4b5e      	ldr	r3, [pc, #376]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008b2e:	4b5b      	ldr	r3, [pc, #364]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d106      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d103      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b48:	e012      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008b4a:	4b54      	ldr	r3, [pc, #336]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b58:	d106      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d103      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008b60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b66:	e003      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008b6c:	f001 b945 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b70:	f001 b943 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008b74:	4b49      	ldr	r3, [pc, #292]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b7e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b86:	f7fc f9dd 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008b8a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b8c:	f001 b935 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b96:	d108      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fc75 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ba6:	f001 b928 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008baa:	4b3c      	ldr	r3, [pc, #240]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d10d      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bbc:	d109      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bbe:	4b37      	ldr	r3, [pc, #220]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	08db      	lsrs	r3, r3, #3
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	4a35      	ldr	r2, [pc, #212]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd0:	e011      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008bd2:	4b32      	ldr	r3, [pc, #200]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bde:	d106      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008be8:	4b2e      	ldr	r3, [pc, #184]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bec:	e003      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bf2:	f001 b902 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bf6:	f001 b900 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008bfa:	4b28      	ldr	r3, [pc, #160]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c00:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c0c:	f7fc f99a 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008c10:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c12:	f001 b8f2 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c1c:	d108      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fc32 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c2c:	f001 b8e5 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008c30:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d10d      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008c42:	d109      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c44:	4b15      	ldr	r3, [pc, #84]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	08db      	lsrs	r3, r3, #3
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	4a14      	ldr	r2, [pc, #80]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008c50:	fa22 f303 	lsr.w	r3, r2, r3
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c56:	e011      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008c58:	4b10      	ldr	r3, [pc, #64]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c64:	d106      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008c6c:	d102      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c72:	e003      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c78:	f001 b8bf 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c7c:	f001 b8bd 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008c80:	4b06      	ldr	r3, [pc, #24]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c86:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008c8a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10c      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008c92:	f7fc f983 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 8008c96:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c98:	f001 b8af 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c9c:	44020c00 	.word	0x44020c00
 8008ca0:	03d09000 	.word	0x03d09000
 8008ca4:	003d0900 	.word	0x003d0900
 8008ca8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cb2:	d108      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cb4:	f107 0308 	add.w	r3, r7, #8
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fe fbe7 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc2:	f001 b89a 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d10d      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cd8:	d109      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cda:	4b9a      	ldr	r3, [pc, #616]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	4a98      	ldr	r2, [pc, #608]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cec:	e011      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008cee:	4b95      	ldr	r3, [pc, #596]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cfa:	d106      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d02:	d102      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008d04:	4b91      	ldr	r3, [pc, #580]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d08:	e003      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d0e:	f001 b874 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d12:	f001 b872 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008d16:	4b8b      	ldr	r3, [pc, #556]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d1c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008d20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008d28:	f7fc f938 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 8008d2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d2e:	f001 b864 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d38:	d108      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3a:	f107 0308 	add.w	r3, r7, #8
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fba4 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d48:	f001 b857 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008d4c:	4b7d      	ldr	r3, [pc, #500]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d10d      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d5e:	d109      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d60:	4b78      	ldr	r3, [pc, #480]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	08db      	lsrs	r3, r3, #3
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	4a77      	ldr	r2, [pc, #476]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d72:	e011      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008d74:	4b73      	ldr	r3, [pc, #460]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d80:	d106      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008d88:	d102      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008d8a:	4b70      	ldr	r3, [pc, #448]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8e:	e003      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d94:	f001 b831 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d98:	f001 b82f 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008d9c:	4b69      	ldr	r3, [pc, #420]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008da2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008da6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d104      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dae:	f7fc f8c9 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008db2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008db4:	f001 b821 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dbe:	d108      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dc0:	f107 0308 	add.w	r3, r7, #8
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fe fb61 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dce:	f001 b814 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d10e      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008de4:	d10a      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008de6:	4b57      	ldr	r3, [pc, #348]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	08db      	lsrs	r3, r3, #3
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	4a55      	ldr	r2, [pc, #340]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008df2:	fa22 f303 	lsr.w	r3, r2, r3
 8008df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008df8:	f000 bfff 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e00:	f000 bffb 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e04:	4b4f      	ldr	r3, [pc, #316]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e0a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008e16:	d056      	beq.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008e1e:	f200 808b 	bhi.w	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e28:	d03e      	beq.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e30:	f200 8082 	bhi.w	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e3a:	d027      	beq.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e42:	d879      	bhi.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4a:	d017      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e52:	d871      	bhi.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e60:	d004      	beq.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008e62:	e069      	b.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008e64:	f7fc f89a 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 8008e68:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008e6a:	e068      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e6c:	f107 0314 	add.w	r3, r7, #20
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe f99f 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e7a:	e060      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe fb03 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e8a:	e058      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d103      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ea0:	e04d      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ea6:	e04a      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008ea8:	4b26      	ldr	r3, [pc, #152]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eb6:	d103      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008eb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ebe:	e03e      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ec4:	e03b      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ecc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d10c      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ee4:	4b17      	ldr	r3, [pc, #92]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	08db      	lsrs	r3, r3, #3
 8008eea:	f003 0303 	and.w	r3, r3, #3
 8008eee:	4a16      	ldr	r2, [pc, #88]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef6:	e01e      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ef8:	4b12      	ldr	r3, [pc, #72]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f04:	d106      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0c:	d102      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f12:	e010      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f14:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f20:	d106      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f28:	d102      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f2a:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f2e:	e002      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f34:	e003      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008f36:	e002      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f3c:	bf00      	nop
          }
        }
        break;
 8008f3e:	f000 bf5c 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f42:	bf00      	nop
 8008f44:	44020c00 	.word	0x44020c00
 8008f48:	03d09000 	.word	0x03d09000
 8008f4c:	003d0900 	.word	0x003d0900
 8008f50:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008f54:	4b9e      	ldr	r3, [pc, #632]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008f5a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008f66:	d056      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008f6e:	f200 808b 	bhi.w	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f78:	d03e      	beq.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f80:	f200 8082 	bhi.w	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f8a:	d027      	beq.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f92:	d879      	bhi.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f9a:	d017      	beq.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa2:	d871      	bhi.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb0:	d004      	beq.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008fb2:	e069      	b.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008fb4:	f7fb ffc6 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008fb8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008fba:	e068      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fbc:	f107 0314 	add.w	r3, r7, #20
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe f8f7 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fca:	e060      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe fa5b 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fda:	e058      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d103      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ff0:	e04d      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ff6:	e04a      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008ff8:	4b75      	ldr	r3, [pc, #468]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009006:	d103      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009008:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800900c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800900e:	e03e      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009014:	e03b      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009016:	4b6e      	ldr	r3, [pc, #440]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800901c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009020:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009022:	4b6b      	ldr	r3, [pc, #428]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b02      	cmp	r3, #2
 800902c:	d10c      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009034:	4b66      	ldr	r3, [pc, #408]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	08db      	lsrs	r3, r3, #3
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	4a65      	ldr	r2, [pc, #404]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
 8009046:	e01e      	b.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009048:	4b61      	ldr	r3, [pc, #388]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009054:	d106      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8009056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800905c:	d102      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800905e:	4b5e      	ldr	r3, [pc, #376]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
 8009062:	e010      	b.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009064:	4b5a      	ldr	r3, [pc, #360]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800906c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009070:	d106      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009078:	d102      	bne.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800907a:	4b58      	ldr	r3, [pc, #352]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
 800907e:	e002      	b.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009084:	e003      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009086:	e002      	b.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800908c:	bf00      	nop
          }
        }
        break;
 800908e:	f000 beb4 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009092:	4b4f      	ldr	r3, [pc, #316]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009094:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009098:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800909c:	633b      	str	r3, [r7, #48]	@ 0x30
 800909e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090a4:	d056      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090ac:	f200 808b 	bhi.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090b6:	d03e      	beq.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090be:	f200 8082 	bhi.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090c8:	d027      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090d0:	d879      	bhi.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090d8:	d017      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090e0:	d871      	bhi.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d004      	beq.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ee:	d004      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80090f0:	e069      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80090f2:	f7fb ff53 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 80090f6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80090f8:	e068      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fa:	f107 0314 	add.w	r3, r7, #20
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe f858 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009108:	e060      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800910a:	f107 0308 	add.w	r3, r7, #8
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe f9bc 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009118:	e058      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800911a:	4b2d      	ldr	r3, [pc, #180]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800911c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b02      	cmp	r3, #2
 8009126:	d103      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800912c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800912e:	e04d      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009134:	e04a      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009136:	4b26      	ldr	r3, [pc, #152]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800913c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009140:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009144:	d103      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009146:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800914a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800914c:	e03e      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009152:	e03b      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009154:	4b1e      	ldr	r3, [pc, #120]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800915a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800915e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009160:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b02      	cmp	r3, #2
 800916a:	d10c      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800916c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d109      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009172:	4b17      	ldr	r3, [pc, #92]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	08db      	lsrs	r3, r3, #3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	4a15      	ldr	r2, [pc, #84]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800917e:	fa22 f303 	lsr.w	r3, r2, r3
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
 8009184:	e01e      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009186:	4b12      	ldr	r3, [pc, #72]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800918e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009192:	d106      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800919a:	d102      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800919c:	4b0e      	ldr	r3, [pc, #56]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a0:	e010      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091a2:	4b0b      	ldr	r3, [pc, #44]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ae:	d106      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80091b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091b6:	d102      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80091b8:	4b08      	ldr	r3, [pc, #32]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80091ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80091bc:	e002      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80091c2:	e003      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80091c4:	e002      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ca:	bf00      	nop
          }
        }
        break;
 80091cc:	f000 be15 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091d0:	44020c00 	.word	0x44020c00
 80091d4:	03d09000 	.word	0x03d09000
 80091d8:	003d0900 	.word	0x003d0900
 80091dc:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80091e0:	4b9e      	ldr	r3, [pc, #632]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80091e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80091e6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80091ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80091ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ee:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80091f2:	d056      	beq.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80091fa:	f200 808b 	bhi.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009204:	d03e      	beq.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800920c:	f200 8082 	bhi.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009216:	d027      	beq.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800921e:	d879      	bhi.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009226:	d017      	beq.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800922e:	d871      	bhi.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800923c:	d004      	beq.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800923e:	e069      	b.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009240:	f7fb feac 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 8009244:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009246:	e068      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009248:	f107 0314 	add.w	r3, r7, #20
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd ffb1 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009256:	e060      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009258:	f107 0308 	add.w	r3, r7, #8
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe f915 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009266:	e058      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009268:	4b7c      	ldr	r3, [pc, #496]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800926a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b02      	cmp	r3, #2
 8009274:	d103      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800927c:	e04d      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009282:	e04a      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009284:	4b75      	ldr	r3, [pc, #468]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800928a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800928e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009292:	d103      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009294:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009298:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800929a:	e03e      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092a0:	e03b      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092a2:	4b6e      	ldr	r3, [pc, #440]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092ae:	4b6b      	ldr	r3, [pc, #428]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d10c      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092c0:	4b66      	ldr	r3, [pc, #408]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	08db      	lsrs	r3, r3, #3
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	4a65      	ldr	r2, [pc, #404]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d2:	e01e      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092d4:	4b61      	ldr	r3, [pc, #388]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092e0:	d106      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80092e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e8:	d102      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80092ea:	4b5e      	ldr	r3, [pc, #376]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80092ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ee:	e010      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092f0:	4b5a      	ldr	r3, [pc, #360]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092fc:	d106      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80092fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009304:	d102      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009306:	4b58      	ldr	r3, [pc, #352]	@ (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
 800930a:	e002      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009310:	e003      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009312:	e002      	b.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009318:	bf00      	nop
          }
        }
        break;
 800931a:	f000 bd6e 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800931e:	4b4f      	ldr	r3, [pc, #316]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009320:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009324:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009328:	633b      	str	r3, [r7, #48]	@ 0x30
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009330:	d056      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009338:	f200 808b 	bhi.w	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009342:	d03e      	beq.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800934a:	f200 8082 	bhi.w	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009354:	d027      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800935c:	d879      	bhi.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009364:	d017      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800936c:	d871      	bhi.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800937a:	d004      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800937c:	e069      	b.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800937e:	f7fb fe0d 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 8009382:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009384:	e068      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009386:	f107 0314 	add.w	r3, r7, #20
 800938a:	4618      	mov	r0, r3
 800938c:	f7fd ff12 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009394:	e060      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009396:	f107 0308 	add.w	r3, r7, #8
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe f876 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093a4:	e058      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093a6:	4b2d      	ldr	r3, [pc, #180]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d103      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80093b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80093ba:	e04d      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093c0:	e04a      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80093c2:	4b26      	ldr	r3, [pc, #152]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d0:	d103      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80093d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80093d8:	e03e      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093de:	e03b      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093e0:	4b1e      	ldr	r3, [pc, #120]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80093ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093ec:	4b1b      	ldr	r3, [pc, #108]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d10c      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093fe:	4b17      	ldr	r3, [pc, #92]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	08db      	lsrs	r3, r3, #3
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	4a15      	ldr	r2, [pc, #84]	@ (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800940a:	fa22 f303 	lsr.w	r3, r2, r3
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009410:	e01e      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009412:	4b12      	ldr	r3, [pc, #72]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800941a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800941e:	d106      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009426:	d102      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009428:	4b0e      	ldr	r3, [pc, #56]	@ (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800942a:	637b      	str	r3, [r7, #52]	@ 0x34
 800942c:	e010      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800942e:	4b0b      	ldr	r3, [pc, #44]	@ (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800943a:	d106      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800943c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009442:	d102      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009444:	4b08      	ldr	r3, [pc, #32]	@ (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800944e:	e003      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009450:	e002      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009456:	bf00      	nop
          }
        }
        break;
 8009458:	f000 bccf 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800945c:	44020c00 	.word	0x44020c00
 8009460:	03d09000 	.word	0x03d09000
 8009464:	003d0900 	.word	0x003d0900
 8009468:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800946c:	4b9e      	ldr	r3, [pc, #632]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800946e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009472:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009476:	633b      	str	r3, [r7, #48]	@ 0x30
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800947e:	d056      	beq.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009486:	f200 808b 	bhi.w	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009490:	d03e      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009498:	f200 8082 	bhi.w	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094a2:	d027      	beq.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094aa:	d879      	bhi.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80094ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b2:	d017      	beq.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ba:	d871      	bhi.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094c8:	d004      	beq.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80094ca:	e069      	b.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80094cc:	f7fb fd66 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 80094d0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80094d2:	e068      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fd fe6b 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094e2:	e060      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fd ffcf 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094f2:	e058      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80094f4:	4b7c      	ldr	r3, [pc, #496]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d103      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009508:	e04d      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800950e:	e04a      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009510:	4b75      	ldr	r3, [pc, #468]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800951a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800951e:	d103      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009520:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009526:	e03e      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800952c:	e03b      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800952e:	4b6e      	ldr	r3, [pc, #440]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009534:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009538:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800953a:	4b6b      	ldr	r3, [pc, #428]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b02      	cmp	r3, #2
 8009544:	d10c      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d109      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800954c:	4b66      	ldr	r3, [pc, #408]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	08db      	lsrs	r3, r3, #3
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	4a65      	ldr	r2, [pc, #404]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
 800955c:	637b      	str	r3, [r7, #52]	@ 0x34
 800955e:	e01e      	b.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009560:	4b61      	ldr	r3, [pc, #388]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800956c:	d106      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009574:	d102      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009576:	4b5e      	ldr	r3, [pc, #376]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009578:	637b      	str	r3, [r7, #52]	@ 0x34
 800957a:	e010      	b.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800957c:	4b5a      	ldr	r3, [pc, #360]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009588:	d106      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009590:	d102      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009592:	4b58      	ldr	r3, [pc, #352]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
 8009596:	e002      	b.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800959c:	e003      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800959e:	e002      	b.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095a4:	bf00      	nop
          }
        }
        break;
 80095a6:	f000 bc28 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80095aa:	4b4f      	ldr	r3, [pc, #316]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80095b6:	4b4c      	ldr	r3, [pc, #304]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095c2:	d106      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80095ca:	4b4a      	ldr	r3, [pc, #296]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80095cc:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80095ce:	f000 bc14 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d8:	d108      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095da:	f107 0320 	add.w	r3, r7, #32
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fc7c 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095e8:	f000 bc07 	b.w	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f2:	d107      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095f4:	f107 0314 	add.w	r3, r7, #20
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fd fddb 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009602:	e3fa      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009608:	e3f7      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800960a:	4b37      	ldr	r3, [pc, #220]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800960c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	633b      	str	r3, [r7, #48]	@ 0x30
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	2b04      	cmp	r3, #4
 800961a:	d861      	bhi.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800961c:	a201      	add	r2, pc, #4	@ (adr r2, 8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009639 	.word	0x08009639
 8009628:	08009649 	.word	0x08009649
 800962c:	08009659 	.word	0x08009659
 8009630:	08009669 	.word	0x08009669
 8009634:	0800966f 	.word	0x0800966f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009638:	f107 0320 	add.w	r3, r7, #32
 800963c:	4618      	mov	r0, r3
 800963e:	f7fd fc4d 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009646:	e04e      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009648:	f107 0314 	add.w	r3, r7, #20
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd fdb1 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009656:	e046      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4618      	mov	r0, r3
 800965e:	f7fd ff15 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009666:	e03e      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009668:	4b23      	ldr	r3, [pc, #140]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800966a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800966c:	e03b      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800966e:	4b1e      	ldr	r3, [pc, #120]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009674:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009678:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800967a:	4b1b      	ldr	r3, [pc, #108]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b02      	cmp	r3, #2
 8009684:	d10c      	bne.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009688:	2b00      	cmp	r3, #0
 800968a:	d109      	bne.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800968c:	4b16      	ldr	r3, [pc, #88]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	08db      	lsrs	r3, r3, #3
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	4a15      	ldr	r2, [pc, #84]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
 800969c:	637b      	str	r3, [r7, #52]	@ 0x34
 800969e:	e01e      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096a0:	4b11      	ldr	r3, [pc, #68]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ac:	d106      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80096ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b4:	d102      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80096b6:	4b0e      	ldr	r3, [pc, #56]	@ (80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ba:	e010      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096bc:	4b0a      	ldr	r3, [pc, #40]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096c8:	d106      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096d0:	d102      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80096d2:	4b08      	ldr	r3, [pc, #32]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d6:	e002      	b.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80096dc:	e003      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80096de:	e002      	b.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096e4:	bf00      	nop
          }
        }
        break;
 80096e6:	e388      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096e8:	44020c00 	.word	0x44020c00
 80096ec:	03d09000 	.word	0x03d09000
 80096f0:	003d0900 	.word	0x003d0900
 80096f4:	007a1200 	.word	0x007a1200
 80096f8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80096fc:	4ba9      	ldr	r3, [pc, #676]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80096fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009706:	633b      	str	r3, [r7, #48]	@ 0x30
 8009708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970a:	2b20      	cmp	r3, #32
 800970c:	f200 809a 	bhi.w	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	0800979d 	.word	0x0800979d
 800971c:	08009845 	.word	0x08009845
 8009720:	08009845 	.word	0x08009845
 8009724:	08009845 	.word	0x08009845
 8009728:	08009845 	.word	0x08009845
 800972c:	08009845 	.word	0x08009845
 8009730:	08009845 	.word	0x08009845
 8009734:	08009845 	.word	0x08009845
 8009738:	080097ad 	.word	0x080097ad
 800973c:	08009845 	.word	0x08009845
 8009740:	08009845 	.word	0x08009845
 8009744:	08009845 	.word	0x08009845
 8009748:	08009845 	.word	0x08009845
 800974c:	08009845 	.word	0x08009845
 8009750:	08009845 	.word	0x08009845
 8009754:	08009845 	.word	0x08009845
 8009758:	080097bd 	.word	0x080097bd
 800975c:	08009845 	.word	0x08009845
 8009760:	08009845 	.word	0x08009845
 8009764:	08009845 	.word	0x08009845
 8009768:	08009845 	.word	0x08009845
 800976c:	08009845 	.word	0x08009845
 8009770:	08009845 	.word	0x08009845
 8009774:	08009845 	.word	0x08009845
 8009778:	080097cd 	.word	0x080097cd
 800977c:	08009845 	.word	0x08009845
 8009780:	08009845 	.word	0x08009845
 8009784:	08009845 	.word	0x08009845
 8009788:	08009845 	.word	0x08009845
 800978c:	08009845 	.word	0x08009845
 8009790:	08009845 	.word	0x08009845
 8009794:	08009845 	.word	0x08009845
 8009798:	080097d3 	.word	0x080097d3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800979c:	f107 0320 	add.w	r3, r7, #32
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fd fb9b 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097aa:	e04e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ac:	f107 0314 	add.w	r3, r7, #20
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd fcff 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ba:	e046      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097bc:	f107 0308 	add.w	r3, r7, #8
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd fe63 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ca:	e03e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80097cc:	4b76      	ldr	r3, [pc, #472]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80097ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097d0:	e03b      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097d2:	4b74      	ldr	r3, [pc, #464]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097de:	4b71      	ldr	r3, [pc, #452]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d10c      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80097ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d109      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097f0:	4b6c      	ldr	r3, [pc, #432]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	08db      	lsrs	r3, r3, #3
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	4a6c      	ldr	r2, [pc, #432]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80097fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009800:	637b      	str	r3, [r7, #52]	@ 0x34
 8009802:	e01e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009804:	4b67      	ldr	r3, [pc, #412]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800980c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009810:	d106      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009818:	d102      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800981a:	4b65      	ldr	r3, [pc, #404]	@ (80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
 800981e:	e010      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009820:	4b60      	ldr	r3, [pc, #384]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800982c:	d106      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009834:	d102      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009836:	4b5f      	ldr	r3, [pc, #380]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34
 800983a:	e002      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009840:	e003      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009842:	e002      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009848:	bf00      	nop
          }
        }
        break;
 800984a:	e2d6      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800984c:	4b55      	ldr	r3, [pc, #340]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800984e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009852:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009856:	633b      	str	r3, [r7, #48]	@ 0x30
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800985e:	d031      	beq.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009866:	d866      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	2bc0      	cmp	r3, #192	@ 0xc0
 800986c:	d027      	beq.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	2bc0      	cmp	r3, #192	@ 0xc0
 8009872:	d860      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	2b80      	cmp	r3, #128	@ 0x80
 8009878:	d019      	beq.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2b80      	cmp	r3, #128	@ 0x80
 800987e:	d85a      	bhi.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009888:	2b40      	cmp	r3, #64	@ 0x40
 800988a:	d008      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800988c:	e053      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800988e:	f107 0320 	add.w	r3, r7, #32
 8009892:	4618      	mov	r0, r3
 8009894:	f7fd fb22 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800989c:	e04e      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800989e:	f107 0314 	add.w	r3, r7, #20
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd fc86 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098ac:	e046      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fd fdea 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098bc:	e03e      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80098be:	4b3a      	ldr	r3, [pc, #232]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80098c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098c2:	e03b      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098c4:	4b37      	ldr	r3, [pc, #220]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098ca:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80098ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098d0:	4b34      	ldr	r3, [pc, #208]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0302 	and.w	r3, r3, #2
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d10c      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80098dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098e2:	4b30      	ldr	r3, [pc, #192]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	08db      	lsrs	r3, r3, #3
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	4a2f      	ldr	r2, [pc, #188]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80098ee:	fa22 f303 	lsr.w	r3, r2, r3
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	e01e      	b.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098f6:	4b2b      	ldr	r3, [pc, #172]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009902:	d106      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990a:	d102      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800990c:	4b28      	ldr	r3, [pc, #160]	@ (80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009910:	e010      	b.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009912:	4b24      	ldr	r3, [pc, #144]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800991a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800991e:	d106      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009926:	d102      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009928:	4b22      	ldr	r3, [pc, #136]	@ (80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800992a:	637b      	str	r3, [r7, #52]	@ 0x34
 800992c:	e002      	b.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009932:	e003      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009934:	e002      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800993a:	bf00      	nop
          }
        }
        break;
 800993c:	e25d      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800993e:	4b19      	ldr	r3, [pc, #100]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009944:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009948:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	2b00      	cmp	r3, #0
 800994e:	d103      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009950:	f7fb fb0e 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8009954:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009956:	e250      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009958:	4b12      	ldr	r3, [pc, #72]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009964:	d10b      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996c:	d107      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800996e:	f107 0314 	add.w	r3, r7, #20
 8009972:	4618      	mov	r0, r3
 8009974:	f7fd fc1e 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	637b      	str	r3, [r7, #52]	@ 0x34
 800997c:	e04f      	b.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800997e:	4b09      	ldr	r3, [pc, #36]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800998a:	d115      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009992:	d111      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	4618      	mov	r0, r3
 800999a:	f7fd fd77 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a2:	e03c      	b.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80099a4:	44020c00 	.word	0x44020c00
 80099a8:	00bb8000 	.word	0x00bb8000
 80099ac:	03d09000 	.word	0x03d09000
 80099b0:	003d0900 	.word	0x003d0900
 80099b4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80099b8:	4b94      	ldr	r3, [pc, #592]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d10d      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80099ca:	d109      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099cc:	4b8f      	ldr	r3, [pc, #572]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	08db      	lsrs	r3, r3, #3
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	4a8e      	ldr	r2, [pc, #568]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80099d8:	fa22 f303 	lsr.w	r3, r2, r3
 80099dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099de:	e01e      	b.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80099e0:	4b8a      	ldr	r3, [pc, #552]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ec:	d106      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f4:	d102      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80099f6:	4b87      	ldr	r3, [pc, #540]	@ (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80099f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fa:	e010      	b.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80099fc:	4b83      	ldr	r3, [pc, #524]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a08:	d106      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009a10:	d102      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009a12:	4b81      	ldr	r3, [pc, #516]	@ (8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a16:	e002      	b.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a1c:	e1ed      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a1e:	e1ec      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009a20:	4b7a      	ldr	r3, [pc, #488]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009a2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d103      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009a32:	f7fb fab3 	bl	8004f9c <HAL_RCC_GetPCLK3Freq>
 8009a36:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009a38:	e1df      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009a3a:	4b74      	ldr	r3, [pc, #464]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a46:	d10b      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a4e:	d107      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a50:	f107 0314 	add.w	r3, r7, #20
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fd fbad 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5e:	e045      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009a60:	4b6a      	ldr	r3, [pc, #424]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a6c:	d10b      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a74:	d107      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fd fd06 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a84:	e032      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009a86:	4b61      	ldr	r3, [pc, #388]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d10d      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a98:	d109      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aac:	e01e      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009aae:	4b57      	ldr	r3, [pc, #348]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aba:	d106      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac2:	d102      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009ac4:	4b53      	ldr	r3, [pc, #332]	@ (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac8:	e010      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009aca:	4b50      	ldr	r3, [pc, #320]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ad6:	d106      	bne.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009ade:	d102      	bne.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae4:	e002      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aea:	e186      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009aec:	e185      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009aee:	4b47      	ldr	r3, [pc, #284]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009af4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009af8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d103      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fb fa36 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8009b04:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009b06:	e178      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009b08:	4b40      	ldr	r3, [pc, #256]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b14:	d10b      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b1c:	d107      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1e:	f107 0314 	add.w	r3, r7, #20
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fd fb46 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2c:	e045      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009b2e:	4b37      	ldr	r3, [pc, #220]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b3a:	d10b      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b42:	d107      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b44:	f107 0308 	add.w	r3, r7, #8
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fd fc9f 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b52:	e032      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009b54:	4b2d      	ldr	r3, [pc, #180]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d10d      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b62:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009b66:	d109      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b68:	4b28      	ldr	r3, [pc, #160]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	08db      	lsrs	r3, r3, #3
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	4a27      	ldr	r2, [pc, #156]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009b74:	fa22 f303 	lsr.w	r3, r2, r3
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7a:	e01e      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009b7c:	4b23      	ldr	r3, [pc, #140]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b88:	d106      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b90:	d102      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009b92:	4b20      	ldr	r3, [pc, #128]	@ (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b96:	e010      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009b98:	4b1c      	ldr	r3, [pc, #112]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ba4:	d106      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009bac:	d102      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009bae:	4b1a      	ldr	r3, [pc, #104]	@ (8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb2:	e002      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb8:	e11f      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bba:	e11e      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009bbc:	4b13      	ldr	r3, [pc, #76]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d85f      	bhi.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009bce:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009bed 	.word	0x08009bed
 8009bdc:	08009bfd 	.word	0x08009bfd
 8009be0:	08009c1d 	.word	0x08009c1d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009be4:	f7fb f992 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8009be8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009bea:	e053      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bec:	f107 0320 	add.w	r3, r7, #32
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fd f973 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bfa:	e04b      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fd fad7 	bl	80071b4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c0a:	e043      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009c0c:	44020c00 	.word	0x44020c00
 8009c10:	03d09000 	.word	0x03d09000
 8009c14:	003d0900 	.word	0x003d0900
 8009c18:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c1c:	4b79      	ldr	r3, [pc, #484]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c22:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c28:	4b76      	ldr	r3, [pc, #472]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d10c      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c3a:	4b72      	ldr	r3, [pc, #456]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	08db      	lsrs	r3, r3, #3
 8009c40:	f003 0303 	and.w	r3, r3, #3
 8009c44:	4a70      	ldr	r2, [pc, #448]	@ (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009c46:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4c:	e01e      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c5a:	d106      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c62:	d102      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c64:	4b69      	ldr	r3, [pc, #420]	@ (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c68:	e010      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c6a:	4b66      	ldr	r3, [pc, #408]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c76:	d106      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c7e:	d102      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c80:	4b63      	ldr	r3, [pc, #396]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c84:	e002      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c8a:	e003      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009c8c:	e002      	b.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c92:	bf00      	nop
          }
        }
        break;
 8009c94:	e0b1      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009c96:	4b5b      	ldr	r3, [pc, #364]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c9c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ca0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009ca2:	4b58      	ldr	r3, [pc, #352]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d106      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d103      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cbc:	e01f      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009cbe:	4b51      	ldr	r3, [pc, #324]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ccc:	d106      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd0:	2b40      	cmp	r3, #64	@ 0x40
 8009cd2:	d103      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009cd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cda:	e010      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009cdc:	4b49      	ldr	r3, [pc, #292]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ce8:	d106      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	2b80      	cmp	r3, #128	@ 0x80
 8009cee:	d103      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009cf0:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf6:	e002      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009cfc:	e07d      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cfe:	e07c      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009d00:	4b40      	ldr	r3, [pc, #256]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d18:	d105      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d102      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009d20:	4b3c      	ldr	r3, [pc, #240]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d24:	e031      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009d26:	4b37      	ldr	r3, [pc, #220]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d32:	d10a      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	2b10      	cmp	r3, #16
 8009d38:	d107      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d3a:	f107 0320 	add.w	r3, r7, #32
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fd f8cc 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d48:	e01f      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d106      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	d103      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d64:	e011      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009d66:	4b27      	ldr	r3, [pc, #156]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d74:	d106      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	2b30      	cmp	r3, #48	@ 0x30
 8009d7a:	d103      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009d7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d82:	e002      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009d88:	e037      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d8a:	e036      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	2b10      	cmp	r3, #16
 8009d9c:	d107      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d9e:	f107 0320 	add.w	r3, r7, #32
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fd f89a 	bl	8006edc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009dac:	e025      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009dae:	4b15      	ldr	r3, [pc, #84]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dba:	d10a      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d107      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fd fb60 	bl	800748c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd0:	e00f      	b.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dde:	d105      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	2b30      	cmp	r3, #48	@ 0x30
 8009de4:	d102      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009de6:	4b0b      	ldr	r3, [pc, #44]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dea:	e002      	b.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009df2:	e002      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009df8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	373c      	adds	r7, #60	@ 0x3c
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd90      	pop	{r4, r7, pc}
 8009e04:	44020c00 	.word	0x44020c00
 8009e08:	03d09000 	.word	0x03d09000
 8009e0c:	003d0900 	.word	0x003d0900
 8009e10:	007a1200 	.word	0x007a1200
 8009e14:	02dc6c00 	.word	0x02dc6c00

08009e18 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009e20:	4b48      	ldr	r3, [pc, #288]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a47      	ldr	r2, [pc, #284]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009e26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e2a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e2c:	f7f7 ff18 	bl	8001c60 <HAL_GetTick>
 8009e30:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e32:	e008      	b.n	8009e46 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e34:	f7f7 ff14 	bl	8001c60 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d901      	bls.n	8009e46 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e07a      	b.n	8009f3c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e46:	4b3f      	ldr	r3, [pc, #252]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f0      	bne.n	8009e34 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009e52:	4b3c      	ldr	r3, [pc, #240]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6811      	ldr	r1, [r2, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6852      	ldr	r2, [r2, #4]
 8009e66:	0212      	lsls	r2, r2, #8
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	4936      	ldr	r1, [pc, #216]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	025b      	lsls	r3, r3, #9
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	431a      	orrs	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	061b      	lsls	r3, r3, #24
 8009e9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ea0:	4928      	ldr	r1, [pc, #160]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009ea6:	4b27      	ldr	r3, [pc, #156]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eaa:	f023 020c 	bic.w	r2, r3, #12
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	4924      	ldr	r1, [pc, #144]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009eb8:	4b22      	ldr	r3, [pc, #136]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ebc:	f023 0220 	bic.w	r2, r3, #32
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	491f      	ldr	r1, [pc, #124]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009eca:	4b1e      	ldr	r3, [pc, #120]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	491c      	ldr	r1, [pc, #112]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009edc:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ede:	f023 0310 	bic.w	r3, r3, #16
 8009ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009ee4:	4b17      	ldr	r3, [pc, #92]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009eec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	6a12      	ldr	r2, [r2, #32]
 8009ef4:	00d2      	lsls	r2, r2, #3
 8009ef6:	4913      	ldr	r1, [pc, #76]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009efc:	4b11      	ldr	r3, [pc, #68]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f00:	4a10      	ldr	r2, [pc, #64]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009f02:	f043 0310 	orr.w	r3, r3, #16
 8009f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009f08:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009f0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f14:	f7f7 fea4 	bl	8001c60 <HAL_GetTick>
 8009f18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f1a:	e008      	b.n	8009f2e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f1c:	f7f7 fea0 	bl	8001c60 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d901      	bls.n	8009f2e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e006      	b.n	8009f3c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f2e:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <RCCEx_PLL2_Config+0x12c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0f0      	beq.n	8009f1c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0

}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	44020c00 	.word	0x44020c00

08009f48 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009f50:	4b48      	ldr	r3, [pc, #288]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a47      	ldr	r2, [pc, #284]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f5a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f5c:	f7f7 fe80 	bl	8001c60 <HAL_GetTick>
 8009f60:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f62:	e008      	b.n	8009f76 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f64:	f7f7 fe7c 	bl	8001c60 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e07a      	b.n	800a06c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f76:	4b3f      	ldr	r3, [pc, #252]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f0      	bne.n	8009f64 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009f82:	4b3c      	ldr	r3, [pc, #240]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f86:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009f8a:	f023 0303 	bic.w	r3, r3, #3
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	6811      	ldr	r1, [r2, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6852      	ldr	r2, [r2, #4]
 8009f96:	0212      	lsls	r2, r2, #8
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	4936      	ldr	r1, [pc, #216]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	630b      	str	r3, [r1, #48]	@ 0x30
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	025b      	lsls	r3, r3, #9
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	041b      	lsls	r3, r3, #16
 8009fbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009fc2:	431a      	orrs	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	061b      	lsls	r3, r3, #24
 8009fcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009fd0:	4928      	ldr	r1, [pc, #160]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fd6:	4b27      	ldr	r3, [pc, #156]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fda:	f023 020c 	bic.w	r2, r3, #12
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	4924      	ldr	r1, [pc, #144]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009fe8:	4b22      	ldr	r3, [pc, #136]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fec:	f023 0220 	bic.w	r2, r3, #32
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	491f      	ldr	r1, [pc, #124]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009ffa:	4b1e      	ldr	r3, [pc, #120]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 8009ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a002:	491c      	ldr	r1, [pc, #112]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a004:	4313      	orrs	r3, r2
 800a006:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a008:	4b1a      	ldr	r3, [pc, #104]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00c:	4a19      	ldr	r2, [pc, #100]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a014:	4b17      	ldr	r3, [pc, #92]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a018:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a01c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6a12      	ldr	r2, [r2, #32]
 800a024:	00d2      	lsls	r2, r2, #3
 800a026:	4913      	ldr	r1, [pc, #76]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a02c:	4b11      	ldr	r3, [pc, #68]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a030:	4a10      	ldr	r2, [pc, #64]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a032:	f043 0310 	orr.w	r3, r3, #16
 800a036:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a038:	4b0e      	ldr	r3, [pc, #56]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a0d      	ldr	r2, [pc, #52]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a03e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a042:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a044:	f7f7 fe0c 	bl	8001c60 <HAL_GetTick>
 800a048:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a04a:	e008      	b.n	800a05e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a04c:	f7f7 fe08 	bl	8001c60 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e006      	b.n	800a06c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a05e:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <RCCEx_PLL3_Config+0x12c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0f0      	beq.n	800a04c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	44020c00 	.word	0x44020c00

0800a078 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e08c      	b.n	800a1a4 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	7a5b      	ldrb	r3, [r3, #9]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d105      	bne.n	800a0a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f6 ff4e 	bl	8000f3c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0204 	bic.w	r2, r2, #4
 800a0b4:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6859      	ldr	r1, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	4b3b      	ldr	r3, [pc, #236]	@ (800a1ac <HAL_RNG_Init+0x134>)
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a0cc:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a37      	ldr	r2, [pc, #220]	@ (800a1b0 <HAL_RNG_Init+0x138>)
 800a0d4:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a0e4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a0e6:	f7f7 fdbb 	bl	8001c60 <HAL_GetTick>
 800a0ea:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a0ec:	e016      	b.n	800a11c <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a0ee:	f7f7 fdb7 	bl	8001c60 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d90f      	bls.n	800a11c <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10a:	d107      	bne.n	800a11c <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2202      	movs	r2, #2
 800a116:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e043      	b.n	800a1a4 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12a:	d0e0      	beq.n	800a0ee <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0204 	orr.w	r2, r2, #4
 800a13a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a146:	2b40      	cmp	r3, #64	@ 0x40
 800a148:	d104      	bne.n	800a154 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2204      	movs	r2, #4
 800a14e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e027      	b.n	800a1a4 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a154:	f7f7 fd84 	bl	8001c60 <HAL_GetTick>
 800a158:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a15a:	e015      	b.n	800a188 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a15c:	f7f7 fd80 	bl	8001c60 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b04      	cmp	r3, #4
 800a168:	d90e      	bls.n	800a188 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b01      	cmp	r3, #1
 800a176:	d007      	beq.n	800a188 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2204      	movs	r2, #4
 800a17c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2202      	movs	r2, #2
 800a182:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e00d      	b.n	800a1a4 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b01      	cmp	r3, #1
 800a194:	d1e2      	bne.n	800a15c <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	40f00e00 	.word	0x40f00e00
 800a1b0:	0003af66 	.word	0x0003af66

0800a1b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d071      	beq.n	800a2aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7f6 ff06 	bl	8000fec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a1e8:	4b32      	ldr	r3, [pc, #200]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b10      	cmp	r3, #16
 800a1f2:	d051      	beq.n	800a298 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a1f6:	22ca      	movs	r2, #202	@ 0xca
 800a1f8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1fa:	4b2e      	ldr	r3, [pc, #184]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a1fc:	2253      	movs	r2, #83	@ 0x53
 800a1fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9a3 	bl	800a54c <RTC_EnterInitMode>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d13f      	bne.n	800a290 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a210:	4b28      	ldr	r3, [pc, #160]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	4a27      	ldr	r2, [pc, #156]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a216:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a21a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a21e:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a220:	4b24      	ldr	r3, [pc, #144]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a222:	699a      	ldr	r2, [r3, #24]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6859      	ldr	r1, [r3, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	4319      	orrs	r1, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	430b      	orrs	r3, r1
 800a234:	491f      	ldr	r1, [pc, #124]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a236:	4313      	orrs	r3, r2
 800a238:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	041b      	lsls	r3, r3, #16
 800a244:	491b      	ldr	r1, [pc, #108]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a246:	4313      	orrs	r3, r2
 800a248:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a24a:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25a:	430b      	orrs	r3, r1
 800a25c:	4915      	ldr	r1, [pc, #84]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f9ae 	bl	800a5c4 <RTC_ExitInitMode>
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10e      	bne.n	800a290 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a272:	4b10      	ldr	r3, [pc, #64]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a19      	ldr	r1, [r3, #32]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	4319      	orrs	r1, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	430b      	orrs	r3, r1
 800a28a:	490a      	ldr	r1, [pc, #40]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a290:	4b08      	ldr	r3, [pc, #32]	@ (800a2b4 <HAL_RTC_Init+0x100>)
 800a292:	22ff      	movs	r2, #255	@ 0xff
 800a294:	625a      	str	r2, [r3, #36]	@ 0x24
 800a296:	e001      	b.n	800a29c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d103      	bne.n	800a2aa <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	44007800 	.word	0x44007800

0800a2b8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a2b8:	b590      	push	{r4, r7, lr}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_RTC_SetTime+0x1a>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e07e      	b.n	800a3d0 <HAL_RTC_SetTime+0x118>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2e2:	4b3d      	ldr	r3, [pc, #244]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a2e4:	22ca      	movs	r2, #202	@ 0xca
 800a2e6:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a2ea:	2253      	movs	r2, #83	@ 0x53
 800a2ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 f92c 	bl	800a54c <RTC_EnterInitMode>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a2f8:	7cfb      	ldrb	r3, [r7, #19]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d159      	bne.n	800a3b2 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a2fe:	4b36      	ldr	r3, [pc, #216]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a30a:	d04d      	beq.n	800a3a8 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d125      	bne.n	800a35e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a312:	4b31      	ldr	r3, [pc, #196]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2200      	movs	r2, #0
 800a322:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f989 	bl	800a640 <RTC_ByteToBcd2>
 800a32e:	4603      	mov	r3, r0
 800a330:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f982 	bl	800a640 <RTC_ByteToBcd2>
 800a33c:	4603      	mov	r3, r0
 800a33e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a340:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	789b      	ldrb	r3, [r3, #2]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f97a 	bl	800a640 <RTC_ByteToBcd2>
 800a34c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a34e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	78db      	ldrb	r3, [r3, #3]
 800a356:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a358:	4313      	orrs	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e017      	b.n	800a38e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a35e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2200      	movs	r2, #0
 800a36e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a37c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a382:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	78db      	ldrb	r3, [r3, #3]
 800a388:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a38a:	4313      	orrs	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a38e:	4a12      	ldr	r2, [pc, #72]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a396:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a39a:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a39c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a3a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3a6:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f90b 	bl	800a5c4 <RTC_ExitInitMode>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b2:	4b09      	ldr	r3, [pc, #36]	@ (800a3d8 <HAL_RTC_SetTime+0x120>)
 800a3b4:	22ff      	movs	r2, #255	@ 0xff
 800a3b6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a3b8:	7cfb      	ldrb	r3, [r7, #19]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d103      	bne.n	800a3c6 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a3ce:	7cfb      	ldrb	r3, [r7, #19]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd90      	pop	{r4, r7, pc}
 800a3d8:	44007800 	.word	0x44007800

0800a3dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_RTC_SetDate+0x1a>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e071      	b.n	800a4da <HAL_RTC_SetDate+0xfe>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2202      	movs	r2, #2
 800a402:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10e      	bne.n	800a42a <HAL_RTC_SetDate+0x4e>
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	2b00      	cmp	r3, #0
 800a416:	d008      	beq.n	800a42a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	f023 0310 	bic.w	r3, r3, #16
 800a420:	b2db      	uxtb	r3, r3
 800a422:	330a      	adds	r3, #10
 800a424:	b2da      	uxtb	r2, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d11c      	bne.n	800a46a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	78db      	ldrb	r3, [r3, #3]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 f903 	bl	800a640 <RTC_ByteToBcd2>
 800a43a:	4603      	mov	r3, r0
 800a43c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	785b      	ldrb	r3, [r3, #1]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f8fc 	bl	800a640 <RTC_ByteToBcd2>
 800a448:	4603      	mov	r3, r0
 800a44a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a44c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	789b      	ldrb	r3, [r3, #2]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f8f4 	bl	800a640 <RTC_ByteToBcd2>
 800a458:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a45a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e00e      	b.n	800a488 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	78db      	ldrb	r3, [r3, #3]
 800a46e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	785b      	ldrb	r3, [r3, #1]
 800a474:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a476:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a47c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a484:	4313      	orrs	r3, r2
 800a486:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a488:	4b16      	ldr	r3, [pc, #88]	@ (800a4e4 <HAL_RTC_SetDate+0x108>)
 800a48a:	22ca      	movs	r2, #202	@ 0xca
 800a48c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a48e:	4b15      	ldr	r3, [pc, #84]	@ (800a4e4 <HAL_RTC_SetDate+0x108>)
 800a490:	2253      	movs	r2, #83	@ 0x53
 800a492:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f859 	bl	800a54c <RTC_EnterInitMode>
 800a49a:	4603      	mov	r3, r0
 800a49c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a49e:	7cfb      	ldrb	r3, [r7, #19]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10b      	bne.n	800a4bc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a4a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e4 <HAL_RTC_SetDate+0x108>)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a4ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a4b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 f886 	bl	800a5c4 <RTC_ExitInitMode>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4bc:	4b09      	ldr	r3, [pc, #36]	@ (800a4e4 <HAL_RTC_SetDate+0x108>)
 800a4be:	22ff      	movs	r2, #255	@ 0xff
 800a4c0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a4c2:	7cfb      	ldrb	r3, [r7, #19]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a4d8:	7cfb      	ldrb	r3, [r7, #19]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	371c      	adds	r7, #28
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd90      	pop	{r4, r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	44007800 	.word	0x44007800

0800a4e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a4f0:	4b15      	ldr	r3, [pc, #84]	@ (800a548 <HAL_RTC_WaitForSynchro+0x60>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	4a14      	ldr	r2, [pc, #80]	@ (800a548 <HAL_RTC_WaitForSynchro+0x60>)
 800a4f6:	f023 0320 	bic.w	r3, r3, #32
 800a4fa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a4fc:	f7f7 fbb0 	bl	8001c60 <HAL_GetTick>
 800a500:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a502:	e013      	b.n	800a52c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a504:	f7f7 fbac 	bl	8001c60 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a512:	d90b      	bls.n	800a52c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a514:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <HAL_RTC_WaitForSynchro+0x60>)
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f003 0320 	and.w	r3, r3, #32
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10c      	bne.n	800a53a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2203      	movs	r2, #3
 800a524:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e008      	b.n	800a53e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a52c:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <HAL_RTC_WaitForSynchro+0x60>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	f003 0320 	and.w	r3, r3, #32
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0e5      	beq.n	800a504 <HAL_RTC_WaitForSynchro+0x1c>
 800a538:	e000      	b.n	800a53c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a53a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	44007800 	.word	0x44007800

0800a54c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a558:	4b19      	ldr	r3, [pc, #100]	@ (800a5c0 <RTC_EnterInitMode+0x74>)
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d128      	bne.n	800a5b6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a564:	4b16      	ldr	r3, [pc, #88]	@ (800a5c0 <RTC_EnterInitMode+0x74>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	4a15      	ldr	r2, [pc, #84]	@ (800a5c0 <RTC_EnterInitMode+0x74>)
 800a56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a56e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a570:	f7f7 fb76 	bl	8001c60 <HAL_GetTick>
 800a574:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a576:	e013      	b.n	800a5a0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a578:	f7f7 fb72 	bl	8001c60 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a586:	d90b      	bls.n	800a5a0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a588:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c0 <RTC_EnterInitMode+0x74>)
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10f      	bne.n	800a5b4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2203      	movs	r2, #3
 800a59c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a5a0:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <RTC_EnterInitMode+0x74>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <RTC_EnterInitMode+0x6a>
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d1e2      	bne.n	800a578 <RTC_EnterInitMode+0x2c>
 800a5b2:	e000      	b.n	800a5b6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a5b4:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	44007800 	.word	0x44007800

0800a5c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	4a19      	ldr	r2, [pc, #100]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a5d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5da:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a5dc:	4b17      	ldr	r3, [pc, #92]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	f003 0320 	and.w	r3, r3, #32
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10c      	bne.n	800a602 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff ff7d 	bl	800a4e8 <HAL_RTC_WaitForSynchro>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01e      	beq.n	800a632 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	e017      	b.n	800a632 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a602:	4b0e      	ldr	r3, [pc, #56]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	4a0d      	ldr	r2, [pc, #52]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a608:	f023 0320 	bic.w	r3, r3, #32
 800a60c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff ff6a 	bl	800a4e8 <HAL_RTC_WaitForSynchro>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2203      	movs	r2, #3
 800a61e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a626:	4b05      	ldr	r3, [pc, #20]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	4a04      	ldr	r2, [pc, #16]	@ (800a63c <RTC_ExitInitMode+0x78>)
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a632:	7bfb      	ldrb	r3, [r7, #15]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	44007800 	.word	0x44007800

0800a640 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800a652:	e005      	b.n	800a660 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3301      	adds	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800a65a:	7afb      	ldrb	r3, [r7, #11]
 800a65c:	3b0a      	subs	r3, #10
 800a65e:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800a660:	7afb      	ldrb	r3, [r7, #11]
 800a662:	2b09      	cmp	r3, #9
 800a664:	d8f6      	bhi.n	800a654 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	4313      	orrs	r3, r2
 800a672:	b2db      	uxtb	r3, r3
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	4910      	ldr	r1, [pc, #64]	@ (800a6d4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a694:	4313      	orrs	r3, r2
 800a696:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	490c      	ldr	r1, [pc, #48]	@ (800a6d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	6919      	ldr	r1, [r3, #16]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	041b      	lsls	r3, r3, #16
 800a6be:	430b      	orrs	r3, r1
 800a6c0:	4905      	ldr	r1, [pc, #20]	@ (800a6d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	44007800 	.word	0x44007800
 800a6d8:	44007c00 	.word	0x44007c00

0800a6dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e162      	b.n	800a9b4 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a70      	ldr	r2, [pc, #448]	@ (800a8b4 <HAL_SPI_Init+0x1d8>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d018      	beq.n	800a72a <HAL_SPI_Init+0x4e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a6e      	ldr	r2, [pc, #440]	@ (800a8b8 <HAL_SPI_Init+0x1dc>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d013      	beq.n	800a72a <HAL_SPI_Init+0x4e>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a6d      	ldr	r2, [pc, #436]	@ (800a8bc <HAL_SPI_Init+0x1e0>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d00e      	beq.n	800a72a <HAL_SPI_Init+0x4e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a6b      	ldr	r2, [pc, #428]	@ (800a8c0 <HAL_SPI_Init+0x1e4>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d009      	beq.n	800a72a <HAL_SPI_Init+0x4e>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a6a      	ldr	r2, [pc, #424]	@ (800a8c4 <HAL_SPI_Init+0x1e8>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d004      	beq.n	800a72a <HAL_SPI_Init+0x4e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a68      	ldr	r2, [pc, #416]	@ (800a8c8 <HAL_SPI_Init+0x1ec>)
 800a726:	4293      	cmp	r3, r2
 800a728:	e000      	b.n	800a72c <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a72a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a5f      	ldr	r2, [pc, #380]	@ (800a8b4 <HAL_SPI_Init+0x1d8>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d018      	beq.n	800a76e <HAL_SPI_Init+0x92>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a5d      	ldr	r2, [pc, #372]	@ (800a8b8 <HAL_SPI_Init+0x1dc>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <HAL_SPI_Init+0x92>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a5c      	ldr	r2, [pc, #368]	@ (800a8bc <HAL_SPI_Init+0x1e0>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00e      	beq.n	800a76e <HAL_SPI_Init+0x92>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a5a      	ldr	r2, [pc, #360]	@ (800a8c0 <HAL_SPI_Init+0x1e4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d009      	beq.n	800a76e <HAL_SPI_Init+0x92>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a59      	ldr	r2, [pc, #356]	@ (800a8c4 <HAL_SPI_Init+0x1e8>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d004      	beq.n	800a76e <HAL_SPI_Init+0x92>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a57      	ldr	r2, [pc, #348]	@ (800a8c8 <HAL_SPI_Init+0x1ec>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d105      	bne.n	800a77a <HAL_SPI_Init+0x9e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	2b0f      	cmp	r3, #15
 800a774:	d901      	bls.n	800a77a <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e11c      	b.n	800a9b4 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f91e 	bl	800a9bc <SPI_GetPacketSize>
 800a780:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a4b      	ldr	r2, [pc, #300]	@ (800a8b4 <HAL_SPI_Init+0x1d8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d018      	beq.n	800a7be <HAL_SPI_Init+0xe2>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a49      	ldr	r2, [pc, #292]	@ (800a8b8 <HAL_SPI_Init+0x1dc>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d013      	beq.n	800a7be <HAL_SPI_Init+0xe2>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a48      	ldr	r2, [pc, #288]	@ (800a8bc <HAL_SPI_Init+0x1e0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00e      	beq.n	800a7be <HAL_SPI_Init+0xe2>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a46      	ldr	r2, [pc, #280]	@ (800a8c0 <HAL_SPI_Init+0x1e4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d009      	beq.n	800a7be <HAL_SPI_Init+0xe2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a45      	ldr	r2, [pc, #276]	@ (800a8c4 <HAL_SPI_Init+0x1e8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d004      	beq.n	800a7be <HAL_SPI_Init+0xe2>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a43      	ldr	r2, [pc, #268]	@ (800a8c8 <HAL_SPI_Init+0x1ec>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d102      	bne.n	800a7c4 <HAL_SPI_Init+0xe8>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d820      	bhi.n	800a806 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7c8:	4a40      	ldr	r2, [pc, #256]	@ (800a8cc <HAL_SPI_Init+0x1f0>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d018      	beq.n	800a800 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a3f      	ldr	r2, [pc, #252]	@ (800a8d0 <HAL_SPI_Init+0x1f4>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d013      	beq.n	800a800 <HAL_SPI_Init+0x124>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a3d      	ldr	r2, [pc, #244]	@ (800a8d4 <HAL_SPI_Init+0x1f8>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00e      	beq.n	800a800 <HAL_SPI_Init+0x124>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a3c      	ldr	r2, [pc, #240]	@ (800a8d8 <HAL_SPI_Init+0x1fc>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d009      	beq.n	800a800 <HAL_SPI_Init+0x124>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a3a      	ldr	r2, [pc, #232]	@ (800a8dc <HAL_SPI_Init+0x200>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d004      	beq.n	800a800 <HAL_SPI_Init+0x124>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a39      	ldr	r2, [pc, #228]	@ (800a8e0 <HAL_SPI_Init+0x204>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d104      	bne.n	800a80a <HAL_SPI_Init+0x12e>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b10      	cmp	r3, #16
 800a804:	d901      	bls.n	800a80a <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e0d4      	b.n	800a9b4 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7f6 fc44 	bl	80010ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0201 	bic.w	r2, r2, #1
 800a83a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a846:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a850:	d119      	bne.n	800a886 <HAL_SPI_Init+0x1aa>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a85a:	d103      	bne.n	800a864 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a860:	2b00      	cmp	r3, #0
 800a862:	d008      	beq.n	800a876 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10c      	bne.n	800a886 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a874:	d107      	bne.n	800a886 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d028      	beq.n	800a8e4 <HAL_SPI_Init+0x208>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	2b06      	cmp	r3, #6
 800a898:	d924      	bls.n	800a8e4 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e020      	b.n	800a8f4 <HAL_SPI_Init+0x218>
 800a8b2:	bf00      	nop
 800a8b4:	40014c00 	.word	0x40014c00
 800a8b8:	50014c00 	.word	0x50014c00
 800a8bc:	44002000 	.word	0x44002000
 800a8c0:	54002000 	.word	0x54002000
 800a8c4:	40015000 	.word	0x40015000
 800a8c8:	50015000 	.word	0x50015000
 800a8cc:	40013000 	.word	0x40013000
 800a8d0:	50013000 	.word	0x50013000
 800a8d4:	40003800 	.word	0x40003800
 800a8d8:	50003800 	.word	0x50003800
 800a8dc:	40003c00 	.word	0x40003c00
 800a8e0:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8f2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69da      	ldr	r2, [r3, #28]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a906:	ea42 0103 	orr.w	r1, r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91e:	431a      	orrs	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a924:	431a      	orrs	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	431a      	orrs	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	431a      	orrs	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	431a      	orrs	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a948:	431a      	orrs	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	431a      	orrs	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a954:	431a      	orrs	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a95a:	431a      	orrs	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a960:	ea42 0103 	orr.w	r1, r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	430a      	orrs	r2, r1
 800a96e:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f022 0201 	bic.w	r2, r2, #1
 800a97e:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00a      	beq.n	800a9a2 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c8:	095b      	lsrs	r3, r3, #5
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	3307      	adds	r3, #7
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e042      	b.n	800aa8a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7f6 fc04 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2224      	movs	r2, #36	@ 0x24
 800aa20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0201 	bic.w	r2, r2, #1
 800aa32:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa17 	bl	800ae70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f826 	bl	800aa94 <UART_SetConfig>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e01b      	b.n	800aa8a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0201 	orr.w	r2, r2, #1
 800aa80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa96 	bl	800afb4 <UART_CheckIdleState>
 800aa88:	4603      	mov	r3, r0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa98:	b094      	sub	sp, #80	@ 0x50
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	4b78      	ldr	r3, [pc, #480]	@ (800ac8c <UART_SetConfig+0x1f8>)
 800aaaa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	431a      	orrs	r2, r3
 800aabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4971      	ldr	r1, [pc, #452]	@ (800ac90 <UART_SetConfig+0x1fc>)
 800aacc:	4019      	ands	r1, r3
 800aace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae4:	68d9      	ldr	r1, [r3, #12]
 800aae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	ea40 0301 	orr.w	r3, r0, r1
 800aaee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	4b64      	ldr	r3, [pc, #400]	@ (800ac8c <UART_SetConfig+0x1f8>)
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d009      	beq.n	800ab14 <UART_SetConfig+0x80>
 800ab00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	4b63      	ldr	r3, [pc, #396]	@ (800ac94 <UART_SetConfig+0x200>)
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d004      	beq.n	800ab14 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0c:	6a1a      	ldr	r2, [r3, #32]
 800ab0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab10:	4313      	orrs	r3, r2
 800ab12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ab1e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab32:	f023 000f 	bic.w	r0, r3, #15
 800ab36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ab3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	ea40 0301 	orr.w	r3, r0, r1
 800ab42:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	4b53      	ldr	r3, [pc, #332]	@ (800ac98 <UART_SetConfig+0x204>)
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d102      	bne.n	800ab54 <UART_SetConfig+0xc0>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab52:	e066      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ab54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b50      	ldr	r3, [pc, #320]	@ (800ac9c <UART_SetConfig+0x208>)
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d102      	bne.n	800ab64 <UART_SetConfig+0xd0>
 800ab5e:	2302      	movs	r3, #2
 800ab60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab62:	e05e      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ab64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	4b4d      	ldr	r3, [pc, #308]	@ (800aca0 <UART_SetConfig+0x20c>)
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d102      	bne.n	800ab74 <UART_SetConfig+0xe0>
 800ab6e:	2304      	movs	r3, #4
 800ab70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab72:	e056      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	4b4a      	ldr	r3, [pc, #296]	@ (800aca4 <UART_SetConfig+0x210>)
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d102      	bne.n	800ab84 <UART_SetConfig+0xf0>
 800ab7e:	2308      	movs	r3, #8
 800ab80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab82:	e04e      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ab84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	4b47      	ldr	r3, [pc, #284]	@ (800aca8 <UART_SetConfig+0x214>)
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d102      	bne.n	800ab94 <UART_SetConfig+0x100>
 800ab8e:	2310      	movs	r3, #16
 800ab90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab92:	e046      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ab94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	4b44      	ldr	r3, [pc, #272]	@ (800acac <UART_SetConfig+0x218>)
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d102      	bne.n	800aba4 <UART_SetConfig+0x110>
 800ab9e:	2320      	movs	r3, #32
 800aba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba2:	e03e      	b.n	800ac22 <UART_SetConfig+0x18e>
 800aba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	4b41      	ldr	r3, [pc, #260]	@ (800acb0 <UART_SetConfig+0x21c>)
 800abaa:	429a      	cmp	r2, r3
 800abac:	d102      	bne.n	800abb4 <UART_SetConfig+0x120>
 800abae:	2340      	movs	r3, #64	@ 0x40
 800abb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb2:	e036      	b.n	800ac22 <UART_SetConfig+0x18e>
 800abb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	4b3e      	ldr	r3, [pc, #248]	@ (800acb4 <UART_SetConfig+0x220>)
 800abba:	429a      	cmp	r2, r3
 800abbc:	d102      	bne.n	800abc4 <UART_SetConfig+0x130>
 800abbe:	2380      	movs	r3, #128	@ 0x80
 800abc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abc2:	e02e      	b.n	800ac22 <UART_SetConfig+0x18e>
 800abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4b3b      	ldr	r3, [pc, #236]	@ (800acb8 <UART_SetConfig+0x224>)
 800abca:	429a      	cmp	r2, r3
 800abcc:	d103      	bne.n	800abd6 <UART_SetConfig+0x142>
 800abce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd4:	e025      	b.n	800ac22 <UART_SetConfig+0x18e>
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4b38      	ldr	r3, [pc, #224]	@ (800acbc <UART_SetConfig+0x228>)
 800abdc:	429a      	cmp	r2, r3
 800abde:	d103      	bne.n	800abe8 <UART_SetConfig+0x154>
 800abe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abe6:	e01c      	b.n	800ac22 <UART_SetConfig+0x18e>
 800abe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4b34      	ldr	r3, [pc, #208]	@ (800acc0 <UART_SetConfig+0x22c>)
 800abee:	429a      	cmp	r2, r3
 800abf0:	d103      	bne.n	800abfa <UART_SetConfig+0x166>
 800abf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abf8:	e013      	b.n	800ac22 <UART_SetConfig+0x18e>
 800abfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b31      	ldr	r3, [pc, #196]	@ (800acc4 <UART_SetConfig+0x230>)
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d103      	bne.n	800ac0c <UART_SetConfig+0x178>
 800ac04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac0a:	e00a      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ac0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4b1e      	ldr	r3, [pc, #120]	@ (800ac8c <UART_SetConfig+0x1f8>)
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d103      	bne.n	800ac1e <UART_SetConfig+0x18a>
 800ac16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac1c:	e001      	b.n	800ac22 <UART_SetConfig+0x18e>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	4b19      	ldr	r3, [pc, #100]	@ (800ac8c <UART_SetConfig+0x1f8>)
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d005      	beq.n	800ac38 <UART_SetConfig+0x1a4>
 800ac2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	4b18      	ldr	r3, [pc, #96]	@ (800ac94 <UART_SetConfig+0x200>)
 800ac32:	429a      	cmp	r2, r3
 800ac34:	f040 8094 	bne.w	800ad60 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ac38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	623b      	str	r3, [r7, #32]
 800ac3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ac40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ac44:	f7fc fd8e 	bl	8007764 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac48:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80f7 	beq.w	800ae40 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac56:	4a1c      	ldr	r2, [pc, #112]	@ (800acc8 <UART_SetConfig+0x234>)
 800ac58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac60:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	4413      	add	r3, r2
 800ac70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d305      	bcc.n	800ac82 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d924      	bls.n	800accc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ac88:	e069      	b.n	800ad5e <UART_SetConfig+0x2ca>
 800ac8a:	bf00      	nop
 800ac8c:	44002400 	.word	0x44002400
 800ac90:	cfff69f3 	.word	0xcfff69f3
 800ac94:	54002400 	.word	0x54002400
 800ac98:	40013800 	.word	0x40013800
 800ac9c:	40004400 	.word	0x40004400
 800aca0:	40004800 	.word	0x40004800
 800aca4:	40004c00 	.word	0x40004c00
 800aca8:	40005000 	.word	0x40005000
 800acac:	40006400 	.word	0x40006400
 800acb0:	40007800 	.word	0x40007800
 800acb4:	40007c00 	.word	0x40007c00
 800acb8:	40008000 	.word	0x40008000
 800acbc:	40006800 	.word	0x40006800
 800acc0:	40006c00 	.word	0x40006c00
 800acc4:	40008400 	.word	0x40008400
 800acc8:	0800facc 	.word	0x0800facc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800accc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acce:	2200      	movs	r2, #0
 800acd0:	61bb      	str	r3, [r7, #24]
 800acd2:	61fa      	str	r2, [r7, #28]
 800acd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd8:	4a64      	ldr	r2, [pc, #400]	@ (800ae6c <UART_SetConfig+0x3d8>)
 800acda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	2200      	movs	r2, #0
 800ace2:	613b      	str	r3, [r7, #16]
 800ace4:	617a      	str	r2, [r7, #20]
 800ace6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800acea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800acee:	f7f5 facd 	bl	800028c <__aeabi_uldivmod>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4610      	mov	r0, r2
 800acf8:	4619      	mov	r1, r3
 800acfa:	f04f 0200 	mov.w	r2, #0
 800acfe:	f04f 0300 	mov.w	r3, #0
 800ad02:	020b      	lsls	r3, r1, #8
 800ad04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad08:	0202      	lsls	r2, r0, #8
 800ad0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad0c:	6849      	ldr	r1, [r1, #4]
 800ad0e:	0849      	lsrs	r1, r1, #1
 800ad10:	2000      	movs	r0, #0
 800ad12:	460c      	mov	r4, r1
 800ad14:	4605      	mov	r5, r0
 800ad16:	eb12 0804 	adds.w	r8, r2, r4
 800ad1a:	eb43 0905 	adc.w	r9, r3, r5
 800ad1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	60bb      	str	r3, [r7, #8]
 800ad26:	60fa      	str	r2, [r7, #12]
 800ad28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	f7f5 faac 	bl	800028c <__aeabi_uldivmod>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4613      	mov	r3, r2
 800ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad42:	d308      	bcc.n	800ad56 <UART_SetConfig+0x2c2>
 800ad44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad4a:	d204      	bcs.n	800ad56 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800ad4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad52:	60da      	str	r2, [r3, #12]
 800ad54:	e003      	b.n	800ad5e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800ad5c:	e070      	b.n	800ae40 <UART_SetConfig+0x3ac>
 800ad5e:	e06f      	b.n	800ae40 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad68:	d13c      	bne.n	800ade4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ad6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	607a      	str	r2, [r7, #4]
 800ad72:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad76:	f7fc fcf5 	bl	8007764 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad7a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d05e      	beq.n	800ae40 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad86:	4a39      	ldr	r2, [pc, #228]	@ (800ae6c <UART_SetConfig+0x3d8>)
 800ad88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad94:	005a      	lsls	r2, r3, #1
 800ad96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	085b      	lsrs	r3, r3, #1
 800ad9c:	441a      	add	r2, r3
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ada8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adaa:	2b0f      	cmp	r3, #15
 800adac:	d916      	bls.n	800addc <UART_SetConfig+0x348>
 800adae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adb4:	d212      	bcs.n	800addc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f023 030f 	bic.w	r3, r3, #15
 800adbe:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc2:	085b      	lsrs	r3, r3, #1
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	b29a      	uxth	r2, r3
 800adcc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800adce:	4313      	orrs	r3, r2
 800add0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800add8:	60da      	str	r2, [r3, #12]
 800adda:	e031      	b.n	800ae40 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ade2:	e02d      	b.n	800ae40 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ade4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ade6:	2200      	movs	r2, #0
 800ade8:	469a      	mov	sl, r3
 800adea:	4693      	mov	fp, r2
 800adec:	4650      	mov	r0, sl
 800adee:	4659      	mov	r1, fp
 800adf0:	f7fc fcb8 	bl	8007764 <HAL_RCCEx_GetPeriphCLKFreq>
 800adf4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800adf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d021      	beq.n	800ae40 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae00:	4a1a      	ldr	r2, [pc, #104]	@ (800ae6c <UART_SetConfig+0x3d8>)
 800ae02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	441a      	add	r2, r3
 800ae16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae22:	2b0f      	cmp	r3, #15
 800ae24:	d909      	bls.n	800ae3a <UART_SetConfig+0x3a6>
 800ae26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae2c:	d205      	bcs.n	800ae3a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60da      	str	r2, [r3, #12]
 800ae38:	e002      	b.n	800ae40 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae42:	2201      	movs	r2, #1
 800ae44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae52:	2200      	movs	r2, #0
 800ae54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae58:	2200      	movs	r2, #0
 800ae5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3750      	adds	r7, #80	@ 0x50
 800ae64:	46bd      	mov	sp, r7
 800ae66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800facc 	.word	0x0800facc

0800ae70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00a      	beq.n	800ae9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af04:	f003 0310 	and.w	r3, r3, #16
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00a      	beq.n	800af22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01a      	beq.n	800af86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af6e:	d10a      	bne.n	800af86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	430a      	orrs	r2, r1
 800af84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	430a      	orrs	r2, r1
 800afa6:	605a      	str	r2, [r3, #4]
  }
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b098      	sub	sp, #96	@ 0x60
 800afb8:	af02      	add	r7, sp, #8
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800afc4:	f7f6 fe4c 	bl	8001c60 <HAL_GetTick>
 800afc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0308 	and.w	r3, r3, #8
 800afd4:	2b08      	cmp	r3, #8
 800afd6:	d12f      	bne.n	800b038 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe0:	2200      	movs	r2, #0
 800afe2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f88e 	bl	800b108 <UART_WaitOnFlagUntilTimeout>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d022      	beq.n	800b038 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affa:	e853 3f00 	ldrex	r3, [r3]
 800affe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b006:	653b      	str	r3, [r7, #80]	@ 0x50
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b010:	647b      	str	r3, [r7, #68]	@ 0x44
 800b012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e6      	bne.n	800aff2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2220      	movs	r2, #32
 800b028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e063      	b.n	800b100 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	2b04      	cmp	r3, #4
 800b044:	d149      	bne.n	800b0da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b046:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b04e:	2200      	movs	r2, #0
 800b050:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f857 	bl	800b108 <UART_WaitOnFlagUntilTimeout>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d03c      	beq.n	800b0da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	623b      	str	r3, [r7, #32]
   return(result);
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b07e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b080:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b086:	e841 2300 	strex	r3, r2, [r1]
 800b08a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1e6      	bne.n	800b060 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3308      	adds	r3, #8
 800b098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3308      	adds	r3, #8
 800b0b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0b2:	61fa      	str	r2, [r7, #28]
 800b0b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b6:	69b9      	ldr	r1, [r7, #24]
 800b0b8:	69fa      	ldr	r2, [r7, #28]
 800b0ba:	e841 2300 	strex	r3, r2, [r1]
 800b0be:	617b      	str	r3, [r7, #20]
   return(result);
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1e5      	bne.n	800b092 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e012      	b.n	800b100 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3758      	adds	r7, #88	@ 0x58
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	603b      	str	r3, [r7, #0]
 800b114:	4613      	mov	r3, r2
 800b116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b118:	e04f      	b.n	800b1ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b120:	d04b      	beq.n	800b1ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b122:	f7f6 fd9d 	bl	8001c60 <HAL_GetTick>
 800b126:	4602      	mov	r2, r0
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d302      	bcc.n	800b138 <UART_WaitOnFlagUntilTimeout+0x30>
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e04e      	b.n	800b1da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0304 	and.w	r3, r3, #4
 800b146:	2b00      	cmp	r3, #0
 800b148:	d037      	beq.n	800b1ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b80      	cmp	r3, #128	@ 0x80
 800b14e:	d034      	beq.n	800b1ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b40      	cmp	r3, #64	@ 0x40
 800b154:	d031      	beq.n	800b1ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	f003 0308 	and.w	r3, r3, #8
 800b160:	2b08      	cmp	r3, #8
 800b162:	d110      	bne.n	800b186 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2208      	movs	r2, #8
 800b16a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f838 	bl	800b1e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2208      	movs	r2, #8
 800b176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e029      	b.n	800b1da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b194:	d111      	bne.n	800b1ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b19e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 f81e 	bl	800b1e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e00f      	b.n	800b1da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69da      	ldr	r2, [r3, #28]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	bf0c      	ite	eq
 800b1ca:	2301      	moveq	r3, #1
 800b1cc:	2300      	movne	r3, #0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d0a0      	beq.n	800b11a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b095      	sub	sp, #84	@ 0x54
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f2:	e853 3f00 	ldrex	r3, [r3]
 800b1f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	461a      	mov	r2, r3
 800b206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b208:	643b      	str	r3, [r7, #64]	@ 0x40
 800b20a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b20e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e6      	bne.n	800b1ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3308      	adds	r3, #8
 800b222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	e853 3f00 	ldrex	r3, [r3]
 800b22a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b232:	f023 0301 	bic.w	r3, r3, #1
 800b236:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3308      	adds	r3, #8
 800b23e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b248:	e841 2300 	strex	r3, r2, [r1]
 800b24c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e3      	bne.n	800b21c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d118      	bne.n	800b28e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	e853 3f00 	ldrex	r3, [r3]
 800b268:	60bb      	str	r3, [r7, #8]
   return(result);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f023 0310 	bic.w	r3, r3, #16
 800b270:	647b      	str	r3, [r7, #68]	@ 0x44
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b27a:	61bb      	str	r3, [r7, #24]
 800b27c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27e:	6979      	ldr	r1, [r7, #20]
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	613b      	str	r3, [r7, #16]
   return(result);
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e6      	bne.n	800b25c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2220      	movs	r2, #32
 800b292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b2a2:	bf00      	nop
 800b2a4:	3754      	adds	r7, #84	@ 0x54
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e027      	b.n	800b314 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2224      	movs	r2, #36	@ 0x24
 800b2d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f022 0201 	bic.w	r2, r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b334:	2302      	movs	r3, #2
 800b336:	e02d      	b.n	800b394 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2224      	movs	r2, #36	@ 0x24
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0201 	bic.w	r2, r2, #1
 800b35e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	430a      	orrs	r2, r1
 800b372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f84f 	bl	800b418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e02d      	b.n	800b410 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2224      	movs	r2, #36	@ 0x24
 800b3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0201 	bic.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f811 	bl	800b418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b424:	2b00      	cmp	r3, #0
 800b426:	d108      	bne.n	800b43a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b438:	e031      	b.n	800b49e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b43a:	2308      	movs	r3, #8
 800b43c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b43e:	2308      	movs	r3, #8
 800b440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	0e5b      	lsrs	r3, r3, #25
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	f003 0307 	and.w	r3, r3, #7
 800b450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	0f5b      	lsrs	r3, r3, #29
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	7b3a      	ldrb	r2, [r7, #12]
 800b466:	4911      	ldr	r1, [pc, #68]	@ (800b4ac <UARTEx_SetNbDataToProcess+0x94>)
 800b468:	5c8a      	ldrb	r2, [r1, r2]
 800b46a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b46e:	7b3a      	ldrb	r2, [r7, #12]
 800b470:	490f      	ldr	r1, [pc, #60]	@ (800b4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b474:	fb93 f3f2 	sdiv	r3, r3, r2
 800b478:	b29a      	uxth	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	7b7a      	ldrb	r2, [r7, #13]
 800b484:	4909      	ldr	r1, [pc, #36]	@ (800b4ac <UARTEx_SetNbDataToProcess+0x94>)
 800b486:	5c8a      	ldrb	r2, [r1, r2]
 800b488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b48c:	7b7a      	ldrb	r2, [r7, #13]
 800b48e:	4908      	ldr	r1, [pc, #32]	@ (800b4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b492:	fb93 f3f2 	sdiv	r3, r3, r2
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	0800fae4 	.word	0x0800fae4
 800b4b0:	0800faec 	.word	0x0800faec

0800b4b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4cc:	f043 0201 	orr.w	r2, r3, #1
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	f107 001c 	add.w	r0, r7, #28
 800b4f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e008      	b.n	800b510 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7ff ffd8 	bl	800b4b4 <USB_CoreReset>
 800b504:	4603      	mov	r3, r0
 800b506:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b51a:	b004      	add	sp, #16
 800b51c:	4770      	bx	lr

0800b51e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b51e:	b480      	push	{r7}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b52c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b530:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b54e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b552:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	43db      	mvns	r3, r3
 800b55c:	401a      	ands	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b586:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	641a      	str	r2, [r3, #64]	@ 0x40
 800b58e:	e00b      	b.n	800b5a8 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d106      	bne.n	800b5a4 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	641a      	str	r2, [r3, #64]	@ 0x40
 800b5a2:	e001      	b.n	800b5a8 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e000      	b.n	800b5aa <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	f107 001c 	add.w	r0, r7, #28
 800b5c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d2:	f023 0201 	bic.w	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b5da:	2100      	movs	r1, #0
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ffc7 	bl	800b570 <USB_SetCurrentMode>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5f8:	b004      	add	sp, #16
 800b5fa:	4770      	bx	lr

0800b5fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b09f      	sub	sp, #124	@ 0x7c
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	4ba0      	ldr	r3, [pc, #640]	@ (800b89c <USB_ActivateEndpoint+0x2a0>)
 800b61a:	4013      	ands	r3, r2
 800b61c:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	78db      	ldrb	r3, [r3, #3]
 800b622:	2b03      	cmp	r3, #3
 800b624:	d819      	bhi.n	800b65a <USB_ActivateEndpoint+0x5e>
 800b626:	a201      	add	r2, pc, #4	@ (adr r2, 800b62c <USB_ActivateEndpoint+0x30>)
 800b628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62c:	0800b63d 	.word	0x0800b63d
 800b630:	0800b651 	.word	0x0800b651
 800b634:	0800b663 	.word	0x0800b663
 800b638:	0800b647 	.word	0x0800b647
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b63c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b63e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b642:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b644:	e00e      	b.n	800b664 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b648:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b64c:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b64e:	e009      	b.n	800b664 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b656:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b658:	e004      	b.n	800b664 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800b660:	e000      	b.n	800b664 <USB_ActivateEndpoint+0x68>
      break;
 800b662:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	441a      	add	r2, r3
 800b66e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b678:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	4b86      	ldr	r3, [pc, #536]	@ (800b8a0 <USB_ActivateEndpoint+0x2a4>)
 800b688:	4013      	ands	r3, r2
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	7812      	ldrb	r2, [r2, #0]
 800b68e:	4313      	orrs	r3, r2
 800b690:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	441a      	add	r2, r3
 800b69c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b69e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6a6:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	7b1b      	ldrb	r3, [r3, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f040 8177 	bne.w	800b9a0 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d079      	beq.n	800b7ae <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6d8:	0c12      	lsrs	r2, r2, #16
 800b6da:	0412      	lsls	r2, r2, #16
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6ec:	6819      	ldr	r1, [r3, #0]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	88db      	ldrh	r3, [r3, #6]
 800b6f2:	089b      	lsrs	r3, r3, #2
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	009a      	lsls	r2, r3, #2
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b702:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b706:	430a      	orrs	r2, r1
 800b708:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	61bb      	str	r3, [r7, #24]
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d013      	beq.n	800b74a <USB_ActivateEndpoint+0x14e>
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	4b5c      	ldr	r3, [pc, #368]	@ (800b8a0 <USB_ActivateEndpoint+0x2a4>)
 800b730:	4013      	ands	r3, r2
 800b732:	617b      	str	r3, [r7, #20]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	441a      	add	r2, r3
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b744:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b748:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	78db      	ldrb	r3, [r3, #3]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d018      	beq.n	800b784 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	4b51      	ldr	r3, [pc, #324]	@ (800b8a4 <USB_ActivateEndpoint+0x2a8>)
 800b760:	4013      	ands	r3, r2
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f083 0320 	eor.w	r3, r3, #32
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	441a      	add	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	e28c      	b.n	800bc9e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	4b44      	ldr	r3, [pc, #272]	@ (800b8a4 <USB_ActivateEndpoint+0x2a8>)
 800b792:	4013      	ands	r3, r2
 800b794:	613b      	str	r3, [r7, #16]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	441a      	add	r2, r3
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	e277      	b.n	800bc9e <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7cc:	0c12      	lsrs	r2, r2, #16
 800b7ce:	0412      	lsls	r2, r2, #16
 800b7d0:	605a      	str	r2, [r3, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7e0:	6859      	ldr	r1, [r3, #4]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	88db      	ldrh	r3, [r3, #6]
 800b7e6:	089b      	lsrs	r3, r3, #2
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	009a      	lsls	r2, r3, #2
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b818:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b81c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b820:	605a      	str	r2, [r3, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d112      	bne.n	800b850 <USB_ActivateEndpoint+0x254>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b844:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b848:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b84c:	605a      	str	r2, [r3, #4]
 800b84e:	e04d      	b.n	800b8ec <USB_ActivateEndpoint+0x2f0>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	2b3e      	cmp	r3, #62	@ 0x3e
 800b856:	d827      	bhi.n	800b8a8 <USB_ActivateEndpoint+0x2ac>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	085b      	lsrs	r3, r3, #1
 800b85e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <USB_ActivateEndpoint+0x276>
 800b86c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b86e:	3301      	adds	r3, #1
 800b870:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b87c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b880:	6859      	ldr	r1, [r3, #4]
 800b882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b884:	069a      	lsls	r2, r3, #26
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	00db      	lsls	r3, r3, #3
 800b88c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b894:	430a      	orrs	r2, r1
 800b896:	605a      	str	r2, [r3, #4]
 800b898:	e028      	b.n	800b8ec <USB_ActivateEndpoint+0x2f0>
 800b89a:	bf00      	nop
 800b89c:	07ff898f 	.word	0x07ff898f
 800b8a0:	07ff8f8f 	.word	0x07ff8f8f
 800b8a4:	07ff8fbf 	.word	0x07ff8fbf
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	095b      	lsrs	r3, r3, #5
 800b8ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f003 031f 	and.w	r3, r3, #31
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <USB_ActivateEndpoint+0x2c6>
 800b8bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d4:	069b      	lsls	r3, r3, #26
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b8ea:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d013      	beq.n	800b92c <USB_ActivateEndpoint+0x330>
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	4b9c      	ldr	r3, [pc, #624]	@ (800bb84 <USB_ActivateEndpoint+0x588>)
 800b912:	4013      	ands	r3, r2
 800b914:	627b      	str	r3, [r7, #36]	@ 0x24
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	441a      	add	r2, r3
 800b920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b92a:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d11c      	bne.n	800b96e <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	4b91      	ldr	r3, [pc, #580]	@ (800bb88 <USB_ActivateEndpoint+0x58c>)
 800b942:	4013      	ands	r3, r2
 800b944:	61fb      	str	r3, [r7, #28]
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b94c:	61fb      	str	r3, [r7, #28]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b954:	61fb      	str	r3, [r7, #28]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	441a      	add	r2, r3
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	e197      	b.n	800bc9e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b83      	ldr	r3, [pc, #524]	@ (800bb88 <USB_ActivateEndpoint+0x58c>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	623b      	str	r3, [r7, #32]
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b986:	623b      	str	r3, [r7, #32]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	441a      	add	r2, r3
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	e17e      	b.n	800bc9e <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	78db      	ldrb	r3, [r3, #3]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d114      	bne.n	800b9d2 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	4b73      	ldr	r3, [pc, #460]	@ (800bb84 <USB_ActivateEndpoint+0x588>)
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	441a      	add	r2, r3
 800b9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ce:	6013      	str	r3, [r2, #0]
 800b9d0:	e013      	b.n	800b9fa <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	4b6b      	ldr	r3, [pc, #428]	@ (800bb8c <USB_ActivateEndpoint+0x590>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	441a      	add	r2, r3
 800b9ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9f8:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba18:	0c12      	lsrs	r2, r2, #16
 800ba1a:	0412      	lsls	r2, r2, #16
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba2c:	6819      	ldr	r1, [r3, #0]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	891b      	ldrh	r3, [r3, #8]
 800ba32:	089b      	lsrs	r3, r3, #2
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	009a      	lsls	r2, r3, #2
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	00db      	lsls	r3, r3, #3
 800ba3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba46:	430a      	orrs	r2, r1
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba68:	0c12      	lsrs	r2, r2, #16
 800ba6a:	0412      	lsls	r2, r2, #16
 800ba6c:	605a      	str	r2, [r3, #4]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba7c:	6859      	ldr	r1, [r3, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	895b      	ldrh	r3, [r3, #10]
 800ba82:	089b      	lsrs	r3, r3, #2
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	009a      	lsls	r2, r3, #2
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	785b      	ldrb	r3, [r3, #1]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d178      	bne.n	800bb94 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	643b      	str	r3, [r7, #64]	@ 0x40
 800bab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d013      	beq.n	800bae2 <USB_ActivateEndpoint+0x4e6>
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	4b2f      	ldr	r3, [pc, #188]	@ (800bb84 <USB_ActivateEndpoint+0x588>)
 800bac8:	4013      	ands	r3, r2
 800baca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	441a      	add	r2, r3
 800bad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bad8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800badc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bae0:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800baf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d013      	beq.n	800bb22 <USB_ActivateEndpoint+0x526>
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	4b1f      	ldr	r3, [pc, #124]	@ (800bb84 <USB_ActivateEndpoint+0x588>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	441a      	add	r2, r3
 800bb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb20:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	4b16      	ldr	r3, [pc, #88]	@ (800bb88 <USB_ActivateEndpoint+0x58c>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bb3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bb42:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	441a      	add	r2, r3
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb58:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b0a      	ldr	r3, [pc, #40]	@ (800bb90 <USB_ActivateEndpoint+0x594>)
 800bb68:	4013      	ands	r3, r2
 800bb6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	441a      	add	r2, r3
 800bb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb80:	6013      	str	r3, [r2, #0]
 800bb82:	e08c      	b.n	800bc9e <USB_ActivateEndpoint+0x6a2>
 800bb84:	07ff8f8f 	.word	0x07ff8f8f
 800bb88:	07ffbf8f 	.word	0x07ffbf8f
 800bb8c:	07ff8e8f 	.word	0x07ff8e8f
 800bb90:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d013      	beq.n	800bbd4 <USB_ActivateEndpoint+0x5d8>
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	4b3d      	ldr	r3, [pc, #244]	@ (800bcb0 <USB_ActivateEndpoint+0x6b4>)
 800bbba:	4013      	ands	r3, r2
 800bbbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	441a      	add	r2, r3
 800bbc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bbce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d013      	beq.n	800bc14 <USB_ActivateEndpoint+0x618>
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	4b2d      	ldr	r3, [pc, #180]	@ (800bcb0 <USB_ActivateEndpoint+0x6b4>)
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	441a      	add	r2, r3
 800bc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	78db      	ldrb	r3, [r3, #3]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d018      	beq.n	800bc4e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	4b22      	ldr	r3, [pc, #136]	@ (800bcb4 <USB_ActivateEndpoint+0x6b8>)
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc30:	f083 0320 	eor.w	r3, r3, #32
 800bc34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	441a      	add	r2, r3
 800bc40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc4a:	6013      	str	r3, [r2, #0]
 800bc4c:	e013      	b.n	800bc76 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	4b16      	ldr	r3, [pc, #88]	@ (800bcb4 <USB_ActivateEndpoint+0x6b8>)
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	441a      	add	r2, r3
 800bc6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc74:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb8 <USB_ActivateEndpoint+0x6bc>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	441a      	add	r2, r3
 800bc92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc9c:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bc9e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	377c      	adds	r7, #124	@ 0x7c
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	07ff8f8f 	.word	0x07ff8f8f
 800bcb4:	07ff8fbf 	.word	0x07ff8fbf
 800bcb8:	07ffbf8f 	.word	0x07ffbf8f

0800bcbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b097      	sub	sp, #92	@ 0x5c
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	7b1b      	ldrb	r3, [r3, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d16d      	bne.n	800bdaa <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	785b      	ldrb	r3, [r3, #1]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d034      	beq.n	800bd40 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d013      	beq.n	800bd16 <USB_DeactivateEndpoint+0x5a>
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	4b6d      	ldr	r3, [pc, #436]	@ (800beb0 <USB_DeactivateEndpoint+0x1f4>)
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	441a      	add	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd14:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b64      	ldr	r3, [pc, #400]	@ (800beb4 <USB_DeactivateEndpoint+0x1f8>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	60bb      	str	r3, [r7, #8]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	441a      	add	r2, r3
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd3c:	6013      	str	r3, [r2, #0]
 800bd3e:	e139      	b.n	800bfb4 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	61fb      	str	r3, [r7, #28]
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d013      	beq.n	800bd80 <USB_DeactivateEndpoint+0xc4>
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	4b52      	ldr	r3, [pc, #328]	@ (800beb0 <USB_DeactivateEndpoint+0x1f4>)
 800bd66:	4013      	ands	r3, r2
 800bd68:	61bb      	str	r3, [r7, #24]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	441a      	add	r2, r3
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd7e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	4b4a      	ldr	r3, [pc, #296]	@ (800beb8 <USB_DeactivateEndpoint+0x1fc>)
 800bd8e:	4013      	ands	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	441a      	add	r2, r3
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bda2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	e104      	b.n	800bfb4 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f040 8084 	bne.w	800bebc <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d013      	beq.n	800bdf4 <USB_DeactivateEndpoint+0x138>
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	4b35      	ldr	r3, [pc, #212]	@ (800beb0 <USB_DeactivateEndpoint+0x1f4>)
 800bdda:	4013      	ands	r3, r2
 800bddc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	441a      	add	r2, r3
 800bde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bdee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdf2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	633b      	str	r3, [r7, #48]	@ 0x30
 800be02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d013      	beq.n	800be34 <USB_DeactivateEndpoint+0x178>
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b25      	ldr	r3, [pc, #148]	@ (800beb0 <USB_DeactivateEndpoint+0x1f4>)
 800be1a:	4013      	ands	r3, r2
 800be1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	441a      	add	r2, r3
 800be28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be32:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	4b1b      	ldr	r3, [pc, #108]	@ (800beb0 <USB_DeactivateEndpoint+0x1f4>)
 800be42:	4013      	ands	r3, r2
 800be44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	441a      	add	r2, r3
 800be50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be5a:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	4b13      	ldr	r3, [pc, #76]	@ (800beb8 <USB_DeactivateEndpoint+0x1fc>)
 800be6a:	4013      	ands	r3, r2
 800be6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	441a      	add	r2, r3
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be82:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	4b08      	ldr	r3, [pc, #32]	@ (800beb4 <USB_DeactivateEndpoint+0x1f8>)
 800be92:	4013      	ands	r3, r2
 800be94:	623b      	str	r3, [r7, #32]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	441a      	add	r2, r3
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	e082      	b.n	800bfb4 <USB_DeactivateEndpoint+0x2f8>
 800beae:	bf00      	nop
 800beb0:	07ff8f8f 	.word	0x07ff8f8f
 800beb4:	07ff8fbf 	.word	0x07ff8fbf
 800beb8:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	657b      	str	r3, [r7, #84]	@ 0x54
 800beca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800becc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d013      	beq.n	800befc <USB_DeactivateEndpoint+0x240>
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	4b38      	ldr	r3, [pc, #224]	@ (800bfc4 <USB_DeactivateEndpoint+0x308>)
 800bee2:	4013      	ands	r3, r2
 800bee4:	653b      	str	r3, [r7, #80]	@ 0x50
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	441a      	add	r2, r3
 800bef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800befa:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d013      	beq.n	800bf3c <USB_DeactivateEndpoint+0x280>
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	4b28      	ldr	r3, [pc, #160]	@ (800bfc4 <USB_DeactivateEndpoint+0x308>)
 800bf22:	4013      	ands	r3, r2
 800bf24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	441a      	add	r2, r3
 800bf30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf3a:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc4 <USB_DeactivateEndpoint+0x308>)
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	441a      	add	r2, r3
 800bf58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf62:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	4b15      	ldr	r3, [pc, #84]	@ (800bfc8 <USB_DeactivateEndpoint+0x30c>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	441a      	add	r2, r3
 800bf80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf8a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	4b0c      	ldr	r3, [pc, #48]	@ (800bfcc <USB_DeactivateEndpoint+0x310>)
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	441a      	add	r2, r3
 800bfa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb2:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	375c      	adds	r7, #92	@ 0x5c
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	07ff8f8f 	.word	0x07ff8f8f
 800bfc8:	07ff8fbf 	.word	0x07ff8fbf
 800bfcc:	07ffbf8f 	.word	0x07ffbf8f

0800bfd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b096      	sub	sp, #88	@ 0x58
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	785b      	ldrb	r3, [r3, #1]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	f040 84ed 	bne.w	800c9be <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	699a      	ldr	r2, [r3, #24]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d903      	bls.n	800bff8 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	657b      	str	r3, [r7, #84]	@ 0x54
 800bff6:	e002      	b.n	800bffe <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	699b      	ldr	r3, [r3, #24]
 800bffc:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	7b1b      	ldrb	r3, [r3, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d12e      	bne.n	800c064 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	6959      	ldr	r1, [r3, #20]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	88da      	ldrh	r2, [r3, #6]
 800c00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c010:	b29b      	uxth	r3, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 f963 	bl	800d2de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c022:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c032:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c036:	b292      	uxth	r2, r2
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c044:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c048:	6819      	ldr	r1, [r3, #0]
 800c04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c04c:	041a      	lsls	r2, r3, #16
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c058:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c05c:	430a      	orrs	r2, r1
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	f000 bc90 	b.w	800c984 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	78db      	ldrb	r3, [r3, #3]
 800c068:	2b02      	cmp	r3, #2
 800c06a:	f040 8332 	bne.w	800c6d2 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	6a1a      	ldr	r2, [r3, #32]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	429a      	cmp	r2, r3
 800c078:	f240 82e4 	bls.w	800c644 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4ba4      	ldr	r3, [pc, #656]	@ (800c31c <USB_EPStartXfer+0x34c>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	441a      	add	r2, r3
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a2:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	6a1a      	ldr	r2, [r3, #32]
 800c0a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0aa:	1ad2      	subs	r2, r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 8161 	beq.w	800c388 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	785b      	ldrb	r3, [r3, #1]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d16a      	bne.n	800c1a4 <USB_EPStartXfer+0x1d4>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ec:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c0f0:	605a      	str	r2, [r3, #4]
 800c0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d112      	bne.n	800c11e <USB_EPStartXfer+0x14e>
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c102:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c112:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c116:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c11a:	605a      	str	r2, [r3, #4]
 800c11c:	e06a      	b.n	800c1f4 <USB_EPStartXfer+0x224>
 800c11e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c120:	2b3e      	cmp	r3, #62	@ 0x3e
 800c122:	d81e      	bhi.n	800c162 <USB_EPStartXfer+0x192>
 800c124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c126:	085b      	lsrs	r3, r3, #1
 800c128:	653b      	str	r3, [r7, #80]	@ 0x50
 800c12a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <USB_EPStartXfer+0x16a>
 800c134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c136:	3301      	adds	r3, #1
 800c138:	653b      	str	r3, [r7, #80]	@ 0x50
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c144:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c148:	6859      	ldr	r1, [r3, #4]
 800c14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c14c:	069a      	lsls	r2, r3, #26
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	00db      	lsls	r3, r3, #3
 800c154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c158:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c15c:	430a      	orrs	r2, r1
 800c15e:	605a      	str	r2, [r3, #4]
 800c160:	e048      	b.n	800c1f4 <USB_EPStartXfer+0x224>
 800c162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c164:	095b      	lsrs	r3, r3, #5
 800c166:	653b      	str	r3, [r7, #80]	@ 0x50
 800c168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c16a:	f003 031f 	and.w	r3, r3, #31
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d102      	bne.n	800c178 <USB_EPStartXfer+0x1a8>
 800c172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c174:	3b01      	subs	r3, #1
 800c176:	653b      	str	r3, [r7, #80]	@ 0x50
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c182:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c18a:	069b      	lsls	r3, r3, #26
 800c18c:	431a      	orrs	r2, r3
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c198:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c19c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c1a0:	605a      	str	r2, [r3, #4]
 800c1a2:	e027      	b.n	800c1f4 <USB_EPStartXfer+0x224>
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	785b      	ldrb	r3, [r3, #1]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d123      	bne.n	800c1f4 <USB_EPStartXfer+0x224>
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	605a      	str	r2, [r3, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1dc:	6859      	ldr	r1, [r3, #4]
 800c1de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1e0:	041a      	lsls	r2, r3, #16
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	895b      	ldrh	r3, [r3, #10]
 800c1f8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	6959      	ldr	r1, [r3, #20]
 800c1fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c200:	b29b      	uxth	r3, r3
 800c202:	8b7a      	ldrh	r2, [r7, #26]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f001 f86a 	bl	800d2de <USB_WritePMA>
            ep->xfer_buff += len;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	695a      	ldr	r2, [r3, #20]
 800c20e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c210:	441a      	add	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	6a1a      	ldr	r2, [r3, #32]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d906      	bls.n	800c230 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	6a1a      	ldr	r2, [r3, #32]
 800c226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c228:	1ad2      	subs	r2, r2, r3
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	621a      	str	r2, [r3, #32]
 800c22e:	e005      	b.n	800c23c <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	6a1b      	ldr	r3, [r3, #32]
 800c234:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2200      	movs	r2, #0
 800c23a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	785b      	ldrb	r3, [r3, #1]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d16d      	bne.n	800c320 <USB_EPStartXfer+0x350>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	00db      	lsls	r3, r3, #3
 800c24a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c24e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c25e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c262:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d112      	bne.n	800c294 <USB_EPStartXfer+0x2c4>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c278:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c288:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c28c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	e06d      	b.n	800c370 <USB_EPStartXfer+0x3a0>
 800c294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c296:	2b3e      	cmp	r3, #62	@ 0x3e
 800c298:	d81e      	bhi.n	800c2d8 <USB_EPStartXfer+0x308>
 800c29a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c29c:	085b      	lsrs	r3, r3, #1
 800c29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <USB_EPStartXfer+0x2e0>
 800c2aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2be:	6819      	ldr	r1, [r3, #0]
 800c2c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2c2:	069a      	lsls	r2, r3, #26
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	00db      	lsls	r3, r3, #3
 800c2ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	e04b      	b.n	800c370 <USB_EPStartXfer+0x3a0>
 800c2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2da:	095b      	lsrs	r3, r3, #5
 800c2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2e0:	f003 031f 	and.w	r3, r3, #31
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d102      	bne.n	800c2ee <USB_EPStartXfer+0x31e>
 800c2e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c300:	069b      	lsls	r3, r3, #26
 800c302:	431a      	orrs	r2, r3
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c312:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	e02a      	b.n	800c370 <USB_EPStartXfer+0x3a0>
 800c31a:	bf00      	nop
 800c31c:	07ff8f8f 	.word	0x07ff8f8f
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	785b      	ldrb	r3, [r3, #1]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d123      	bne.n	800c370 <USB_EPStartXfer+0x3a0>
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c332:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c342:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c346:	b292      	uxth	r2, r2
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c354:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c358:	6819      	ldr	r1, [r3, #0]
 800c35a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c35c:	041a      	lsls	r2, r3, #16
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c368:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c36c:	430a      	orrs	r2, r1
 800c36e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	891b      	ldrh	r3, [r3, #8]
 800c374:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	6959      	ldr	r1, [r3, #20]
 800c37a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	8b7a      	ldrh	r2, [r7, #26]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 ffac 	bl	800d2de <USB_WritePMA>
 800c386:	e2fd      	b.n	800c984 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	785b      	ldrb	r3, [r3, #1]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d16a      	bne.n	800c466 <USB_EPStartXfer+0x496>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c39a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3ae:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d112      	bne.n	800c3e0 <USB_EPStartXfer+0x410>
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	e06a      	b.n	800c4b6 <USB_EPStartXfer+0x4e6>
 800c3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3e4:	d81e      	bhi.n	800c424 <USB_EPStartXfer+0x454>
 800c3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <USB_EPStartXfer+0x42c>
 800c3f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c406:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c40a:	6819      	ldr	r1, [r3, #0]
 800c40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c40e:	069a      	lsls	r2, r3, #26
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c41a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c41e:	430a      	orrs	r2, r1
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	e048      	b.n	800c4b6 <USB_EPStartXfer+0x4e6>
 800c424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c426:	095b      	lsrs	r3, r3, #5
 800c428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c42a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c42c:	f003 031f 	and.w	r3, r3, #31
 800c430:	2b00      	cmp	r3, #0
 800c432:	d102      	bne.n	800c43a <USB_EPStartXfer+0x46a>
 800c434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c436:	3b01      	subs	r3, #1
 800c438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c444:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c44c:	069b      	lsls	r3, r3, #26
 800c44e:	431a      	orrs	r2, r3
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c45a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c45e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	e027      	b.n	800c4b6 <USB_EPStartXfer+0x4e6>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	785b      	ldrb	r3, [r3, #1]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d123      	bne.n	800c4b6 <USB_EPStartXfer+0x4e6>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c478:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c488:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c48c:	b292      	uxth	r2, r2
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c49a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4a2:	041a      	lsls	r2, r3, #16
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	891b      	ldrh	r3, [r3, #8]
 800c4ba:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	6959      	ldr	r1, [r3, #20]
 800c4c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	8b7a      	ldrh	r2, [r7, #26]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 ff09 	bl	800d2de <USB_WritePMA>
            ep->xfer_buff += len;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	695a      	ldr	r2, [r3, #20]
 800c4d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4d2:	441a      	add	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	6a1a      	ldr	r2, [r3, #32]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d906      	bls.n	800c4f2 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	6a1a      	ldr	r2, [r3, #32]
 800c4e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	621a      	str	r2, [r3, #32]
 800c4f0:	e005      	b.n	800c4fe <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	785b      	ldrb	r3, [r3, #1]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d16a      	bne.n	800c5dc <USB_EPStartXfer+0x60c>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c510:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c520:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c524:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c528:	605a      	str	r2, [r3, #4]
 800c52a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d112      	bne.n	800c556 <USB_EPStartXfer+0x586>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c53a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c54a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c54e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c552:	605a      	str	r2, [r3, #4]
 800c554:	e06a      	b.n	800c62c <USB_EPStartXfer+0x65c>
 800c556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c558:	2b3e      	cmp	r3, #62	@ 0x3e
 800c55a:	d81e      	bhi.n	800c59a <USB_EPStartXfer+0x5ca>
 800c55c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c55e:	085b      	lsrs	r3, r3, #1
 800c560:	647b      	str	r3, [r7, #68]	@ 0x44
 800c562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <USB_EPStartXfer+0x5a2>
 800c56c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c56e:	3301      	adds	r3, #1
 800c570:	647b      	str	r3, [r7, #68]	@ 0x44
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c57c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c580:	6859      	ldr	r1, [r3, #4]
 800c582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c584:	069a      	lsls	r2, r3, #26
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c590:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c594:	430a      	orrs	r2, r1
 800c596:	605a      	str	r2, [r3, #4]
 800c598:	e048      	b.n	800c62c <USB_EPStartXfer+0x65c>
 800c59a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c59c:	095b      	lsrs	r3, r3, #5
 800c59e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5a2:	f003 031f 	and.w	r3, r3, #31
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d102      	bne.n	800c5b0 <USB_EPStartXfer+0x5e0>
 800c5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5c2:	069b      	lsls	r3, r3, #26
 800c5c4:	431a      	orrs	r2, r3
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c5d8:	605a      	str	r2, [r3, #4]
 800c5da:	e027      	b.n	800c62c <USB_EPStartXfer+0x65c>
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	785b      	ldrb	r3, [r3, #1]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d123      	bne.n	800c62c <USB_EPStartXfer+0x65c>
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c602:	b292      	uxth	r2, r2
 800c604:	605a      	str	r2, [r3, #4]
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c610:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c614:	6859      	ldr	r1, [r3, #4]
 800c616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c618:	041a      	lsls	r2, r3, #16
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c624:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c628:	430a      	orrs	r2, r1
 800c62a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	895b      	ldrh	r3, [r3, #10]
 800c630:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	6959      	ldr	r1, [r3, #20]
 800c636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c638:	b29b      	uxth	r3, r3
 800c63a:	8b7a      	ldrh	r2, [r7, #26]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fe4e 	bl	800d2de <USB_WritePMA>
 800c642:	e19f      	b.n	800c984 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	4ba0      	ldr	r3, [pc, #640]	@ (800c8d8 <USB_EPStartXfer+0x908>)
 800c658:	4013      	ands	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	441a      	add	r2, r3
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c66c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c670:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c67c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c68c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c690:	b292      	uxth	r2, r2
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	00db      	lsls	r3, r3, #3
 800c69a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c69e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6a6:	041a      	lsls	r2, r3, #16
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	891b      	ldrh	r3, [r3, #8]
 800c6be:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	6959      	ldr	r1, [r3, #20]
 800c6c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	8b7a      	ldrh	r2, [r7, #26]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fe07 	bl	800d2de <USB_WritePMA>
 800c6d0:	e158      	b.n	800c984 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	6a1a      	ldr	r2, [r3, #32]
 800c6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d8:	1ad2      	subs	r2, r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 80a3 	beq.w	800c83a <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d16a      	bne.n	800c7d2 <USB_EPStartXfer+0x802>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	00db      	lsls	r3, r3, #3
 800c702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c706:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c716:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c71a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c71e:	605a      	str	r2, [r3, #4]
 800c720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c722:	2b00      	cmp	r3, #0
 800c724:	d112      	bne.n	800c74c <USB_EPStartXfer+0x77c>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c744:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c748:	605a      	str	r2, [r3, #4]
 800c74a:	e06a      	b.n	800c822 <USB_EPStartXfer+0x852>
 800c74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c74e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c750:	d81e      	bhi.n	800c790 <USB_EPStartXfer+0x7c0>
 800c752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c754:	085b      	lsrs	r3, r3, #1
 800c756:	643b      	str	r3, [r7, #64]	@ 0x40
 800c758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d002      	beq.n	800c768 <USB_EPStartXfer+0x798>
 800c762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c764:	3301      	adds	r3, #1
 800c766:	643b      	str	r3, [r7, #64]	@ 0x40
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c772:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c776:	6859      	ldr	r1, [r3, #4]
 800c778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c77a:	069a      	lsls	r2, r3, #26
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c78a:	430a      	orrs	r2, r1
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	e048      	b.n	800c822 <USB_EPStartXfer+0x852>
 800c790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c792:	095b      	lsrs	r3, r3, #5
 800c794:	643b      	str	r3, [r7, #64]	@ 0x40
 800c796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c798:	f003 031f 	and.w	r3, r3, #31
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d102      	bne.n	800c7a6 <USB_EPStartXfer+0x7d6>
 800c7a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7b8:	069b      	lsls	r3, r3, #26
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c7ce:	605a      	str	r2, [r3, #4]
 800c7d0:	e027      	b.n	800c822 <USB_EPStartXfer+0x852>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	785b      	ldrb	r3, [r3, #1]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d123      	bne.n	800c822 <USB_EPStartXfer+0x852>
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7f8:	b292      	uxth	r2, r2
 800c7fa:	605a      	str	r2, [r3, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c80a:	6859      	ldr	r1, [r3, #4]
 800c80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c80e:	041a      	lsls	r2, r3, #16
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c81a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c81e:	430a      	orrs	r2, r1
 800c820:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	895b      	ldrh	r3, [r3, #10]
 800c826:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	6959      	ldr	r1, [r3, #20]
 800c82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c82e:	b29b      	uxth	r3, r3
 800c830:	8b7a      	ldrh	r2, [r7, #26]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 fd53 	bl	800d2de <USB_WritePMA>
 800c838:	e0a4      	b.n	800c984 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	785b      	ldrb	r3, [r3, #1]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d16d      	bne.n	800c91e <USB_EPStartXfer+0x94e>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	00db      	lsls	r3, r3, #3
 800c848:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c84c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c85c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c860:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d112      	bne.n	800c892 <USB_EPStartXfer+0x8c2>
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c886:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c88a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	e06d      	b.n	800c96e <USB_EPStartXfer+0x99e>
 800c892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c894:	2b3e      	cmp	r3, #62	@ 0x3e
 800c896:	d821      	bhi.n	800c8dc <USB_EPStartXfer+0x90c>
 800c898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c89a:	085b      	lsrs	r3, r3, #1
 800c89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <USB_EPStartXfer+0x8de>
 800c8a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8bc:	6819      	ldr	r1, [r3, #0]
 800c8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c0:	069a      	lsls	r2, r3, #26
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	e04b      	b.n	800c96e <USB_EPStartXfer+0x99e>
 800c8d6:	bf00      	nop
 800c8d8:	07ff8e8f 	.word	0x07ff8e8f
 800c8dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8de:	095b      	lsrs	r3, r3, #5
 800c8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e4:	f003 031f 	and.w	r3, r3, #31
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d102      	bne.n	800c8f2 <USB_EPStartXfer+0x922>
 800c8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c904:	069b      	lsls	r3, r3, #26
 800c906:	431a      	orrs	r2, r3
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c912:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c916:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	e027      	b.n	800c96e <USB_EPStartXfer+0x99e>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	785b      	ldrb	r3, [r3, #1]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d123      	bne.n	800c96e <USB_EPStartXfer+0x99e>
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c930:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c940:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c944:	b292      	uxth	r2, r2
 800c946:	601a      	str	r2, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c952:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c956:	6819      	ldr	r1, [r3, #0]
 800c958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c95a:	041a      	lsls	r2, r3, #16
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	00db      	lsls	r3, r3, #3
 800c962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c96a:	430a      	orrs	r2, r1
 800c96c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	891b      	ldrh	r3, [r3, #8]
 800c972:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	6959      	ldr	r1, [r3, #20]
 800c978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	8b7a      	ldrh	r2, [r7, #26]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fcad 	bl	800d2de <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	4b8b      	ldr	r3, [pc, #556]	@ (800cbc0 <USB_EPStartXfer+0xbf0>)
 800c992:	4013      	ands	r3, r2
 800c994:	60fb      	str	r3, [r7, #12]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f083 0310 	eor.w	r3, r3, #16
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f083 0320 	eor.w	r3, r3, #32
 800c9a4:	60fb      	str	r3, [r7, #12]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	441a      	add	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	e36b      	b.n	800d096 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	7b1b      	ldrb	r3, [r3, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f040 8081 	bne.w	800caca <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	699a      	ldr	r2, [r3, #24]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d909      	bls.n	800c9e8 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	699a      	ldr	r2, [r3, #24]
 800c9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9e0:	1ad2      	subs	r2, r2, r3
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	619a      	str	r2, [r3, #24]
 800c9e6:	e005      	b.n	800c9f4 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	699b      	ldr	r3, [r3, #24]
 800c9ec:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca12:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca16:	605a      	str	r2, [r3, #4]
 800ca18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d112      	bne.n	800ca44 <USB_EPStartXfer+0xa74>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca40:	605a      	str	r2, [r3, #4]
 800ca42:	e30c      	b.n	800d05e <USB_EPStartXfer+0x108e>
 800ca44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca48:	d81e      	bhi.n	800ca88 <USB_EPStartXfer+0xab8>
 800ca4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca4c:	085b      	lsrs	r3, r3, #1
 800ca4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <USB_EPStartXfer+0xa90>
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca6e:	6859      	ldr	r1, [r3, #4]
 800ca70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca72:	069a      	lsls	r2, r3, #26
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	00db      	lsls	r3, r3, #3
 800ca7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca82:	430a      	orrs	r2, r1
 800ca84:	605a      	str	r2, [r3, #4]
 800ca86:	e2ea      	b.n	800d05e <USB_EPStartXfer+0x108e>
 800ca88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca8a:	095b      	lsrs	r3, r3, #5
 800ca8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca90:	f003 031f 	and.w	r3, r3, #31
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <USB_EPStartXfer+0xace>
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caac:	685a      	ldr	r2, [r3, #4]
 800caae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab0:	069b      	lsls	r3, r3, #26
 800cab2:	431a      	orrs	r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cabe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cac2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cac6:	605a      	str	r2, [r3, #4]
 800cac8:	e2c9      	b.n	800d05e <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	78db      	ldrb	r3, [r3, #3]
 800cace:	2b02      	cmp	r3, #2
 800cad0:	f040 8176 	bne.w	800cdc0 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d173      	bne.n	800cbc4 <USB_EPStartXfer+0xbf4>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cae6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cafa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d112      	bne.n	800cb2e <USB_EPStartXfer+0xb5e>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb26:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	e073      	b.n	800cc16 <USB_EPStartXfer+0xc46>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb34:	d820      	bhi.n	800cb78 <USB_EPStartXfer+0xba8>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	085b      	lsrs	r3, r3, #1
 800cb3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <USB_EPStartXfer+0xb80>
 800cb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb5e:	6819      	ldr	r1, [r3, #0]
 800cb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb62:	069a      	lsls	r2, r3, #26
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	00db      	lsls	r3, r3, #3
 800cb6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb72:	430a      	orrs	r2, r1
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	e04e      	b.n	800cc16 <USB_EPStartXfer+0xc46>
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	095b      	lsrs	r3, r3, #5
 800cb7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	f003 031f 	and.w	r3, r3, #31
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <USB_EPStartXfer+0xbc2>
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba4:	069b      	lsls	r3, r3, #26
 800cba6:	431a      	orrs	r2, r3
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbb6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	e02b      	b.n	800cc16 <USB_EPStartXfer+0xc46>
 800cbbe:	bf00      	nop
 800cbc0:	07ff8fbf 	.word	0x07ff8fbf
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d124      	bne.n	800cc16 <USB_EPStartXfer+0xc46>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	00db      	lsls	r3, r3, #3
 800cbd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbea:	b292      	uxth	r2, r2
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbfc:	6819      	ldr	r1, [r3, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	041a      	lsls	r2, r3, #16
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	00db      	lsls	r3, r3, #3
 800cc0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc12:	430a      	orrs	r2, r1
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	785b      	ldrb	r3, [r3, #1]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d170      	bne.n	800cd00 <USB_EPStartXfer+0xd30>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc3c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc40:	605a      	str	r2, [r3, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d112      	bne.n	800cc70 <USB_EPStartXfer+0xca0>
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	00db      	lsls	r3, r3, #3
 800cc50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc68:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc6c:	605a      	str	r2, [r3, #4]
 800cc6e:	e070      	b.n	800cd52 <USB_EPStartXfer+0xd82>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc76:	d820      	bhi.n	800ccba <USB_EPStartXfer+0xcea>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	085b      	lsrs	r3, r3, #1
 800cc7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d002      	beq.n	800cc92 <USB_EPStartXfer+0xcc2>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	3301      	adds	r3, #1
 800cc90:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cca0:	6859      	ldr	r1, [r3, #4]
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	069a      	lsls	r2, r3, #26
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	605a      	str	r2, [r3, #4]
 800ccb8:	e04b      	b.n	800cd52 <USB_EPStartXfer+0xd82>
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	095b      	lsrs	r3, r3, #5
 800ccc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f003 031f 	and.w	r3, r3, #31
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d102      	bne.n	800ccd4 <USB_EPStartXfer+0xd04>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce6:	069b      	lsls	r3, r3, #26
 800cce8:	431a      	orrs	r2, r3
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccf8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ccfc:	605a      	str	r2, [r3, #4]
 800ccfe:	e028      	b.n	800cd52 <USB_EPStartXfer+0xd82>
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	785b      	ldrb	r3, [r3, #1]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d124      	bne.n	800cd52 <USB_EPStartXfer+0xd82>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd26:	b292      	uxth	r2, r2
 800cd28:	605a      	str	r2, [r3, #4]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	00db      	lsls	r3, r3, #3
 800cd30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd38:	6859      	ldr	r1, [r3, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	041a      	lsls	r2, r3, #16
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd4e:	430a      	orrs	r2, r1
 800cd50:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f000 8181 	beq.w	800d05e <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cd6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cd6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d004      	beq.n	800cd7e <USB_EPStartXfer+0xdae>
 800cd74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cd76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10b      	bne.n	800cd96 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cd7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cd80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 816a 	bne.w	800d05e <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cd8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cd8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f040 8164 	bne.w	800d05e <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	4b98      	ldr	r3, [pc, #608]	@ (800d004 <USB_EPStartXfer+0x1034>)
 800cda4:	4013      	ands	r3, r2
 800cda6:	623b      	str	r3, [r7, #32]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	441a      	add	r2, r3
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	e14e      	b.n	800d05e <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	78db      	ldrb	r3, [r3, #3]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	f040 8148 	bne.w	800d05a <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	699a      	ldr	r2, [r3, #24]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d909      	bls.n	800cdea <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	699a      	ldr	r2, [r3, #24]
 800cde0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cde2:	1ad2      	subs	r2, r2, r3
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	619a      	str	r2, [r3, #24]
 800cde8:	e005      	b.n	800cdf6 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	785b      	ldrb	r3, [r3, #1]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d16a      	bne.n	800ced4 <USB_EPStartXfer+0xf04>
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce1c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d112      	bne.n	800ce4e <USB_EPStartXfer+0xe7e>
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	e06a      	b.n	800cf24 <USB_EPStartXfer+0xf54>
 800ce4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce50:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce52:	d81e      	bhi.n	800ce92 <USB_EPStartXfer+0xec2>
 800ce54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce56:	085b      	lsrs	r3, r3, #1
 800ce58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <USB_EPStartXfer+0xe9a>
 800ce64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce66:	3301      	adds	r3, #1
 800ce68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce78:	6819      	ldr	r1, [r3, #0]
 800ce7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7c:	069a      	lsls	r2, r3, #26
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	e048      	b.n	800cf24 <USB_EPStartXfer+0xf54>
 800ce92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce94:	095b      	lsrs	r3, r3, #5
 800ce96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce9a:	f003 031f 	and.w	r3, r3, #31
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d102      	bne.n	800cea8 <USB_EPStartXfer+0xed8>
 800cea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea4:	3b01      	subs	r3, #1
 800cea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceba:	069b      	lsls	r3, r3, #26
 800cebc:	431a      	orrs	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cec8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cecc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	e027      	b.n	800cf24 <USB_EPStartXfer+0xf54>
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	785b      	ldrb	r3, [r3, #1]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d123      	bne.n	800cf24 <USB_EPStartXfer+0xf54>
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	00db      	lsls	r3, r3, #3
 800cee2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cee6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cef6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cefa:	b292      	uxth	r2, r2
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	00db      	lsls	r3, r3, #3
 800cf04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf0c:	6819      	ldr	r1, [r3, #0]
 800cf0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf10:	041a      	lsls	r2, r3, #16
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf20:	430a      	orrs	r2, r1
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	785b      	ldrb	r3, [r3, #1]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d16d      	bne.n	800d008 <USB_EPStartXfer+0x1038>
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf4a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cf4e:	605a      	str	r2, [r3, #4]
 800cf50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d112      	bne.n	800cf7c <USB_EPStartXfer+0xfac>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf74:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf78:	605a      	str	r2, [r3, #4]
 800cf7a:	e070      	b.n	800d05e <USB_EPStartXfer+0x108e>
 800cf7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf80:	d81e      	bhi.n	800cfc0 <USB_EPStartXfer+0xff0>
 800cf82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf84:	085b      	lsrs	r3, r3, #1
 800cf86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d002      	beq.n	800cf98 <USB_EPStartXfer+0xfc8>
 800cf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf94:	3301      	adds	r3, #1
 800cf96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfa2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfa6:	6859      	ldr	r1, [r3, #4]
 800cfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfaa:	069a      	lsls	r2, r3, #26
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	605a      	str	r2, [r3, #4]
 800cfbe:	e04e      	b.n	800d05e <USB_EPStartXfer+0x108e>
 800cfc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc2:	095b      	lsrs	r3, r3, #5
 800cfc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc8:	f003 031f 	and.w	r3, r3, #31
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d102      	bne.n	800cfd6 <USB_EPStartXfer+0x1006>
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe8:	069b      	lsls	r3, r3, #26
 800cfea:	431a      	orrs	r2, r3
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cff6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cffa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cffe:	605a      	str	r2, [r3, #4]
 800d000:	e02d      	b.n	800d05e <USB_EPStartXfer+0x108e>
 800d002:	bf00      	nop
 800d004:	07ff8f8f 	.word	0x07ff8f8f
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	785b      	ldrb	r3, [r3, #1]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d126      	bne.n	800d05e <USB_EPStartXfer+0x108e>
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d01a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d02a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d02e:	b292      	uxth	r2, r2
 800d030:	605a      	str	r2, [r3, #4]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d03c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d040:	6859      	ldr	r1, [r3, #4]
 800d042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d044:	041a      	lsls	r2, r3, #16
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	00db      	lsls	r3, r3, #3
 800d04c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d054:	430a      	orrs	r2, r1
 800d056:	605a      	str	r2, [r3, #4]
 800d058:	e001      	b.n	800d05e <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e01c      	b.n	800d098 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a0 <USB_EPStartXfer+0x10d0>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	61fb      	str	r3, [r7, #28]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	441a      	add	r2, r3
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3758      	adds	r7, #88	@ 0x58
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	07ffbf8f 	.word	0x07ffbf8f

0800d0a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d018      	beq.n	800d0e8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	4b19      	ldr	r3, [pc, #100]	@ (800d128 <USB_EPSetStall+0x84>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	60bb      	str	r3, [r7, #8]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f083 0310 	eor.w	r3, r3, #16
 800d0ce:	60bb      	str	r3, [r7, #8]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	441a      	add	r2, r3
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	e017      	b.n	800d118 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d12c <USB_EPSetStall+0x88>)
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	441a      	add	r2, r3
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	07ff8fbf 	.word	0x07ff8fbf
 800d12c:	07ffbf8f 	.word	0x07ffbf8f

0800d130 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d130:	b480      	push	{r7}
 800d132:	b089      	sub	sp, #36	@ 0x24
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	7b1b      	ldrb	r3, [r3, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d17c      	bne.n	800d23c <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	785b      	ldrb	r3, [r3, #1]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d03c      	beq.n	800d1c4 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	613b      	str	r3, [r7, #16]
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d013      	beq.n	800d18a <USB_EPClearStall+0x5a>
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b37      	ldr	r3, [pc, #220]	@ (800d24c <USB_EPClearStall+0x11c>)
 800d170:	4013      	ands	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	441a      	add	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d184:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d188:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	78db      	ldrb	r3, [r3, #3]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d054      	beq.n	800d23c <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	4b2c      	ldr	r3, [pc, #176]	@ (800d250 <USB_EPClearStall+0x120>)
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	60bb      	str	r3, [r7, #8]
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	f083 0320 	eor.w	r3, r3, #32
 800d1aa:	60bb      	str	r3, [r7, #8]
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	441a      	add	r2, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	e03b      	b.n	800d23c <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	61fb      	str	r3, [r7, #28]
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d013      	beq.n	800d204 <USB_EPClearStall+0xd4>
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	4b18      	ldr	r3, [pc, #96]	@ (800d24c <USB_EPClearStall+0x11c>)
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	61bb      	str	r3, [r7, #24]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	441a      	add	r2, r3
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d1fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d202:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b10      	ldr	r3, [pc, #64]	@ (800d254 <USB_EPClearStall+0x124>)
 800d212:	4013      	ands	r3, r2
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d21c:	617b      	str	r3, [r7, #20]
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d224:	617b      	str	r3, [r7, #20]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	441a      	add	r2, r3
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d23a:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3724      	adds	r7, #36	@ 0x24
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	07ff8f8f 	.word	0x07ff8f8f
 800d250:	07ff8fbf 	.word	0x07ff8fbf
 800d254:	07ffbf8f 	.word	0x07ffbf8f

0800d258 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2280      	movs	r2, #128	@ 0x80
 800d26e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d28a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2ac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b085      	sub	sp, #20
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b08b      	sub	sp, #44	@ 0x2c
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	60b9      	str	r1, [r7, #8]
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	80fb      	strh	r3, [r7, #6]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d2f4:	88bb      	ldrh	r3, [r7, #4]
 800d2f6:	3303      	adds	r3, #3
 800d2f8:	089b      	lsrs	r3, r3, #2
 800d2fa:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d2fc:	88bb      	ldrh	r3, [r7, #4]
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d308:	8afb      	ldrh	r3, [r7, #22]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <USB_WritePMA+0x36>
  {
    NbWords--;
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	3b01      	subs	r3, #1
 800d312:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d314:	88fb      	ldrh	r3, [r7, #6]
 800d316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d31a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d31e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	623b      	str	r3, [r7, #32]
 800d324:	e015      	b.n	800d352 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	3304      	adds	r3, #4
 800d332:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3301      	adds	r3, #1
 800d338:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	3301      	adds	r3, #1
 800d33e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	3301      	adds	r3, #1
 800d344:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	3301      	adds	r3, #1
 800d34a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	3b01      	subs	r3, #1
 800d350:	623b      	str	r3, [r7, #32]
 800d352:	6a3b      	ldr	r3, [r7, #32]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1e6      	bne.n	800d326 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d358:	8afb      	ldrh	r3, [r7, #22]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01a      	beq.n	800d394 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d35e:	2300      	movs	r3, #0
 800d360:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	6a3b      	ldr	r3, [r7, #32]
 800d36a:	00db      	lsls	r3, r3, #3
 800d36c:	fa02 f303 	lsl.w	r3, r2, r3
 800d370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d372:	4313      	orrs	r3, r2
 800d374:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	3301      	adds	r3, #1
 800d37a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	3301      	adds	r3, #1
 800d380:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d382:	8afb      	ldrh	r3, [r7, #22]
 800d384:	3b01      	subs	r3, #1
 800d386:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d388:	8afb      	ldrh	r3, [r7, #22]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1e9      	bne.n	800d362 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d392:	601a      	str	r2, [r3, #0]
  }
}
 800d394:	bf00      	nop
 800d396:	372c      	adds	r7, #44	@ 0x2c
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b08b      	sub	sp, #44	@ 0x2c
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	80fb      	strh	r3, [r7, #6]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d3b6:	88bb      	ldrh	r3, [r7, #4]
 800d3b8:	3303      	adds	r3, #3
 800d3ba:	089b      	lsrs	r3, r3, #2
 800d3bc:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d3be:	88bb      	ldrh	r3, [r7, #4]
 800d3c0:	f003 0303 	and.w	r3, r3, #3
 800d3c4:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d3ca:	88fb      	ldrh	r3, [r7, #6]
 800d3cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3d4:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d3d6:	8b7b      	ldrh	r3, [r7, #26]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3e6:	e015      	b.n	800d414 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d3e8:	6a3b      	ldr	r3, [r7, #32]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	3301      	adds	r3, #1
 800d400:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	3301      	adds	r3, #1
 800d406:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	3301      	adds	r3, #1
 800d40c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d410:	3b01      	subs	r3, #1
 800d412:	627b      	str	r3, [r7, #36]	@ 0x24
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1e6      	bne.n	800d3e8 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d41a:	8b7b      	ldrh	r3, [r7, #26]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d017      	beq.n	800d450 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	fa22 f303 	lsr.w	r3, r2, r3
 800d432:	b2da      	uxtb	r2, r3
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	701a      	strb	r2, [r3, #0]
      count++;
 800d438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43a:	3301      	adds	r3, #1
 800d43c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	3301      	adds	r3, #1
 800d442:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d444:	8b7b      	ldrh	r3, [r7, #26]
 800d446:	3b01      	subs	r3, #1
 800d448:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800d44a:	8b7b      	ldrh	r3, [r7, #26]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1ea      	bne.n	800d426 <USB_ReadPMA+0x86>
  }
}
 800d450:	bf00      	nop
 800d452:	372c      	adds	r7, #44	@ 0x2c
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d468:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d46c:	f000 ff3e 	bl	800e2ec <USBD_static_malloc>
 800d470:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d109      	bne.n	800d48c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	32b0      	adds	r2, #176	@ 0xb0
 800d482:	2100      	movs	r1, #0
 800d484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d488:	2302      	movs	r3, #2
 800d48a:	e0d4      	b.n	800d636 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d48c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d490:	2100      	movs	r1, #0
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f002 faab 	bl	800f9ee <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	32b0      	adds	r2, #176	@ 0xb0
 800d4a2:	68f9      	ldr	r1, [r7, #12]
 800d4a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	32b0      	adds	r2, #176	@ 0xb0
 800d4b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7c1b      	ldrb	r3, [r3, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d138      	bne.n	800d536 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d4c4:	4b5e      	ldr	r3, [pc, #376]	@ (800d640 <USBD_CDC_Init+0x1e4>)
 800d4c6:	7819      	ldrb	r1, [r3, #0]
 800d4c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fe13 	bl	800e0fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d4d4:	4b5a      	ldr	r3, [pc, #360]	@ (800d640 <USBD_CDC_Init+0x1e4>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	f003 020f 	and.w	r2, r3, #15
 800d4dc:	6879      	ldr	r1, [r7, #4]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	440b      	add	r3, r1
 800d4e8:	3324      	adds	r3, #36	@ 0x24
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d4ee:	4b55      	ldr	r3, [pc, #340]	@ (800d644 <USBD_CDC_Init+0x1e8>)
 800d4f0:	7819      	ldrb	r1, [r3, #0]
 800d4f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fdfe 	bl	800e0fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d4fe:	4b51      	ldr	r3, [pc, #324]	@ (800d644 <USBD_CDC_Init+0x1e8>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	f003 020f 	and.w	r2, r3, #15
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	4613      	mov	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	440b      	add	r3, r1
 800d512:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d516:	2201      	movs	r2, #1
 800d518:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d51a:	4b4b      	ldr	r3, [pc, #300]	@ (800d648 <USBD_CDC_Init+0x1ec>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	f003 020f 	and.w	r2, r3, #15
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	4613      	mov	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	440b      	add	r3, r1
 800d52e:	3326      	adds	r3, #38	@ 0x26
 800d530:	2210      	movs	r2, #16
 800d532:	801a      	strh	r2, [r3, #0]
 800d534:	e035      	b.n	800d5a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d536:	4b42      	ldr	r3, [pc, #264]	@ (800d640 <USBD_CDC_Init+0x1e4>)
 800d538:	7819      	ldrb	r1, [r3, #0]
 800d53a:	2340      	movs	r3, #64	@ 0x40
 800d53c:	2202      	movs	r2, #2
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fddb 	bl	800e0fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d544:	4b3e      	ldr	r3, [pc, #248]	@ (800d640 <USBD_CDC_Init+0x1e4>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	f003 020f 	and.w	r2, r3, #15
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	4613      	mov	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	440b      	add	r3, r1
 800d558:	3324      	adds	r3, #36	@ 0x24
 800d55a:	2201      	movs	r2, #1
 800d55c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d55e:	4b39      	ldr	r3, [pc, #228]	@ (800d644 <USBD_CDC_Init+0x1e8>)
 800d560:	7819      	ldrb	r1, [r3, #0]
 800d562:	2340      	movs	r3, #64	@ 0x40
 800d564:	2202      	movs	r2, #2
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fdc7 	bl	800e0fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d56c:	4b35      	ldr	r3, [pc, #212]	@ (800d644 <USBD_CDC_Init+0x1e8>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	f003 020f 	and.w	r2, r3, #15
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	4613      	mov	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	440b      	add	r3, r1
 800d580:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d584:	2201      	movs	r2, #1
 800d586:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d588:	4b2f      	ldr	r3, [pc, #188]	@ (800d648 <USBD_CDC_Init+0x1ec>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	f003 020f 	and.w	r2, r3, #15
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	4613      	mov	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	440b      	add	r3, r1
 800d59c:	3326      	adds	r3, #38	@ 0x26
 800d59e:	2210      	movs	r2, #16
 800d5a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d5a2:	4b29      	ldr	r3, [pc, #164]	@ (800d648 <USBD_CDC_Init+0x1ec>)
 800d5a4:	7819      	ldrb	r1, [r3, #0]
 800d5a6:	2308      	movs	r3, #8
 800d5a8:	2203      	movs	r2, #3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fda5 	bl	800e0fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d5b0:	4b25      	ldr	r3, [pc, #148]	@ (800d648 <USBD_CDC_Init+0x1ec>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	f003 020f 	and.w	r2, r3, #15
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	440b      	add	r3, r1
 800d5c4:	3324      	adds	r3, #36	@ 0x24
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	33b0      	adds	r3, #176	@ 0xb0
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4413      	add	r3, r2
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d600:	2302      	movs	r3, #2
 800d602:	e018      	b.n	800d636 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7c1b      	ldrb	r3, [r3, #16]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d60c:	4b0d      	ldr	r3, [pc, #52]	@ (800d644 <USBD_CDC_Init+0x1e8>)
 800d60e:	7819      	ldrb	r1, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fe38 	bl	800e290 <USBD_LL_PrepareReceive>
 800d620:	e008      	b.n	800d634 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d622:	4b08      	ldr	r3, [pc, #32]	@ (800d644 <USBD_CDC_Init+0x1e8>)
 800d624:	7819      	ldrb	r1, [r3, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d62c:	2340      	movs	r3, #64	@ 0x40
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fe2e 	bl	800e290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200000af 	.word	0x200000af
 800d644:	200000b0 	.word	0x200000b0
 800d648:	200000b1 	.word	0x200000b1

0800d64c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d658:	4b3a      	ldr	r3, [pc, #232]	@ (800d744 <USBD_CDC_DeInit+0xf8>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fd6b 	bl	800e13a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d664:	4b37      	ldr	r3, [pc, #220]	@ (800d744 <USBD_CDC_DeInit+0xf8>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	f003 020f 	and.w	r2, r3, #15
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	440b      	add	r3, r1
 800d678:	3324      	adds	r3, #36	@ 0x24
 800d67a:	2200      	movs	r2, #0
 800d67c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d67e:	4b32      	ldr	r3, [pc, #200]	@ (800d748 <USBD_CDC_DeInit+0xfc>)
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fd58 	bl	800e13a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d68a:	4b2f      	ldr	r3, [pc, #188]	@ (800d748 <USBD_CDC_DeInit+0xfc>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	f003 020f 	and.w	r2, r3, #15
 800d692:	6879      	ldr	r1, [r7, #4]
 800d694:	4613      	mov	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d6a6:	4b29      	ldr	r3, [pc, #164]	@ (800d74c <USBD_CDC_DeInit+0x100>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fd44 	bl	800e13a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d6b2:	4b26      	ldr	r3, [pc, #152]	@ (800d74c <USBD_CDC_DeInit+0x100>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	f003 020f 	and.w	r2, r3, #15
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	440b      	add	r3, r1
 800d6c6:	3324      	adds	r3, #36	@ 0x24
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d6cc:	4b1f      	ldr	r3, [pc, #124]	@ (800d74c <USBD_CDC_DeInit+0x100>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	f003 020f 	and.w	r2, r3, #15
 800d6d4:	6879      	ldr	r1, [r7, #4]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4413      	add	r3, r2
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	440b      	add	r3, r1
 800d6e0:	3326      	adds	r3, #38	@ 0x26
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	32b0      	adds	r2, #176	@ 0xb0
 800d6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01f      	beq.n	800d738 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	33b0      	adds	r3, #176	@ 0xb0
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4413      	add	r3, r2
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	32b0      	adds	r2, #176	@ 0xb0
 800d716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f000 fdf4 	bl	800e308 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	32b0      	adds	r2, #176	@ 0xb0
 800d72a:	2100      	movs	r1, #0
 800d72c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	200000af 	.word	0x200000af
 800d748:	200000b0 	.word	0x200000b0
 800d74c:	200000b1 	.word	0x200000b1

0800d750 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	32b0      	adds	r2, #176	@ 0xb0
 800d764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d768:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d77c:	2303      	movs	r3, #3
 800d77e:	e0bf      	b.n	800d900 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d050      	beq.n	800d82e <USBD_CDC_Setup+0xde>
 800d78c:	2b20      	cmp	r3, #32
 800d78e:	f040 80af 	bne.w	800d8f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	88db      	ldrh	r3, [r3, #6]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d03a      	beq.n	800d810 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	b25b      	sxtb	r3, r3
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	da1b      	bge.n	800d7dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	33b0      	adds	r3, #176	@ 0xb0
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	683a      	ldr	r2, [r7, #0]
 800d7b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d7ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	88d2      	ldrh	r2, [r2, #6]
 800d7c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	88db      	ldrh	r3, [r3, #6]
 800d7c6:	2b07      	cmp	r3, #7
 800d7c8:	bf28      	it	cs
 800d7ca:	2307      	movcs	r3, #7
 800d7cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	89fa      	ldrh	r2, [r7, #14]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f002 f88a 	bl	800f8ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d7da:	e090      	b.n	800d8fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	785a      	ldrb	r2, [r3, #1]
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	88db      	ldrh	r3, [r3, #6]
 800d7ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800d7ec:	d803      	bhi.n	800d7f6 <USBD_CDC_Setup+0xa6>
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	88db      	ldrh	r3, [r3, #6]
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	e000      	b.n	800d7f8 <USBD_CDC_Setup+0xa8>
 800d7f6:	2240      	movs	r2, #64	@ 0x40
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d7fe:	6939      	ldr	r1, [r7, #16]
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d806:	461a      	mov	r2, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f002 f89c 	bl	800f946 <USBD_CtlPrepareRx>
      break;
 800d80e:	e076      	b.n	800d8fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	33b0      	adds	r3, #176	@ 0xb0
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4413      	add	r3, r2
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	7850      	ldrb	r0, [r2, #1]
 800d826:	2200      	movs	r2, #0
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	4798      	blx	r3
      break;
 800d82c:	e067      	b.n	800d8fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	785b      	ldrb	r3, [r3, #1]
 800d832:	2b0b      	cmp	r3, #11
 800d834:	d851      	bhi.n	800d8da <USBD_CDC_Setup+0x18a>
 800d836:	a201      	add	r2, pc, #4	@ (adr r2, 800d83c <USBD_CDC_Setup+0xec>)
 800d838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d83c:	0800d86d 	.word	0x0800d86d
 800d840:	0800d8e9 	.word	0x0800d8e9
 800d844:	0800d8db 	.word	0x0800d8db
 800d848:	0800d8db 	.word	0x0800d8db
 800d84c:	0800d8db 	.word	0x0800d8db
 800d850:	0800d8db 	.word	0x0800d8db
 800d854:	0800d8db 	.word	0x0800d8db
 800d858:	0800d8db 	.word	0x0800d8db
 800d85c:	0800d8db 	.word	0x0800d8db
 800d860:	0800d8db 	.word	0x0800d8db
 800d864:	0800d897 	.word	0x0800d897
 800d868:	0800d8c1 	.word	0x0800d8c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b03      	cmp	r3, #3
 800d876:	d107      	bne.n	800d888 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d878:	f107 030a 	add.w	r3, r7, #10
 800d87c:	2202      	movs	r2, #2
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f002 f834 	bl	800f8ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d886:	e032      	b.n	800d8ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f001 feb1 	bl	800f5f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d890:	2303      	movs	r3, #3
 800d892:	75fb      	strb	r3, [r7, #23]
          break;
 800d894:	e02b      	b.n	800d8ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d107      	bne.n	800d8b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d8a2:	f107 030d 	add.w	r3, r7, #13
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f002 f81f 	bl	800f8ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8b0:	e01d      	b.n	800d8ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f001 fe9c 	bl	800f5f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d8be:	e016      	b.n	800d8ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	d00f      	beq.n	800d8ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f001 fe8f 	bl	800f5f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d8d8:	e008      	b.n	800d8ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f001 fe88 	bl	800f5f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d8e2:	2303      	movs	r3, #3
 800d8e4:	75fb      	strb	r3, [r7, #23]
          break;
 800d8e6:	e002      	b.n	800d8ee <USBD_CDC_Setup+0x19e>
          break;
 800d8e8:	bf00      	nop
 800d8ea:	e008      	b.n	800d8fe <USBD_CDC_Setup+0x1ae>
          break;
 800d8ec:	bf00      	nop
      }
      break;
 800d8ee:	e006      	b.n	800d8fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f001 fe7d 	bl	800f5f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d8fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d91a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	32b0      	adds	r2, #176	@ 0xb0
 800d926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d92e:	2303      	movs	r3, #3
 800d930:	e065      	b.n	800d9fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	32b0      	adds	r2, #176	@ 0xb0
 800d93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d940:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d942:	78fb      	ldrb	r3, [r7, #3]
 800d944:	f003 020f 	and.w	r2, r3, #15
 800d948:	6879      	ldr	r1, [r7, #4]
 800d94a:	4613      	mov	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	4413      	add	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	440b      	add	r3, r1
 800d954:	3318      	adds	r3, #24
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d02f      	beq.n	800d9bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	f003 020f 	and.w	r2, r3, #15
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	4613      	mov	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	440b      	add	r3, r1
 800d96e:	3318      	adds	r3, #24
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	78fb      	ldrb	r3, [r7, #3]
 800d974:	f003 010f 	and.w	r1, r3, #15
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	460b      	mov	r3, r1
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	440b      	add	r3, r1
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	4403      	add	r3, r0
 800d984:	3324      	adds	r3, #36	@ 0x24
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	fbb2 f1f3 	udiv	r1, r2, r3
 800d98c:	fb01 f303 	mul.w	r3, r1, r3
 800d990:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d992:	2b00      	cmp	r3, #0
 800d994:	d112      	bne.n	800d9bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d996:	78fb      	ldrb	r3, [r7, #3]
 800d998:	f003 020f 	and.w	r2, r3, #15
 800d99c:	6879      	ldr	r1, [r7, #4]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4413      	add	r3, r2
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	440b      	add	r3, r1
 800d9a8:	3318      	adds	r3, #24
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d9ae:	78f9      	ldrb	r1, [r7, #3]
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fc50 	bl	800e25a <USBD_LL_Transmit>
 800d9ba:	e01f      	b.n	800d9fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	33b0      	adds	r3, #176	@ 0xb0
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	4413      	add	r3, r2
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d010      	beq.n	800d9fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	33b0      	adds	r3, #176	@ 0xb0
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d9f8:	78fa      	ldrb	r2, [r7, #3]
 800d9fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b084      	sub	sp, #16
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	460b      	mov	r3, r1
 800da10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	32b0      	adds	r2, #176	@ 0xb0
 800da1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	32b0      	adds	r2, #176	@ 0xb0
 800da2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800da34:	2303      	movs	r3, #3
 800da36:	e01a      	b.n	800da6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800da38:	78fb      	ldrb	r3, [r7, #3]
 800da3a:	4619      	mov	r1, r3
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 fc42 	bl	800e2c6 <USBD_LL_GetRxDataSize>
 800da42:	4602      	mov	r2, r0
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	33b0      	adds	r3, #176	@ 0xb0
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800da68:	4611      	mov	r1, r2
 800da6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	32b0      	adds	r2, #176	@ 0xb0
 800da88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d101      	bne.n	800da98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da94:	2303      	movs	r3, #3
 800da96:	e024      	b.n	800dae2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	33b0      	adds	r3, #176	@ 0xb0
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	4413      	add	r3, r2
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d019      	beq.n	800dae0 <USBD_CDC_EP0_RxReady+0x6a>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dab2:	2bff      	cmp	r3, #255	@ 0xff
 800dab4:	d014      	beq.n	800dae0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	33b0      	adds	r3, #176	@ 0xb0
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4413      	add	r3, r2
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800dace:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dad6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	22ff      	movs	r2, #255	@ 0xff
 800dadc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
	...

0800daec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800daf4:	2182      	movs	r1, #130	@ 0x82
 800daf6:	4818      	ldr	r0, [pc, #96]	@ (800db58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800daf8:	f000 ff45 	bl	800e986 <USBD_GetEpDesc>
 800dafc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dafe:	2101      	movs	r1, #1
 800db00:	4815      	ldr	r0, [pc, #84]	@ (800db58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db02:	f000 ff40 	bl	800e986 <USBD_GetEpDesc>
 800db06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db08:	2181      	movs	r1, #129	@ 0x81
 800db0a:	4813      	ldr	r0, [pc, #76]	@ (800db58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800db0c:	f000 ff3b 	bl	800e986 <USBD_GetEpDesc>
 800db10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2210      	movs	r2, #16
 800db1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d006      	beq.n	800db32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2200      	movs	r2, #0
 800db28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db2c:	711a      	strb	r2, [r3, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db40:	711a      	strb	r2, [r3, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2243      	movs	r2, #67	@ 0x43
 800db4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db4c:	4b02      	ldr	r3, [pc, #8]	@ (800db58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	2000006c 	.word	0x2000006c

0800db5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db64:	2182      	movs	r1, #130	@ 0x82
 800db66:	4818      	ldr	r0, [pc, #96]	@ (800dbc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db68:	f000 ff0d 	bl	800e986 <USBD_GetEpDesc>
 800db6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db6e:	2101      	movs	r1, #1
 800db70:	4815      	ldr	r0, [pc, #84]	@ (800dbc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db72:	f000 ff08 	bl	800e986 <USBD_GetEpDesc>
 800db76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db78:	2181      	movs	r1, #129	@ 0x81
 800db7a:	4813      	ldr	r0, [pc, #76]	@ (800dbc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800db7c:	f000 ff03 	bl	800e986 <USBD_GetEpDesc>
 800db80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2210      	movs	r2, #16
 800db8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d006      	beq.n	800dba2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	2200      	movs	r2, #0
 800db98:	711a      	strb	r2, [r3, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f042 0202 	orr.w	r2, r2, #2
 800dba0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d006      	beq.n	800dbb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	711a      	strb	r2, [r3, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f042 0202 	orr.w	r2, r2, #2
 800dbb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2243      	movs	r2, #67	@ 0x43
 800dbba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dbbc:	4b02      	ldr	r3, [pc, #8]	@ (800dbc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	2000006c 	.word	0x2000006c

0800dbcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dbd4:	2182      	movs	r1, #130	@ 0x82
 800dbd6:	4818      	ldr	r0, [pc, #96]	@ (800dc38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dbd8:	f000 fed5 	bl	800e986 <USBD_GetEpDesc>
 800dbdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dbde:	2101      	movs	r1, #1
 800dbe0:	4815      	ldr	r0, [pc, #84]	@ (800dc38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dbe2:	f000 fed0 	bl	800e986 <USBD_GetEpDesc>
 800dbe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dbe8:	2181      	movs	r1, #129	@ 0x81
 800dbea:	4813      	ldr	r0, [pc, #76]	@ (800dc38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dbec:	f000 fecb 	bl	800e986 <USBD_GetEpDesc>
 800dbf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2210      	movs	r2, #16
 800dbfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d006      	beq.n	800dc12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc0c:	711a      	strb	r2, [r3, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d006      	beq.n	800dc26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc20:	711a      	strb	r2, [r3, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2243      	movs	r2, #67	@ 0x43
 800dc2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc2c:	4b02      	ldr	r3, [pc, #8]	@ (800dc38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3718      	adds	r7, #24
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	2000006c 	.word	0x2000006c

0800dc3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	220a      	movs	r2, #10
 800dc48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc4a:	4b03      	ldr	r3, [pc, #12]	@ (800dc58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	20000028 	.word	0x20000028

0800dc5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d101      	bne.n	800dc70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	e009      	b.n	800dc84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	33b0      	adds	r3, #176	@ 0xb0
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4413      	add	r3, r2
 800dc7e:	683a      	ldr	r2, [r7, #0]
 800dc80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	32b0      	adds	r2, #176	@ 0xb0
 800dca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d101      	bne.n	800dcb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	e008      	b.n	800dcc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	68ba      	ldr	r2, [r7, #8]
 800dcba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	32b0      	adds	r2, #176	@ 0xb0
 800dce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	e004      	b.n	800dd02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
	...

0800dd10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	32b0      	adds	r2, #176	@ 0xb0
 800dd22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	32b0      	adds	r2, #176	@ 0xb0
 800dd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	e018      	b.n	800dd70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	7c1b      	ldrb	r3, [r3, #16]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10a      	bne.n	800dd5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd46:	4b0c      	ldr	r3, [pc, #48]	@ (800dd78 <USBD_CDC_ReceivePacket+0x68>)
 800dd48:	7819      	ldrb	r1, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fa9b 	bl	800e290 <USBD_LL_PrepareReceive>
 800dd5a:	e008      	b.n	800dd6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd5c:	4b06      	ldr	r3, [pc, #24]	@ (800dd78 <USBD_CDC_ReceivePacket+0x68>)
 800dd5e:	7819      	ldrb	r1, [r3, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd66:	2340      	movs	r3, #64	@ 0x40
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fa91 	bl	800e290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	200000b0 	.word	0x200000b0

0800dd7c <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dd80:	2200      	movs	r2, #0
 800dd82:	4905      	ldr	r1, [pc, #20]	@ (800dd98 <TEMPLATE_Init+0x1c>)
 800dd84:	4805      	ldr	r0, [pc, #20]	@ (800dd9c <TEMPLATE_Init+0x20>)
 800dd86:	f7ff ff83 	bl	800dc90 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dd8a:	4905      	ldr	r1, [pc, #20]	@ (800dda0 <TEMPLATE_Init+0x24>)
 800dd8c:	4803      	ldr	r0, [pc, #12]	@ (800dd9c <TEMPLATE_Init+0x20>)
 800dd8e:	f7ff ffa1 	bl	800dcd4 <USBD_CDC_SetRxBuffer>
      return (0);
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	20000c40 	.word	0x20000c40
 800dd9c:	200006c0 	.word	0x200006c0
 800dda0:	20000a40 	.word	0x20000a40

0800dda4 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800dda4:	b480      	push	{r7}
 800dda6:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	6039      	str	r1, [r7, #0]
 800ddbe:	71fb      	strb	r3, [r7, #7]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	2b23      	cmp	r3, #35	@ 0x23
 800ddc8:	f200 8098 	bhi.w	800defc <TEMPLATE_Control+0x148>
 800ddcc:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd4 <TEMPLATE_Control+0x20>)
 800ddce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd2:	bf00      	nop
 800ddd4:	0800defd 	.word	0x0800defd
 800ddd8:	0800defd 	.word	0x0800defd
 800dddc:	0800defd 	.word	0x0800defd
 800dde0:	0800defd 	.word	0x0800defd
 800dde4:	0800defd 	.word	0x0800defd
 800dde8:	0800defd 	.word	0x0800defd
 800ddec:	0800defd 	.word	0x0800defd
 800ddf0:	0800defd 	.word	0x0800defd
 800ddf4:	0800defd 	.word	0x0800defd
 800ddf8:	0800defd 	.word	0x0800defd
 800ddfc:	0800defd 	.word	0x0800defd
 800de00:	0800defd 	.word	0x0800defd
 800de04:	0800defd 	.word	0x0800defd
 800de08:	0800defd 	.word	0x0800defd
 800de0c:	0800defd 	.word	0x0800defd
 800de10:	0800defd 	.word	0x0800defd
 800de14:	0800defd 	.word	0x0800defd
 800de18:	0800defd 	.word	0x0800defd
 800de1c:	0800defd 	.word	0x0800defd
 800de20:	0800defd 	.word	0x0800defd
 800de24:	0800defd 	.word	0x0800defd
 800de28:	0800defd 	.word	0x0800defd
 800de2c:	0800defd 	.word	0x0800defd
 800de30:	0800defd 	.word	0x0800defd
 800de34:	0800defd 	.word	0x0800defd
 800de38:	0800defd 	.word	0x0800defd
 800de3c:	0800defd 	.word	0x0800defd
 800de40:	0800defd 	.word	0x0800defd
 800de44:	0800defd 	.word	0x0800defd
 800de48:	0800defd 	.word	0x0800defd
 800de4c:	0800defd 	.word	0x0800defd
 800de50:	0800defd 	.word	0x0800defd
 800de54:	0800de65 	.word	0x0800de65
 800de58:	0800dea9 	.word	0x0800dea9
 800de5c:	0800defd 	.word	0x0800defd
 800de60:	0800defd 	.word	0x0800defd
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	461a      	mov	r2, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	3301      	adds	r3, #1
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	021b      	lsls	r3, r3, #8
 800de72:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3302      	adds	r3, #2
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800de7c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	3303      	adds	r3, #3
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	061b      	lsls	r3, r3, #24
 800de86:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800de88:	461a      	mov	r2, r3
 800de8a:	4b20      	ldr	r3, [pc, #128]	@ (800df0c <TEMPLATE_Control+0x158>)
 800de8c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	791a      	ldrb	r2, [r3, #4]
 800de92:	4b1e      	ldr	r3, [pc, #120]	@ (800df0c <TEMPLATE_Control+0x158>)
 800de94:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	795a      	ldrb	r2, [r3, #5]
 800de9a:	4b1c      	ldr	r3, [pc, #112]	@ (800df0c <TEMPLATE_Control+0x158>)
 800de9c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	799a      	ldrb	r2, [r3, #6]
 800dea2:	4b1a      	ldr	r3, [pc, #104]	@ (800df0c <TEMPLATE_Control+0x158>)
 800dea4:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800dea6:	e02a      	b.n	800defe <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800dea8:	4b18      	ldr	r3, [pc, #96]	@ (800df0c <TEMPLATE_Control+0x158>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	b2da      	uxtb	r2, r3
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800deb2:	4b16      	ldr	r3, [pc, #88]	@ (800df0c <TEMPLATE_Control+0x158>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	0a1a      	lsrs	r2, r3, #8
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	3301      	adds	r3, #1
 800debc:	b2d2      	uxtb	r2, r2
 800debe:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800dec0:	4b12      	ldr	r3, [pc, #72]	@ (800df0c <TEMPLATE_Control+0x158>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	0c1a      	lsrs	r2, r3, #16
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	3302      	adds	r3, #2
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800dece:	4b0f      	ldr	r3, [pc, #60]	@ (800df0c <TEMPLATE_Control+0x158>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	0e1a      	lsrs	r2, r3, #24
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	3303      	adds	r3, #3
 800ded8:	b2d2      	uxtb	r2, r2
 800deda:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	3304      	adds	r3, #4
 800dee0:	4a0a      	ldr	r2, [pc, #40]	@ (800df0c <TEMPLATE_Control+0x158>)
 800dee2:	7912      	ldrb	r2, [r2, #4]
 800dee4:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	3305      	adds	r3, #5
 800deea:	4a08      	ldr	r2, [pc, #32]	@ (800df0c <TEMPLATE_Control+0x158>)
 800deec:	7952      	ldrb	r2, [r2, #5]
 800deee:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	3306      	adds	r3, #6
 800def4:	4a05      	ldr	r2, [pc, #20]	@ (800df0c <TEMPLATE_Control+0x158>)
 800def6:	7992      	ldrb	r2, [r2, #6]
 800def8:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800defa:	e000      	b.n	800defe <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800defc:	bf00      	nop
  }

  return (0);
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	200000c8 	.word	0x200000c8

0800df10 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b31      	cmp	r3, #49	@ 0x31
 800df20:	d105      	bne.n	800df2e <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800df22:	2201      	movs	r2, #1
 800df24:	2120      	movs	r1, #32
 800df26:	480a      	ldr	r0, [pc, #40]	@ (800df50 <TEMPLATE_Receive+0x40>)
 800df28:	f7f4 fa34 	bl	8002394 <HAL_GPIO_WritePin>
 800df2c:	e008      	b.n	800df40 <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2b30      	cmp	r3, #48	@ 0x30
 800df34:	d104      	bne.n	800df40 <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800df36:	2200      	movs	r2, #0
 800df38:	2120      	movs	r1, #32
 800df3a:	4805      	ldr	r0, [pc, #20]	@ (800df50 <TEMPLATE_Receive+0x40>)
 800df3c:	f7f4 fa2a 	bl	8002394 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df40:	4804      	ldr	r0, [pc, #16]	@ (800df54 <TEMPLATE_Receive+0x44>)
 800df42:	f7ff fee5 	bl	800dd10 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	42020000 	.word	0x42020000
 800df54:	200006c0 	.word	0x200006c0

0800df58 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4613      	mov	r3, r2
 800df64:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f000 faa5 	bl	800e4da <USBD_LL_SetupStage>
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800dfaa:	78fa      	ldrb	r2, [r7, #3]
 800dfac:	6879      	ldr	r1, [r7, #4]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4413      	add	r3, r2
 800dfb4:	00db      	lsls	r3, r3, #3
 800dfb6:	440b      	add	r3, r1
 800dfb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	78fb      	ldrb	r3, [r7, #3]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f000 fadf 	bl	800e584 <USBD_LL_DataOutStage>
}
 800dfc6:	bf00      	nop
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800dfe0:	78fa      	ldrb	r2, [r7, #3]
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	4413      	add	r3, r2
 800dfea:	00db      	lsls	r3, r3, #3
 800dfec:	440b      	add	r3, r1
 800dfee:	3328      	adds	r3, #40	@ 0x28
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	78fb      	ldrb	r3, [r7, #3]
 800dff4:	4619      	mov	r1, r3
 800dff6:	f000 fb78 	bl	800e6ea <USBD_LL_DataInStage>
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e010:	4618      	mov	r0, r3
 800e012:	f000 fc7e 	bl	800e912 <USBD_LL_SOF>
}
 800e016:	bf00      	nop
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e026:	2301      	movs	r3, #1
 800e028:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	79db      	ldrb	r3, [r3, #7]
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d001      	beq.n	800e036 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e032:	f7f2 fecb 	bl	8000dcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e03c:	7bfa      	ldrb	r2, [r7, #15]
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f000 fc56 	bl	800e8f2 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f000 fbfe 	bl	800e84e <USBD_LL_Reset>
}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a19      	ldr	r2, [pc, #100]	@ (800e0cc <USBD_LL_Init+0x70>)
 800e068:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e072:	2340      	movs	r3, #64	@ 0x40
 800e074:	2200      	movs	r2, #0
 800e076:	2100      	movs	r1, #0
 800e078:	f7f5 ffa8 	bl	8003fcc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e082:	2380      	movs	r3, #128	@ 0x80
 800e084:	2200      	movs	r2, #0
 800e086:	2180      	movs	r1, #128	@ 0x80
 800e088:	f7f5 ffa0 	bl	8003fcc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e092:	23c0      	movs	r3, #192	@ 0xc0
 800e094:	2200      	movs	r2, #0
 800e096:	2181      	movs	r1, #129	@ 0x81
 800e098:	f7f5 ff98 	bl	8003fcc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	f7f5 ff8f 	bl	8003fcc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0b4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	2182      	movs	r1, #130	@ 0x82
 800e0bc:	f7f5 ff86 	bl	8003fcc <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	200003dc 	.word	0x200003dc

0800e0d0 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7f4 fc58 	bl	8002994 <HAL_PCD_Start>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 f916 	bl	800e31c <USBD_Get_USB_Status>
 800e0f0:	4603      	mov	r3, r0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	4608      	mov	r0, r1
 800e104:	4611      	mov	r1, r2
 800e106:	461a      	mov	r2, r3
 800e108:	4603      	mov	r3, r0
 800e10a:	70fb      	strb	r3, [r7, #3]
 800e10c:	460b      	mov	r3, r1
 800e10e:	70bb      	strb	r3, [r7, #2]
 800e110:	4613      	mov	r3, r2
 800e112:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e11a:	78bb      	ldrb	r3, [r7, #2]
 800e11c:	883a      	ldrh	r2, [r7, #0]
 800e11e:	78f9      	ldrb	r1, [r7, #3]
 800e120:	f7f4 fd87 	bl	8002c32 <HAL_PCD_EP_Open>
 800e124:	4603      	mov	r3, r0
 800e126:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 f8f6 	bl	800e31c <USBD_Get_USB_Status>
 800e130:	4603      	mov	r3, r0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	460b      	mov	r3, r1
 800e144:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e14c:	78fa      	ldrb	r2, [r7, #3]
 800e14e:	4611      	mov	r1, r2
 800e150:	4618      	mov	r0, r3
 800e152:	f7f4 fdcf 	bl	8002cf4 <HAL_PCD_EP_Close>
 800e156:	4603      	mov	r3, r0
 800e158:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 f8dd 	bl	800e31c <USBD_Get_USB_Status>
 800e162:	4603      	mov	r3, r0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e17e:	78fa      	ldrb	r2, [r7, #3]
 800e180:	4611      	mov	r1, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7f4 fe82 	bl	8002e8c <HAL_PCD_EP_SetStall>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 f8c4 	bl	800e31c <USBD_Get_USB_Status>
 800e194:	4603      	mov	r3, r0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1b0:	78fa      	ldrb	r2, [r7, #3]
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f4 febd 	bl	8002f34 <HAL_PCD_EP_ClrStall>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 f8ab 	bl	800e31c <USBD_Get_USB_Status>
 800e1c6:	4603      	mov	r3, r0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1e2:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e1e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	da0b      	bge.n	800e204 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1f2:	68f9      	ldr	r1, [r7, #12]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4413      	add	r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	440b      	add	r3, r1
 800e1fe:	3316      	adds	r3, #22
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	e00b      	b.n	800e21c <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e20a:	68f9      	ldr	r1, [r7, #12]
 800e20c:	4613      	mov	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	00db      	lsls	r3, r3, #3
 800e214:	440b      	add	r3, r1
 800e216:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e21a:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e23a:	78fa      	ldrb	r2, [r7, #3]
 800e23c:	4611      	mov	r1, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f4 fcd3 	bl	8002bea <HAL_PCD_SetAddress>
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f866 	bl	800e31c <USBD_Get_USB_Status>
 800e250:	4603      	mov	r3, r0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b086      	sub	sp, #24
 800e25e:	af00      	add	r7, sp, #0
 800e260:	60f8      	str	r0, [r7, #12]
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	603b      	str	r3, [r7, #0]
 800e266:	460b      	mov	r3, r1
 800e268:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e270:	7af9      	ldrb	r1, [r7, #11]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	f7f4 fdd1 	bl	8002e1c <HAL_PCD_EP_Transmit>
 800e27a:	4603      	mov	r3, r0
 800e27c:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	4618      	mov	r0, r3
 800e282:	f000 f84b 	bl	800e31c <USBD_Get_USB_Status>
 800e286:	4603      	mov	r3, r0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	607a      	str	r2, [r7, #4]
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	460b      	mov	r3, r1
 800e29e:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2a6:	7af9      	ldrb	r1, [r7, #11]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	f7f4 fd6c 	bl	8002d88 <HAL_PCD_EP_Receive>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 f830 	bl	800e31c <USBD_Get_USB_Status>
 800e2bc:	4603      	mov	r3, r0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b082      	sub	sp, #8
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2d8:	78fa      	ldrb	r2, [r7, #3]
 800e2da:	4611      	mov	r1, r2
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f4 fd85 	bl	8002dec <HAL_PCD_EP_GetRxCount>
 800e2e2:	4603      	mov	r3, r0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e2f4:	4b03      	ldr	r3, [pc, #12]	@ (800e304 <USBD_static_malloc+0x18>)
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	20000e40 	.word	0x20000e40

0800e308 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e326:	2300      	movs	r3, #0
 800e328:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e32a:	79fb      	ldrb	r3, [r7, #7]
 800e32c:	2b03      	cmp	r3, #3
 800e32e:	d817      	bhi.n	800e360 <USBD_Get_USB_Status+0x44>
 800e330:	a201      	add	r2, pc, #4	@ (adr r2, 800e338 <USBD_Get_USB_Status+0x1c>)
 800e332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e336:	bf00      	nop
 800e338:	0800e349 	.word	0x0800e349
 800e33c:	0800e34f 	.word	0x0800e34f
 800e340:	0800e355 	.word	0x0800e355
 800e344:	0800e35b 	.word	0x0800e35b
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	73fb      	strb	r3, [r7, #15]
             break;
 800e34c:	e00b      	b.n	800e366 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e34e:	2303      	movs	r3, #3
 800e350:	73fb      	strb	r3, [r7, #15]
             break;
 800e352:	e008      	b.n	800e366 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e354:	2301      	movs	r3, #1
 800e356:	73fb      	strb	r3, [r7, #15]
             break;
 800e358:	e005      	b.n	800e366 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e35a:	2303      	movs	r3, #3
 800e35c:	73fb      	strb	r3, [r7, #15]
             break;
 800e35e:	e002      	b.n	800e366 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e360:	2303      	movs	r3, #3
 800e362:	73fb      	strb	r3, [r7, #15]
             break;
 800e364:	bf00      	nop
      }
      return usb_status;
 800e366:	7bfb      	ldrb	r3, [r7, #15]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	4613      	mov	r3, r2
 800e380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e388:	2303      	movs	r3, #3
 800e38a:	e01f      	b.n	800e3cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	79fa      	ldrb	r2, [r7, #7]
 800e3be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7ff fe4b 	bl	800e05c <USBD_LL_Init>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	e025      	b.n	800e438 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	683a      	ldr	r2, [r7, #0]
 800e3f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	32ae      	adds	r2, #174	@ 0xae
 800e3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00f      	beq.n	800e428 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	32ae      	adds	r2, #174	@ 0xae
 800e412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e418:	f107 020e 	add.w	r2, r7, #14
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
 800e420:	4602      	mov	r2, r0
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7ff fe41 	bl	800e0d0 <USBD_LL_Start>
 800e44e:	4603      	mov	r3, r0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e460:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e462:	4618      	mov	r0, r3
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr

0800e46e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
 800e476:	460b      	mov	r3, r1
 800e478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e484:	2b00      	cmp	r3, #0
 800e486:	d009      	beq.n	800e49c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	78fa      	ldrb	r2, [r7, #3]
 800e492:	4611      	mov	r1, r2
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	4798      	blx	r3
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	78fa      	ldrb	r2, [r7, #3]
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	4798      	blx	r3
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e4ea:	6839      	ldr	r1, [r7, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f001 f846 	bl	800f57e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e500:	461a      	mov	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e50e:	f003 031f 	and.w	r3, r3, #31
 800e512:	2b02      	cmp	r3, #2
 800e514:	d01a      	beq.n	800e54c <USBD_LL_SetupStage+0x72>
 800e516:	2b02      	cmp	r3, #2
 800e518:	d822      	bhi.n	800e560 <USBD_LL_SetupStage+0x86>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <USBD_LL_SetupStage+0x4a>
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d00a      	beq.n	800e538 <USBD_LL_SetupStage+0x5e>
 800e522:	e01d      	b.n	800e560 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e52a:	4619      	mov	r1, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 fa9d 	bl	800ea6c <USBD_StdDevReq>
 800e532:	4603      	mov	r3, r0
 800e534:	73fb      	strb	r3, [r7, #15]
      break;
 800e536:	e020      	b.n	800e57a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 fb05 	bl	800eb50 <USBD_StdItfReq>
 800e546:	4603      	mov	r3, r0
 800e548:	73fb      	strb	r3, [r7, #15]
      break;
 800e54a:	e016      	b.n	800e57a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fb67 	bl	800ec28 <USBD_StdEPReq>
 800e55a:	4603      	mov	r3, r0
 800e55c:	73fb      	strb	r3, [r7, #15]
      break;
 800e55e:	e00c      	b.n	800e57a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e566:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fdfc 	bl	800e16c <USBD_LL_StallEP>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
      break;
 800e578:	bf00      	nop
  }

  return ret;
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	460b      	mov	r3, r1
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e596:	7afb      	ldrb	r3, [r7, #11]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d16e      	bne.n	800e67a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e5a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	f040 8098 	bne.w	800e6e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	689a      	ldr	r2, [r3, #8]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d913      	bls.n	800e5e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	689a      	ldr	r2, [r3, #8]
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	1ad2      	subs	r2, r2, r3
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	bf28      	it	cs
 800e5d6:	4613      	movcs	r3, r2
 800e5d8:	461a      	mov	r2, r3
 800e5da:	6879      	ldr	r1, [r7, #4]
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f001 f9cf 	bl	800f980 <USBD_CtlContinueRx>
 800e5e2:	e07d      	b.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5ea:	f003 031f 	and.w	r3, r3, #31
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d014      	beq.n	800e61c <USBD_LL_DataOutStage+0x98>
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d81d      	bhi.n	800e632 <USBD_LL_DataOutStage+0xae>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d002      	beq.n	800e600 <USBD_LL_DataOutStage+0x7c>
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d003      	beq.n	800e606 <USBD_LL_DataOutStage+0x82>
 800e5fe:	e018      	b.n	800e632 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	75bb      	strb	r3, [r7, #22]
            break;
 800e604:	e018      	b.n	800e638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	4619      	mov	r1, r3
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f99e 	bl	800e952 <USBD_CoreFindIF>
 800e616:	4603      	mov	r3, r0
 800e618:	75bb      	strb	r3, [r7, #22]
            break;
 800e61a:	e00d      	b.n	800e638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e622:	b2db      	uxtb	r3, r3
 800e624:	4619      	mov	r1, r3
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f9a0 	bl	800e96c <USBD_CoreFindEP>
 800e62c:	4603      	mov	r3, r0
 800e62e:	75bb      	strb	r3, [r7, #22]
            break;
 800e630:	e002      	b.n	800e638 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e632:	2300      	movs	r3, #0
 800e634:	75bb      	strb	r3, [r7, #22]
            break;
 800e636:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e638:	7dbb      	ldrb	r3, [r7, #22]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d119      	bne.n	800e672 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b03      	cmp	r3, #3
 800e648:	d113      	bne.n	800e672 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e64a:	7dba      	ldrb	r2, [r7, #22]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	32ae      	adds	r2, #174	@ 0xae
 800e650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00b      	beq.n	800e672 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e65a:	7dba      	ldrb	r2, [r7, #22]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e662:	7dba      	ldrb	r2, [r7, #22]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	32ae      	adds	r2, #174	@ 0xae
 800e668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f001 f995 	bl	800f9a2 <USBD_CtlSendStatus>
 800e678:	e032      	b.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e67a:	7afb      	ldrb	r3, [r7, #11]
 800e67c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e680:	b2db      	uxtb	r3, r3
 800e682:	4619      	mov	r1, r3
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 f971 	bl	800e96c <USBD_CoreFindEP>
 800e68a:	4603      	mov	r3, r0
 800e68c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e68e:	7dbb      	ldrb	r3, [r7, #22]
 800e690:	2bff      	cmp	r3, #255	@ 0xff
 800e692:	d025      	beq.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
 800e694:	7dbb      	ldrb	r3, [r7, #22]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d122      	bne.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d117      	bne.n	800e6d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e6a6:	7dba      	ldrb	r2, [r7, #22]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	32ae      	adds	r2, #174	@ 0xae
 800e6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00f      	beq.n	800e6d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e6b6:	7dba      	ldrb	r2, [r7, #22]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e6be:	7dba      	ldrb	r2, [r7, #22]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	32ae      	adds	r2, #174	@ 0xae
 800e6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	7afa      	ldrb	r2, [r7, #11]
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	4798      	blx	r3
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d001      	beq.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e6dc:	7dfb      	ldrb	r3, [r7, #23]
 800e6de:	e000      	b.n	800e6e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3718      	adds	r7, #24
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b086      	sub	sp, #24
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	607a      	str	r2, [r7, #4]
 800e6f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d16f      	bne.n	800e7de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3314      	adds	r3, #20
 800e702:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d15a      	bne.n	800e7c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	429a      	cmp	r2, r3
 800e718:	d914      	bls.n	800e744 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	1ad2      	subs	r2, r2, r3
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	461a      	mov	r2, r3
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f001 f8f7 	bl	800f924 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	2100      	movs	r1, #0
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f7ff fda7 	bl	800e290 <USBD_LL_PrepareReceive>
 800e742:	e03f      	b.n	800e7c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	68da      	ldr	r2, [r3, #12]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d11c      	bne.n	800e78a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e758:	429a      	cmp	r2, r3
 800e75a:	d316      	bcc.n	800e78a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e766:	429a      	cmp	r2, r3
 800e768:	d20f      	bcs.n	800e78a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e76a:	2200      	movs	r2, #0
 800e76c:	2100      	movs	r1, #0
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f001 f8d8 	bl	800f924 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e77c:	2300      	movs	r3, #0
 800e77e:	2200      	movs	r2, #0
 800e780:	2100      	movs	r1, #0
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7ff fd84 	bl	800e290 <USBD_LL_PrepareReceive>
 800e788:	e01c      	b.n	800e7c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b03      	cmp	r3, #3
 800e794:	d10f      	bne.n	800e7b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7b6:	2180      	movs	r1, #128	@ 0x80
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7ff fcd7 	bl	800e16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f001 f902 	bl	800f9c8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d03a      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f7ff fe42 	bl	800e458 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e7dc:	e032      	b.n	800e844 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e7de:	7afb      	ldrb	r3, [r7, #11]
 800e7e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f8bf 	bl	800e96c <USBD_CoreFindEP>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	2bff      	cmp	r3, #255	@ 0xff
 800e7f6:	d025      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d122      	bne.n	800e844 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b03      	cmp	r3, #3
 800e808:	d11c      	bne.n	800e844 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e80a:	7dfa      	ldrb	r2, [r7, #23]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	32ae      	adds	r2, #174	@ 0xae
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d014      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e81a:	7dfa      	ldrb	r2, [r7, #23]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e822:	7dfa      	ldrb	r2, [r7, #23]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	32ae      	adds	r2, #174	@ 0xae
 800e828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	7afa      	ldrb	r2, [r7, #11]
 800e830:	4611      	mov	r1, r2
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	4798      	blx	r3
 800e836:	4603      	mov	r3, r0
 800e838:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e83a:	7dbb      	ldrb	r3, [r7, #22]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e840:	7dbb      	ldrb	r3, [r7, #22]
 800e842:	e000      	b.n	800e846 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3718      	adds	r7, #24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b084      	sub	sp, #16
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e886:	2b00      	cmp	r3, #0
 800e888:	d014      	beq.n	800e8b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00e      	beq.n	800e8b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	6852      	ldr	r2, [r2, #4]
 800e8a2:	b2d2      	uxtb	r2, r2
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	4798      	blx	r3
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8b4:	2340      	movs	r3, #64	@ 0x40
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fc1d 	bl	800e0fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2240      	movs	r2, #64	@ 0x40
 800e8cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8d0:	2340      	movs	r3, #64	@ 0x40
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	2180      	movs	r1, #128	@ 0x80
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff fc0f 	bl	800e0fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2240      	movs	r2, #64	@ 0x40
 800e8e6:	621a      	str	r2, [r3, #32]

  return ret;
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e8f2:	b480      	push	{r7}
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	78fa      	ldrb	r2, [r7, #3]
 800e902:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	370c      	adds	r7, #12
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b03      	cmp	r3, #3
 800e924:	d110      	bne.n	800e948 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00b      	beq.n	800e948 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e936:	69db      	ldr	r3, [r3, #28]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d005      	beq.n	800e948 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3708      	adds	r7, #8
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e952:	b480      	push	{r7}
 800e954:	b083      	sub	sp, #12
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	460b      	mov	r3, r1
 800e95c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e95e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e978:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	370c      	adds	r7, #12
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b086      	sub	sp, #24
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	460b      	mov	r3, r1
 800e990:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e99a:	2300      	movs	r3, #0
 800e99c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	885b      	ldrh	r3, [r3, #2]
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	7812      	ldrb	r2, [r2, #0]
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d91f      	bls.n	800e9ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e9b2:	e013      	b.n	800e9dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e9b4:	f107 030a 	add.w	r3, r7, #10
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6978      	ldr	r0, [r7, #20]
 800e9bc:	f000 f81b 	bl	800e9f6 <USBD_GetNextDesc>
 800e9c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	785b      	ldrb	r3, [r3, #1]
 800e9c6:	2b05      	cmp	r3, #5
 800e9c8:	d108      	bne.n	800e9dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	789b      	ldrb	r3, [r3, #2]
 800e9d2:	78fa      	ldrb	r2, [r7, #3]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d008      	beq.n	800e9ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	885b      	ldrh	r3, [r3, #2]
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	897b      	ldrh	r3, [r7, #10]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d8e5      	bhi.n	800e9b4 <USBD_GetEpDesc+0x2e>
 800e9e8:	e000      	b.n	800e9ec <USBD_GetEpDesc+0x66>
          break;
 800e9ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e9ec:	693b      	ldr	r3, [r7, #16]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b085      	sub	sp, #20
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	7812      	ldrb	r2, [r2, #0]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea20:	68fb      	ldr	r3, [r7, #12]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3714      	adds	r7, #20
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b087      	sub	sp, #28
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	3301      	adds	r3, #1
 800ea44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea4c:	8a3b      	ldrh	r3, [r7, #16]
 800ea4e:	021b      	lsls	r3, r3, #8
 800ea50:	b21a      	sxth	r2, r3
 800ea52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	b21b      	sxth	r3, r3
 800ea5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea5c:	89fb      	ldrh	r3, [r7, #14]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	371c      	adds	r7, #28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
	...

0800ea6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea82:	2b40      	cmp	r3, #64	@ 0x40
 800ea84:	d005      	beq.n	800ea92 <USBD_StdDevReq+0x26>
 800ea86:	2b40      	cmp	r3, #64	@ 0x40
 800ea88:	d857      	bhi.n	800eb3a <USBD_StdDevReq+0xce>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00f      	beq.n	800eaae <USBD_StdDevReq+0x42>
 800ea8e:	2b20      	cmp	r3, #32
 800ea90:	d153      	bne.n	800eb3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	32ae      	adds	r2, #174	@ 0xae
 800ea9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	4798      	blx	r3
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800eaac:	e04a      	b.n	800eb44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	785b      	ldrb	r3, [r3, #1]
 800eab2:	2b09      	cmp	r3, #9
 800eab4:	d83b      	bhi.n	800eb2e <USBD_StdDevReq+0xc2>
 800eab6:	a201      	add	r2, pc, #4	@ (adr r2, 800eabc <USBD_StdDevReq+0x50>)
 800eab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eabc:	0800eb11 	.word	0x0800eb11
 800eac0:	0800eb25 	.word	0x0800eb25
 800eac4:	0800eb2f 	.word	0x0800eb2f
 800eac8:	0800eb1b 	.word	0x0800eb1b
 800eacc:	0800eb2f 	.word	0x0800eb2f
 800ead0:	0800eaef 	.word	0x0800eaef
 800ead4:	0800eae5 	.word	0x0800eae5
 800ead8:	0800eb2f 	.word	0x0800eb2f
 800eadc:	0800eb07 	.word	0x0800eb07
 800eae0:	0800eaf9 	.word	0x0800eaf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eae4:	6839      	ldr	r1, [r7, #0]
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fa3c 	bl	800ef64 <USBD_GetDescriptor>
          break;
 800eaec:	e024      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fba1 	bl	800f238 <USBD_SetAddress>
          break;
 800eaf6:	e01f      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 fbe0 	bl	800f2c0 <USBD_SetConfig>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73fb      	strb	r3, [r7, #15]
          break;
 800eb04:	e018      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eb06:	6839      	ldr	r1, [r7, #0]
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fc83 	bl	800f414 <USBD_GetConfig>
          break;
 800eb0e:	e013      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fcb4 	bl	800f480 <USBD_GetStatus>
          break;
 800eb18:	e00e      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fce3 	bl	800f4e8 <USBD_SetFeature>
          break;
 800eb22:	e009      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fd07 	bl	800f53a <USBD_ClrFeature>
          break;
 800eb2c:	e004      	b.n	800eb38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fd5e 	bl	800f5f2 <USBD_CtlError>
          break;
 800eb36:	bf00      	nop
      }
      break;
 800eb38:	e004      	b.n	800eb44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fd58 	bl	800f5f2 <USBD_CtlError>
      break;
 800eb42:	bf00      	nop
  }

  return ret;
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop

0800eb50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb66:	2b40      	cmp	r3, #64	@ 0x40
 800eb68:	d005      	beq.n	800eb76 <USBD_StdItfReq+0x26>
 800eb6a:	2b40      	cmp	r3, #64	@ 0x40
 800eb6c:	d852      	bhi.n	800ec14 <USBD_StdItfReq+0xc4>
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <USBD_StdItfReq+0x26>
 800eb72:	2b20      	cmp	r3, #32
 800eb74:	d14e      	bne.n	800ec14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d840      	bhi.n	800ec06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	889b      	ldrh	r3, [r3, #4]
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d836      	bhi.n	800ebfc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	889b      	ldrh	r3, [r3, #4]
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff fedb 	bl	800e952 <USBD_CoreFindIF>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eba0:	7bbb      	ldrb	r3, [r7, #14]
 800eba2:	2bff      	cmp	r3, #255	@ 0xff
 800eba4:	d01d      	beq.n	800ebe2 <USBD_StdItfReq+0x92>
 800eba6:	7bbb      	ldrb	r3, [r7, #14]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d11a      	bne.n	800ebe2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ebac:	7bba      	ldrb	r2, [r7, #14]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	32ae      	adds	r2, #174	@ 0xae
 800ebb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00f      	beq.n	800ebdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ebbc:	7bba      	ldrb	r2, [r7, #14]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ebc4:	7bba      	ldrb	r2, [r7, #14]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	32ae      	adds	r2, #174	@ 0xae
 800ebca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	4798      	blx	r3
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ebda:	e004      	b.n	800ebe6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ebdc:	2303      	movs	r3, #3
 800ebde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ebe0:	e001      	b.n	800ebe6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	88db      	ldrh	r3, [r3, #6]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d110      	bne.n	800ec10 <USBD_StdItfReq+0xc0>
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10d      	bne.n	800ec10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fed4 	bl	800f9a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ebfa:	e009      	b.n	800ec10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fcf7 	bl	800f5f2 <USBD_CtlError>
          break;
 800ec04:	e004      	b.n	800ec10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ec06:	6839      	ldr	r1, [r7, #0]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 fcf2 	bl	800f5f2 <USBD_CtlError>
          break;
 800ec0e:	e000      	b.n	800ec12 <USBD_StdItfReq+0xc2>
          break;
 800ec10:	bf00      	nop
      }
      break;
 800ec12:	e004      	b.n	800ec1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ec14:	6839      	ldr	r1, [r7, #0]
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fceb 	bl	800f5f2 <USBD_CtlError>
      break;
 800ec1c:	bf00      	nop
  }

  return ret;
 800ec1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	889b      	ldrh	r3, [r3, #4]
 800ec3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec44:	2b40      	cmp	r3, #64	@ 0x40
 800ec46:	d007      	beq.n	800ec58 <USBD_StdEPReq+0x30>
 800ec48:	2b40      	cmp	r3, #64	@ 0x40
 800ec4a:	f200 817f 	bhi.w	800ef4c <USBD_StdEPReq+0x324>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d02a      	beq.n	800eca8 <USBD_StdEPReq+0x80>
 800ec52:	2b20      	cmp	r3, #32
 800ec54:	f040 817a 	bne.w	800ef4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fe85 	bl	800e96c <USBD_CoreFindEP>
 800ec62:	4603      	mov	r3, r0
 800ec64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec66:	7b7b      	ldrb	r3, [r7, #13]
 800ec68:	2bff      	cmp	r3, #255	@ 0xff
 800ec6a:	f000 8174 	beq.w	800ef56 <USBD_StdEPReq+0x32e>
 800ec6e:	7b7b      	ldrb	r3, [r7, #13]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f040 8170 	bne.w	800ef56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ec76:	7b7a      	ldrb	r2, [r7, #13]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ec7e:	7b7a      	ldrb	r2, [r7, #13]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	32ae      	adds	r2, #174	@ 0xae
 800ec84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f000 8163 	beq.w	800ef56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ec90:	7b7a      	ldrb	r2, [r7, #13]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	32ae      	adds	r2, #174	@ 0xae
 800ec96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	6839      	ldr	r1, [r7, #0]
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	4798      	blx	r3
 800eca2:	4603      	mov	r3, r0
 800eca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eca6:	e156      	b.n	800ef56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	785b      	ldrb	r3, [r3, #1]
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	d008      	beq.n	800ecc2 <USBD_StdEPReq+0x9a>
 800ecb0:	2b03      	cmp	r3, #3
 800ecb2:	f300 8145 	bgt.w	800ef40 <USBD_StdEPReq+0x318>
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 809b 	beq.w	800edf2 <USBD_StdEPReq+0x1ca>
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d03c      	beq.n	800ed3a <USBD_StdEPReq+0x112>
 800ecc0:	e13e      	b.n	800ef40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d002      	beq.n	800ecd4 <USBD_StdEPReq+0xac>
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d016      	beq.n	800ed00 <USBD_StdEPReq+0xd8>
 800ecd2:	e02c      	b.n	800ed2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecd4:	7bbb      	ldrb	r3, [r7, #14]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00d      	beq.n	800ecf6 <USBD_StdEPReq+0xce>
 800ecda:	7bbb      	ldrb	r3, [r7, #14]
 800ecdc:	2b80      	cmp	r3, #128	@ 0x80
 800ecde:	d00a      	beq.n	800ecf6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ece0:	7bbb      	ldrb	r3, [r7, #14]
 800ece2:	4619      	mov	r1, r3
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff fa41 	bl	800e16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecea:	2180      	movs	r1, #128	@ 0x80
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff fa3d 	bl	800e16c <USBD_LL_StallEP>
 800ecf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ecf4:	e020      	b.n	800ed38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fc7a 	bl	800f5f2 <USBD_CtlError>
              break;
 800ecfe:	e01b      	b.n	800ed38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	885b      	ldrh	r3, [r3, #2]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10e      	bne.n	800ed26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed08:	7bbb      	ldrb	r3, [r7, #14]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00b      	beq.n	800ed26 <USBD_StdEPReq+0xfe>
 800ed0e:	7bbb      	ldrb	r3, [r7, #14]
 800ed10:	2b80      	cmp	r3, #128	@ 0x80
 800ed12:	d008      	beq.n	800ed26 <USBD_StdEPReq+0xfe>
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	88db      	ldrh	r3, [r3, #6]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d104      	bne.n	800ed26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed1c:	7bbb      	ldrb	r3, [r7, #14]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7ff fa23 	bl	800e16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fe3b 	bl	800f9a2 <USBD_CtlSendStatus>

              break;
 800ed2c:	e004      	b.n	800ed38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 fc5e 	bl	800f5f2 <USBD_CtlError>
              break;
 800ed36:	bf00      	nop
          }
          break;
 800ed38:	e107      	b.n	800ef4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d002      	beq.n	800ed4c <USBD_StdEPReq+0x124>
 800ed46:	2b03      	cmp	r3, #3
 800ed48:	d016      	beq.n	800ed78 <USBD_StdEPReq+0x150>
 800ed4a:	e04b      	b.n	800ede4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed4c:	7bbb      	ldrb	r3, [r7, #14]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d00d      	beq.n	800ed6e <USBD_StdEPReq+0x146>
 800ed52:	7bbb      	ldrb	r3, [r7, #14]
 800ed54:	2b80      	cmp	r3, #128	@ 0x80
 800ed56:	d00a      	beq.n	800ed6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7ff fa05 	bl	800e16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed62:	2180      	movs	r1, #128	@ 0x80
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7ff fa01 	bl	800e16c <USBD_LL_StallEP>
 800ed6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed6c:	e040      	b.n	800edf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ed6e:	6839      	ldr	r1, [r7, #0]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 fc3e 	bl	800f5f2 <USBD_CtlError>
              break;
 800ed76:	e03b      	b.n	800edf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	885b      	ldrh	r3, [r3, #2]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d136      	bne.n	800edee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ed80:	7bbb      	ldrb	r3, [r7, #14]
 800ed82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d004      	beq.n	800ed94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ed8a:	7bbb      	ldrb	r3, [r7, #14]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff fa05 	bl	800e19e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fe04 	bl	800f9a2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7ff fde4 	bl	800e96c <USBD_CoreFindEP>
 800eda4:	4603      	mov	r3, r0
 800eda6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eda8:	7b7b      	ldrb	r3, [r7, #13]
 800edaa:	2bff      	cmp	r3, #255	@ 0xff
 800edac:	d01f      	beq.n	800edee <USBD_StdEPReq+0x1c6>
 800edae:	7b7b      	ldrb	r3, [r7, #13]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d11c      	bne.n	800edee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800edb4:	7b7a      	ldrb	r2, [r7, #13]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800edbc:	7b7a      	ldrb	r2, [r7, #13]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	32ae      	adds	r2, #174	@ 0xae
 800edc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d010      	beq.n	800edee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800edcc:	7b7a      	ldrb	r2, [r7, #13]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	32ae      	adds	r2, #174	@ 0xae
 800edd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	4798      	blx	r3
 800edde:	4603      	mov	r3, r0
 800ede0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ede2:	e004      	b.n	800edee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fc03 	bl	800f5f2 <USBD_CtlError>
              break;
 800edec:	e000      	b.n	800edf0 <USBD_StdEPReq+0x1c8>
              break;
 800edee:	bf00      	nop
          }
          break;
 800edf0:	e0ab      	b.n	800ef4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	d002      	beq.n	800ee04 <USBD_StdEPReq+0x1dc>
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d032      	beq.n	800ee68 <USBD_StdEPReq+0x240>
 800ee02:	e097      	b.n	800ef34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee04:	7bbb      	ldrb	r3, [r7, #14]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d007      	beq.n	800ee1a <USBD_StdEPReq+0x1f2>
 800ee0a:	7bbb      	ldrb	r3, [r7, #14]
 800ee0c:	2b80      	cmp	r3, #128	@ 0x80
 800ee0e:	d004      	beq.n	800ee1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fbed 	bl	800f5f2 <USBD_CtlError>
                break;
 800ee18:	e091      	b.n	800ef3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	da0b      	bge.n	800ee3a <USBD_StdEPReq+0x212>
 800ee22:	7bbb      	ldrb	r3, [r7, #14]
 800ee24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee28:	4613      	mov	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	3310      	adds	r3, #16
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	4413      	add	r3, r2
 800ee36:	3304      	adds	r3, #4
 800ee38:	e00b      	b.n	800ee52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
 800ee3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee40:	4613      	mov	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	4413      	add	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	4413      	add	r3, r2
 800ee50:	3304      	adds	r3, #4
 800ee52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	2200      	movs	r2, #0
 800ee58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2202      	movs	r2, #2
 800ee5e:	4619      	mov	r1, r3
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 fd44 	bl	800f8ee <USBD_CtlSendData>
              break;
 800ee66:	e06a      	b.n	800ef3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ee68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	da11      	bge.n	800ee94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	f003 020f 	and.w	r2, r3, #15
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	4613      	mov	r3, r2
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	440b      	add	r3, r1
 800ee82:	3324      	adds	r3, #36	@ 0x24
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d117      	bne.n	800eeba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ee8a:	6839      	ldr	r1, [r7, #0]
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fbb0 	bl	800f5f2 <USBD_CtlError>
                  break;
 800ee92:	e054      	b.n	800ef3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ee94:	7bbb      	ldrb	r3, [r7, #14]
 800ee96:	f003 020f 	and.w	r2, r3, #15
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	440b      	add	r3, r1
 800eea6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d104      	bne.n	800eeba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fb9d 	bl	800f5f2 <USBD_CtlError>
                  break;
 800eeb8:	e041      	b.n	800ef3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eeba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	da0b      	bge.n	800eeda <USBD_StdEPReq+0x2b2>
 800eec2:	7bbb      	ldrb	r3, [r7, #14]
 800eec4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eec8:	4613      	mov	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	3310      	adds	r3, #16
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	4413      	add	r3, r2
 800eed6:	3304      	adds	r3, #4
 800eed8:	e00b      	b.n	800eef2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eeda:	7bbb      	ldrb	r3, [r7, #14]
 800eedc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	4413      	add	r3, r2
 800eef0:	3304      	adds	r3, #4
 800eef2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eef4:	7bbb      	ldrb	r3, [r7, #14]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d002      	beq.n	800ef00 <USBD_StdEPReq+0x2d8>
 800eefa:	7bbb      	ldrb	r3, [r7, #14]
 800eefc:	2b80      	cmp	r3, #128	@ 0x80
 800eefe:	d103      	bne.n	800ef08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	2200      	movs	r2, #0
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	e00e      	b.n	800ef26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef08:	7bbb      	ldrb	r3, [r7, #14]
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f7ff f95f 	bl	800e1d0 <USBD_LL_IsStallEP>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	601a      	str	r2, [r3, #0]
 800ef1e:	e002      	b.n	800ef26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	2200      	movs	r2, #0
 800ef24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	2202      	movs	r2, #2
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 fcde 	bl	800f8ee <USBD_CtlSendData>
              break;
 800ef32:	e004      	b.n	800ef3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fb5b 	bl	800f5f2 <USBD_CtlError>
              break;
 800ef3c:	bf00      	nop
          }
          break;
 800ef3e:	e004      	b.n	800ef4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fb55 	bl	800f5f2 <USBD_CtlError>
          break;
 800ef48:	bf00      	nop
      }
      break;
 800ef4a:	e005      	b.n	800ef58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 fb4f 	bl	800f5f2 <USBD_CtlError>
      break;
 800ef54:	e000      	b.n	800ef58 <USBD_StdEPReq+0x330>
      break;
 800ef56:	bf00      	nop
  }

  return ret;
 800ef58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
	...

0800ef64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef72:	2300      	movs	r3, #0
 800ef74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef76:	2300      	movs	r3, #0
 800ef78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	885b      	ldrh	r3, [r3, #2]
 800ef7e:	0a1b      	lsrs	r3, r3, #8
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	3b01      	subs	r3, #1
 800ef84:	2b06      	cmp	r3, #6
 800ef86:	f200 8128 	bhi.w	800f1da <USBD_GetDescriptor+0x276>
 800ef8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef90 <USBD_GetDescriptor+0x2c>)
 800ef8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef90:	0800efad 	.word	0x0800efad
 800ef94:	0800efc5 	.word	0x0800efc5
 800ef98:	0800f005 	.word	0x0800f005
 800ef9c:	0800f1db 	.word	0x0800f1db
 800efa0:	0800f1db 	.word	0x0800f1db
 800efa4:	0800f17b 	.word	0x0800f17b
 800efa8:	0800f1a7 	.word	0x0800f1a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	7c12      	ldrb	r2, [r2, #16]
 800efb8:	f107 0108 	add.w	r1, r7, #8
 800efbc:	4610      	mov	r0, r2
 800efbe:	4798      	blx	r3
 800efc0:	60f8      	str	r0, [r7, #12]
      break;
 800efc2:	e112      	b.n	800f1ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	7c1b      	ldrb	r3, [r3, #16]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10d      	bne.n	800efe8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efd4:	f107 0208 	add.w	r2, r7, #8
 800efd8:	4610      	mov	r0, r2
 800efda:	4798      	blx	r3
 800efdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	3301      	adds	r3, #1
 800efe2:	2202      	movs	r2, #2
 800efe4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800efe6:	e100      	b.n	800f1ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff0:	f107 0208 	add.w	r2, r7, #8
 800eff4:	4610      	mov	r0, r2
 800eff6:	4798      	blx	r3
 800eff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3301      	adds	r3, #1
 800effe:	2202      	movs	r2, #2
 800f000:	701a      	strb	r2, [r3, #0]
      break;
 800f002:	e0f2      	b.n	800f1ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	885b      	ldrh	r3, [r3, #2]
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	2b05      	cmp	r3, #5
 800f00c:	f200 80ac 	bhi.w	800f168 <USBD_GetDescriptor+0x204>
 800f010:	a201      	add	r2, pc, #4	@ (adr r2, 800f018 <USBD_GetDescriptor+0xb4>)
 800f012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f016:	bf00      	nop
 800f018:	0800f031 	.word	0x0800f031
 800f01c:	0800f065 	.word	0x0800f065
 800f020:	0800f099 	.word	0x0800f099
 800f024:	0800f0cd 	.word	0x0800f0cd
 800f028:	0800f101 	.word	0x0800f101
 800f02c:	0800f135 	.word	0x0800f135
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00b      	beq.n	800f054 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	7c12      	ldrb	r2, [r2, #16]
 800f048:	f107 0108 	add.w	r1, r7, #8
 800f04c:	4610      	mov	r0, r2
 800f04e:	4798      	blx	r3
 800f050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f052:	e091      	b.n	800f178 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 facb 	bl	800f5f2 <USBD_CtlError>
            err++;
 800f05c:	7afb      	ldrb	r3, [r7, #11]
 800f05e:	3301      	adds	r3, #1
 800f060:	72fb      	strb	r3, [r7, #11]
          break;
 800f062:	e089      	b.n	800f178 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00b      	beq.n	800f088 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	7c12      	ldrb	r2, [r2, #16]
 800f07c:	f107 0108 	add.w	r1, r7, #8
 800f080:	4610      	mov	r0, r2
 800f082:	4798      	blx	r3
 800f084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f086:	e077      	b.n	800f178 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 fab1 	bl	800f5f2 <USBD_CtlError>
            err++;
 800f090:	7afb      	ldrb	r3, [r7, #11]
 800f092:	3301      	adds	r3, #1
 800f094:	72fb      	strb	r3, [r7, #11]
          break;
 800f096:	e06f      	b.n	800f178 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d00b      	beq.n	800f0bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	7c12      	ldrb	r2, [r2, #16]
 800f0b0:	f107 0108 	add.w	r1, r7, #8
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	4798      	blx	r3
 800f0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0ba:	e05d      	b.n	800f178 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 fa97 	bl	800f5f2 <USBD_CtlError>
            err++;
 800f0c4:	7afb      	ldrb	r3, [r7, #11]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800f0ca:	e055      	b.n	800f178 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0d2:	691b      	ldr	r3, [r3, #16]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00b      	beq.n	800f0f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	7c12      	ldrb	r2, [r2, #16]
 800f0e4:	f107 0108 	add.w	r1, r7, #8
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	4798      	blx	r3
 800f0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0ee:	e043      	b.n	800f178 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0f0:	6839      	ldr	r1, [r7, #0]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 fa7d 	bl	800f5f2 <USBD_CtlError>
            err++;
 800f0f8:	7afb      	ldrb	r3, [r7, #11]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f0fe:	e03b      	b.n	800f178 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f106:	695b      	ldr	r3, [r3, #20]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00b      	beq.n	800f124 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	7c12      	ldrb	r2, [r2, #16]
 800f118:	f107 0108 	add.w	r1, r7, #8
 800f11c:	4610      	mov	r0, r2
 800f11e:	4798      	blx	r3
 800f120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f122:	e029      	b.n	800f178 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f124:	6839      	ldr	r1, [r7, #0]
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 fa63 	bl	800f5f2 <USBD_CtlError>
            err++;
 800f12c:	7afb      	ldrb	r3, [r7, #11]
 800f12e:	3301      	adds	r3, #1
 800f130:	72fb      	strb	r3, [r7, #11]
          break;
 800f132:	e021      	b.n	800f178 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f13a:	699b      	ldr	r3, [r3, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00b      	beq.n	800f158 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	7c12      	ldrb	r2, [r2, #16]
 800f14c:	f107 0108 	add.w	r1, r7, #8
 800f150:	4610      	mov	r0, r2
 800f152:	4798      	blx	r3
 800f154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f156:	e00f      	b.n	800f178 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fa49 	bl	800f5f2 <USBD_CtlError>
            err++;
 800f160:	7afb      	ldrb	r3, [r7, #11]
 800f162:	3301      	adds	r3, #1
 800f164:	72fb      	strb	r3, [r7, #11]
          break;
 800f166:	e007      	b.n	800f178 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f168:	6839      	ldr	r1, [r7, #0]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fa41 	bl	800f5f2 <USBD_CtlError>
          err++;
 800f170:	7afb      	ldrb	r3, [r7, #11]
 800f172:	3301      	adds	r3, #1
 800f174:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f176:	bf00      	nop
      }
      break;
 800f178:	e037      	b.n	800f1ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	7c1b      	ldrb	r3, [r3, #16]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d109      	bne.n	800f196 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f18a:	f107 0208 	add.w	r2, r7, #8
 800f18e:	4610      	mov	r0, r2
 800f190:	4798      	blx	r3
 800f192:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f194:	e029      	b.n	800f1ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f196:	6839      	ldr	r1, [r7, #0]
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fa2a 	bl	800f5f2 <USBD_CtlError>
        err++;
 800f19e:	7afb      	ldrb	r3, [r7, #11]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800f1a4:	e021      	b.n	800f1ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7c1b      	ldrb	r3, [r3, #16]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d10d      	bne.n	800f1ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1b6:	f107 0208 	add.w	r2, r7, #8
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	4798      	blx	r3
 800f1be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	2207      	movs	r2, #7
 800f1c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1c8:	e00f      	b.n	800f1ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 fa10 	bl	800f5f2 <USBD_CtlError>
        err++;
 800f1d2:	7afb      	ldrb	r3, [r7, #11]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	72fb      	strb	r3, [r7, #11]
      break;
 800f1d8:	e007      	b.n	800f1ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 fa08 	bl	800f5f2 <USBD_CtlError>
      err++;
 800f1e2:	7afb      	ldrb	r3, [r7, #11]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	72fb      	strb	r3, [r7, #11]
      break;
 800f1e8:	bf00      	nop
  }

  if (err != 0U)
 800f1ea:	7afb      	ldrb	r3, [r7, #11]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d11e      	bne.n	800f22e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	88db      	ldrh	r3, [r3, #6]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d016      	beq.n	800f226 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f1f8:	893b      	ldrh	r3, [r7, #8]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00e      	beq.n	800f21c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	88da      	ldrh	r2, [r3, #6]
 800f202:	893b      	ldrh	r3, [r7, #8]
 800f204:	4293      	cmp	r3, r2
 800f206:	bf28      	it	cs
 800f208:	4613      	movcs	r3, r2
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f20e:	893b      	ldrh	r3, [r7, #8]
 800f210:	461a      	mov	r2, r3
 800f212:	68f9      	ldr	r1, [r7, #12]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fb6a 	bl	800f8ee <USBD_CtlSendData>
 800f21a:	e009      	b.n	800f230 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f9e7 	bl	800f5f2 <USBD_CtlError>
 800f224:	e004      	b.n	800f230 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fbbb 	bl	800f9a2 <USBD_CtlSendStatus>
 800f22c:	e000      	b.n	800f230 <USBD_GetDescriptor+0x2cc>
    return;
 800f22e:	bf00      	nop
  }
}
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop

0800f238 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	889b      	ldrh	r3, [r3, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d131      	bne.n	800f2ae <USBD_SetAddress+0x76>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	88db      	ldrh	r3, [r3, #6]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d12d      	bne.n	800f2ae <USBD_SetAddress+0x76>
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	885b      	ldrh	r3, [r3, #2]
 800f256:	2b7f      	cmp	r3, #127	@ 0x7f
 800f258:	d829      	bhi.n	800f2ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	885b      	ldrh	r3, [r3, #2]
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f264:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2b03      	cmp	r3, #3
 800f270:	d104      	bne.n	800f27c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f272:	6839      	ldr	r1, [r7, #0]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 f9bc 	bl	800f5f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27a:	e01d      	b.n	800f2b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	7bfa      	ldrb	r2, [r7, #15]
 800f280:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f284:	7bfb      	ldrb	r3, [r7, #15]
 800f286:	4619      	mov	r1, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7fe ffcd 	bl	800e228 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fb87 	bl	800f9a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f294:	7bfb      	ldrb	r3, [r7, #15]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d004      	beq.n	800f2a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2202      	movs	r2, #2
 800f29e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2a2:	e009      	b.n	800f2b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ac:	e004      	b.n	800f2b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f99e 	bl	800f5f2 <USBD_CtlError>
  }
}
 800f2b6:	bf00      	nop
 800f2b8:	bf00      	nop
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	885b      	ldrh	r3, [r3, #2]
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	4b4e      	ldr	r3, [pc, #312]	@ (800f410 <USBD_SetConfig+0x150>)
 800f2d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2d8:	4b4d      	ldr	r3, [pc, #308]	@ (800f410 <USBD_SetConfig+0x150>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d905      	bls.n	800f2ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f2e0:	6839      	ldr	r1, [r7, #0]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f985 	bl	800f5f2 <USBD_CtlError>
    return USBD_FAIL;
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	e08c      	b.n	800f406 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	d002      	beq.n	800f2fe <USBD_SetConfig+0x3e>
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d029      	beq.n	800f350 <USBD_SetConfig+0x90>
 800f2fc:	e075      	b.n	800f3ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f2fe:	4b44      	ldr	r3, [pc, #272]	@ (800f410 <USBD_SetConfig+0x150>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d020      	beq.n	800f348 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f306:	4b42      	ldr	r3, [pc, #264]	@ (800f410 <USBD_SetConfig+0x150>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f310:	4b3f      	ldr	r3, [pc, #252]	@ (800f410 <USBD_SetConfig+0x150>)
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	4619      	mov	r1, r3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff f8a9 	bl	800e46e <USBD_SetClassConfig>
 800f31c:	4603      	mov	r3, r0
 800f31e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d008      	beq.n	800f338 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 f962 	bl	800f5f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2202      	movs	r2, #2
 800f332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f336:	e065      	b.n	800f404 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 fb32 	bl	800f9a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2203      	movs	r2, #3
 800f342:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f346:	e05d      	b.n	800f404 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fb2a 	bl	800f9a2 <USBD_CtlSendStatus>
      break;
 800f34e:	e059      	b.n	800f404 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f350:	4b2f      	ldr	r3, [pc, #188]	@ (800f410 <USBD_SetConfig+0x150>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d112      	bne.n	800f37e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f360:	4b2b      	ldr	r3, [pc, #172]	@ (800f410 <USBD_SetConfig+0x150>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	461a      	mov	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f36a:	4b29      	ldr	r3, [pc, #164]	@ (800f410 <USBD_SetConfig+0x150>)
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	4619      	mov	r1, r3
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7ff f898 	bl	800e4a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fb13 	bl	800f9a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f37c:	e042      	b.n	800f404 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f37e:	4b24      	ldr	r3, [pc, #144]	@ (800f410 <USBD_SetConfig+0x150>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d02a      	beq.n	800f3e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	b2db      	uxtb	r3, r3
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7ff f886 	bl	800e4a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f39a:	4b1d      	ldr	r3, [pc, #116]	@ (800f410 <USBD_SetConfig+0x150>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f410 <USBD_SetConfig+0x150>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff f85f 	bl	800e46e <USBD_SetClassConfig>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f3b4:	7bfb      	ldrb	r3, [r7, #15]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00f      	beq.n	800f3da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f3ba:	6839      	ldr	r1, [r7, #0]
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f918 	bl	800f5f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7ff f86b 	bl	800e4a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f3d8:	e014      	b.n	800f404 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fae1 	bl	800f9a2 <USBD_CtlSendStatus>
      break;
 800f3e0:	e010      	b.n	800f404 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fadd 	bl	800f9a2 <USBD_CtlSendStatus>
      break;
 800f3e8:	e00c      	b.n	800f404 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 f900 	bl	800f5f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3f2:	4b07      	ldr	r3, [pc, #28]	@ (800f410 <USBD_SetConfig+0x150>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7ff f854 	bl	800e4a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f3fe:	2303      	movs	r3, #3
 800f400:	73fb      	strb	r3, [r7, #15]
      break;
 800f402:	bf00      	nop
  }

  return ret;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	20001060 	.word	0x20001060

0800f414 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	88db      	ldrh	r3, [r3, #6]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d004      	beq.n	800f430 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 f8e2 	bl	800f5f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f42e:	e023      	b.n	800f478 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b02      	cmp	r3, #2
 800f43a:	dc02      	bgt.n	800f442 <USBD_GetConfig+0x2e>
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	dc03      	bgt.n	800f448 <USBD_GetConfig+0x34>
 800f440:	e015      	b.n	800f46e <USBD_GetConfig+0x5a>
 800f442:	2b03      	cmp	r3, #3
 800f444:	d00b      	beq.n	800f45e <USBD_GetConfig+0x4a>
 800f446:	e012      	b.n	800f46e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	3308      	adds	r3, #8
 800f452:	2201      	movs	r2, #1
 800f454:	4619      	mov	r1, r3
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fa49 	bl	800f8ee <USBD_CtlSendData>
        break;
 800f45c:	e00c      	b.n	800f478 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3304      	adds	r3, #4
 800f462:	2201      	movs	r2, #1
 800f464:	4619      	mov	r1, r3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fa41 	bl	800f8ee <USBD_CtlSendData>
        break;
 800f46c:	e004      	b.n	800f478 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f8be 	bl	800f5f2 <USBD_CtlError>
        break;
 800f476:	bf00      	nop
}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f490:	b2db      	uxtb	r3, r3
 800f492:	3b01      	subs	r3, #1
 800f494:	2b02      	cmp	r3, #2
 800f496:	d81e      	bhi.n	800f4d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	88db      	ldrh	r3, [r3, #6]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d004      	beq.n	800f4aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 f8a5 	bl	800f5f2 <USBD_CtlError>
        break;
 800f4a8:	e01a      	b.n	800f4e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d005      	beq.n	800f4c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	f043 0202 	orr.w	r2, r3, #2
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	330c      	adds	r3, #12
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 fa0d 	bl	800f8ee <USBD_CtlSendData>
      break;
 800f4d4:	e004      	b.n	800f4e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f88a 	bl	800f5f2 <USBD_CtlError>
      break;
 800f4de:	bf00      	nop
  }
}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d107      	bne.n	800f50a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 fa4d 	bl	800f9a2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f508:	e013      	b.n	800f532 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	885b      	ldrh	r3, [r3, #2]
 800f50e:	2b02      	cmp	r3, #2
 800f510:	d10b      	bne.n	800f52a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	889b      	ldrh	r3, [r3, #4]
 800f516:	0a1b      	lsrs	r3, r3, #8
 800f518:	b29b      	uxth	r3, r3
 800f51a:	b2da      	uxtb	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 fa3d 	bl	800f9a2 <USBD_CtlSendStatus>
}
 800f528:	e003      	b.n	800f532 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f860 	bl	800f5f2 <USBD_CtlError>
}
 800f532:	bf00      	nop
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	3b01      	subs	r3, #1
 800f54e:	2b02      	cmp	r3, #2
 800f550:	d80b      	bhi.n	800f56a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	885b      	ldrh	r3, [r3, #2]
 800f556:	2b01      	cmp	r3, #1
 800f558:	d10c      	bne.n	800f574 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 fa1d 	bl	800f9a2 <USBD_CtlSendStatus>
      }
      break;
 800f568:	e004      	b.n	800f574 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f840 	bl	800f5f2 <USBD_CtlError>
      break;
 800f572:	e000      	b.n	800f576 <USBD_ClrFeature+0x3c>
      break;
 800f574:	bf00      	nop
  }
}
 800f576:	bf00      	nop
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b084      	sub	sp, #16
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	781a      	ldrb	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3301      	adds	r3, #1
 800f598:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	781a      	ldrb	r2, [r3, #0]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f7ff fa40 	bl	800ea2e <SWAPBYTE>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f7ff fa33 	bl	800ea2e <SWAPBYTE>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fa26 	bl	800ea2e <SWAPBYTE>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	80da      	strh	r2, [r3, #6]
}
 800f5ea:	bf00      	nop
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b082      	sub	sp, #8
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5fc:	2180      	movs	r1, #128	@ 0x80
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7fe fdb4 	bl	800e16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f604:	2100      	movs	r1, #0
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7fe fdb0 	bl	800e16c <USBD_LL_StallEP>
}
 800f60c:	bf00      	nop
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f620:	2300      	movs	r3, #0
 800f622:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d036      	beq.n	800f698 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f62e:	6938      	ldr	r0, [r7, #16]
 800f630:	f000 f836 	bl	800f6a0 <USBD_GetLen>
 800f634:	4603      	mov	r3, r0
 800f636:	3301      	adds	r3, #1
 800f638:	b29b      	uxth	r3, r3
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f642:	7dfb      	ldrb	r3, [r7, #23]
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	4413      	add	r3, r2
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	7812      	ldrb	r2, [r2, #0]
 800f64c:	701a      	strb	r2, [r3, #0]
  idx++;
 800f64e:	7dfb      	ldrb	r3, [r7, #23]
 800f650:	3301      	adds	r3, #1
 800f652:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f654:	7dfb      	ldrb	r3, [r7, #23]
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	4413      	add	r3, r2
 800f65a:	2203      	movs	r2, #3
 800f65c:	701a      	strb	r2, [r3, #0]
  idx++;
 800f65e:	7dfb      	ldrb	r3, [r7, #23]
 800f660:	3301      	adds	r3, #1
 800f662:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f664:	e013      	b.n	800f68e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f666:	7dfb      	ldrb	r3, [r7, #23]
 800f668:	68ba      	ldr	r2, [r7, #8]
 800f66a:	4413      	add	r3, r2
 800f66c:	693a      	ldr	r2, [r7, #16]
 800f66e:	7812      	ldrb	r2, [r2, #0]
 800f670:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	3301      	adds	r3, #1
 800f676:	613b      	str	r3, [r7, #16]
    idx++;
 800f678:	7dfb      	ldrb	r3, [r7, #23]
 800f67a:	3301      	adds	r3, #1
 800f67c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
 800f680:	68ba      	ldr	r2, [r7, #8]
 800f682:	4413      	add	r3, r2
 800f684:	2200      	movs	r2, #0
 800f686:	701a      	strb	r2, [r3, #0]
    idx++;
 800f688:	7dfb      	ldrb	r3, [r7, #23]
 800f68a:	3301      	adds	r3, #1
 800f68c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1e7      	bne.n	800f666 <USBD_GetString+0x52>
 800f696:	e000      	b.n	800f69a <USBD_GetString+0x86>
    return;
 800f698:	bf00      	nop
  }
}
 800f69a:	3718      	adds	r7, #24
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f6b0:	e005      	b.n	800f6be <USBD_GetLen+0x1e>
  {
    len++;
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1f5      	bne.n	800f6b2 <USBD_GetLen+0x12>
  }

  return len;
 800f6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2212      	movs	r2, #18
 800f6e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800f6e6:	4b03      	ldr	r3, [pc, #12]	@ (800f6f4 <USBD_Class_DeviceDescriptor+0x20>)
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	200000ec 	.word	0x200000ec

0800f6f8 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	6039      	str	r1, [r7, #0]
 800f702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	2204      	movs	r2, #4
 800f708:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800f70a:	4b03      	ldr	r3, [pc, #12]	@ (800f718 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	20000100 	.word	0x20000100

0800f71c <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	4603      	mov	r3, r0
 800f724:	6039      	str	r1, [r7, #0]
 800f726:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d105      	bne.n	800f73a <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	4907      	ldr	r1, [pc, #28]	@ (800f750 <USBD_Class_ProductStrDescriptor+0x34>)
 800f732:	4808      	ldr	r0, [pc, #32]	@ (800f754 <USBD_Class_ProductStrDescriptor+0x38>)
 800f734:	f7ff ff6e 	bl	800f614 <USBD_GetString>
 800f738:	e004      	b.n	800f744 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	4904      	ldr	r1, [pc, #16]	@ (800f750 <USBD_Class_ProductStrDescriptor+0x34>)
 800f73e:	4805      	ldr	r0, [pc, #20]	@ (800f754 <USBD_Class_ProductStrDescriptor+0x38>)
 800f740:	f7ff ff68 	bl	800f614 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f744:	4b02      	ldr	r3, [pc, #8]	@ (800f750 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800f746:	4618      	mov	r0, r3
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	20001064 	.word	0x20001064
 800f754:	0800fa60 	.word	0x0800fa60

0800f758 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	6039      	str	r1, [r7, #0]
 800f762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f764:	683a      	ldr	r2, [r7, #0]
 800f766:	4904      	ldr	r1, [pc, #16]	@ (800f778 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800f768:	4804      	ldr	r0, [pc, #16]	@ (800f77c <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800f76a:	f7ff ff53 	bl	800f614 <USBD_GetString>
  return USBD_StrDesc;
 800f76e:	4b02      	ldr	r3, [pc, #8]	@ (800f778 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	20001064 	.word	0x20001064
 800f77c:	0800fa78 	.word	0x0800fa78

0800f780 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	221a      	movs	r2, #26
 800f790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800f792:	f000 f843 	bl	800f81c <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800f796:	4b02      	ldr	r3, [pc, #8]	@ (800f7a0 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	20000104 	.word	0x20000104

0800f7a4 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	6039      	str	r1, [r7, #0]
 800f7ae:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d105      	bne.n	800f7c2 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	4907      	ldr	r1, [pc, #28]	@ (800f7d8 <USBD_Class_ConfigStrDescriptor+0x34>)
 800f7ba:	4808      	ldr	r0, [pc, #32]	@ (800f7dc <USBD_Class_ConfigStrDescriptor+0x38>)
 800f7bc:	f7ff ff2a 	bl	800f614 <USBD_GetString>
 800f7c0:	e004      	b.n	800f7cc <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	4904      	ldr	r1, [pc, #16]	@ (800f7d8 <USBD_Class_ConfigStrDescriptor+0x34>)
 800f7c6:	4805      	ldr	r0, [pc, #20]	@ (800f7dc <USBD_Class_ConfigStrDescriptor+0x38>)
 800f7c8:	f7ff ff24 	bl	800f614 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7cc:	4b02      	ldr	r3, [pc, #8]	@ (800f7d8 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20001064 	.word	0x20001064
 800f7dc:	0800fa8c 	.word	0x0800fa8c

0800f7e0 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	6039      	str	r1, [r7, #0]
 800f7ea:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f7ec:	79fb      	ldrb	r3, [r7, #7]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d105      	bne.n	800f7fe <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800f7f2:	683a      	ldr	r2, [r7, #0]
 800f7f4:	4907      	ldr	r1, [pc, #28]	@ (800f814 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f7f6:	4808      	ldr	r0, [pc, #32]	@ (800f818 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f7f8:	f7ff ff0c 	bl	800f614 <USBD_GetString>
 800f7fc:	e004      	b.n	800f808 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	4904      	ldr	r1, [pc, #16]	@ (800f814 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f802:	4805      	ldr	r0, [pc, #20]	@ (800f818 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f804:	f7ff ff06 	bl	800f614 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f808:	4b02      	ldr	r3, [pc, #8]	@ (800f814 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	20001064 	.word	0x20001064
 800f818:	0800fa98 	.word	0x0800fa98

0800f81c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800f822:	4b0f      	ldr	r3, [pc, #60]	@ (800f860 <Get_SerialNum+0x44>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800f828:	4b0e      	ldr	r3, [pc, #56]	@ (800f864 <Get_SerialNum+0x48>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800f82e:	4b0e      	ldr	r3, [pc, #56]	@ (800f868 <Get_SerialNum+0x4c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4413      	add	r3, r2
 800f83a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d009      	beq.n	800f856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800f842:	2208      	movs	r2, #8
 800f844:	4909      	ldr	r1, [pc, #36]	@ (800f86c <Get_SerialNum+0x50>)
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f000 f814 	bl	800f874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800f84c:	2204      	movs	r2, #4
 800f84e:	4908      	ldr	r1, [pc, #32]	@ (800f870 <Get_SerialNum+0x54>)
 800f850:	68b8      	ldr	r0, [r7, #8]
 800f852:	f000 f80f 	bl	800f874 <IntToUnicode>
  }
}
 800f856:	bf00      	nop
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	08fff800 	.word	0x08fff800
 800f864:	08fff804 	.word	0x08fff804
 800f868:	08fff808 	.word	0x08fff808
 800f86c:	20000106 	.word	0x20000106
 800f870:	20000116 	.word	0x20000116

0800f874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800f874:	b480      	push	{r7}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800f882:	2300      	movs	r3, #0
 800f884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800f886:	2300      	movs	r3, #0
 800f888:	75fb      	strb	r3, [r7, #23]
 800f88a:	e025      	b.n	800f8d8 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	0f1b      	lsrs	r3, r3, #28
 800f890:	2b09      	cmp	r3, #9
 800f892:	d80a      	bhi.n	800f8aa <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	0f1b      	lsrs	r3, r3, #28
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
 800f89c:	005b      	lsls	r3, r3, #1
 800f89e:	68b9      	ldr	r1, [r7, #8]
 800f8a0:	440b      	add	r3, r1
 800f8a2:	3230      	adds	r2, #48	@ 0x30
 800f8a4:	b2d2      	uxtb	r2, r2
 800f8a6:	701a      	strb	r2, [r3, #0]
 800f8a8:	e009      	b.n	800f8be <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	0f1b      	lsrs	r3, r3, #28
 800f8ae:	b2da      	uxtb	r2, r3
 800f8b0:	7dfb      	ldrb	r3, [r7, #23]
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	68b9      	ldr	r1, [r7, #8]
 800f8b6:	440b      	add	r3, r1
 800f8b8:	3237      	adds	r2, #55	@ 0x37
 800f8ba:	b2d2      	uxtb	r2, r2
 800f8bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	011b      	lsls	r3, r3, #4
 800f8c2:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
 800f8c6:	005b      	lsls	r3, r3, #1
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	75fb      	strb	r3, [r7, #23]
 800f8d8:	7dfa      	ldrb	r2, [r7, #23]
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d3d5      	bcc.n	800f88c <IntToUnicode+0x18>
  }
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	371c      	adds	r7, #28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr

0800f8ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b084      	sub	sp, #16
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	60f8      	str	r0, [r7, #12]
 800f8f6:	60b9      	str	r1, [r7, #8]
 800f8f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2202      	movs	r2, #2
 800f8fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	2100      	movs	r1, #0
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7fe fca0 	bl	800e25a <USBD_LL_Transmit>

  return USBD_OK;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	2100      	movs	r1, #0
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f7fe fc8f 	bl	800e25a <USBD_LL_Transmit>

  return USBD_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	60f8      	str	r0, [r7, #12]
 800f94e:	60b9      	str	r1, [r7, #8]
 800f950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2203      	movs	r2, #3
 800f956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	2100      	movs	r1, #0
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7fe fc8d 	bl	800e290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	2100      	movs	r1, #0
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f7fe fc7c 	bl	800e290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b082      	sub	sp, #8
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2204      	movs	r2, #4
 800f9ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7fe fc4e 	bl	800e25a <USBD_LL_Transmit>

  return USBD_OK;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2205      	movs	r2, #5
 800f9d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9d8:	2300      	movs	r3, #0
 800f9da:	2200      	movs	r2, #0
 800f9dc:	2100      	movs	r1, #0
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7fe fc56 	bl	800e290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <memset>:
 800f9ee:	4402      	add	r2, r0
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d100      	bne.n	800f9f8 <memset+0xa>
 800f9f6:	4770      	bx	lr
 800f9f8:	f803 1b01 	strb.w	r1, [r3], #1
 800f9fc:	e7f9      	b.n	800f9f2 <memset+0x4>
	...

0800fa00 <__libc_init_array>:
 800fa00:	b570      	push	{r4, r5, r6, lr}
 800fa02:	4d0d      	ldr	r5, [pc, #52]	@ (800fa38 <__libc_init_array+0x38>)
 800fa04:	2600      	movs	r6, #0
 800fa06:	4c0d      	ldr	r4, [pc, #52]	@ (800fa3c <__libc_init_array+0x3c>)
 800fa08:	1b64      	subs	r4, r4, r5
 800fa0a:	10a4      	asrs	r4, r4, #2
 800fa0c:	42a6      	cmp	r6, r4
 800fa0e:	d109      	bne.n	800fa24 <__libc_init_array+0x24>
 800fa10:	4d0b      	ldr	r5, [pc, #44]	@ (800fa40 <__libc_init_array+0x40>)
 800fa12:	2600      	movs	r6, #0
 800fa14:	4c0b      	ldr	r4, [pc, #44]	@ (800fa44 <__libc_init_array+0x44>)
 800fa16:	f000 f817 	bl	800fa48 <_init>
 800fa1a:	1b64      	subs	r4, r4, r5
 800fa1c:	10a4      	asrs	r4, r4, #2
 800fa1e:	42a6      	cmp	r6, r4
 800fa20:	d105      	bne.n	800fa2e <__libc_init_array+0x2e>
 800fa22:	bd70      	pop	{r4, r5, r6, pc}
 800fa24:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa28:	3601      	adds	r6, #1
 800fa2a:	4798      	blx	r3
 800fa2c:	e7ee      	b.n	800fa0c <__libc_init_array+0xc>
 800fa2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa32:	3601      	adds	r6, #1
 800fa34:	4798      	blx	r3
 800fa36:	e7f2      	b.n	800fa1e <__libc_init_array+0x1e>
 800fa38:	0800fafc 	.word	0x0800fafc
 800fa3c:	0800fafc 	.word	0x0800fafc
 800fa40:	0800fafc 	.word	0x0800fafc
 800fa44:	0800fb00 	.word	0x0800fb00

0800fa48 <_init>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	bf00      	nop
 800fa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa4e:	bc08      	pop	{r3}
 800fa50:	469e      	mov	lr, r3
 800fa52:	4770      	bx	lr

0800fa54 <_fini>:
 800fa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa56:	bf00      	nop
 800fa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa5a:	bc08      	pop	{r3}
 800fa5c:	469e      	mov	lr, r3
 800fa5e:	4770      	bx	lr
