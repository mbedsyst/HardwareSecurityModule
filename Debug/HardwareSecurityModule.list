
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e964  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800ebb0  0800ebb0  0000fbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec78  0800ec78  00010170  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec78  0800ec78  0000fc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec80  0800ec80  00010170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec80  0800ec80  0000fc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec84  0800ec84  0000fc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800ec88  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f00  20000170  0800edf8  00010170  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20001070  0800edf8  00011070  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001904b  00000000  00000000  000101a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003781  00000000  00000000  000291f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0002c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db6  00000000  00000000  0002db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003369b  00000000  00000000  0002e94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001921e  00000000  00000000  00061fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001372ce  00000000  00000000  0007b207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b24d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f8c  00000000  00000000  001b2518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001b74a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000170 	.word	0x20000170
 8000268:	00000000 	.word	0x00000000
 800026c:	0800eb98 	.word	0x0800eb98

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000174 	.word	0x20000174
 8000288:	0800eb98 	.word	0x0800eb98

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b092      	sub	sp, #72	@ 0x48
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fd81 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f85d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f931 	bl	8000828 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005c6:	f000 f8cd 	bl	8000764 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80005ca:	bf00      	nop
 80005cc:	4b27      	ldr	r3, [pc, #156]	@ (800066c <main+0xb8>)
 80005ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0fa      	beq.n	80005cc <main+0x18>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fb9e 	bl	8000d18 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fb9b 	bl	8000d18 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f000 fb98 	bl	8000d18 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005e8:	2101      	movs	r1, #1
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fc0a 	bl	8000e04 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <main+0xbc>)
 80005f2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <main+0xbc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <main+0xbc>)
 8000600:	2200      	movs	r2, #0
 8000602:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <main+0xbc>)
 8000606:	2200      	movs	r2, #0
 8000608:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <main+0xbc>)
 800060c:	2200      	movs	r2, #0
 800060e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000610:	4917      	ldr	r1, [pc, #92]	@ (8000670 <main+0xbc>)
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fc90 	bl	8000f38 <BSP_COM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0x6e>
  {
    Error_Handler();
 800061e:	f000 f9ef 	bl	8000a00 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 8000622:	2300      	movs	r3, #0
 8000624:	647b      	str	r3, [r7, #68]	@ 0x44
      {
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000626:	1d38      	adds	r0, r7, #4
 8000628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800062a:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <main+0xc0>)
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	f00d fded 	bl	800e20c <sniprintf>
          TEMPLATE_Transmit((uint8_t*)TxMessageBuffer, strlen(TxMessageBuffer));
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fe29 	bl	800028c <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f00b ff9e 	bl	800c584 <TEMPLATE_Transmit>
          HAL_Delay(j%1000);
 8000648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <main+0xc4>)
 800064c:	fba3 1302 	umull	r1, r3, r3, r2
 8000650:	099b      	lsrs	r3, r3, #6
 8000652:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fded 	bl	800123c <HAL_Delay>
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 8000662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000664:	3301      	adds	r3, #1
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000668:	bf00      	nop
 800066a:	e7dc      	b.n	8000626 <main+0x72>
 800066c:	20000480 	.word	0x20000480
 8000670:	2000018c 	.word	0x2000018c
 8000674:	0800ebb0 	.word	0x0800ebb0
 8000678:	10624dd3 	.word	0x10624dd3

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b09c      	sub	sp, #112	@ 0x70
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2250      	movs	r2, #80	@ 0x50
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00d fdf2 	bl	800e274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a2:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <SystemClock_Config+0xe0>)
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	4a2d      	ldr	r2, [pc, #180]	@ (800075c <SystemClock_Config+0xe0>)
 80006a8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006ac:	6113      	str	r3, [r2, #16]
 80006ae:	4b2b      	ldr	r3, [pc, #172]	@ (800075c <SystemClock_Config+0xe0>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <SystemClock_Config+0xe0>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d1f9      	bne.n	80006bc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006c8:	2321      	movs	r3, #33	@ 0x21
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006dc:	2303      	movs	r3, #3
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006e4:	23fa      	movs	r3, #250	@ 0xfa
 80006e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006f4:	2304      	movs	r3, #4
 80006f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fe43 	bl	8003390 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 f976 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	231f      	movs	r3, #31
 8000716:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2303      	movs	r3, #3
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fa64 	bl	8003c00 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073e:	f000 f95f 	bl	8000a00 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <SystemClock_Config+0xe4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <SystemClock_Config+0xe4>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6013      	str	r3, [r2, #0]
}
 8000752:	bf00      	nop
 8000754:	3770      	adds	r7, #112	@ 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	44020800 	.word	0x44020800
 8000760:	40022000 	.word	0x40022000

08000764 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 800076a:	4a2a      	ldr	r2, [pc, #168]	@ (8000814 <MX_USB_PCD_Init+0xb0>)
 800076c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 8000772:	4a29      	ldr	r2, [pc, #164]	@ (8000818 <MX_USB_PCD_Init+0xb4>)
 8000774:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 8000778:	2208      	movs	r2, #8
 800077a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 800077e:	2202      	movs	r2, #2
 8000780:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 8000784:	2202      	movs	r2, #2
 8000786:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 800078a:	2200      	movs	r2, #0
 800078c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 8000790:	2200      	movs	r2, #0
 8000792:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 8000796:	2200      	movs	r2, #0
 8000798:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800079a:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 800079c:	2200      	movs	r2, #0
 800079e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80007b2:	4817      	ldr	r0, [pc, #92]	@ (8000810 <MX_USB_PCD_Init+0xac>)
 80007b4:	f001 f94b 	bl	8001a4e <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 80007be:	f000 f91f 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80007c2:	2200      	movs	r2, #0
 80007c4:	4915      	ldr	r1, [pc, #84]	@ (800081c <MX_USB_PCD_Init+0xb8>)
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <MX_USB_PCD_Init+0xb0>)
 80007c8:	f00c f9e2 	bl	800cb90 <USBD_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 80007d2:	f000 f915 	bl	8000a00 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80007d6:	4912      	ldr	r1, [pc, #72]	@ (8000820 <MX_USB_PCD_Init+0xbc>)
 80007d8:	480e      	ldr	r0, [pc, #56]	@ (8000814 <MX_USB_PCD_Init+0xb0>)
 80007da:	f00c fa09 	bl	800cbf0 <USBD_RegisterClass>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 80007e4:	f000 f90c 	bl	8000a00 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 80007e8:	490e      	ldr	r1, [pc, #56]	@ (8000824 <MX_USB_PCD_Init+0xc0>)
 80007ea:	480a      	ldr	r0, [pc, #40]	@ (8000814 <MX_USB_PCD_Init+0xb0>)
 80007ec:	f00b fdde 	bl	800c3ac <USBD_CDC_RegisterInterface>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USB_PCD_Init+0x96>
        Error_Handler();
 80007f6:	f000 f903 	bl	8000a00 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_USB_PCD_Init+0xb0>)
 80007fc:	f00c fa2e 	bl	800cc5c <USBD_Start>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000806:	f000 f8fb 	bl	8000a00 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000019c 	.word	0x2000019c
 8000814:	20000480 	.word	0x20000480
 8000818:	40016000 	.word	0x40016000
 800081c:	200000d0 	.word	0x200000d0
 8000820:	20000034 	.word	0x20000034
 8000824:	200000b4 	.word	0x200000b4

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	@ 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	4b6a      	ldr	r3, [pc, #424]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 8000840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000844:	4a68      	ldr	r2, [pc, #416]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800084e:	4b66      	ldr	r3, [pc, #408]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 8000850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b62      	ldr	r3, [pc, #392]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 800085e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000862:	4a61      	ldr	r2, [pc, #388]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800086c:	4b5e      	ldr	r3, [pc, #376]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 800086e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b5b      	ldr	r3, [pc, #364]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 800087c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000880:	4a59      	ldr	r2, [pc, #356]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 8000882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000886:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088a:	4b57      	ldr	r3, [pc, #348]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 800088c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b53      	ldr	r3, [pc, #332]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 800089a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800089e:	4a52      	ldr	r2, [pc, #328]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008a8:	4b4f      	ldr	r3, [pc, #316]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b4c      	ldr	r3, [pc, #304]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008bc:	4a4a      	ldr	r2, [pc, #296]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008c6:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d4:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008da:	4a43      	ldr	r2, [pc, #268]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e4:	4b40      	ldr	r3, [pc, #256]	@ (80009e8 <MX_GPIO_Init+0x1c0>)
 80008e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008f2:	2332      	movs	r3, #50	@ 0x32
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000902:	230b      	movs	r3, #11
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4837      	ldr	r0, [pc, #220]	@ (80009ec <MX_GPIO_Init+0x1c4>)
 800090e:	f000 fed1 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000912:	2386      	movs	r3, #134	@ 0x86
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2302      	movs	r3, #2
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000922:	230b      	movs	r3, #11
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4830      	ldr	r0, [pc, #192]	@ (80009f0 <MX_GPIO_Init+0x1c8>)
 800092e:	f000 fec1 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000932:	2310      	movs	r3, #16
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	482a      	ldr	r0, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0x1c8>)
 8000946:	f000 feb5 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 800094a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4825      	ldr	r0, [pc, #148]	@ (80009f4 <MX_GPIO_Init+0x1cc>)
 8000960:	f000 fea8 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	@ (80009f4 <MX_GPIO_Init+0x1cc>)
 8000982:	f000 fe97 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_GPIO_Init+0x1d0>)
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4818      	ldr	r0, [pc, #96]	@ (80009fc <MX_GPIO_Init+0x1d4>)
 800099a:	f000 fe8b 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 800099e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2302      	movs	r3, #2
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b0:	230b      	movs	r3, #11
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4810      	ldr	r0, [pc, #64]	@ (80009fc <MX_GPIO_Init+0x1d4>)
 80009bc:	f000 fe7a 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80009c0:	23c0      	movs	r3, #192	@ 0xc0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009d0:	2308      	movs	r3, #8
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <MX_GPIO_Init+0x1cc>)
 80009dc:	f000 fe6a 	bl	80016b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	@ 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	44020c00 	.word	0x44020c00
 80009ec:	42020800 	.word	0x42020800
 80009f0:	42020000 	.word	0x42020000
 80009f4:	42020400 	.word	0x42020400
 80009f8:	10110000 	.word	0x10110000
 80009fc:	42021800 	.word	0x42021800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0c6      	sub	sp, #280	@ 0x118
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a2a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a34:	4618      	mov	r0, r3
 8000a36:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f00d fc19 	bl	800e274 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000a42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <HAL_PCD_MspInit+0xbc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d13b      	bne.n	8000acc <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a58:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	f04f 0310 	mov.w	r3, #16
 8000a64:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a70:	2230      	movs	r2, #48	@ 0x30
 8000a72:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 fc02 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8000a86:	f7ff ffbb 	bl	8000a00 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8000a8a:	f002 fc71 	bl	8003370 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <HAL_PCD_MspInit+0xc0>)
 8000a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <HAL_PCD_MspInit+0xc0>)
 8000a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a9a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_PCD_MspInit+0xc0>)
 8000aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000aa4:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8000aa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000aac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ab6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000aba:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	204a      	movs	r0, #74	@ 0x4a
 8000ac2:	f000 fc97 	bl	80013f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8000ac6:	204a      	movs	r0, #74	@ 0x4a
 8000ac8:	f000 fcae 	bl	8001428 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40016000 	.word	0x40016000
 8000adc:	44020c00 	.word	0x44020c00

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 fb61 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f9d6 	bl	8000ef4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <USB_DRD_FS_IRQHandler+0x10>)
 8000b52:	f001 f89f 	bl	8001c94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000019c 	.word	0x2000019c

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f00d fb78 	bl	800e284 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200a0000 	.word	0x200a0000
 8000bc0:	00000500 	.word	0x00000500
 8000bc4:	2000075c 	.word	0x2000075c
 8000bc8:	20001070 	.word	0x20001070

08000bcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <SystemInit+0xdc>)
 8000bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd8:	4a33      	ldr	r2, [pc, #204]	@ (8000ca8 <SystemInit+0xdc>)
 8000bda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000be2:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <SystemInit+0xe0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000be8:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <SystemInit+0xe0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bee:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <SystemInit+0xe0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <SystemInit+0xe0>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	492c      	ldr	r1, [pc, #176]	@ (8000cac <SystemInit+0xe0>)
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <SystemInit+0xe4>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <SystemInit+0xe0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000c06:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <SystemInit+0xe0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <SystemInit+0xe0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c12:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <SystemInit+0xe0>)
 8000c14:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <SystemInit+0xe8>)
 8000c16:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c18:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <SystemInit+0xe0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <SystemInit+0xe0>)
 8000c20:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <SystemInit+0xe8>)
 8000c22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <SystemInit+0xe0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <SystemInit+0xe0>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <SystemInit+0xe8>)
 8000c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <SystemInit+0xe0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <SystemInit+0xe0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <SystemInit+0xe0>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <SystemInit+0xe0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <SystemInit+0xdc>)
 8000c4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c4e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000c50:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <SystemInit+0xec>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000c58:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000c60:	d003      	beq.n	8000c6a <SystemInit+0x9e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c68:	d117      	bne.n	8000c9a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <SystemInit+0xec>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <SystemInit+0xec>)
 8000c78:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <SystemInit+0xf0>)
 8000c7a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <SystemInit+0xec>)
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <SystemInit+0xf4>)
 8000c80:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <SystemInit+0xec>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb8 <SystemInit+0xec>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <SystemInit+0xec>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <SystemInit+0xec>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	61d3      	str	r3, [r2, #28]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	44020c00 	.word	0x44020c00
 8000cb0:	eae2eae3 	.word	0xeae2eae3
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	40022000 	.word	0x40022000
 8000cbc:	08192a3b 	.word	0x08192a3b
 8000cc0:	4c5d6e7f 	.word	0x4c5d6e7f

08000cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff ff80 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f00d facd 	bl	800e290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fc5d 	bl	80005b4 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000d08:	0800ec88 	.word	0x0800ec88
  ldr r2, =_sbss
 8000d0c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000d10:	20001070 	.word	0x20001070

08000d14 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_IRQHandler>
	...

08000d18 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	@ 0x30
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d009      	beq.n	8000d40 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d006      	beq.n	8000d40 <BSP_LED_Init+0x28>
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d003      	beq.n	8000d40 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d38:	f06f 0301 	mvn.w	r3, #1
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d3e:	e055      	b.n	8000dec <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d10f      	bne.n	8000d66 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d46:	4b2c      	ldr	r3, [pc, #176]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d56:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	e021      	b.n	8000daa <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10f      	bne.n	8000d8c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d72:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	e00e      	b.n	8000daa <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d92:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <BSP_LED_Init+0xe0>)
 8000d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <BSP_LED_Init+0xe4>)
 8000dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <BSP_LED_Init+0xe8>)
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	f107 0218 	add.w	r2, r7, #24
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fc70 	bl	80016b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <BSP_LED_Init+0xe8>)
 8000dd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <BSP_LED_Init+0xe4>)
 8000de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de4:	2200      	movs	r2, #0
 8000de6:	4619      	mov	r1, r3
 8000de8:	f000 fdb6 	bl	8001958 <HAL_GPIO_WritePin>
  }

  return ret;
 8000dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3730      	adds	r7, #48	@ 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	44020c00 	.word	0x44020c00
 8000dfc:	0800ec20 	.word	0x0800ec20
 8000e00:	20000008 	.word	0x20000008

08000e04 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <BSP_PB_Init+0xd4>)
 8000e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed8 <BSP_PB_Init+0xd4>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <BSP_PB_Init+0xd4>)
 8000e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <BSP_PB_Init+0xd8>)
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	f107 020c 	add.w	r2, r7, #12
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fc2b 	bl	80016b4 <HAL_GPIO_Init>
 8000e5e:	e036      	b.n	8000ece <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <BSP_PB_Init+0xdc>)
 8000e62:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a1d      	ldr	r2, [pc, #116]	@ (8000edc <BSP_PB_Init+0xd8>)
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	f107 020c 	add.w	r2, r7, #12
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fc1e 	bl	80016b4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <BSP_PB_Init+0xe0>)
 8000e84:	441a      	add	r2, r3
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4917      	ldr	r1, [pc, #92]	@ (8000ee8 <BSP_PB_Init+0xe4>)
 8000e8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f000 fbb3 	bl	80015fc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <BSP_PB_Init+0xe0>)
 8000ea2:	1898      	adds	r0, r3, r2
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <BSP_PB_Init+0xe8>)
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	461a      	mov	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f000 fb78 	bl	80015a4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000eb4:	2018      	movs	r0, #24
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <BSP_PB_Init+0xec>)
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f000 fa97 	bl	80013f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ec6:	2318      	movs	r3, #24
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 faad 	bl	8001428 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	44020c00 	.word	0x44020c00
 8000edc:	20000014 	.word	0x20000014
 8000ee0:	10110000 	.word	0x10110000
 8000ee4:	20000760 	.word	0x20000760
 8000ee8:	0800ec28 	.word	0x0800ec28
 8000eec:	20000018 	.word	0x20000018
 8000ef0:	2000001c 	.word	0x2000001c

08000ef4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <BSP_PB_IRQHandler+0x28>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fb89 	bl	8001624 <HAL_EXTI_IRQHandler>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000760 	.word	0x20000760

08000f20 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f4e:	f06f 0301 	mvn.w	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e018      	b.n	8000f88 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2294      	movs	r2, #148	@ 0x94
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <BSP_COM_Init+0x5c>)
 8000f60:	4413      	add	r3, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f854 	bl	8001010 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2294      	movs	r2, #148	@ 0x94
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <BSP_COM_Init+0x5c>)
 8000f72:	4413      	add	r3, r2
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f80e 	bl	8000f98 <MX_USART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f82:	f06f 0303 	mvn.w	r3, #3
 8000f86:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f88:	68fb      	ldr	r3, [r7, #12]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000076c 	.word	0x2000076c

08000f98 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_USART_Init+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	895b      	ldrh	r3, [r3, #10]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	891b      	ldrh	r3, [r3, #8]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	899b      	ldrh	r3, [r3, #12]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fe4:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f008 f9a1 	bl	8009334 <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000004 	.word	0x20000004

08001000 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ff8b 	bl	8000f20 <BSP_PB_Callback>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001018:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <COM1_MspInit+0xa8>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101e:	4a26      	ldr	r2, [pc, #152]	@ (80010b8 <COM1_MspInit+0xa8>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001028:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <COM1_MspInit+0xa8>)
 800102a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <COM1_MspInit+0xa8>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800103c:	4a1e      	ldr	r2, [pc, #120]	@ (80010b8 <COM1_MspInit+0xa8>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <COM1_MspInit+0xa8>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <COM1_MspInit+0xa8>)
 8001056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <COM1_MspInit+0xa8>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001060:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <COM1_MspInit+0xa8>)
 8001066:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800106a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001076:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001084:	2307      	movs	r3, #7
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480b      	ldr	r0, [pc, #44]	@ (80010bc <COM1_MspInit+0xac>)
 8001090:	f000 fb10 	bl	80016b4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001098:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800109e:	2307      	movs	r3, #7
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <COM1_MspInit+0xac>)
 80010aa:	f000 fb03 	bl	80016b4 <HAL_GPIO_Init>
}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	@ 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	44020c00 	.word	0x44020c00
 80010bc:	42020c00 	.word	0x42020c00

080010c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f98a 	bl	80013de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010ca:	f002 ff51 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_Init+0x44>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	490b      	ldr	r1, [pc, #44]	@ (8001108 <HAL_Init+0x48>)
 80010da:	5ccb      	ldrb	r3, [r1, r3]
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_Init+0x4c>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010e4:	2004      	movs	r0, #4
 80010e6:	f000 f9cf 	bl	8001488 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f810 	bl	8001110 <HAL_InitTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e002      	b.n	8001100 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010fa:	f7ff fc87 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	bd80      	pop	{r7, pc}
 8001104:	44020c00 	.word	0x44020c00
 8001108:	0800ec08 	.word	0x0800ec08
 800110c:	20000000 	.word	0x20000000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800111c:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <HAL_InitTick+0xdc>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e05c      	b.n	80011e2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001128:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <HAL_InitTick+0xe0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b04      	cmp	r3, #4
 8001132:	d10c      	bne.n	800114e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_InitTick+0xe4>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b2c      	ldr	r3, [pc, #176]	@ (80011ec <HAL_InitTick+0xdc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e037      	b.n	80011be <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800114e:	f000 f9f3 	bl	8001538 <HAL_SYSTICK_GetCLKSourceConfig>
 8001152:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d023      	beq.n	80011a2 <HAL_InitTick+0x92>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d82d      	bhi.n	80011bc <HAL_InitTick+0xac>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_InitTick+0x5e>
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d00d      	beq.n	8001188 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800116c:	e026      	b.n	80011bc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <HAL_InitTick+0xe4>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <HAL_InitTick+0xdc>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800117c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001180:	fbb2 f3f3 	udiv	r3, r2, r3
 8001184:	60fb      	str	r3, [r7, #12]
        break;
 8001186:	e01a      	b.n	80011be <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_InitTick+0xdc>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001192:	fbb3 f3f2 	udiv	r3, r3, r2
 8001196:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	60fb      	str	r3, [r7, #12]
        break;
 80011a0:	e00d      	b.n	80011be <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0xdc>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80011b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b8:	60fb      	str	r3, [r7, #12]
        break;
 80011ba:	e000      	b.n	80011be <HAL_InitTick+0xae>
        break;
 80011bc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f940 	bl	8001444 <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e009      	b.n	80011e2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ce:	2200      	movs	r2, #0
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295
 80011d6:	f000 f90d 	bl	80013f4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80011da:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_InitTick+0xe8>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000024 	.word	0x20000024
 80011f0:	e000e010 	.word	0xe000e010
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000020 	.word	0x20000020

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000024 	.word	0x20000024
 8001220:	20000800 	.word	0x20000800

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000800 	.word	0x20000800

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000024 	.word	0x20000024

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff4c 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001402:	f7ff ff63 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001406:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff ffb3 	bl	8001378 <NVIC_EncodePriority>
 8001412:	4602      	mov	r2, r0
 8001414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff82 	bl	8001324 <__NVIC_SetPriority>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff56 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001454:	d301      	bcc.n	800145a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001456:	2301      	movs	r3, #1
 8001458:	e00d      	b.n	8001476 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_SYSTICK_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_SYSTICK_Config+0x40>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_SYSTICK_Config+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <HAL_SYSTICK_Config+0x40>)
 800146e:	f043 0303 	orr.w	r3, r3, #3
 8001472:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d844      	bhi.n	8001520 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001496:	a201      	add	r2, pc, #4	@ (adr r2, 800149c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014bf 	.word	0x080014bf
 80014a0:	080014dd 	.word	0x080014dd
 80014a4:	080014ff 	.word	0x080014ff
 80014a8:	08001521 	.word	0x08001521
 80014ac:	080014b1 	.word	0x080014b1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6013      	str	r3, [r2, #0]
      break;
 80014bc:	e031      	b.n	8001522 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014d0:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014d2:	f023 030c 	bic.w	r3, r3, #12
 80014d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014da:	e022      	b.n	8001522 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014e2:	f023 0304 	bic.w	r3, r3, #4
 80014e6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014ee:	f023 030c 	bic.w	r3, r3, #12
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014fc:	e011      	b.n	8001522 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800150c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001510:	f023 030c 	bic.w	r3, r3, #12
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800151e:	e000      	b.n	8001522 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001520:	bf00      	nop
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010
 8001534:	44020c00 	.word	0x44020c00

08001538 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800154a:	2304      	movs	r3, #4
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	e01e      	b.n	800158e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d00f      	beq.n	8001582 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b08      	cmp	r3, #8
 8001566:	d80f      	bhi.n	8001588 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b04      	cmp	r3, #4
 8001572:	d003      	beq.n	800157c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001574:	e008      	b.n	8001588 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
        break;
 800157a:	e008      	b.n	800158e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800157c:	2301      	movs	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
        break;
 8001580:	e005      	b.n	800158e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001582:	2302      	movs	r3, #2
 8001584:	607b      	str	r3, [r7, #4]
        break;
 8001586:	e002      	b.n	800158e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
        break;
 800158c:	bf00      	nop
    }
  }
  return systick_source;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e010 	.word	0xe000e010
 80015a0:	44020c00 	.word	0x44020c00

080015a4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	460b      	mov	r3, r1
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d011      	beq.n	80015e0 <HAL_EXTI_RegisterCallback+0x3c>
 80015bc:	2b02      	cmp	r3, #2
 80015be:	dc13      	bgt.n	80015e8 <HAL_EXTI_RegisterCallback+0x44>
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_EXTI_RegisterCallback+0x26>
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d007      	beq.n	80015d8 <HAL_EXTI_RegisterCallback+0x34>
 80015c8:	e00e      	b.n	80015e8 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
      break;
 80015d6:	e00a      	b.n	80015ee <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	605a      	str	r2, [r3, #4]
      break;
 80015de:	e006      	b.n	80015ee <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]
      break;
 80015e6:	e002      	b.n	80015ee <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	75fb      	strb	r3, [r7, #23]
      break;
 80015ec:	bf00      	nop
  }

  return status;
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e003      	b.n	8001618 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001616:	2300      	movs	r3, #0
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0c1b      	lsrs	r3, r3, #16
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	2201      	movs	r2, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <HAL_EXTI_IRQHandler+0x88>)
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_EXTI_IRQHandler+0x8c>)
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4798      	blx	r3
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	4402200c 	.word	0x4402200c
 80016b0:	44022010 	.word	0x44022010

080016b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016c2:	e136      	b.n	8001932 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8128 	beq.w	800192c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x38>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d125      	bne.n	8001738 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	6979      	ldr	r1, [r7, #20]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4313      	orrs	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d00b      	beq.n	800178c <HAL_GPIO_Init+0xd8>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d007      	beq.n	800178c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001780:	2b11      	cmp	r3, #17
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d130      	bne.n	80017ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c2:	2201      	movs	r2, #1
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4013      	ands	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 0201 	and.w	r2, r3, #1
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d017      	beq.n	8001826 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4013      	ands	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d07c      	beq.n	800192c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001832:	4a47      	ldr	r2, [pc, #284]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3318      	adds	r3, #24
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	4013      	ands	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0a9a      	lsrs	r2, r3, #10
 800185a:	4b3e      	ldr	r3, [pc, #248]	@ (8001954 <HAL_GPIO_Init+0x2a0>)
 800185c:	4013      	ands	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	00d2      	lsls	r2, r2, #3
 8001866:	4093      	lsls	r3, r2
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4313      	orrs	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800186e:	4938      	ldr	r1, [pc, #224]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3318      	adds	r3, #24
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80018a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80018a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4013      	ands	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80018ca:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80018d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 80018d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4013      	ands	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80018f6:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 8001900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001904:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_GPIO_Init+0x29c>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	3301      	adds	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	f47f aec1 	bne.w	80016c4 <HAL_GPIO_Init+0x10>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	44022000 	.word	0x44022000
 8001954:	002f7f7f 	.word	0x002f7f7f

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001974:	e002      	b.n	800197c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001994:	230a      	movs	r3, #10
 8001996:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001998:	e002      	b.n	80019a0 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3b01      	subs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019bc:	b29b      	uxth	r3, r3
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80019d6:	230a      	movs	r3, #10
 80019d8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80019da:	e002      	b.n	80019e2 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3b01      	subs	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f9      	bne.n	80019dc <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019fe:	b29b      	uxth	r3, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001a1c:	e002      	b.n	8001a24 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a40:	b29b      	uxth	r3, r3
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af02      	add	r7, sp, #8
 8001a54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0f3      	b.n	8001c48 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d106      	bne.n	8001a7a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7fe ffd1 	bl	8000a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 f904 	bl	8009c94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7c1a      	ldrb	r2, [r3, #16]
 8001a94:	f88d 2000 	strb.w	r2, [sp]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9c:	f008 f8c8 	bl	8009c30 <USB_CoreInit>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0ca      	b.n	8001c48 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 f900 	bl	8009cbe <USB_SetCurrentMode>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0bb      	b.n	8001c48 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e03f      	b.n	8001b56 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3315      	adds	r3, #21
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	3314      	adds	r3, #20
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3317      	adds	r3, #23
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3324      	adds	r3, #36	@ 0x24
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3328      	adds	r3, #40	@ 0x28
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3ba      	bcc.n	8001ad6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e044      	b.n	8001bf0 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	3301      	adds	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3b5      	bcc.n	8001b66 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7c1a      	ldrb	r2, [r3, #16]
 8001c02:	f88d 2000 	strb.w	r2, [sp]
 8001c06:	3304      	adds	r3, #4
 8001c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c0a:	f008 f87b 	bl	8009d04 <USB_DevInit>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e013      	b.n	8001c48 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b1b      	ldrb	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f001 fb6b 	bl	8003312 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f009 fed5 	bl	800b9f0 <USB_DevDisconnect>

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_PCD_Start+0x16>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e012      	b.n	8001c8c <HAL_PCD_Start+0x3c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f007 fffa 	bl	8009c6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f009 fea6 	bl	800b9ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f009 feb6 	bl	800ba12 <USB_ReadInterrupts>
 8001ca6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 faf2 	bl	800229c <PCD_EP_ISR_Handler>

    return;
 8001cb8:	e0de      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f00a fdaf 	bl	800c83a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8e1 	bl	8001ea6 <HAL_PCD_SetAddress>

    return;
 8001ce4:	e0c8      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8001cfe:	400b      	ands	r3, r1
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001d02:	e0b9      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001d20:	e0aa      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d029      	beq.n	8001d80 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0208 	bic.w	r2, r2, #8
 8001d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f001 faf8 	bl	8003356 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f893 	bl	8001e92 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001d7e:	e07b      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01c      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0208 	orr.w	r2, r2, #8
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8001da8:	400b      	ands	r3, r1
 8001daa:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0204 	orr.w	r2, r2, #4
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f85e 	bl	8001e7e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001dc2:	e059      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d033      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001ddc:	400b      	ands	r3, r1
 8001dde:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0204 	orr.w	r2, r2, #4
 8001df8:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0208 	orr.w	r2, r2, #8
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e24:	2101      	movs	r1, #1
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 fa95 	bl	8003356 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001e2c:	e024      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f825 	bl	8001e7e <HAL_PCD_SuspendCallback>
    return;
 8001e34:	e020      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00c      	beq.n	8001e5a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8001e4e:	400b      	ands	r3, r1
 8001e50:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f00a fce3 	bl	800c81e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e58:	e00e      	b.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8001e72:	400b      	ands	r3, r1
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001e76:	bf00      	nop
  }
}
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_PCD_SetAddress+0x1a>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e012      	b.n	8001ee6 <HAL_PCD_SetAddress+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fd66 	bl	800b9a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	70fb      	strb	r3, [r7, #3]
 8001f00:	460b      	mov	r3, r1
 8001f02:	803b      	strh	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da0f      	bge.n	8001f34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 0207 	and.w	r2, r3, #7
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	3310      	adds	r3, #16
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
 8001f32:	e00f      	b.n	8001f54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0207 	and.w	r2, r3, #7
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f60:	883b      	ldrh	r3, [r7, #0]
 8001f62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	78ba      	ldrb	r2, [r7, #2]
 8001f6e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d102      	bne.n	8001f7c <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_EP_Open+0x9c>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e00e      	b.n	8001fa8 <HAL_PCD_EP_Open+0xba>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f007 fed7 	bl	8009d4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da0f      	bge.n	8001fe4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 0207 	and.w	r2, r3, #7
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	3310      	adds	r3, #16
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	705a      	strb	r2, [r3, #1]
 8001fe2:	e00f      	b.n	8002004 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 0207 	and.w	r2, r3, #7
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_PCD_EP_Close+0x6e>
 800201a:	2302      	movs	r3, #2
 800201c:	e00e      	b.n	800203c <HAL_PCD_EP_Close+0x8c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	4618      	mov	r0, r3
 800202e:	f008 f9ed 	bl	800a40c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	f003 0207 	and.w	r2, r3, #7
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	b2da      	uxtb	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6979      	ldr	r1, [r7, #20]
 8002098:	4618      	mov	r0, r3
 800209a:	f008 fb41 	bl	800a720 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 0207 	and.w	r2, r3, #7
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	460b      	mov	r3, r1
 80020e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	f003 0207 	and.w	r2, r3, #7
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	3310      	adds	r3, #16
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2201      	movs	r2, #1
 8002124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002126:	7afb      	ldrb	r3, [r7, #11]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	b2da      	uxtb	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6979      	ldr	r1, [r7, #20]
 8002138:	4618      	mov	r0, r3
 800213a:	f008 faf1 	bl	800a720 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	7912      	ldrb	r2, [r2, #4]
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e040      	b.n	80021e8 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800216a:	2b00      	cmp	r3, #0
 800216c:	da0f      	bge.n	800218e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 0207 	and.w	r2, r3, #7
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	3310      	adds	r3, #16
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	705a      	strb	r2, [r3, #1]
 800218c:	e00d      	b.n	80021aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_PCD_EP_SetStall+0x82>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e00e      	b.n	80021e8 <HAL_PCD_EP_SetStall+0xa0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	4618      	mov	r0, r3
 80021da:	f009 fb0b 	bl	800b7f4 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	7912      	ldrb	r2, [r2, #4]
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e042      	b.n	8002294 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0f      	bge.n	8002236 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0207 	and.w	r2, r3, #7
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	3310      	adds	r3, #16
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	3304      	adds	r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	e00f      	b.n	8002256 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 0207 	and.w	r2, r3, #7
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_EP_ClrStall+0x86>
 8002272:	2302      	movs	r3, #2
 8002274:	e00e      	b.n	8002294 <HAL_PCD_EP_ClrStall+0xa4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f009 fafb 	bl	800b880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	@ 0x38
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022a4:	e326      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80022ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80022ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8124 	bne.w	800250c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d13e      	bne.n	800234c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b89      	ldr	r3, [pc, #548]	@ (80024fc <PCD_EP_ISR_Handler+0x260>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022e4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3314      	adds	r3, #20
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002304:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	441a      	add	r2, r3
 8002310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002312:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002314:	2100      	movs	r1, #0
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f00a fa67 	bl	800c7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7c5b      	ldrb	r3, [r3, #17]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 82e6 	beq.w	80028f4 <PCD_EP_ISR_Handler+0x658>
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 82e1 	bne.w	80028f4 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7c5b      	ldrb	r3, [r3, #17]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800233c:	b2da      	uxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	745a      	strb	r2, [r3, #17]
 800234a:	e2d3      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800235c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800235e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002362:	2b00      	cmp	r3, #0
 8002364:	d027      	beq.n	80023b6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f7ff fb09 	bl	8001988 <PCD_GET_EP_RX_CNT>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002390:	b29b      	uxth	r3, r3
 8002392:	f009 fbad 	bl	800baf0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b58      	ldr	r3, [pc, #352]	@ (8002500 <PCD_EP_ISR_Handler+0x264>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023ac:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f00a f9ee 	bl	800c790 <HAL_PCD_SetupStageCallback>
 80023b4:	e29e      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80023b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f280 829a 	bge.w	80028f4 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002500 <PCD_EP_ISR_Handler+0x264>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023d6:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f7ff fad0 	bl	8001988 <PCD_GET_EP_RX_CNT>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d019      	beq.n	800242c <PCD_EP_ISR_Handler+0x190>
 80023f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002406:	6959      	ldr	r1, [r3, #20]
 8002408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002410:	b29b      	uxth	r3, r3
 8002412:	f009 fb6d 	bl	800baf0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	441a      	add	r2, r3
 8002420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002422:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002424:	2100      	movs	r1, #0
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f00a f9c4 	bl	800c7b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002434:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 825a 	bne.w	80028f4 <PCD_EP_ISR_Handler+0x658>
 8002440:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002442:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800244a:	f000 8253 	beq.w	80028f4 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800244e:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a2c      	ldr	r2, [pc, #176]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 8002454:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <PCD_EP_ISR_Handler+0x1d4>
 8002462:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a27      	ldr	r2, [pc, #156]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 8002468:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246c:	6053      	str	r3, [r2, #4]
 800246e:	e02e      	b.n	80024ce <PCD_EP_ISR_Handler+0x232>
 8002470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b3e      	cmp	r3, #62	@ 0x3e
 8002476:	d814      	bhi.n	80024a2 <PCD_EP_ISR_Handler+0x206>
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <PCD_EP_ISR_Handler+0x1f6>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	069b      	lsls	r3, r3, #26
 800249a:	491a      	ldr	r1, [pc, #104]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e015      	b.n	80024ce <PCD_EP_ISR_Handler+0x232>
 80024a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <PCD_EP_ISR_Handler+0x220>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	4313      	orrs	r3, r2
 80024c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002504 <PCD_EP_ISR_Handler+0x268>)
 80024c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024cc:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <PCD_EP_ISR_Handler+0x26c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e1fb      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
 80024fc:	07ff8f0f 	.word	0x07ff8f0f
 8002500:	07ff0f8f 	.word	0x07ff0f8f
 8002504:	40016400 	.word	0x40016400
 8002508:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800251e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002522:	2b00      	cmp	r3, #0
 8002524:	f280 80bd 	bge.w	80026a2 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b9e      	ldr	r3, [pc, #632]	@ (80027b4 <PCD_EP_ISR_Handler+0x518>)
 800253a:	4013      	ands	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002552:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002554:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800256c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f7ff fa02 	bl	8001988 <PCD_GET_EP_RX_CNT>
 8002584:	4603      	mov	r3, r0
 8002586:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d067      	beq.n	800265e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002594:	6959      	ldr	r1, [r3, #20]
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	88da      	ldrh	r2, [r3, #6]
 800259a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800259c:	f009 faa8 	bl	800baf0 <USB_ReadPMA>
 80025a0:	e05d      	b.n	800265e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d108      	bne.n	80025bc <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025ac:	461a      	mov	r2, r3
 80025ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f9ad 	bl	8002910 <HAL_PCD_EP_DB_Receive>
 80025b6:	4603      	mov	r3, r0
 80025b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80025ba:	e050      	b.n	800265e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b7a      	ldr	r3, [pc, #488]	@ (80027b8 <PCD_EP_ISR_Handler+0x51c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025ea:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d016      	beq.n	8002632 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7ff f9db 	bl	80019ca <PCD_GET_EP_DBUF0_CNT>
 8002614:	4603      	mov	r3, r0
 8002616:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01f      	beq.n	800265e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002624:	6959      	ldr	r1, [r3, #20]
 8002626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002628:	891a      	ldrh	r2, [r3, #8]
 800262a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800262c:	f009 fa60 	bl	800baf0 <USB_ReadPMA>
 8002630:	e015      	b.n	800265e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff f9e5 	bl	8001a0c <PCD_GET_EP_DBUF1_CNT>
 8002642:	4603      	mov	r3, r0
 8002644:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002652:	6959      	ldr	r1, [r3, #20]
 8002654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002656:	895a      	ldrh	r2, [r3, #10]
 8002658:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800265a:	f009 fa49 	bl	800baf0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800265e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002664:	441a      	add	r2, r3
 8002666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002668:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002670:	441a      	add	r2, r3
 8002672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002674:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <PCD_EP_ISR_Handler+0x3ec>
 800267e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	429a      	cmp	r2, r3
 8002686:	d206      	bcs.n	8002696 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f00a f890 	bl	800c7b4 <HAL_PCD_DataOutStageCallback>
 8002694:	e005      	b.n	80026a2 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800269c:	4618      	mov	r0, r3
 800269e:	f008 f83f 	bl	800a720 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80026a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8123 	beq.w	80028f4 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80026ae:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	3310      	adds	r3, #16
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <PCD_EP_ISR_Handler+0x520>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026ee:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 80b8 	bne.w	800286a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 80026fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002702:	7b1b      	ldrb	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a9 	beq.w	800285c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800270a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800270c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d055      	beq.n	80027c0 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d124      	bne.n	8002766 <PCD_EP_ISR_Handler+0x4ca>
 800271c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002726:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002736:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800273a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800274a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800275a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800275e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e07a      	b.n	800285c <PCD_EP_ISR_Handler+0x5c0>
 8002766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d176      	bne.n	800285c <PCD_EP_ISR_Handler+0x5c0>
 800276e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002778:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002788:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800278c:	b292      	uxth	r2, r2
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800279a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800279e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e054      	b.n	800285c <PCD_EP_ISR_Handler+0x5c0>
 80027b2:	bf00      	nop
 80027b4:	07ff0f8f 	.word	0x07ff0f8f
 80027b8:	07ff8f8f 	.word	0x07ff8f8f
 80027bc:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d124      	bne.n	8002812 <PCD_EP_ISR_Handler+0x576>
 80027c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027e6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800280a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	e024      	b.n	800285c <PCD_EP_ISR_Handler+0x5c0>
 8002812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d120      	bne.n	800285c <PCD_EP_ISR_Handler+0x5c0>
 800281a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002824:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002838:	b292      	uxth	r2, r2
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002846:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800284a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002854:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002858:	6852      	ldr	r2, [r2, #4]
 800285a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800285c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f009 ffc1 	bl	800c7ea <HAL_PCD_DataInStageCallback>
 8002868:	e044      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800286a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800286c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d139      	bne.n	80028e8 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800287e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b29b      	uxth	r3, r3
 8002888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 800288e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002894:	429a      	cmp	r2, r3
 8002896:	d906      	bls.n	80028a6 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8002898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800289e:	1ad2      	subs	r2, r2, r3
 80028a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a2:	619a      	str	r2, [r3, #24]
 80028a4:	e002      	b.n	80028ac <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80028a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80028ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f009 ff95 	bl	800c7ea <HAL_PCD_DataInStageCallback>
 80028c0:	e018      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80028c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028c8:	441a      	add	r2, r3
 80028ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80028ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028d4:	441a      	add	r2, r3
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028e0:	4618      	mov	r0, r3
 80028e2:	f007 ff1d 	bl	800a720 <USB_EPStartXfer>
 80028e6:	e005      	b.n	80028f4 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028e8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028ea:	461a      	mov	r2, r3
 80028ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8e8 	bl	8002ac4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f47f acd1 	bne.w	80022a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3738      	adds	r7, #56	@ 0x38
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop

08002910 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d062      	beq.n	80029ee <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff f849 	bl	80019ca <PCD_GET_EP_DBUF0_CNT>
 8002938:	4603      	mov	r3, r0
 800293a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	8bfb      	ldrh	r3, [r7, #30]
 8002942:	429a      	cmp	r2, r3
 8002944:	d306      	bcc.n	8002954 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	8bfb      	ldrh	r3, [r7, #30]
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	e002      	b.n	800295a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11b      	bne.n	800299a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b52      	ldr	r3, [pc, #328]	@ (8002abc <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002998:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b42      	ldr	r3, [pc, #264]	@ (8002ac0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80029d2:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80029d4:	8bfb      	ldrh	r3, [r7, #30]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d06b      	beq.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	891a      	ldrh	r2, [r3, #8]
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	f009 f882 	bl	800baf0 <USB_ReadPMA>
 80029ec:	e061      	b.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7ff f807 	bl	8001a0c <PCD_GET_EP_DBUF1_CNT>
 80029fe:	4603      	mov	r3, r0
 8002a00:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	8bfb      	ldrh	r3, [r7, #30]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d306      	bcc.n	8002a1a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	8bfb      	ldrh	r3, [r7, #30]
 8002a12:	1ad2      	subs	r2, r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	619a      	str	r2, [r3, #24]
 8002a18:	e002      	b.n	8002a20 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11b      	bne.n	8002a60 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a5e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d117      	bne.n	8002a9a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a98:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8002a9a:	8bfb      	ldrh	r3, [r7, #30]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6959      	ldr	r1, [r3, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	895a      	ldrh	r2, [r3, #10]
 8002aac:	8bfb      	ldrh	r3, [r7, #30]
 8002aae:	f009 f81f 	bl	800baf0 <USB_ReadPMA>
    }
  }

  return count;
 8002ab2:	8bfb      	ldrh	r3, [r7, #30]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3728      	adds	r7, #40	@ 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	07ffbf8f 	.word	0x07ffbf8f
 8002ac0:	07ff8f8f 	.word	0x07ff8f8f

08002ac4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	@ 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 81d5 	beq.w	8002e88 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7fe ff6e 	bl	80019ca <PCD_GET_EP_DBUF0_CNT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	8bfb      	ldrh	r3, [r7, #30]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d906      	bls.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	8bfb      	ldrh	r3, [r7, #30]
 8002b02:	1ad2      	subs	r2, r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	619a      	str	r2, [r3, #24]
 8002b08:	e002      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 80c1 	bne.w	8002c9c <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d124      	bne.n	8002b6c <HAL_PCD_EP_DB_Transmit+0xa8>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b40:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e024      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d120      	bne.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b92:	b292      	uxth	r2, r2
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002ba0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d124      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x144>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bdc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	e024      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x18e>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d120      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x18e>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002c3c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f009 fdc6 	bl	800c7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 82e5 	beq.w	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b8e      	ldr	r3, [pc, #568]	@ (8002eb4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e2cb      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd4:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f040 82a9 	bne.w	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	8bfb      	ldrh	r3, [r7, #30]
 8002ce8:	441a      	add	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	8bfb      	ldrh	r3, [r7, #30]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d309      	bcc.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	621a      	str	r2, [r3, #32]
 8002d18:	e014      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8002d22:	8bfb      	ldrh	r3, [r7, #30]
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d2e:	e009      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d16a      	bne.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x35e>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d6a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x2d8>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d94:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e06a      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002da0:	d81e      	bhi.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x31c>
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8002db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db4:	3301      	adds	r3, #1
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dc6:	6819      	ldr	r1, [r3, #0]
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	069a      	lsls	r2, r3, #26
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e048      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x332>
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	3b01      	subs	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e08:	069b      	lsls	r3, r3, #26
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e027      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d123      	bne.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6959      	ldr	r1, [r3, #20]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	891a      	ldrh	r2, [r3, #8]
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f008 fdd4 	bl	800ba2e <USB_WritePMA>
 8002e86:	e1d5      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7fe fdba 	bl	8001a0c <PCD_GET_EP_DBUF1_CNT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	8bfb      	ldrh	r3, [r7, #30]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d308      	bcc.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	8bfb      	ldrh	r3, [r7, #30]
 8002eac:	1ad2      	subs	r2, r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	e004      	b.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x3fa>
 8002eb4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 80c1 	bne.w	800304a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d124      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x456>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002eee:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002efe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e024      	b.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d120      	bne.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f40:	b292      	uxth	r2, r2
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002f4e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d124      	bne.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f8a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002faa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	e024      	b.n	8003000 <HAL_PCD_EP_DB_Transmit+0x53c>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d120      	bne.n	8003000 <HAL_PCD_EP_DB_Transmit+0x53c>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002fea:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ff8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ffc:	6852      	ldr	r2, [r2, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f009 fbef 	bl	800c7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 810e 	bne.w	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b95      	ldr	r3, [pc, #596]	@ (8003280 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800302a:	4013      	ands	r3, r2
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	441a      	add	r2, r3
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	e0f4      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d117      	bne.n	8003084 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b86      	ldr	r3, [pc, #536]	@ (8003280 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003066:	4013      	ands	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800307e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003082:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800308a:	2b01      	cmp	r3, #1
 800308c:	f040 80d2 	bne.w	8003234 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	8bfb      	ldrh	r3, [r7, #30]
 8003096:	441a      	add	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	8bfb      	ldrh	r3, [r7, #30]
 80030a2:	441a      	add	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d309      	bcc.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	621a      	str	r2, [r3, #32]
 80030c6:	e014      	b.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80030d0:	8bfb      	ldrh	r3, [r7, #30]
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80030dc:	e009      	b.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d16a      	bne.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x70c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003104:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003114:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003118:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d112      	bne.n	800314a <HAL_PCD_EP_DB_Transmit+0x686>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800312e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800313e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003142:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	e06a      	b.n	8003220 <HAL_PCD_EP_DB_Transmit+0x75c>
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	2b3e      	cmp	r3, #62	@ 0x3e
 800314e:	d81e      	bhi.n	800318e <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	3301      	adds	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003170:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	069a      	lsls	r2, r3, #26
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003184:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	e048      	b.n	8003220 <HAL_PCD_EP_DB_Transmit+0x75c>
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e027      	b.n	8003220 <HAL_PCD_EP_DB_Transmit+0x75c>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d123      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x75c>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031f6:	b292      	uxth	r2, r2
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	041a      	lsls	r2, r3, #16
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003218:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6959      	ldr	r1, [r3, #20]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	895a      	ldrh	r2, [r3, #10]
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	b29b      	uxth	r3, r3
 8003230:	f008 fbfd 	bl	800ba2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003246:	4013      	ands	r3, r2
 8003248:	633b      	str	r3, [r7, #48]	@ 0x30
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	f083 0310 	eor.w	r3, r3, #16
 8003250:	633b      	str	r3, [r7, #48]	@ 0x30
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	f083 0320 	eor.w	r3, r3, #32
 8003258:	633b      	str	r3, [r7, #48]	@ 0x30
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	441a      	add	r2, r3
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800326e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003272:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3738      	adds	r7, #56	@ 0x38
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	07ff8f8f 	.word	0x07ff8f8f
 8003284:	07ff8fbf 	.word	0x07ff8fbf

08003288 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	817b      	strh	r3, [r7, #10]
 8003296:	4613      	mov	r3, r2
 8003298:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	f003 0207 	and.w	r2, r3, #7
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	3310      	adds	r3, #16
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e00a      	b.n	80032d6 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032c0:	897a      	ldrh	r2, [r7, #10]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	80da      	strh	r2, [r3, #6]
 80032ea:	e00b      	b.n	8003304 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2201      	movs	r2, #1
 80032f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b29a      	uxth	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003334:	f043 0201 	orr.w	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	f043 0202 	orr.w	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	4a04      	ldr	r2, [pc, #16]	@ (800338c <HAL_PWREx_EnableVddUSB+0x1c>)
 800337a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800337e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	44020800 	.word	0x44020800

08003390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f000 bc28 	b.w	8003bf4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a4:	4b94      	ldr	r3, [pc, #592]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 0318 	and.w	r3, r3, #24
 80033ac:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80033ae:	4b92      	ldr	r3, [pc, #584]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x46>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b18      	cmp	r3, #24
 80033ce:	d114      	bne.n	80033fa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d111      	bne.n	80033fa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f000 bc08 	b.w	8003bf4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80033e4:	4b84      	ldr	r3, [pc, #528]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	4981      	ldr	r1, [pc, #516]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80033f8:	e040      	b.n	800347c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d023      	beq.n	800344a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003402:	4b7d      	ldr	r3, [pc, #500]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7c      	ldr	r2, [pc, #496]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd ff09 	bl	8001224 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003416:	f7fd ff05 	bl	8001224 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e3e5      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003428:	4b73      	ldr	r3, [pc, #460]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003434:	4b70      	ldr	r3, [pc, #448]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	496d      	ldr	r1, [pc, #436]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003444:	4313      	orrs	r3, r2
 8003446:	618b      	str	r3, [r1, #24]
 8003448:	e018      	b.n	800347c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800344a:	4b6b      	ldr	r3, [pc, #428]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6a      	ldr	r2, [pc, #424]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd fee5 	bl	8001224 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800345e:	f7fd fee1 	bl	8001224 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e3c1      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003470:	4b61      	ldr	r3, [pc, #388]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a0 	beq.w	80035ca <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x10c>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b18      	cmp	r3, #24
 8003494:	d109      	bne.n	80034aa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 8092 	bne.w	80035ca <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e3a4      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x132>
 80034b4:	4b50      	ldr	r3, [pc, #320]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a4f      	ldr	r2, [pc, #316]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e058      	b.n	8003574 <HAL_RCC_OscConfig+0x1e4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d112      	bne.n	80034f0 <HAL_RCC_OscConfig+0x160>
 80034ca:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4a      	ldr	r2, [pc, #296]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b48      	ldr	r3, [pc, #288]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a47      	ldr	r2, [pc, #284]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b45      	ldr	r3, [pc, #276]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a44      	ldr	r2, [pc, #272]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e041      	b.n	8003574 <HAL_RCC_OscConfig+0x1e4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f8:	d112      	bne.n	8003520 <HAL_RCC_OscConfig+0x190>
 80034fa:	4b3f      	ldr	r3, [pc, #252]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a3e      	ldr	r2, [pc, #248]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3b      	ldr	r2, [pc, #236]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800350c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a38      	ldr	r2, [pc, #224]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e029      	b.n	8003574 <HAL_RCC_OscConfig+0x1e4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x1c0>
 800352a:	4b33      	ldr	r3, [pc, #204]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a32      	ldr	r2, [pc, #200]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2f      	ldr	r2, [pc, #188]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800353c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b2d      	ldr	r3, [pc, #180]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2c      	ldr	r2, [pc, #176]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e011      	b.n	8003574 <HAL_RCC_OscConfig+0x1e4>
 8003550:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a25      	ldr	r2, [pc, #148]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b23      	ldr	r3, [pc, #140]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 800356e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd fe52 	bl	8001224 <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003584:	f7fd fe4e 	bl	8001224 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e32e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b18      	ldr	r3, [pc, #96]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x1f4>
 80035a2:	e012      	b.n	80035ca <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd fe3e 	bl	8001224 <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035ac:	f7fd fe3a 	bl	8001224 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e31a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_RCC_OscConfig+0x268>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 809a 	beq.w	800370c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x25a>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b18      	cmp	r3, #24
 80035e2:	d149      	bne.n	8003678 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d146      	bne.n	8003678 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e2fe      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
 80035f6:	bf00      	nop
 80035f8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003602:	4b9a      	ldr	r3, [pc, #616]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0218 	and.w	r2, r3, #24
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	429a      	cmp	r2, r3
 8003610:	d014      	beq.n	800363c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003612:	4b96      	ldr	r3, [pc, #600]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0218 	bic.w	r2, r3, #24
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4993      	ldr	r1, [pc, #588]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003624:	f000 fdd0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003628:	4b91      	ldr	r3, [pc, #580]	@ (8003870 <HAL_RCC_OscConfig+0x4e0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fd6f 	bl	8001110 <HAL_InitTick>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e2db      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fdf2 	bl	8001224 <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003644:	f7fd fdee 	bl	8001224 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e2ce      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003656:	4b85      	ldr	r3, [pc, #532]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003662:	4b82      	ldr	r3, [pc, #520]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	497e      	ldr	r1, [pc, #504]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003676:	e049      	b.n	800370c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d02c      	beq.n	80036da <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003680:	4b7a      	ldr	r3, [pc, #488]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 0218 	bic.w	r2, r3, #24
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	4977      	ldr	r1, [pc, #476]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003692:	4b76      	ldr	r3, [pc, #472]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a75      	ldr	r2, [pc, #468]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd fdc1 	bl	8001224 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036a6:	f7fd fdbd 	bl	8001224 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e29d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b8:	4b6c      	ldr	r3, [pc, #432]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036c4:	4b69      	ldr	r3, [pc, #420]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	4966      	ldr	r1, [pc, #408]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	610b      	str	r3, [r1, #16]
 80036d8:	e018      	b.n	800370c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b64      	ldr	r3, [pc, #400]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a63      	ldr	r2, [pc, #396]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fd fd9d 	bl	8001224 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036ee:	f7fd fd99 	bl	8001224 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e279      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003700:	4b5a      	ldr	r3, [pc, #360]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03c      	beq.n	8003792 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01c      	beq.n	800375a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003720:	4b52      	ldr	r3, [pc, #328]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003726:	4a51      	ldr	r2, [pc, #324]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003728:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800372c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fd78 	bl	8001224 <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003738:	f7fd fd74 	bl	8001224 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e254      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800374a:	4b48      	ldr	r3, [pc, #288]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 800374c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCC_OscConfig+0x3a8>
 8003758:	e01b      	b.n	8003792 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800375a:	4b44      	ldr	r3, [pc, #272]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 800375c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003760:	4a42      	ldr	r2, [pc, #264]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003762:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003766:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fd fd5b 	bl	8001224 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003772:	f7fd fd57 	bl	8001224 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e237      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003784:	4b39      	ldr	r3, [pc, #228]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800378a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ef      	bne.n	8003772 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80d2 	beq.w	8003944 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037a0:	4b34      	ldr	r3, [pc, #208]	@ (8003874 <HAL_RCC_OscConfig+0x4e4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d118      	bne.n	80037de <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_RCC_OscConfig+0x4e4>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	4a30      	ldr	r2, [pc, #192]	@ (8003874 <HAL_RCC_OscConfig+0x4e4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b8:	f7fd fd34 	bl	8001224 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fd fd30 	bl	8001224 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e210      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037d2:	4b28      	ldr	r3, [pc, #160]	@ (8003874 <HAL_RCC_OscConfig+0x4e4>)
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_RCC_OscConfig+0x468>
 80037e6:	4b21      	ldr	r3, [pc, #132]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80037e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ec:	4a1f      	ldr	r2, [pc, #124]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037f6:	e074      	b.n	80038e2 <HAL_RCC_OscConfig+0x552>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d118      	bne.n	8003832 <HAL_RCC_OscConfig+0x4a2>
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003806:	4a19      	ldr	r2, [pc, #100]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003810:	4b16      	ldr	r3, [pc, #88]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003816:	4a15      	ldr	r2, [pc, #84]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003820:	4b12      	ldr	r3, [pc, #72]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003826:	4a11      	ldr	r2, [pc, #68]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003830:	e057      	b.n	80038e2 <HAL_RCC_OscConfig+0x552>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d11e      	bne.n	8003878 <HAL_RCC_OscConfig+0x4e8>
 800383a:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 800383c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003840:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800384a:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 800384c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800385a:	4b04      	ldr	r3, [pc, #16]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 800385c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003860:	4a02      	ldr	r2, [pc, #8]	@ (800386c <HAL_RCC_OscConfig+0x4dc>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x552>
 800386c:	44020c00 	.word	0x44020c00
 8003870:	20000020 	.word	0x20000020
 8003874:	44020800 	.word	0x44020800
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b85      	cmp	r3, #133	@ 0x85
 800387e:	d118      	bne.n	80038b2 <HAL_RCC_OscConfig+0x522>
 8003880:	4ba2      	ldr	r3, [pc, #648]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003886:	4aa1      	ldr	r2, [pc, #644]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003890:	4b9e      	ldr	r3, [pc, #632]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003896:	4a9d      	ldr	r2, [pc, #628]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038a0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038a6:	4a99      	ldr	r2, [pc, #612]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038b0:	e017      	b.n	80038e2 <HAL_RCC_OscConfig+0x552>
 80038b2:	4b96      	ldr	r3, [pc, #600]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038b8:	4a94      	ldr	r2, [pc, #592]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038c2:	4b92      	ldr	r3, [pc, #584]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038c8:	4a90      	ldr	r2, [pc, #576]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038ca:	f023 0304 	bic.w	r3, r3, #4
 80038ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038d2:	4b8e      	ldr	r3, [pc, #568]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d8:	4a8c      	ldr	r2, [pc, #560]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80038da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fd fc9b 	bl	8001224 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fd fc97 	bl	8001224 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e175      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003908:	4b80      	ldr	r3, [pc, #512]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 800390a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0ed      	beq.n	80038f2 <HAL_RCC_OscConfig+0x562>
 8003916:	e015      	b.n	8003944 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fc84 	bl	8001224 <HAL_GetTick>
 800391c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fd fc80 	bl	8001224 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e15e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003936:	4b75      	ldr	r3, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ed      	bne.n	8003920 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d036      	beq.n	80039be <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d019      	beq.n	800398c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003958:	4b6c      	ldr	r3, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 800395e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fd fc5e 	bl	8001224 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800396c:	f7fd fc5a 	bl	8001224 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e13a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800397e:	4b63      	ldr	r3, [pc, #396]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x5dc>
 800398a:	e018      	b.n	80039be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800398c:	4b5f      	ldr	r3, [pc, #380]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5e      	ldr	r2, [pc, #376]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003996:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd fc44 	bl	8001224 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039a0:	f7fd fc40 	bl	8001224 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e120      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039b2:	4b56      	ldr	r3, [pc, #344]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8115 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b18      	cmp	r3, #24
 80039cc:	f000 80af 	beq.w	8003b2e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	f040 8086 	bne.w	8003ae6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80039da:	4b4c      	ldr	r3, [pc, #304]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a4b      	ldr	r2, [pc, #300]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 80039e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fd fc1d 	bl	8001224 <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80039ee:	f7fd fc19 	bl	8001224 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0f9      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a00:	4b42      	ldr	r3, [pc, #264]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a14:	f023 0303 	bic.w	r3, r3, #3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a20:	0212      	lsls	r2, r2, #8
 8003a22:	430a      	orrs	r2, r1
 8003a24:	4939      	ldr	r1, [pc, #228]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	628b      	str	r3, [r1, #40]	@ 0x28
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	025b      	lsls	r3, r3, #9
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	3b01      	subs	r3, #1
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a5a:	492c      	ldr	r1, [pc, #176]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	4a29      	ldr	r2, [pc, #164]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a70:	4a26      	ldr	r2, [pc, #152]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003a76:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7a:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a7c:	f043 0310 	orr.w	r3, r3, #16
 8003a80:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003a82:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	f023 020c 	bic.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	491f      	ldr	r1, [pc, #124]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003a94:	4b1d      	ldr	r3, [pc, #116]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	f023 0220 	bic.w	r2, r3, #32
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa0:	491a      	ldr	r1, [pc, #104]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aa6:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	4a18      	ldr	r2, [pc, #96]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003ab2:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003ab8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fd fbb1 	bl	8001224 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003ac6:	f7fd fbad 	bl	8001224 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e08d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x736>
 8003ae4:	e085      	b.n	8003bf2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <HAL_RCC_OscConfig+0x77c>)
 8003aec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd fb97 	bl	8001224 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003afa:	f7fd fb93 	bl	8001224 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d903      	bls.n	8003b10 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e073      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
 8003b0c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b10:	4b3a      	ldr	r3, [pc, #232]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b1c:	4b37      	ldr	r3, [pc, #220]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	4a36      	ldr	r2, [pc, #216]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003b22:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	6293      	str	r3, [r2, #40]	@ 0x28
 8003b2c:	e061      	b.n	8003bf2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b2e:	4b33      	ldr	r3, [pc, #204]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b34:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b38:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d031      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d12a      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d122      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d11a      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	0a5b      	lsrs	r3, r3, #9
 8003b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d111      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d108      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	0e1b      	lsrs	r3, r3, #24
 8003b98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e024      	b.n	8003bf4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003baa:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d01a      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003bc2:	f023 0310 	bic.w	r3, r3, #16
 8003bc6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fb2c 	bl	8001224 <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003bce:	bf00      	nop
 8003bd0:	f7fd fb28 	bl	8001224 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d0f9      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be0:	4a06      	ldr	r2, [pc, #24]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003be6:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_RCC_OscConfig+0x86c>)
 8003bec:	f043 0310 	orr.w	r3, r3, #16
 8003bf0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	44020c00 	.word	0x44020c00

08003c00 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e19e      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c14:	4b83      	ldr	r3, [pc, #524]	@ (8003e24 <HAL_RCC_ClockConfig+0x224>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d910      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b80      	ldr	r3, [pc, #512]	@ (8003e24 <HAL_RCC_ClockConfig+0x224>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 020f 	bic.w	r2, r3, #15
 8003c2a:	497e      	ldr	r1, [pc, #504]	@ (8003e24 <HAL_RCC_ClockConfig+0x224>)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b7c      	ldr	r3, [pc, #496]	@ (8003e24 <HAL_RCC_ClockConfig+0x224>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e186      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d012      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	4b74      	ldr	r3, [pc, #464]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d909      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c62:	4b71      	ldr	r3, [pc, #452]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	496d      	ldr	r1, [pc, #436]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d012      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	4b68      	ldr	r3, [pc, #416]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d909      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003c94:	4b64      	ldr	r3, [pc, #400]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	4961      	ldr	r1, [pc, #388]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d908      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003cc4:	4b58      	ldr	r3, [pc, #352]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4955      	ldr	r1, [pc, #340]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d010      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	4b50      	ldr	r3, [pc, #320]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d908      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 020f 	bic.w	r2, r3, #15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	494a      	ldr	r1, [pc, #296]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8093 	beq.w	8003e38 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d1a:	4b43      	ldr	r3, [pc, #268]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d121      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e113      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d32:	4b3d      	ldr	r3, [pc, #244]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d115      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e107      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d4a:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0fb      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d5a:	4b33      	ldr	r3, [pc, #204]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0f3      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f023 0203 	bic.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	492c      	ldr	r1, [pc, #176]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7c:	f7fd fa52 	bl	8001224 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d112      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fd fa4a 	bl	8001224 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0d7      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da2:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0318 	and.w	r3, r3, #24
 8003daa:	2b18      	cmp	r3, #24
 8003dac:	d1ee      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x18c>
 8003dae:	e043      	b.n	8003e38 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d112      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dba:	f7fd fa33 	bl	8001224 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e0c0      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f003 0318 	and.w	r3, r3, #24
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d1ee      	bne.n	8003dba <HAL_RCC_ClockConfig+0x1ba>
 8003ddc:	e02c      	b.n	8003e38 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d122      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fd fa1c 	bl	8001224 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0a9      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <HAL_RCC_ClockConfig+0x228>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0318 	and.w	r3, r3, #24
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d1ee      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1e8>
 8003e0a:	e015      	b.n	8003e38 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd fa0a 	bl	8001224 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d906      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e097      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
 8003e22:	bf00      	nop
 8003e24:	40022000 	.word	0x40022000
 8003e28:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 0318 	and.w	r3, r3, #24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e9      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d010      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4b44      	ldr	r3, [pc, #272]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d208      	bcs.n	8003e66 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003e54:	4b41      	ldr	r3, [pc, #260]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 020f 	bic.w	r2, r3, #15
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	493e      	ldr	r1, [pc, #248]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e66:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <HAL_RCC_ClockConfig+0x360>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d210      	bcs.n	8003e96 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e74:	4b3a      	ldr	r3, [pc, #232]	@ (8003f60 <HAL_RCC_ClockConfig+0x360>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 020f 	bic.w	r2, r3, #15
 8003e7c:	4938      	ldr	r1, [pc, #224]	@ (8003f60 <HAL_RCC_ClockConfig+0x360>)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_RCC_ClockConfig+0x360>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e05d      	b.n	8003f52 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d208      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4927      	ldr	r1, [pc, #156]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	4b21      	ldr	r3, [pc, #132]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d209      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	491a      	ldr	r1, [pc, #104]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d012      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d209      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f14:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	490e      	ldr	r1, [pc, #56]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f28:	f000 f822 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <HAL_RCC_ClockConfig+0x35c>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	490b      	ldr	r1, [pc, #44]	@ (8003f64 <HAL_RCC_ClockConfig+0x364>)
 8003f38:	5ccb      	ldrb	r3, [r1, r3]
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f68 <HAL_RCC_ClockConfig+0x368>)
 8003f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f42:	4b0a      	ldr	r3, [pc, #40]	@ (8003f6c <HAL_RCC_ClockConfig+0x36c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd f8e2 	bl	8001110 <HAL_InitTick>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003f50:	7afb      	ldrb	r3, [r7, #11]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	44020c00 	.word	0x44020c00
 8003f60:	40022000 	.word	0x40022000
 8003f64:	0800ec08 	.word	0x0800ec08
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	20000020 	.word	0x20000020

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003f76:	4b8c      	ldr	r3, [pc, #560]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0318 	and.w	r3, r3, #24
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d102      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f82:	4b8a      	ldr	r3, [pc, #552]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x23c>)
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e107      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f88:	4b87      	ldr	r3, [pc, #540]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 0318 	and.w	r3, r3, #24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d112      	bne.n	8003fba <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003f94:	4b84      	ldr	r3, [pc, #528]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fa0:	4b81      	ldr	r3, [pc, #516]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	08db      	lsrs	r3, r3, #3
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	4a81      	ldr	r2, [pc, #516]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e0f1      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e0ee      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fba:	4b7b      	ldr	r3, [pc, #492]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0318 	and.w	r3, r3, #24
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x244>)
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e0e5      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fcc:	4b76      	ldr	r3, [pc, #472]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f003 0318 	and.w	r3, r3, #24
 8003fd4:	2b18      	cmp	r3, #24
 8003fd6:	f040 80dd 	bne.w	8004194 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003fda:	4b73      	ldr	r3, [pc, #460]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003fe4:	4b70      	ldr	r3, [pc, #448]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004014:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80b7 	beq.w	800418e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d003      	beq.n	800402e <HAL_RCC_GetSysClockFreq+0xbe>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d056      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x16a>
 800402c:	e077      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800402e:	4b5e      	ldr	r3, [pc, #376]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02d      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800403a:	4b5b      	ldr	r3, [pc, #364]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	4a5a      	ldr	r2, [pc, #360]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004046:	fa22 f303 	lsr.w	r3, r2, r3
 800404a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004064:	4b50      	ldr	r3, [pc, #320]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004074:	ed97 6a02 	vldr	s12, [r7, #8]
 8004078:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80041b8 <HAL_RCC_GetSysClockFreq+0x248>
 800407c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004080:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004088:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004094:	e065      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80041bc <HAL_RCC_GetSysClockFreq+0x24c>
 80040a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a8:	4b3f      	ldr	r3, [pc, #252]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80040aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80040bc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80041b8 <HAL_RCC_GetSysClockFreq+0x248>
 80040c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80040d8:	e043      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80041c0 <HAL_RCC_GetSysClockFreq+0x250>
 80040e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ec:	4b2e      	ldr	r3, [pc, #184]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80040fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004100:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80041b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004104:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004108:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800410c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004110:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004118:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800411c:	e021      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004128:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80041c4 <HAL_RCC_GetSysClockFreq+0x254>
 800412c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004130:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004140:	ed97 6a02 	vldr	s12, [r7, #8]
 8004144:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80041b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004148:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800414c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004154:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004160:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004162:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004166:	0a5b      	lsrs	r3, r3, #9
 8004168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800416c:	3301      	adds	r3, #1
 800416e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800417a:	edd7 6a06 	vldr	s13, [r7, #24]
 800417e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004186:	ee17 3a90 	vmov	r3, s15
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e004      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e001      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004196:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004198:	69fb      	ldr	r3, [r7, #28]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	44020c00 	.word	0x44020c00
 80041ac:	003d0900 	.word	0x003d0900
 80041b0:	03d09000 	.word	0x03d09000
 80041b4:	007a1200 	.word	0x007a1200
 80041b8:	46000000 	.word	0x46000000
 80041bc:	4c742400 	.word	0x4c742400
 80041c0:	4af42400 	.word	0x4af42400
 80041c4:	4a742400 	.word	0x4a742400

080041c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80041cc:	f7ff fed0 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80041d6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80041da:	4907      	ldr	r1, [pc, #28]	@ (80041f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80041de:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	4a05      	ldr	r2, [pc, #20]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x34>)
 80041e8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80041ea:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x34>)
 80041ec:	681b      	ldr	r3, [r3, #0]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	44020c00 	.word	0x44020c00
 80041f8:	0800ec08 	.word	0x0800ec08
 80041fc:	20000000 	.word	0x20000000

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004204:	f7ff ffe0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4904      	ldr	r1, [pc, #16]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	44020c00 	.word	0x44020c00
 8004228:	0800ec18 	.word	0x0800ec18

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004230:	f7ff ffca 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4904      	ldr	r1, [pc, #16]	@ (8004254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	44020c00 	.word	0x44020c00
 8004254:	0800ec18 	.word	0x0800ec18

08004258 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800425c:	f7ff ffb4 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b06      	ldr	r3, [pc, #24]	@ (800427c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	0b1b      	lsrs	r3, r3, #12
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4904      	ldr	r1, [pc, #16]	@ (8004280 <HAL_RCC_GetPCLK3Freq+0x28>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	44020c00 	.word	0x44020c00
 8004280:	0800ec18 	.word	0x0800ec18

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b0d8      	sub	sp, #352	@ 0x160
 800428a:	af00      	add	r7, sp, #0
 800428c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004290:	2300      	movs	r3, #0
 8004292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004296:	2300      	movs	r3, #0
 8004298:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800429c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80042a8:	2500      	movs	r5, #0
 80042aa:	ea54 0305 	orrs.w	r3, r4, r5
 80042ae:	d00b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80042b0:	4bcd      	ldr	r3, [pc, #820]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80042b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042b6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80042ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	4ac9      	ldr	r2, [pc, #804]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f002 0801 	and.w	r8, r2, #1
 80042d4:	f04f 0900 	mov.w	r9, #0
 80042d8:	ea58 0309 	orrs.w	r3, r8, r9
 80042dc:	d042      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80042de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d823      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004339 	.word	0x08004339
 80042f4:	08004309 	.word	0x08004309
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004339 	.word	0x08004339
 8004300:	08004339 	.word	0x08004339
 8004304:	08004339 	.word	0x08004339
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800430c:	3308      	adds	r3, #8
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fee0 	bl	80090d4 <RCCEx_PLL2_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800431a:	e00e      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800431c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004320:	3330      	adds	r3, #48	@ 0x30
 8004322:	4618      	mov	r0, r3
 8004324:	f004 ff6e 	bl	8009204 <RCCEx_PLL3_Config>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800432e:	e004      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004336:	e000      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004342:	4ba9      	ldr	r3, [pc, #676]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004348:	f023 0107 	bic.w	r1, r3, #7
 800434c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	4aa5      	ldr	r2, [pc, #660]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004354:	430b      	orrs	r3, r1
 8004356:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800435a:	e003      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004360:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f002 0a02 	and.w	sl, r2, #2
 8004370:	f04f 0b00 	mov.w	fp, #0
 8004374:	ea5a 030b 	orrs.w	r3, sl, fp
 8004378:	f000 8088 	beq.w	800448c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004382:	2b28      	cmp	r3, #40	@ 0x28
 8004384:	d868      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004386:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	08004461 	.word	0x08004461
 8004390:	08004459 	.word	0x08004459
 8004394:	08004459 	.word	0x08004459
 8004398:	08004459 	.word	0x08004459
 800439c:	08004459 	.word	0x08004459
 80043a0:	08004459 	.word	0x08004459
 80043a4:	08004459 	.word	0x08004459
 80043a8:	08004459 	.word	0x08004459
 80043ac:	08004431 	.word	0x08004431
 80043b0:	08004459 	.word	0x08004459
 80043b4:	08004459 	.word	0x08004459
 80043b8:	08004459 	.word	0x08004459
 80043bc:	08004459 	.word	0x08004459
 80043c0:	08004459 	.word	0x08004459
 80043c4:	08004459 	.word	0x08004459
 80043c8:	08004459 	.word	0x08004459
 80043cc:	08004445 	.word	0x08004445
 80043d0:	08004459 	.word	0x08004459
 80043d4:	08004459 	.word	0x08004459
 80043d8:	08004459 	.word	0x08004459
 80043dc:	08004459 	.word	0x08004459
 80043e0:	08004459 	.word	0x08004459
 80043e4:	08004459 	.word	0x08004459
 80043e8:	08004459 	.word	0x08004459
 80043ec:	08004461 	.word	0x08004461
 80043f0:	08004459 	.word	0x08004459
 80043f4:	08004459 	.word	0x08004459
 80043f8:	08004459 	.word	0x08004459
 80043fc:	08004459 	.word	0x08004459
 8004400:	08004459 	.word	0x08004459
 8004404:	08004459 	.word	0x08004459
 8004408:	08004459 	.word	0x08004459
 800440c:	08004461 	.word	0x08004461
 8004410:	08004459 	.word	0x08004459
 8004414:	08004459 	.word	0x08004459
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
 8004424:	08004459 	.word	0x08004459
 8004428:	08004459 	.word	0x08004459
 800442c:	08004461 	.word	0x08004461
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004434:	3308      	adds	r3, #8
 8004436:	4618      	mov	r0, r3
 8004438:	f004 fe4c 	bl	80090d4 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004442:	e00e      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004448:	3330      	adds	r3, #48	@ 0x30
 800444a:	4618      	mov	r0, r3
 800444c:	f004 feda 	bl	8009204 <RCCEx_PLL3_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004456:	e004      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004462:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800446a:	4b5f      	ldr	r3, [pc, #380]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800446c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004470:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004474:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447a:	4a5b      	ldr	r2, [pc, #364]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800447c:	430b      	orrs	r3, r1
 800447e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004482:	e003      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004488:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800448c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f002 0304 	and.w	r3, r2, #4
 8004498:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800449c:	2300      	movs	r3, #0
 800449e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80044a2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	d04e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044b6:	d02c      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80044b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044bc:	d825      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80044be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c2:	d028      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c8:	d81f      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80044ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80044cc:	d025      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80044ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d0:	d81b      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80044d2:	2b80      	cmp	r3, #128	@ 0x80
 80044d4:	d00f      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d817      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01f      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	d113      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044e6:	3308      	adds	r3, #8
 80044e8:	4618      	mov	r0, r3
 80044ea:	f004 fdf3 	bl	80090d4 <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80044f4:	e014      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044fa:	3330      	adds	r3, #48	@ 0x30
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 fe81 	bl	8009204 <RCCEx_PLL3_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004508:	e00a      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004510:	e006      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800451e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004520:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10c      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004528:	4b2f      	ldr	r3, [pc, #188]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800452a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800452e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004532:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004538:	4a2b      	ldr	r2, [pc, #172]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800453a:	430b      	orrs	r3, r1
 800453c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004546:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800454a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f002 0308 	and.w	r3, r2, #8
 8004556:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004560:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004564:	460b      	mov	r3, r1
 8004566:	4313      	orrs	r3, r2
 8004568:	d056      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800456a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800456e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004570:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004574:	d031      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004576:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800457a:	d82a      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004580:	d02d      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004586:	d824      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004588:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800458c:	d029      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800458e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004592:	d81e      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459e:	d818      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d023      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x368>
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a8:	d113      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045ae:	3308      	adds	r3, #8
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fd8f 	bl	80090d4 <RCCEx_PLL2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80045bc:	e017      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045c2:	3330      	adds	r3, #48	@ 0x30
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 fe1d 	bl	8009204 <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80045d0:	e00d      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045d8:	e009      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80045da:	bf00      	nop
 80045dc:	e007      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80045de:	bf00      	nop
 80045e0:	e005      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80045e2:	bf00      	nop
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80045e6:	bf00      	nop
 80045e8:	44020c00 	.word	0x44020c00
        break;
 80045ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80045f6:	4bbb      	ldr	r3, [pc, #748]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80045f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045fc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004606:	4ab7      	ldr	r2, [pc, #732]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004608:	430b      	orrs	r3, r1
 800460a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800460e:	e003      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004614:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f002 0310 	and.w	r3, r2, #16
 8004624:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004628:	2300      	movs	r3, #0
 800462a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800462e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d053      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004638:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800463c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800463e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004642:	d031      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004644:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004648:	d82a      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800464a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800464e:	d02d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004654:	d824      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800465a:	d029      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800465c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004660:	d81e      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004666:	d011      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466c:	d818      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	d113      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800467c:	3308      	adds	r3, #8
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fd28 	bl	80090d4 <RCCEx_PLL2_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800468a:	e014      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800468c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004690:	3330      	adds	r3, #48	@ 0x30
 8004692:	4618      	mov	r0, r3
 8004694:	f004 fdb6 	bl	8009204 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800469e:	e00a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046a8:	bf00      	nop
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80046b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80046be:	4b89      	ldr	r3, [pc, #548]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80046c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80046c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ce:	4a85      	ldr	r2, [pc, #532]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f002 0320 	and.w	r3, r2, #32
 80046ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80046f6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d053      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004700:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004706:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800470a:	d031      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800470c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004710:	d82a      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004716:	d02d      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800471c:	d824      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800471e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004722:	d029      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004724:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004728:	d81e      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472e:	d011      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004734:	d818      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d020      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800473a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800473e:	d113      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004740:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004744:	3308      	adds	r3, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f004 fcc4 	bl	80090d4 <RCCEx_PLL2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004752:	e014      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004758:	3330      	adds	r3, #48	@ 0x30
 800475a:	4618      	mov	r0, r3
 800475c:	f004 fd52 	bl	8009204 <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004766:	e00a      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800476e:	e006      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004770:	bf00      	nop
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004774:	bf00      	nop
 8004776:	e002      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004778:	bf00      	nop
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004786:	4b57      	ldr	r3, [pc, #348]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800478c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	4a53      	ldr	r2, [pc, #332]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004798:	430b      	orrs	r3, r1
 800479a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80047b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80047be:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d053      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80047c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047d2:	d031      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80047d4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047d8:	d82a      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047de:	d02d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80047e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e4:	d824      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80047e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047ea:	d029      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80047ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047f0:	d81e      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80047f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047f6:	d011      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80047f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047fc:	d818      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d020      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004806:	d113      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004808:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800480c:	3308      	adds	r3, #8
 800480e:	4618      	mov	r0, r3
 8004810:	f004 fc60 	bl	80090d4 <RCCEx_PLL2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800481a:	e014      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800481c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004820:	3330      	adds	r3, #48	@ 0x30
 8004822:	4618      	mov	r0, r3
 8004824:	f004 fcee 	bl	8009204 <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800482e:	e00a      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004836:	e006      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004838:	bf00      	nop
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800484e:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004854:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8004858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	4a21      	ldr	r2, [pc, #132]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004860:	430b      	orrs	r3, r1
 8004862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800486c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800487c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004886:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d055      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004896:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800489a:	d033      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800489c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80048a0:	d82c      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 80048a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048a6:	d02f      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80048a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ac:	d826      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 80048ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048b2:	d02b      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80048b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048b8:	d820      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048be:	d013      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80048c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048c4:	d81a      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d022      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80048ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ce:	d115      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048d4:	3308      	adds	r3, #8
 80048d6:	4618      	mov	r0, r3
 80048d8:	f004 fbfc 	bl	80090d4 <RCCEx_PLL2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80048e2:	e016      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80048e4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ec:	3330      	adds	r3, #48	@ 0x30
 80048ee:	4618      	mov	r0, r3
 80048f0:	f004 fc88 	bl	8009204 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80048fa:	e00a      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004902:	e006      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004904:	bf00      	nop
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004908:	bf00      	nop
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800491a:	4bbb      	ldr	r3, [pc, #748]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800491c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004920:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800492a:	4ab7      	ldr	r2, [pc, #732]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800492c:	430b      	orrs	r3, r1
 800492e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004938:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800493c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004948:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004952:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d053      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800495c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004962:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004966:	d031      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004968:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800496c:	d82a      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800496e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004972:	d02d      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004974:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004978:	d824      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800497a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800497e:	d029      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004980:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004984:	d81e      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800498a:	d011      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800498c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004990:	d818      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800499a:	d113      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800499c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a0:	3308      	adds	r3, #8
 80049a2:	4618      	mov	r0, r3
 80049a4:	f004 fb96 	bl	80090d4 <RCCEx_PLL2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80049ae:	e014      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b4:	3330      	adds	r3, #48	@ 0x30
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 fc24 	bl	8009204 <RCCEx_PLL3_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80049c2:	e00a      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049ca:	e006      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80049cc:	bf00      	nop
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80049e2:	4b89      	ldr	r3, [pc, #548]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80049e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f2:	4a85      	ldr	r2, [pc, #532]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a00:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004a10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004a1a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d055      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004a30:	d031      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004a32:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004a36:	d82a      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a3c:	d02d      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a42:	d824      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004a44:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004a48:	d029      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004a4a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004a4e:	d81e      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a54:	d011      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a5a:	d818      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a64:	d113      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 fb31 	bl	80090d4 <RCCEx_PLL2_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004a78:	e014      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a7e:	3330      	adds	r3, #48	@ 0x30
 8004a80:	4618      	mov	r0, r3
 8004a82:	f004 fbbf 	bl	8009204 <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a94:	e006      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004a96:	bf00      	nop
 8004a98:	e004      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004aac:	4b56      	ldr	r3, [pc, #344]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004aae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ab2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8004ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	4a52      	ldr	r2, [pc, #328]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004acc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004adc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ae6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004aea:	460b      	mov	r3, r1
 8004aec:	4313      	orrs	r3, r2
 8004aee:	d044      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d823      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004afc:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b1d 	.word	0x08004b1d
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b4d 	.word	0x08004b4d
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b4d 	.word	0x08004b4d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b20:	3308      	adds	r3, #8
 8004b22:	4618      	mov	r0, r3
 8004b24:	f004 fad6 	bl	80090d4 <RCCEx_PLL2_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004b2e:	e00e      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b34:	3330      	adds	r3, #48	@ 0x30
 8004b36:	4618      	mov	r0, r3
 8004b38:	f004 fb64 	bl	8009204 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004b42:	e004      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004b56:	4b2c      	ldr	r3, [pc, #176]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b5c:	f023 0107 	bic.w	r1, r3, #7
 8004b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b68:	4a27      	ldr	r2, [pc, #156]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b90:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d04f      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	2b50      	cmp	r3, #80	@ 0x50
 8004ba4:	d029      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004ba6:	2b50      	cmp	r3, #80	@ 0x50
 8004ba8:	d823      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004baa:	2b40      	cmp	r3, #64	@ 0x40
 8004bac:	d027      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004bae:	2b40      	cmp	r3, #64	@ 0x40
 8004bb0:	d81f      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004bb2:	2b30      	cmp	r3, #48	@ 0x30
 8004bb4:	d025      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004bb6:	2b30      	cmp	r3, #48	@ 0x30
 8004bb8:	d81b      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d00f      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d817      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d022      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d113      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bce:	3308      	adds	r3, #8
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f004 fa7f 	bl	80090d4 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004bdc:	e017      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be2:	3330      	adds	r3, #48	@ 0x30
 8004be4:	4618      	mov	r0, r3
 8004be6:	f004 fb0d 	bl	8009204 <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004bf0:	e00d      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bf8:	e009      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e007      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e005      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004c02:	bf00      	nop
 8004c04:	e003      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004c06:	bf00      	nop
 8004c08:	44020c00 	.word	0x44020c00
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004c16:	4baf      	ldr	r3, [pc, #700]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c1c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c28:	4aaa      	ldr	r2, [pc, #680]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004c30:	e003      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c36:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4313      	orrs	r3, r2
 8004c58:	d055      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c66:	d031      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004c68:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004c6c:	d82a      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004c6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c72:	d02d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004c74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c78:	d824      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004c7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c7e:	d029      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004c80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c84:	d81e      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004c86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c8a:	d011      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c90:	d818      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004c96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c9a:	d113      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 fa16 	bl	80090d4 <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004cae:	e014      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb4:	3330      	adds	r3, #48	@ 0x30
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 faa4 	bl	8009204 <RCCEx_PLL3_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004cc2:	e00a      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cca:	e006      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ccc:	bf00      	nop
 8004cce:	e004      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004cd0:	bf00      	nop
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004cd4:	bf00      	nop
 8004cd6:	e000      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10d      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ce8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf4:	4a77      	ldr	r2, [pc, #476]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d03d      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d32:	d01b      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004d34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d38:	d814      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d3e:	d017      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004d40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d44:	d80e      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d014      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4e:	d109      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d54:	3330      	adds	r3, #48	@ 0x30
 8004d56:	4618      	mov	r0, r3
 8004d58:	f004 fa54 	bl	8009204 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004d62:	e008      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10d      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d7e:	4b55      	ldr	r3, [pc, #340]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d84:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	4a50      	ldr	r2, [pc, #320]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d92:	430b      	orrs	r3, r1
 8004d94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d98:	e003      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004dae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004db2:	2300      	movs	r3, #0
 8004db4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004db8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d03d      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004dce:	d01b      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004dd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004dd4:	d814      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004dd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dda:	d017      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004ddc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004de0:	d80e      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d014      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004de6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dea:	d109      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df0:	3330      	adds	r3, #48	@ 0x30
 8004df2:	4618      	mov	r0, r3
 8004df4:	f004 fa06 	bl	8009204 <RCCEx_PLL3_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004dfe:	e008      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e06:	e004      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e002      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004e0c:	bf00      	nop
 8004e0e:	e000      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e20:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e2c:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e54:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e6a:	d01b      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004e6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e70:	d814      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e76:	d017      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e7c:	d80e      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d014      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e86:	d109      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e8c:	3330      	adds	r3, #48	@ 0x30
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f004 f9b8 	bl	8009204 <RCCEx_PLL3_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004e9a:	e008      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ea2:	e004      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004ea4:	bf00      	nop
 8004ea6:	e002      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004ea8:	bf00      	nop
 8004eaa:	e000      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d110      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004eb6:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004eb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ebc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec8:	4a02      	ldr	r2, [pc, #8]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004ed2:	bf00      	nop
 8004ed4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004edc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8004eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ef6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d03d      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f0c:	d01b      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004f0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f12:	d814      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004f14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f18:	d017      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004f1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f1e:	d80e      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d014      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f28:	d109      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f2e:	3330      	adds	r3, #48	@ 0x30
 8004f30:	4618      	mov	r0, r3
 8004f32:	f004 f967 	bl	8009204 <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004f3c:	e008      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f44:	e004      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10d      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004f58:	4bbe      	ldr	r3, [pc, #760]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f5e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f6a:	4aba      	ldr	r2, [pc, #744]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f72:	e003      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f96:	460b      	mov	r3, r1
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d035      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa8:	d015      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fae:	d80e      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb8:	d109      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fbe:	3330      	adds	r3, #48	@ 0x30
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f004 f91f 	bl	8009204 <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004fcc:	e006      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fdc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004fe4:	4b9b      	ldr	r3, [pc, #620]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004fe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fea:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ff6:	4a97      	ldr	r2, [pc, #604]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ffe:	e003      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005004:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	2100      	movs	r1, #0
 8005012:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800501a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800501e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005028:	4b8a      	ldr	r3, [pc, #552]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	4a89      	ldr	r2, [pc, #548]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800502e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005032:	61d3      	str	r3, [r2, #28]
 8005034:	4b87      	ldr	r3, [pc, #540]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800503c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005040:	4a84      	ldr	r2, [pc, #528]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005042:	430b      	orrs	r3, r1
 8005044:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005046:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005052:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800505c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005060:	460b      	mov	r3, r1
 8005062:	4313      	orrs	r3, r2
 8005064:	d055      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005066:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800506a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800506e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005072:	d031      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005074:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005078:	d82a      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507e:	d02d      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005084:	d824      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508a:	d029      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800508c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005090:	d81e      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005096:	d011      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509c:	d818      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d020      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a6:	d113      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ac:	3308      	adds	r3, #8
 80050ae:	4618      	mov	r0, r3
 80050b0:	f004 f810 	bl	80090d4 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80050ba:	e014      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050c0:	3330      	adds	r3, #48	@ 0x30
 80050c2:	4618      	mov	r0, r3
 80050c4:	f004 f89e 	bl	8009204 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80050ce:	e00a      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050d6:	e006      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80050d8:	bf00      	nop
 80050da:	e004      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80050dc:	bf00      	nop
 80050de:	e002      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80050e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10d      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80050ee:	4b59      	ldr	r3, [pc, #356]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80050f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050f4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005100:	4a54      	ldr	r2, [pc, #336]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005102:	430b      	orrs	r3, r1
 8005104:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005108:	e003      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800510e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005112:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800511e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005122:	2300      	movs	r3, #0
 8005124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005128:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800512c:	460b      	mov	r3, r1
 800512e:	4313      	orrs	r3, r2
 8005130:	d055      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800513a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800513e:	d031      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005140:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005144:	d82a      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800514a:	d02d      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005150:	d824      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005152:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005156:	d029      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005158:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800515c:	d81e      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005162:	d011      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005168:	d818      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d020      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005172:	d113      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005178:	3308      	adds	r3, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f003 ffaa 	bl	80090d4 <RCCEx_PLL2_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005186:	e014      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800518c:	3330      	adds	r3, #48	@ 0x30
 800518e:	4618      	mov	r0, r3
 8005190:	f004 f838 	bl	8009204 <RCCEx_PLL3_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800519a:	e00a      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051a2:	e006      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80051a4:	bf00      	nop
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80051ba:	4b26      	ldr	r3, [pc, #152]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80051bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80051c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80051c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80051cc:	4a21      	ldr	r2, [pc, #132]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80051ce:	430b      	orrs	r3, r1
 80051d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80051de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	2100      	movs	r1, #0
 80051e8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d057      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80051fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800520a:	d033      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800520c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005210:	d82c      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005212:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005216:	d02f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005218:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800521c:	d826      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800521e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005222:	d02b      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005224:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005228:	d820      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800522a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800522e:	d013      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005234:	d81a      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d022      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800523a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523e:	d115      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005244:	3308      	adds	r3, #8
 8005246:	4618      	mov	r0, r3
 8005248:	f003 ff44 	bl	80090d4 <RCCEx_PLL2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005252:	e016      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005254:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800525c:	3330      	adds	r3, #48	@ 0x30
 800525e:	4618      	mov	r0, r3
 8005260:	f003 ffd0 	bl	8009204 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800526a:	e00a      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005274:	bf00      	nop
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005278:	bf00      	nop
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800528a:	4bbb      	ldr	r3, [pc, #748]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800528c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005290:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005298:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800529c:	4ab6      	ldr	r2, [pc, #728]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80052ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	2100      	movs	r1, #0
 80052b8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80052bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d055      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80052ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052d6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80052da:	d031      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80052dc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80052e0:	d82a      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80052e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e6:	d02d      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80052e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ec:	d824      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80052ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052f2:	d029      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80052f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052f8:	d81e      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80052fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052fe:	d011      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005300:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005304:	d818      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d020      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530e:	d113      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005314:	3308      	adds	r3, #8
 8005316:	4618      	mov	r0, r3
 8005318:	f003 fedc 	bl	80090d4 <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005322:	e014      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005324:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005328:	3330      	adds	r3, #48	@ 0x30
 800532a:	4618      	mov	r0, r3
 800532c:	f003 ff6a 	bl	8009204 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005336:	e00a      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800533e:	e006      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005340:	bf00      	nop
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005344:	bf00      	nop
 8005346:	e002      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005348:	bf00      	nop
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10d      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005356:	4b88      	ldr	r3, [pc, #544]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005358:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800535c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005368:	4a83      	ldr	r2, [pc, #524]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800536a:	430b      	orrs	r3, r1
 800536c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005370:	e003      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005372:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005376:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800537a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	2100      	movs	r1, #0
 8005384:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005390:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005394:	460b      	mov	r3, r1
 8005396:	4313      	orrs	r3, r2
 8005398:	d055      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800539a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800539e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053a6:	d031      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80053a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053ac:	d82a      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80053ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053b2:	d02d      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80053b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053b8:	d824      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80053ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053be:	d029      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80053c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053c4:	d81e      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80053c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ca:	d011      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80053cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d0:	d818      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d020      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80053d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053da:	d113      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053e0:	3308      	adds	r3, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f003 fe76 	bl	80090d4 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80053ee:	e014      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f4:	3330      	adds	r3, #48	@ 0x30
 80053f6:	4618      	mov	r0, r3
 80053f8:	f003 ff04 	bl	8009204 <RCCEx_PLL3_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005402:	e00a      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800540a:	e006      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800540c:	bf00      	nop
 800540e:	e004      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005410:	bf00      	nop
 8005412:	e002      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005414:	bf00      	nop
 8005416:	e000      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10d      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005422:	4b55      	ldr	r3, [pc, #340]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005424:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005428:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800542c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005434:	4a50      	ldr	r2, [pc, #320]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005436:	430b      	orrs	r3, r1
 8005438:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005442:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005446:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	2100      	movs	r1, #0
 8005450:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800545c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005460:	460b      	mov	r3, r1
 8005462:	4313      	orrs	r3, r2
 8005464:	d055      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800546a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800546e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005472:	d031      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005478:	d82a      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547e:	d02d      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005484:	d824      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800548a:	d029      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800548c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005490:	d81e      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005496:	d011      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800549c:	d818      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80054a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054a6:	d113      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ac:	3308      	adds	r3, #8
 80054ae:	4618      	mov	r0, r3
 80054b0:	f003 fe10 	bl	80090d4 <RCCEx_PLL2_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80054ba:	e014      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054c0:	3330      	adds	r3, #48	@ 0x30
 80054c2:	4618      	mov	r0, r3
 80054c4:	f003 fe9e 	bl	8009204 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80054ce:	e00a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054d6:	e006      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80054d8:	bf00      	nop
 80054da:	e004      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80054dc:	bf00      	nop
 80054de:	e002      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80054ee:	4b22      	ldr	r3, [pc, #136]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80054f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005500:	4a1d      	ldr	r2, [pc, #116]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005502:	430b      	orrs	r3, r1
 8005504:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005508:	e003      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800550e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005512:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800551e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005522:	2300      	movs	r3, #0
 8005524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005528:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800552c:	460b      	mov	r3, r1
 800552e:	4313      	orrs	r3, r2
 8005530:	d055      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005532:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005536:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800553a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800553e:	d035      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005540:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005544:	d82e      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005546:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800554a:	d031      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800554c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005550:	d828      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005556:	d01b      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800555c:	d822      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005566:	d009      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005568:	e01c      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556a:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556e:	4a02      	ldr	r2, [pc, #8]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005574:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005576:	e01c      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005578:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800557c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005580:	3308      	adds	r3, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f003 fda6 	bl	80090d4 <RCCEx_PLL2_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800558e:	e010      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005594:	3330      	adds	r3, #48	@ 0x30
 8005596:	4618      	mov	r0, r3
 8005598:	f003 fe34 	bl	8009204 <RCCEx_PLL3_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055a2:	e006      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055aa:	e002      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80055ba:	4bc3      	ldr	r3, [pc, #780]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80055c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80055cc:	4abe      	ldr	r2, [pc, #760]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055ce:	430b      	orrs	r3, r1
 80055d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80055de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80055ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055f4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80055f8:	460b      	mov	r3, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d051      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80055fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005602:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800560a:	d033      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800560c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005610:	d82c      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005612:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005616:	d02d      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005618:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800561c:	d826      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800561e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005622:	d019      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005628:	d820      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800562e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005632:	d007      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005634:	e01a      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005636:	4ba4      	ldr	r3, [pc, #656]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	4aa3      	ldr	r2, [pc, #652]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800563c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005640:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005642:	e018      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005648:	3308      	adds	r3, #8
 800564a:	4618      	mov	r0, r3
 800564c:	f003 fd42 	bl	80090d4 <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005656:	e00e      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800565c:	3330      	adds	r3, #48	@ 0x30
 800565e:	4618      	mov	r0, r3
 8005660:	f003 fdd0 	bl	8009204 <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005676:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800567e:	4b92      	ldr	r3, [pc, #584]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005684:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800568c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005690:	4a8d      	ldr	r2, [pc, #564]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005692:	430b      	orrs	r3, r1
 8005694:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800569e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80056a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056b0:	2300      	movs	r3, #0
 80056b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056b8:	460b      	mov	r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	d032      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d80f      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d211      	bcs.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d911      	bls.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d109      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056da:	3308      	adds	r3, #8
 80056dc:	4618      	mov	r0, r3
 80056de:	f003 fcf9 	bl	80090d4 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80056f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10d      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005700:	4b71      	ldr	r3, [pc, #452]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005706:	f023 0107 	bic.w	r1, r3, #7
 800570a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800570e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005712:	4a6d      	ldr	r2, [pc, #436]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005714:	430b      	orrs	r3, r1
 8005716:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800571a:	e003      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005720:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	2100      	movs	r1, #0
 800572e:	6739      	str	r1, [r7, #112]	@ 0x70
 8005730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005734:	677b      	str	r3, [r7, #116]	@ 0x74
 8005736:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d024      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005740:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800574c:	2b08      	cmp	r3, #8
 800574e:	d005      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005756:	e002      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005766:	4b58      	ldr	r3, [pc, #352]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800576c:	f023 0108 	bic.w	r1, r3, #8
 8005770:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005778:	4a53      	ldr	r2, [pc, #332]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800577a:	430b      	orrs	r3, r1
 800577c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005786:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800578a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005796:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005798:	2300      	movs	r3, #0
 800579a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800579c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f000 80b9 	beq.w	800591a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80057a8:	4b48      	ldr	r3, [pc, #288]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	4a47      	ldr	r2, [pc, #284]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b4:	f7fb fd36 	bl	8001224 <HAL_GetTick>
 80057b8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057bc:	e00b      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057be:	f7fb fd31 	bl	8001224 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d903      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057d4:	e005      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057d6:	4b3d      	ldr	r3, [pc, #244]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ed      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80057e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 8093 	bne.w	8005912 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ec:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80057fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d023      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005806:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800580a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800580e:	4293      	cmp	r3, r2
 8005810:	d01b      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005812:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800581c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005820:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005826:	4a28      	ldr	r2, [pc, #160]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005830:	4b25      	ldr	r3, [pc, #148]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005836:	4a24      	ldr	r2, [pc, #144]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800583c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005840:	4a21      	ldr	r2, [pc, #132]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005842:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800584a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d019      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005856:	f7fb fce5 	bl	8001224 <HAL_GetTick>
 800585a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585e:	e00d      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fb fce0 	bl	8001224 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005870:	429a      	cmp	r2, r3
 8005872:	d903      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800587a:	e006      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587c:	4b12      	ldr	r3, [pc, #72]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800587e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ea      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800588a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800588e:	2b00      	cmp	r3, #0
 8005890:	d13a      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005896:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800589a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800589e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058a2:	d115      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80058a4:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80058be:	4a02      	ldr	r2, [pc, #8]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	61d3      	str	r3, [r2, #28]
 80058c4:	e00a      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80058c6:	bf00      	nop
 80058c8:	44020c00 	.word	0x44020c00
 80058cc:	44020800 	.word	0x44020800
 80058d0:	4b9f      	ldr	r3, [pc, #636]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4a9e      	ldr	r2, [pc, #632]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058da:	61d3      	str	r3, [r2, #28]
 80058dc:	4b9c      	ldr	r3, [pc, #624]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058e2:	4a9b      	ldr	r2, [pc, #620]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058ec:	4b98      	ldr	r3, [pc, #608]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058ee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80058f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80058fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fe:	4a94      	ldr	r2, [pc, #592]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005900:	430b      	orrs	r3, r1
 8005902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005906:	e008      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005908:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800590c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8005910:	e003      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005912:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005916:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800591a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005926:	663b      	str	r3, [r7, #96]	@ 0x60
 8005928:	2300      	movs	r3, #0
 800592a:	667b      	str	r3, [r7, #100]	@ 0x64
 800592c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005930:	460b      	mov	r3, r1
 8005932:	4313      	orrs	r3, r2
 8005934:	d035      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005936:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800593a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800593e:	2b30      	cmp	r3, #48	@ 0x30
 8005940:	d014      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005942:	2b30      	cmp	r3, #48	@ 0x30
 8005944:	d80e      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005946:	2b20      	cmp	r3, #32
 8005948:	d012      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d80a      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d010      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005952:	2b10      	cmp	r3, #16
 8005954:	d106      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005956:	4b7e      	ldr	r3, [pc, #504]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	4a7d      	ldr	r2, [pc, #500]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800595c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005960:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005962:	e008      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800596a:	e004      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800596c:	bf00      	nop
 800596e:	e002      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005976:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800597e:	4b74      	ldr	r3, [pc, #464]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005984:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005990:	4a6f      	ldr	r2, [pc, #444]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005992:	430b      	orrs	r3, r1
 8005994:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800599e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80059ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059b0:	2300      	movs	r3, #0
 80059b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d033      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80059be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d007      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80059ce:	e010      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80059dc:	e00d      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e2:	3308      	adds	r3, #8
 80059e4:	4618      	mov	r0, r3
 80059e6:	f003 fb75 	bl	80090d4 <RCCEx_PLL2_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80059f0:	e003      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10d      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005a02:	4b53      	ldr	r3, [pc, #332]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a08:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005a14:	4a4e      	ldr	r2, [pc, #312]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a1c:	e003      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a34:	2300      	movs	r3, #0
 8005a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a38:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	d033      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a46:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005a4e:	2b80      	cmp	r3, #128	@ 0x80
 8005a50:	d007      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005a52:	e010      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a54:	4b3e      	ldr	r3, [pc, #248]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	4a3d      	ldr	r2, [pc, #244]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a5e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005a60:	e00d      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a66:	3308      	adds	r3, #8
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 fb33 	bl	80090d4 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005a86:	4b32      	ldr	r3, [pc, #200]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a8c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a94:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005a98:	4a2d      	ldr	r2, [pc, #180]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aa6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab8:	2300      	movs	r3, #0
 8005aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005abc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	d04a      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d827      	bhi.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005afb 	.word	0x08005afb
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	08005b2b 	.word	0x08005b2b
 8005ae8:	08005b2b 	.word	0x08005b2b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b18      	ldr	r3, [pc, #96]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005af8:	e018      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005afe:	3308      	adds	r3, #8
 8005b00:	4618      	mov	r0, r3
 8005b02:	f003 fae7 	bl	80090d4 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e00e      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b12:	3330      	adds	r3, #48	@ 0x30
 8005b14:	4618      	mov	r0, r3
 8005b16:	f003 fb75 	bl	8009204 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005b20:	e004      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10f      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005b34:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b3a:	f023 0107 	bic.w	r1, r3, #7
 8005b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b46:	4a02      	ldr	r2, [pc, #8]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b4e:	e005      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005b50:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f000 8081 	beq.w	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d85f      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005c11 	.word	0x08005c11
 8005b90:	08005c47 	.word	0x08005c47
 8005b94:	08005c47 	.word	0x08005c47
 8005b98:	08005c47 	.word	0x08005c47
 8005b9c:	08005c47 	.word	0x08005c47
 8005ba0:	08005c47 	.word	0x08005c47
 8005ba4:	08005c47 	.word	0x08005c47
 8005ba8:	08005c47 	.word	0x08005c47
 8005bac:	08005c1f 	.word	0x08005c1f
 8005bb0:	08005c47 	.word	0x08005c47
 8005bb4:	08005c47 	.word	0x08005c47
 8005bb8:	08005c47 	.word	0x08005c47
 8005bbc:	08005c47 	.word	0x08005c47
 8005bc0:	08005c47 	.word	0x08005c47
 8005bc4:	08005c47 	.word	0x08005c47
 8005bc8:	08005c47 	.word	0x08005c47
 8005bcc:	08005c33 	.word	0x08005c33
 8005bd0:	08005c47 	.word	0x08005c47
 8005bd4:	08005c47 	.word	0x08005c47
 8005bd8:	08005c47 	.word	0x08005c47
 8005bdc:	08005c47 	.word	0x08005c47
 8005be0:	08005c47 	.word	0x08005c47
 8005be4:	08005c47 	.word	0x08005c47
 8005be8:	08005c47 	.word	0x08005c47
 8005bec:	08005c4f 	.word	0x08005c4f
 8005bf0:	08005c47 	.word	0x08005c47
 8005bf4:	08005c47 	.word	0x08005c47
 8005bf8:	08005c47 	.word	0x08005c47
 8005bfc:	08005c47 	.word	0x08005c47
 8005c00:	08005c47 	.word	0x08005c47
 8005c04:	08005c47 	.word	0x08005c47
 8005c08:	08005c47 	.word	0x08005c47
 8005c0c:	08005c4f 	.word	0x08005c4f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4bab      	ldr	r3, [pc, #684]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	4aaa      	ldr	r2, [pc, #680]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c1c:	e018      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c22:	3308      	adds	r3, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f003 fa55 	bl	80090d4 <RCCEx_PLL2_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c30:	e00e      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c36:	3330      	adds	r3, #48	@ 0x30
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fae3 	bl	8009204 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005c44:	e004      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c4c:	e000      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10d      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005c58:	4b99      	ldr	r3, [pc, #612]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c6a:	4a95      	ldr	r2, [pc, #596]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c72:	e003      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c92:	460b      	mov	r3, r1
 8005c94:	4313      	orrs	r3, r2
 8005c96:	d04e      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca4:	d02e      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005caa:	d827      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005cac:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cae:	d02b      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005cb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cb2:	d823      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005cb4:	2b80      	cmp	r3, #128	@ 0x80
 8005cb6:	d017      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005cb8:	2b80      	cmp	r3, #128	@ 0x80
 8005cba:	d81f      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005cc0:	2b40      	cmp	r3, #64	@ 0x40
 8005cc2:	d007      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005cc4:	e01a      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	4a7d      	ldr	r2, [pc, #500]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005cd2:	e01a      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cd8:	3308      	adds	r3, #8
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f003 f9fa 	bl	80090d4 <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ce6:	e010      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cec:	3330      	adds	r3, #48	@ 0x30
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f003 fa88 	bl	8009204 <RCCEx_PLL3_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005cfa:	e006      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d02:	e002      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d12:	4b6b      	ldr	r3, [pc, #428]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d18:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d24:	4a66      	ldr	r2, [pc, #408]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d26:	430b      	orrs	r3, r1
 8005d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d2c:	e003      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d44:	2300      	movs	r3, #0
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	d055      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005d5a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d5e:	d031      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005d60:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d64:	d82a      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d6a:	d02d      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d70:	d824      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005d72:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d76:	d029      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005d78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d7c:	d81e      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d82:	d011      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d88:	d818      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d020      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d92:	d113      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d98:	3308      	adds	r3, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f003 f99a 	bl	80090d4 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005da6:	e014      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dac:	3330      	adds	r3, #48	@ 0x30
 8005dae:	4618      	mov	r0, r3
 8005db0:	f003 fa28 	bl	8009204 <RCCEx_PLL3_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dc2:	e006      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005dc4:	bf00      	nop
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005dc8:	bf00      	nop
 8005dca:	e002      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10d      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005dda:	4b39      	ldr	r3, [pc, #228]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005de0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005dec:	4a34      	ldr	r2, [pc, #208]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005df4:	e003      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dfa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d058      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e26:	d031      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005e28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e2c:	d82a      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e32:	d02d      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e38:	d824      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005e3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e3e:	d029      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e44:	d81e      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4a:	d011      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e50:	d818      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d020      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5a:	d113      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e60:	3308      	adds	r3, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f003 f936 	bl	80090d4 <RCCEx_PLL2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005e6e:	e014      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e74:	3330      	adds	r3, #48	@ 0x30
 8005e76:	4618      	mov	r0, r3
 8005e78:	f003 f9c4 	bl	8009204 <RCCEx_PLL3_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005e82:	e00a      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e8a:	e006      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005e8c:	bf00      	nop
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005e90:	bf00      	nop
 8005e92:	e002      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d110      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005ea2:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ea8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eb4:	4902      	ldr	r1, [pc, #8]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005ebe:	bf00      	nop
 8005ec0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ec8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6239      	str	r1, [r7, #32]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ede:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d055      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ef0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005ef4:	d031      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005ef6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005efa:	d82a      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f00:	d02d      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f06:	d824      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f08:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005f0c:	d029      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005f0e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005f12:	d81e      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f18:	d011      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1e:	d818      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f28:	d113      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f2e:	3308      	adds	r3, #8
 8005f30:	4618      	mov	r0, r3
 8005f32:	f003 f8cf 	bl	80090d4 <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f3c:	e014      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f42:	3330      	adds	r3, #48	@ 0x30
 8005f44:	4618      	mov	r0, r3
 8005f46:	f003 f95d 	bl	8009204 <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f50:	e00a      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005f5a:	bf00      	nop
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005f5e:	bf00      	nop
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005f62:	bf00      	nop
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10d      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005f70:	4b88      	ldr	r3, [pc, #544]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f76:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f82:	4984      	ldr	r1, [pc, #528]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005f8a:	e003      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	61b9      	str	r1, [r7, #24]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d03d      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d81c      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fff 	.word	0x08005fff
 8005fc8:	08005fd5 	.word	0x08005fd5
 8005fcc:	08005fe3 	.word	0x08005fe3
 8005fd0:	08005fff 	.word	0x08005fff
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fde:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005fe0:	e00e      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f003 f873 	bl	80090d4 <RCCEx_PLL2_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005ff4:	e004      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ffc:	e000      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006000:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006008:	4b62      	ldr	r3, [pc, #392]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800600a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006016:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800601a:	495e      	ldr	r1, [pc, #376]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006028:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800602c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	2100      	movs	r1, #0
 8006036:	6139      	str	r1, [r7, #16]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d03a      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800604c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006054:	d00e      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800605a:	d815      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d017      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006064:	d110      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006066:	4b4b      	ldr	r3, [pc, #300]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	4a4a      	ldr	r2, [pc, #296]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800606c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006070:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006072:	e00e      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006078:	3308      	adds	r3, #8
 800607a:	4618      	mov	r0, r3
 800607c:	f003 f82a 	bl	80090d4 <RCCEx_PLL2_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006092:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10d      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800609a:	4b3e      	ldr	r3, [pc, #248]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800609c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80060ac:	4939      	ldr	r1, [pc, #228]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	2100      	movs	r1, #0
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060d4:	460b      	mov	r3, r1
 80060d6:	4313      	orrs	r3, r2
 80060d8:	d038      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80060da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80060e2:	2b30      	cmp	r3, #48	@ 0x30
 80060e4:	d01b      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80060e6:	2b30      	cmp	r3, #48	@ 0x30
 80060e8:	d815      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d002      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d007      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80060f2:	e010      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f4:	4b27      	ldr	r3, [pc, #156]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	4a26      	ldr	r2, [pc, #152]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006100:	e00e      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006106:	3330      	adds	r3, #48	@ 0x30
 8006108:	4618      	mov	r0, r3
 800610a:	f003 f87b 	bl	8009204 <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006128:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800612a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800612e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006136:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800613a:	4916      	ldr	r1, [pc, #88]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006142:	e003      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006148:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800614c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	2100      	movs	r1, #0
 8006156:	6039      	str	r1, [r7, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d00c      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006168:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800616a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800616e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006176:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800617a:	4906      	ldr	r1, [pc, #24]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006182:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006186:	4618      	mov	r0, r3
 8006188:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006192:	bf00      	nop
 8006194:	44020c00 	.word	0x44020c00

08006198 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006198:	b480      	push	{r7}
 800619a:	b08b      	sub	sp, #44	@ 0x2c
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80061a0:	4bae      	ldr	r3, [pc, #696]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061aa:	4bac      	ldr	r3, [pc, #688]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80061b4:	4ba9      	ldr	r3, [pc, #676]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061be:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061c0:	4ba6      	ldr	r3, [pc, #664]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061cc:	4ba3      	ldr	r3, [pc, #652]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	08db      	lsrs	r3, r3, #3
 80061d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8126 	beq.w	800643c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d053      	beq.n	800629e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d86f      	bhi.n	80062dc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d003      	beq.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d02b      	beq.n	8006260 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006208:	e068      	b.n	80062dc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800620a:	4b94      	ldr	r3, [pc, #592]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	08db      	lsrs	r3, r3, #3
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	4a92      	ldr	r2, [pc, #584]	@ (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006242:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800625e:	e068      	b.n	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006280:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006298:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800629c:	e049      	b.n	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80062ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80062be:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80062da:	e02a      	b.n	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062dc:	4b5f      	ldr	r3, [pc, #380]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006310:	ed97 6a04 	vldr	s12, [r7, #16]
 8006314:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006330:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006332:	4b4a      	ldr	r3, [pc, #296]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800633e:	d121      	bne.n	8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006340:	4b46      	ldr	r3, [pc, #280]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800634c:	4b43      	ldr	r3, [pc, #268]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800634e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006350:	0a5b      	lsrs	r3, r3, #9
 8006352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800635e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006362:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006366:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800636a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800636e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006372:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e006      	b.n	800638a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e002      	b.n	800638a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800638a:	4b34      	ldr	r3, [pc, #208]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006396:	d121      	bne.n	80063dc <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006398:	4b30      	ldr	r3, [pc, #192]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d017      	beq.n	80063d4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063a4:	4b2d      	ldr	r3, [pc, #180]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063ba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80063be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80063c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ca:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e006      	b.n	80063e2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
 80063da:	e002      	b.n	80063e2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063e2:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ee:	d121      	bne.n	8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80063f0:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063fc:	4b17      	ldr	r3, [pc, #92]	@ (800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006400:	0e1b      	lsrs	r3, r3, #24
 8006402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800640e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006412:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006416:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800641a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006422:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800642a:	e010      	b.n	800644e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	609a      	str	r2, [r3, #8]
}
 8006432:	e00c      	b.n	800644e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
}
 800643a:	e008      	b.n	800644e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
}
 800644e:	bf00      	nop
 8006450:	372c      	adds	r7, #44	@ 0x2c
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	44020c00 	.word	0x44020c00
 8006460:	03d09000 	.word	0x03d09000
 8006464:	46000000 	.word	0x46000000
 8006468:	4a742400 	.word	0x4a742400
 800646c:	4af42400 	.word	0x4af42400

08006470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006470:	b480      	push	{r7}
 8006472:	b08b      	sub	sp, #44	@ 0x2c
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006478:	4bae      	ldr	r3, [pc, #696]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800647a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006480:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006482:	4bac      	ldr	r3, [pc, #688]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800648c:	4ba9      	ldr	r3, [pc, #676]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	0a1b      	lsrs	r3, r3, #8
 8006492:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006496:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006498:	4ba6      	ldr	r3, [pc, #664]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80064a4:	4ba3      	ldr	r3, [pc, #652]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	08db      	lsrs	r3, r3, #3
 80064aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064bc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8126 	beq.w	8006714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d053      	beq.n	8006576 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d86f      	bhi.n	80065b4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d02b      	beq.n	8006538 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80064e0:	e068      	b.n	80065b4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064e2:	4b94      	ldr	r3, [pc, #592]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	08db      	lsrs	r3, r3, #3
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	4a92      	ldr	r2, [pc, #584]	@ (8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80064ee:	fa22 f303 	lsr.w	r3, r2, r3
 80064f2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a04 	vldr	s12, [r7, #16]
 800651a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800673c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006536:	e068      	b.n	800660a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	ee07 3a90 	vmov	s15, r3
 8006550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006554:	ed97 6a04 	vldr	s12, [r7, #16]
 8006558:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800673c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800655c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006570:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006574:	e049      	b.n	800660a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006580:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006744 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006592:	ed97 6a04 	vldr	s12, [r7, #16]
 8006596:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800673c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800659a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80065b2:	e02a      	b.n	800660a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065b4:	4b5f      	ldr	r3, [pc, #380]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	08db      	lsrs	r3, r3, #3
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	4a5e      	ldr	r2, [pc, #376]	@ (8006738 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
 80065c4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80065ec:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800673c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80065f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006604:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006608:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800660a:	4b4a      	ldr	r3, [pc, #296]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006616:	d121      	bne.n	800665c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006618:	4b46      	ldr	r3, [pc, #280]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d017      	beq.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006624:	4b43      	ldr	r3, [pc, #268]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	0a5b      	lsrs	r3, r3, #9
 800662a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800663a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800663e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e006      	b.n	8006662 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e002      	b.n	8006662 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006662:	4b34      	ldr	r3, [pc, #208]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800666a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666e:	d121      	bne.n	80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006670:	4b30      	ldr	r3, [pc, #192]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800667c:	4b2d      	ldr	r3, [pc, #180]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800668e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006692:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006696:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800669a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	e006      	b.n	80066ba <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	e002      	b.n	80066ba <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c6:	d121      	bne.n	800670c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80066c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066d4:	4b17      	ldr	r3, [pc, #92]	@ (8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80066e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80066ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80066f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006702:	e010      	b.n	8006726 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
}
 800670a:	e00c      	b.n	8006726 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	609a      	str	r2, [r3, #8]
}
 8006712:	e008      	b.n	8006726 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
}
 8006726:	bf00      	nop
 8006728:	372c      	adds	r7, #44	@ 0x2c
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	44020c00 	.word	0x44020c00
 8006738:	03d09000 	.word	0x03d09000
 800673c:	46000000 	.word	0x46000000
 8006740:	4a742400 	.word	0x4a742400
 8006744:	4af42400 	.word	0x4af42400

08006748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006748:	b480      	push	{r7}
 800674a:	b08b      	sub	sp, #44	@ 0x2c
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006750:	4bae      	ldr	r3, [pc, #696]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006758:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800675a:	4bac      	ldr	r3, [pc, #688]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006764:	4ba9      	ldr	r3, [pc, #676]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800676e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006770:	4ba6      	ldr	r3, [pc, #664]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800677c:	4ba3      	ldr	r3, [pc, #652]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800677e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006780:	08db      	lsrs	r3, r3, #3
 8006782:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	fb02 f303 	mul.w	r3, r2, r3
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006794:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8126 	beq.w	80069ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d053      	beq.n	800684e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d86f      	bhi.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d003      	beq.n	80067ba <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d02b      	beq.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80067b8:	e068      	b.n	800688c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067ba:	4b94      	ldr	r3, [pc, #592]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	08db      	lsrs	r3, r3, #3
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	4a92      	ldr	r2, [pc, #584]	@ (8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80067c6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ca:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80067f2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80067f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800680e:	e068      	b.n	80068e2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006830:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800684c:	e049      	b.n	80068e2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006858:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800685c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686a:	ed97 6a04 	vldr	s12, [r7, #16]
 800686e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800687e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800688a:	e02a      	b.n	80068e2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800688c:	4b5f      	ldr	r3, [pc, #380]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	08db      	lsrs	r3, r3, #3
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	4a5e      	ldr	r2, [pc, #376]	@ (8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
 800689c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80068c4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80068c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80068e0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068e2:	4b4a      	ldr	r3, [pc, #296]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ee:	d121      	bne.n	8006934 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80068f0:	4b46      	ldr	r3, [pc, #280]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d017      	beq.n	800692c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068fc:	4b43      	ldr	r3, [pc, #268]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80068fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006900:	0a5b      	lsrs	r3, r3, #9
 8006902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800690e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006912:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006916:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800691a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006922:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e006      	b.n	800693a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e002      	b.n	800693a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800693a:	4b34      	ldr	r3, [pc, #208]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006946:	d121      	bne.n	800698c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006948:	4b30      	ldr	r3, [pc, #192]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800694a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006954:	4b2d      	ldr	r3, [pc, #180]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800696a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800696e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800697a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	e006      	b.n	8006992 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	e002      	b.n	8006992 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006992:	4b1e      	ldr	r3, [pc, #120]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800699a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800699e:	d121      	bne.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80069a0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d017      	beq.n	80069dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069ac:	4b17      	ldr	r3, [pc, #92]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80069ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b0:	0e1b      	lsrs	r3, r3, #24
 80069b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80069be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80069c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80069ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80069da:	e010      	b.n	80069fe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	609a      	str	r2, [r3, #8]
}
 80069e2:	e00c      	b.n	80069fe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
}
 80069ea:	e008      	b.n	80069fe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
}
 80069fe:	bf00      	nop
 8006a00:	372c      	adds	r7, #44	@ 0x2c
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	44020c00 	.word	0x44020c00
 8006a10:	03d09000 	.word	0x03d09000
 8006a14:	46000000 	.word	0x46000000
 8006a18:	4a742400 	.word	0x4a742400
 8006a1c:	4af42400 	.word	0x4af42400

08006a20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b08f      	sub	sp, #60	@ 0x3c
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a2e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006a32:	4321      	orrs	r1, r4
 8006a34:	d150      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006a36:	4b26      	ldr	r3, [pc, #152]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a40:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006a42:	4b23      	ldr	r3, [pc, #140]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d108      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a56:	d104      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006a58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5e:	f002 bb2a 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006a62:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a70:	d108      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a78:	d104      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006a7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a80:	f002 bb19 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006a84:	4b12      	ldr	r3, [pc, #72]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a90:	d119      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a98:	d115      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa6:	d30a      	bcc.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006aa8:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ab2:	4a08      	ldr	r2, [pc, #32]	@ (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006aba:	f002 bafc 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006ac2:	f002 baf8 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aca:	f002 baf4 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ace:	bf00      	nop
 8006ad0:	44020c00 	.word	0x44020c00
 8006ad4:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006adc:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8006ae0:	ea50 0104 	orrs.w	r1, r0, r4
 8006ae4:	f001 8275 	beq.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aec:	2801      	cmp	r0, #1
 8006aee:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8006af2:	f082 82dd 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006afa:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006afe:	ea50 0104 	orrs.w	r1, r0, r4
 8006b02:	f001 816c 	beq.w	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b0a:	2801      	cmp	r0, #1
 8006b0c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006b10:	f082 82ce 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b18:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8006b1c:	ea50 0104 	orrs.w	r1, r0, r4
 8006b20:	f001 8602 	beq.w	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b28:	2801      	cmp	r0, #1
 8006b2a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8006b2e:	f082 82bf 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b36:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8006b3a:	ea50 0104 	orrs.w	r1, r0, r4
 8006b3e:	f001 854c 	beq.w	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b46:	2801      	cmp	r0, #1
 8006b48:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8006b4c:	f082 82b0 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b54:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8006b58:	ea50 0104 	orrs.w	r1, r0, r4
 8006b5c:	f001 849e 	beq.w	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b64:	2801      	cmp	r0, #1
 8006b66:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8006b6a:	f082 82a1 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b72:	f1a1 0420 	sub.w	r4, r1, #32
 8006b76:	ea50 0104 	orrs.w	r1, r0, r4
 8006b7a:	f001 83e8 	beq.w	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b82:	2801      	cmp	r0, #1
 8006b84:	f171 0120 	sbcs.w	r1, r1, #32
 8006b88:	f082 8292 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b90:	f1a1 0410 	sub.w	r4, r1, #16
 8006b94:	ea50 0104 	orrs.w	r1, r0, r4
 8006b98:	f002 8256 	beq.w	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ba0:	2801      	cmp	r0, #1
 8006ba2:	f171 0110 	sbcs.w	r1, r1, #16
 8006ba6:	f082 8283 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bae:	f1a1 0408 	sub.w	r4, r1, #8
 8006bb2:	ea50 0104 	orrs.w	r1, r0, r4
 8006bb6:	f002 81cc 	beq.w	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bbe:	2801      	cmp	r0, #1
 8006bc0:	f171 0108 	sbcs.w	r1, r1, #8
 8006bc4:	f082 8274 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bcc:	1f0c      	subs	r4, r1, #4
 8006bce:	ea50 0104 	orrs.w	r1, r0, r4
 8006bd2:	f001 8648 	beq.w	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bda:	2801      	cmp	r0, #1
 8006bdc:	f171 0104 	sbcs.w	r1, r1, #4
 8006be0:	f082 8266 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be8:	1e8c      	subs	r4, r1, #2
 8006bea:	ea50 0104 	orrs.w	r1, r0, r4
 8006bee:	f002 8143 	beq.w	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf6:	2801      	cmp	r0, #1
 8006bf8:	f171 0102 	sbcs.w	r1, r1, #2
 8006bfc:	f082 8258 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c04:	1e4c      	subs	r4, r1, #1
 8006c06:	ea50 0104 	orrs.w	r1, r0, r4
 8006c0a:	f002 80ce 	beq.w	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c12:	2801      	cmp	r0, #1
 8006c14:	f171 0101 	sbcs.w	r1, r1, #1
 8006c18:	f082 824a 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c20:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8006c24:	4321      	orrs	r1, r4
 8006c26:	f002 8059 	beq.w	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c2e:	4cd9      	ldr	r4, [pc, #868]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	f171 0100 	sbcs.w	r1, r1, #0
 8006c36:	f082 823b 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c3e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006c42:	4321      	orrs	r1, r4
 8006c44:	f001 87d9 	beq.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4c:	4cd2      	ldr	r4, [pc, #840]	@ (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006c4e:	42a0      	cmp	r0, r4
 8006c50:	f171 0100 	sbcs.w	r1, r1, #0
 8006c54:	f082 822c 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c5c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006c60:	4321      	orrs	r1, r4
 8006c62:	f001 8751 	beq.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c6a:	4ccc      	ldr	r4, [pc, #816]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	f171 0100 	sbcs.w	r1, r1, #0
 8006c72:	f082 821d 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8006c7e:	4321      	orrs	r1, r4
 8006c80:	f001 869a 	beq.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c88:	4cc5      	ldr	r4, [pc, #788]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006c8a:	42a0      	cmp	r0, r4
 8006c8c:	f171 0100 	sbcs.w	r1, r1, #0
 8006c90:	f082 820e 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c98:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006c9c:	4321      	orrs	r1, r4
 8006c9e:	f001 8612 	beq.w	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ca6:	4cbf      	ldr	r4, [pc, #764]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	f171 0100 	sbcs.w	r1, r1, #0
 8006cae:	f082 81ff 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006cba:	4321      	orrs	r1, r4
 8006cbc:	f002 817e 	beq.w	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc4:	4cb8      	ldr	r4, [pc, #736]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cc6:	42a0      	cmp	r0, r4
 8006cc8:	f171 0100 	sbcs.w	r1, r1, #0
 8006ccc:	f082 81f0 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8006cd8:	4321      	orrs	r1, r4
 8006cda:	f000 829e 	beq.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce2:	4cb2      	ldr	r4, [pc, #712]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ce4:	42a0      	cmp	r0, r4
 8006ce6:	f171 0100 	sbcs.w	r1, r1, #0
 8006cea:	f082 81e1 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cf2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8006cf6:	4321      	orrs	r1, r4
 8006cf8:	f000 826d 	beq.w	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d00:	4cab      	ldr	r4, [pc, #684]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d02:	42a0      	cmp	r0, r4
 8006d04:	f171 0100 	sbcs.w	r1, r1, #0
 8006d08:	f082 81d2 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d10:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006d14:	4321      	orrs	r1, r4
 8006d16:	f001 800d 	beq.w	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d1e:	4ca5      	ldr	r4, [pc, #660]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	f171 0100 	sbcs.w	r1, r1, #0
 8006d26:	f082 81c3 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8006d32:	4321      	orrs	r1, r4
 8006d34:	f000 81d0 	beq.w	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d3c:	4c9e      	ldr	r4, [pc, #632]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d3e:	42a0      	cmp	r0, r4
 8006d40:	f171 0100 	sbcs.w	r1, r1, #0
 8006d44:	f082 81b4 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d4c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8006d50:	4321      	orrs	r1, r4
 8006d52:	f000 8142 	beq.w	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d5a:	4c98      	ldr	r4, [pc, #608]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	f171 0100 	sbcs.w	r1, r1, #0
 8006d62:	f082 81a5 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d6a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006d6e:	4321      	orrs	r1, r4
 8006d70:	f001 824e 	beq.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d78:	4c91      	ldr	r4, [pc, #580]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006d7a:	42a0      	cmp	r0, r4
 8006d7c:	f171 0100 	sbcs.w	r1, r1, #0
 8006d80:	f082 8196 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d88:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006d8c:	4321      	orrs	r1, r4
 8006d8e:	f001 8197 	beq.w	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d96:	4c8b      	ldr	r4, [pc, #556]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006d98:	42a0      	cmp	r0, r4
 8006d9a:	f171 0100 	sbcs.w	r1, r1, #0
 8006d9e:	f082 8187 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006da2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006daa:	4321      	orrs	r1, r4
 8006dac:	f001 8154 	beq.w	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006db8:	f171 0100 	sbcs.w	r1, r1, #0
 8006dbc:	f082 8178 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006dc8:	4321      	orrs	r1, r4
 8006dca:	f001 80b7 	beq.w	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dd2:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006dd6:	42a0      	cmp	r0, r4
 8006dd8:	f171 0100 	sbcs.w	r1, r1, #0
 8006ddc:	f082 8168 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006de4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006de8:	4321      	orrs	r1, r4
 8006dea:	f001 8064 	beq.w	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006df2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006df6:	42a0      	cmp	r0, r4
 8006df8:	f171 0100 	sbcs.w	r1, r1, #0
 8006dfc:	f082 8158 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e04:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006e08:	4321      	orrs	r1, r4
 8006e0a:	f001 8011 	beq.w	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e12:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006e16:	42a0      	cmp	r0, r4
 8006e18:	f171 0100 	sbcs.w	r1, r1, #0
 8006e1c:	f082 8148 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e24:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8006e28:	4321      	orrs	r1, r4
 8006e2a:	f000 871e 	beq.w	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e32:	f241 0401 	movw	r4, #4097	@ 0x1001
 8006e36:	42a0      	cmp	r0, r4
 8006e38:	f171 0100 	sbcs.w	r1, r1, #0
 8006e3c:	f082 8138 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e44:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8006e48:	4321      	orrs	r1, r4
 8006e4a:	f000 86a8 	beq.w	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e52:	f640 0401 	movw	r4, #2049	@ 0x801
 8006e56:	42a0      	cmp	r0, r4
 8006e58:	f171 0100 	sbcs.w	r1, r1, #0
 8006e5c:	f082 8128 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e64:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8006e68:	4321      	orrs	r1, r4
 8006e6a:	f000 8632 	beq.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e72:	f240 4401 	movw	r4, #1025	@ 0x401
 8006e76:	42a0      	cmp	r0, r4
 8006e78:	f171 0100 	sbcs.w	r1, r1, #0
 8006e7c:	f082 8118 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e84:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8006e88:	4321      	orrs	r1, r4
 8006e8a:	f000 85b0 	beq.w	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e92:	f240 2401 	movw	r4, #513	@ 0x201
 8006e96:	42a0      	cmp	r0, r4
 8006e98:	f171 0100 	sbcs.w	r1, r1, #0
 8006e9c:	f082 8108 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea4:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8006ea8:	4321      	orrs	r1, r4
 8006eaa:	f000 8535 	beq.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006eae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb2:	f240 1401 	movw	r4, #257	@ 0x101
 8006eb6:	42a0      	cmp	r0, r4
 8006eb8:	f171 0100 	sbcs.w	r1, r1, #0
 8006ebc:	f082 80f8 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ec4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8006ec8:	4321      	orrs	r1, r4
 8006eca:	f000 84ba 	beq.w	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006ece:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ed2:	2881      	cmp	r0, #129	@ 0x81
 8006ed4:	f171 0100 	sbcs.w	r1, r1, #0
 8006ed8:	f082 80ea 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ee0:	2821      	cmp	r0, #33	@ 0x21
 8006ee2:	f171 0100 	sbcs.w	r1, r1, #0
 8006ee6:	d26f      	bcs.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eec:	4301      	orrs	r1, r0
 8006eee:	f002 80df 	beq.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ef6:	1e42      	subs	r2, r0, #1
 8006ef8:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006efc:	2a20      	cmp	r2, #32
 8006efe:	f173 0100 	sbcs.w	r1, r3, #0
 8006f02:	f082 80d5 	bcs.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f06:	2a1f      	cmp	r2, #31
 8006f08:	f202 80d2 	bhi.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f0c:	a101      	add	r1, pc, #4	@ (adr r1, 8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006f0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08007275 	.word	0x08007275
 8006f18:	08007341 	.word	0x08007341
 8006f1c:	080090b1 	.word	0x080090b1
 8006f20:	08007401 	.word	0x08007401
 8006f24:	080090b1 	.word	0x080090b1
 8006f28:	080090b1 	.word	0x080090b1
 8006f2c:	080090b1 	.word	0x080090b1
 8006f30:	080074d1 	.word	0x080074d1
 8006f34:	080090b1 	.word	0x080090b1
 8006f38:	080090b1 	.word	0x080090b1
 8006f3c:	080090b1 	.word	0x080090b1
 8006f40:	080090b1 	.word	0x080090b1
 8006f44:	080090b1 	.word	0x080090b1
 8006f48:	080090b1 	.word	0x080090b1
 8006f4c:	080090b1 	.word	0x080090b1
 8006f50:	080075b3 	.word	0x080075b3
 8006f54:	080090b1 	.word	0x080090b1
 8006f58:	080090b1 	.word	0x080090b1
 8006f5c:	080090b1 	.word	0x080090b1
 8006f60:	080090b1 	.word	0x080090b1
 8006f64:	080090b1 	.word	0x080090b1
 8006f68:	080090b1 	.word	0x080090b1
 8006f6c:	080090b1 	.word	0x080090b1
 8006f70:	080090b1 	.word	0x080090b1
 8006f74:	080090b1 	.word	0x080090b1
 8006f78:	080090b1 	.word	0x080090b1
 8006f7c:	080090b1 	.word	0x080090b1
 8006f80:	080090b1 	.word	0x080090b1
 8006f84:	080090b1 	.word	0x080090b1
 8006f88:	080090b1 	.word	0x080090b1
 8006f8c:	080090b1 	.word	0x080090b1
 8006f90:	08007689 	.word	0x08007689
 8006f94:	80000001 	.word	0x80000001
 8006f98:	40000001 	.word	0x40000001
 8006f9c:	20000001 	.word	0x20000001
 8006fa0:	10000001 	.word	0x10000001
 8006fa4:	08000001 	.word	0x08000001
 8006fa8:	04000001 	.word	0x04000001
 8006fac:	00800001 	.word	0x00800001
 8006fb0:	00400001 	.word	0x00400001
 8006fb4:	00200001 	.word	0x00200001
 8006fb8:	00100001 	.word	0x00100001
 8006fbc:	00080001 	.word	0x00080001
 8006fc0:	00040001 	.word	0x00040001
 8006fc4:	00020001 	.word	0x00020001
 8006fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fcc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	f000 83c4 	beq.w	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006fd6:	f002 b86b 	b.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006fda:	4ba1      	ldr	r3, [pc, #644]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fe0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fec:	d036      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ff4:	d86b      	bhi.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ffc:	d02b      	beq.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007004:	d863      	bhi.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800700c:	d01b      	beq.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007014:	d85b      	bhi.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007022:	d008      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007024:	e053      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007026:	f107 0320 	add.w	r3, r7, #32
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff f8b4 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007034:	e04e      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fa18 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007044:	e046      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007046:	f107 0308 	add.w	r3, r7, #8
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fb7c 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007054:	e03e      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007056:	4b83      	ldr	r3, [pc, #524]	@ (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800705a:	e03b      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800705c:	4b80      	ldr	r3, [pc, #512]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800705e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007062:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007068:	4b7d      	ldr	r3, [pc, #500]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d10c      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800707a:	4b79      	ldr	r3, [pc, #484]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	08db      	lsrs	r3, r3, #3
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	4a78      	ldr	r2, [pc, #480]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
 800708c:	e01e      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800708e:	4b74      	ldr	r3, [pc, #464]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709a:	d106      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800709c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a2:	d102      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070a4:	4b71      	ldr	r3, [pc, #452]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a8:	e010      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070b6:	d106      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070be:	d102      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070c0:	4b6b      	ldr	r3, [pc, #428]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c4:	e002      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80070ca:	e003      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80070cc:	e002      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070d2:	bf00      	nop
          }
        }
        break;
 80070d4:	f001 bfef 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80070d8:	4b61      	ldr	r3, [pc, #388]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070de:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80070e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ea:	d036      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070f2:	d86b      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80070fa:	d02b      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007102:	d863      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800710a:	d01b      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007112:	d85b      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007120:	d008      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007122:	e053      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007124:	f107 0320 	add.w	r3, r7, #32
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff f835 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007132:	e04e      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007134:	f107 0314 	add.w	r3, r7, #20
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff f999 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007142:	e046      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007144:	f107 0308 	add.w	r3, r7, #8
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fafd 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007152:	e03e      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007154:	4b43      	ldr	r3, [pc, #268]	@ (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007156:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007158:	e03b      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800715a:	4b41      	ldr	r3, [pc, #260]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800715c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007160:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007164:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007166:	4b3e      	ldr	r3, [pc, #248]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d10c      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007178:	4b39      	ldr	r3, [pc, #228]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a39      	ldr	r2, [pc, #228]	@ (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
 800718a:	e01e      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800718c:	4b34      	ldr	r3, [pc, #208]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007198:	d106      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a0:	d102      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071a2:	4b32      	ldr	r3, [pc, #200]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a6:	e010      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071b4:	d106      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071bc:	d102      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071be:	4b2c      	ldr	r3, [pc, #176]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80071c8:	e003      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80071ca:	e002      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071d0:	bf00      	nop
          }
        }
        break;
 80071d2:	f001 bf70 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80071d6:	4b22      	ldr	r3, [pc, #136]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d108      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071e8:	f107 0320 	add.w	r3, r7, #32
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe ffd3 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071f6:	f001 bf5e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2b40      	cmp	r3, #64	@ 0x40
 80071fe:	d108      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff f933 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800720e:	f001 bf52 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007216:	f001 bf4e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800721a:	4b11      	ldr	r3, [pc, #68]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800721c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007224:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800722c:	f107 0320 	add.w	r3, r7, #32
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe ffb1 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800723a:	f001 bf3c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	2b80      	cmp	r3, #128	@ 0x80
 8007242:	d108      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff f911 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007252:	f001 bf30 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800725a:	f001 bf2c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800725e:	bf00      	nop
 8007260:	44020c00 	.word	0x44020c00
 8007264:	00bb8000 	.word	0x00bb8000
 8007268:	03d09000 	.word	0x03d09000
 800726c:	003d0900 	.word	0x003d0900
 8007270:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007274:	4b9d      	ldr	r3, [pc, #628]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007286:	f7fc ffd1 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 800728a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800728c:	f001 bf13 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007290:	4b96      	ldr	r3, [pc, #600]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800729c:	d10a      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d107      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a4:	f107 0314 	add.w	r3, r7, #20
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff f8e1 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b2:	e043      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80072b4:	4b8d      	ldr	r3, [pc, #564]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c0:	d10a      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d107      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fa3b 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d6:	e031      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80072d8:	4b84      	ldr	r3, [pc, #528]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d10c      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d109      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072ea:	4b80      	ldr	r3, [pc, #512]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	08db      	lsrs	r3, r3, #3
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	4a7e      	ldr	r2, [pc, #504]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fc:	e01e      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80072fe:	4b7b      	ldr	r3, [pc, #492]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800730a:	d105      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	2b04      	cmp	r3, #4
 8007310:	d102      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007312:	4b78      	ldr	r3, [pc, #480]	@ (80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007314:	637b      	str	r3, [r7, #52]	@ 0x34
 8007316:	e011      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007318:	4b74      	ldr	r3, [pc, #464]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800731a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b02      	cmp	r3, #2
 8007324:	d106      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	2b05      	cmp	r3, #5
 800732a:	d103      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800732c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
 8007332:	e003      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007338:	f001 bebd 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800733c:	f001 bebb 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007340:	4b6a      	ldr	r3, [pc, #424]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007352:	f7fc ff55 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007356:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007358:	f001 bead 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800735c:	4b63      	ldr	r3, [pc, #396]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007368:	d10a      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	2b08      	cmp	r3, #8
 800736e:	d107      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007370:	f107 0314 	add.w	r3, r7, #20
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff f87b 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
 800737e:	e03d      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007382:	2b10      	cmp	r3, #16
 8007384:	d108      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007386:	f107 0308 	add.w	r3, r7, #8
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff f9dc 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007394:	f001 be8f 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007398:	4b54      	ldr	r3, [pc, #336]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d10c      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	2b18      	cmp	r3, #24
 80073a8:	d109      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073aa:	4b50      	ldr	r3, [pc, #320]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	4a4e      	ldr	r2, [pc, #312]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80073bc:	e01e      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80073be:	4b4b      	ldr	r3, [pc, #300]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ca:	d105      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d102      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80073d2:	4b48      	ldr	r3, [pc, #288]	@ (80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80073d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d6:	e011      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80073d8:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d106      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	2b28      	cmp	r3, #40	@ 0x28
 80073ea:	d103      	bne.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80073ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073f8:	f001 be5d 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073fc:	f001 be5b 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007400:	4b3a      	ldr	r3, [pc, #232]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007406:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800740a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007412:	f7fc fef5 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007416:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007418:	f001 be4d 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800741c:	4b33      	ldr	r3, [pc, #204]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007428:	d10a      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	2b40      	cmp	r3, #64	@ 0x40
 800742e:	d107      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007430:	f107 0314 	add.w	r3, r7, #20
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff f81b 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
 800743e:	e045      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007440:	4b2a      	ldr	r3, [pc, #168]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800744c:	d10a      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	2b80      	cmp	r3, #128	@ 0x80
 8007452:	d107      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff f975 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	e033      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007464:	4b21      	ldr	r3, [pc, #132]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b02      	cmp	r3, #2
 800746e:	d10c      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	2bc0      	cmp	r3, #192	@ 0xc0
 8007474:	d109      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007476:	4b1d      	ldr	r3, [pc, #116]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	08db      	lsrs	r3, r3, #3
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	4a1b      	ldr	r2, [pc, #108]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007482:	fa22 f303 	lsr.w	r3, r2, r3
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
 8007488:	e020      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800748a:	4b18      	ldr	r3, [pc, #96]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007496:	d106      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800749e:	d102      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80074a0:	4b14      	ldr	r3, [pc, #80]	@ (80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a4:	e012      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80074a6:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d107      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80074ba:	d103      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80074bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	e003      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c8:	f001 bdf5 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074cc:	f001 bdf3 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80074d0:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074d6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074e2:	f7fc fe8d 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 80074e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80074e8:	f001 bde5 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074ec:	44020c00 	.word	0x44020c00
 80074f0:	03d09000 	.word	0x03d09000
 80074f4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80074f8:	4ba0      	ldr	r3, [pc, #640]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007504:	d10b      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800750c:	d107      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe ffac 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	e047      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800751e:	4b97      	ldr	r3, [pc, #604]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800752a:	d10b      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800752c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007532:	d107      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff f905 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
 8007542:	e034      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007544:	4b8d      	ldr	r3, [pc, #564]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d10d      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007552:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007556:	d109      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007558:	4b88      	ldr	r3, [pc, #544]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	08db      	lsrs	r3, r3, #3
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	4a87      	ldr	r2, [pc, #540]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
 800756a:	e020      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800756c:	4b83      	ldr	r3, [pc, #524]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007578:	d106      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007580:	d102      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007582:	4b80      	ldr	r3, [pc, #512]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
 8007586:	e012      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007588:	4b7c      	ldr	r3, [pc, #496]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800758a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b02      	cmp	r3, #2
 8007594:	d107      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800759c:	d103      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800759e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075a4:	e003      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075aa:	f001 bd84 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075ae:	f001 bd82 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80075b2:	4b72      	ldr	r3, [pc, #456]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80075bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075c4:	f7fc fe1c 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 80075c8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80075ca:	f001 bd74 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80075ce:	4b6b      	ldr	r3, [pc, #428]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075da:	d10b      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80075dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e2:	d107      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe ff41 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	e047      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80075f4:	4b61      	ldr	r3, [pc, #388]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007600:	d10b      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007608:	d107      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff f89a 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
 8007618:	e034      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800761a:	4b58      	ldr	r3, [pc, #352]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b02      	cmp	r3, #2
 8007624:	d10d      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800762c:	d109      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800762e:	4b53      	ldr	r3, [pc, #332]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	08db      	lsrs	r3, r3, #3
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	4a51      	ldr	r2, [pc, #324]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800763a:	fa22 f303 	lsr.w	r3, r2, r3
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007640:	e020      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007642:	4b4e      	ldr	r3, [pc, #312]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800764e:	d106      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007656:	d102      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007658:	4b4a      	ldr	r3, [pc, #296]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
 800765c:	e012      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800765e:	4b47      	ldr	r3, [pc, #284]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b02      	cmp	r3, #2
 800766a:	d107      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007672:	d103      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007678:	637b      	str	r3, [r7, #52]	@ 0x34
 800767a:	e003      	b.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007680:	f001 bd19 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007684:	f001 bd17 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007688:	4b3c      	ldr	r3, [pc, #240]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800768a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800768e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007692:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800769a:	f7fc fdb1 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 800769e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80076a0:	f001 bd09 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80076a4:	4b35      	ldr	r3, [pc, #212]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076b0:	d10b      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b8:	d107      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe fed6 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c8:	e047      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80076ca:	4b2c      	ldr	r3, [pc, #176]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076d6:	d10b      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076de:	d107      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e0:	f107 0308 	add.w	r3, r7, #8
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff f82f 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ee:	e034      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80076f0:	4b22      	ldr	r3, [pc, #136]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d10d      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007702:	d109      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007704:	4b1d      	ldr	r3, [pc, #116]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	4a1c      	ldr	r2, [pc, #112]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	637b      	str	r3, [r7, #52]	@ 0x34
 8007716:	e020      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007718:	4b18      	ldr	r3, [pc, #96]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007724:	d106      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800772c:	d102      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800772e:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
 8007732:	e012      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007734:	4b11      	ldr	r3, [pc, #68]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b02      	cmp	r3, #2
 8007740:	d107      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007748:	d103      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800774a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007750:	e003      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007756:	f001 bcae 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800775a:	f001 bcac 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800775e:	4b07      	ldr	r3, [pc, #28]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007760:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007764:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007768:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10b      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007770:	f7fc fd46 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007774:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007776:	f001 bc9e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800777a:	bf00      	nop
 800777c:	44020c00 	.word	0x44020c00
 8007780:	03d09000 	.word	0x03d09000
 8007784:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007788:	4ba0      	ldr	r3, [pc, #640]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007794:	d10b      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800779c:	d107      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800779e:	f107 0314 	add.w	r3, r7, #20
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fe64 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	e047      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80077ae:	4b97      	ldr	r3, [pc, #604]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ba:	d10b      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80077c2:	d107      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c4:	f107 0308 	add.w	r3, r7, #8
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe ffbd 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d2:	e034      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80077d4:	4b8d      	ldr	r3, [pc, #564]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d10d      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80077e6:	d109      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077e8:	4b88      	ldr	r3, [pc, #544]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	08db      	lsrs	r3, r3, #3
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	4a87      	ldr	r2, [pc, #540]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	e020      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80077fc:	4b83      	ldr	r3, [pc, #524]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007808:	d106      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007810:	d102      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007812:	4b80      	ldr	r3, [pc, #512]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
 8007816:	e012      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007818:	4b7c      	ldr	r3, [pc, #496]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800781a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b02      	cmp	r3, #2
 8007824:	d107      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800782c:	d103      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007832:	637b      	str	r3, [r7, #52]	@ 0x34
 8007834:	e003      	b.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800783a:	f001 bc3c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800783e:	f001 bc3a 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007842:	4b72      	ldr	r3, [pc, #456]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007848:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800784c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fc fcd4 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007858:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800785a:	f001 bc2c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800785e:	4b6b      	ldr	r3, [pc, #428]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800786a:	d10b      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007872:	d107      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fdf9 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	637b      	str	r3, [r7, #52]	@ 0x34
 8007882:	e047      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007884:	4b61      	ldr	r3, [pc, #388]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007890:	d10b      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007898:	d107      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800789a:	f107 0308 	add.w	r3, r7, #8
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe ff52 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a8:	e034      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80078aa:	4b58      	ldr	r3, [pc, #352]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d10d      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078bc:	d109      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078be:	4b53      	ldr	r3, [pc, #332]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	08db      	lsrs	r3, r3, #3
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	4a51      	ldr	r2, [pc, #324]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80078ca:	fa22 f303 	lsr.w	r3, r2, r3
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	e020      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80078d2:	4b4e      	ldr	r3, [pc, #312]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078de:	d106      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078e6:	d102      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80078e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ec:	e012      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80078ee:	4b47      	ldr	r3, [pc, #284]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d107      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007902:	d103      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
 800790a:	e003      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007910:	f001 bbd1 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007914:	f001 bbcf 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007918:	4b3c      	ldr	r3, [pc, #240]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800791a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800791e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007922:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800792a:	f7fc fc69 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 800792e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007930:	f001 bbc1 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007934:	4b35      	ldr	r3, [pc, #212]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800793c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007940:	d10b      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007948:	d107      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fd8e 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
 8007958:	e047      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800795a:	4b2c      	ldr	r3, [pc, #176]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007966:	d10b      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800796e:	d107      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fee7 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
 800797e:	e034      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007980:	4b22      	ldr	r3, [pc, #136]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b02      	cmp	r3, #2
 800798a:	d10d      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007992:	d109      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007994:	4b1d      	ldr	r3, [pc, #116]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	08db      	lsrs	r3, r3, #3
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	4a1c      	ldr	r2, [pc, #112]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a6:	e020      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80079a8:	4b18      	ldr	r3, [pc, #96]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b4:	d106      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079bc:	d102      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80079be:	4b15      	ldr	r3, [pc, #84]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c2:	e012      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80079c4:	4b11      	ldr	r3, [pc, #68]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d107      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80079d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80079d8:	d103      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80079da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079e6:	f001 bb66 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079ea:	f001 bb64 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80079ee:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079f4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80079f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a00:	f7fc fbfe 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007a04:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a06:	f001 bb56 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a0a:	bf00      	nop
 8007a0c:	44020c00 	.word	0x44020c00
 8007a10:	03d09000 	.word	0x03d09000
 8007a14:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007a18:	4ba1      	ldr	r3, [pc, #644]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a24:	d10b      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a2c:	d107      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fd1c 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3c:	e047      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007a3e:	4b98      	ldr	r3, [pc, #608]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a4a:	d10b      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a52:	d107      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fe75 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	e034      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007a64:	4b8e      	ldr	r3, [pc, #568]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d10d      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007a76:	d109      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a78:	4b89      	ldr	r3, [pc, #548]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	08db      	lsrs	r3, r3, #3
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	4a88      	ldr	r2, [pc, #544]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8a:	e020      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007a8c:	4b84      	ldr	r3, [pc, #528]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a98:	d106      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007aa2:	4b81      	ldr	r3, [pc, #516]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa6:	e012      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007aa8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d107      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007abc:	d103      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac4:	e003      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aca:	f001 baf4 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ace:	f001 baf2 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007ad2:	4b73      	ldr	r3, [pc, #460]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ad4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ae4:	f7fc fb8c 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007ae8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007aea:	f001 bae4 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007aee:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007afa:	d10a      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d107      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b02:	f107 0314 	add.w	r3, r7, #20
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fcb2 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b10:	e043      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007b12:	4b63      	ldr	r3, [pc, #396]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b1e:	d10a      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d107      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fe0c 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b34:	e031      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007b36:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d10c      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d109      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b48:	4b55      	ldr	r3, [pc, #340]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	08db      	lsrs	r3, r3, #3
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	4a54      	ldr	r2, [pc, #336]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5a:	e01e      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007b5c:	4b50      	ldr	r3, [pc, #320]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b68:	d105      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007b70:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b74:	e011      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007b76:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d106      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	2b05      	cmp	r3, #5
 8007b88:	d103      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b90:	e003      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b96:	f001 ba8e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b9a:	f001 ba8c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007b9e:	4b40      	ldr	r3, [pc, #256]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ba0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ba4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ba8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fc fb26 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007bb4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bb6:	f001 ba7e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007bba:	4b39      	ldr	r3, [pc, #228]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bc6:	d10a      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	2b10      	cmp	r3, #16
 8007bcc:	d107      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bce:	f107 0314 	add.w	r3, r7, #20
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fc4c 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bdc:	e043      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007bde:	4b30      	ldr	r3, [pc, #192]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bea:	d10a      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fda6 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c00:	e031      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007c02:	4b27      	ldr	r3, [pc, #156]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d109      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c14:	4b22      	ldr	r3, [pc, #136]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a21      	ldr	r2, [pc, #132]	@ (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c26:	e01e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007c28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c34:	d105      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	2b40      	cmp	r3, #64	@ 0x40
 8007c3a:	d102      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c40:	e011      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007c42:	4b17      	ldr	r3, [pc, #92]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d106      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	2b50      	cmp	r3, #80	@ 0x50
 8007c54:	d103      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5c:	e003      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c62:	f001 ba28 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c66:	f001 ba26 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c70:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007c74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d104      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c7c:	f7fc faec 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 8007c80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c82:	f001 ba18 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c8c:	d10e      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c8e:	f107 0314 	add.w	r3, r7, #20
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fbec 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c9c:	f001 ba0b 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ca0:	44020c00 	.word	0x44020c00
 8007ca4:	03d09000 	.word	0x03d09000
 8007ca8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cb2:	d108      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb4:	f107 0308 	add.w	r3, r7, #8
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe fd45 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cc2:	f001 b9f8 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007cc6:	4ba4      	ldr	r3, [pc, #656]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d10d      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cd8:	d109      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cda:	4b9f      	ldr	r3, [pc, #636]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	08db      	lsrs	r3, r3, #3
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	4a9d      	ldr	r2, [pc, #628]	@ (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cec:	e020      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007cee:	4b9a      	ldr	r3, [pc, #616]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d02:	d102      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007d04:	4b96      	ldr	r3, [pc, #600]	@ (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	e012      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d0a:	4b93      	ldr	r3, [pc, #588]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d107      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007d1e:	d103      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007d20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d26:	e003      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d2c:	f001 b9c3 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d30:	f001 b9c1 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007d34:	4b88      	ldr	r3, [pc, #544]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007d46:	f7fc fa3f 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8007d4a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007d4c:	f001 b9b3 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d104      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d56:	f7fc f90b 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8007d5a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d5c:	f001 b9ab 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d108      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d66:	f107 0314 	add.w	r3, r7, #20
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fb80 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d74:	f001 b99f 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007d78:	4b77      	ldr	r3, [pc, #476]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d84:	d105      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d102      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007d8c:	4b75      	ldr	r3, [pc, #468]	@ (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d90:	e023      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007d92:	4b71      	ldr	r3, [pc, #452]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d10c      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d109      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007da4:	4b6c      	ldr	r3, [pc, #432]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	08db      	lsrs	r3, r3, #3
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	4a6b      	ldr	r2, [pc, #428]	@ (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007db0:	fa22 f303 	lsr.w	r3, r2, r3
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db6:	e010      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007db8:	4b67      	ldr	r3, [pc, #412]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dc4:	d105      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	2b05      	cmp	r3, #5
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007dcc:	4b64      	ldr	r3, [pc, #400]	@ (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd0:	e003      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dd6:	f001 b96e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dda:	f001 b96c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007dde:	4b5e      	ldr	r3, [pc, #376]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007dea:	4b5b      	ldr	r3, [pc, #364]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d106      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e04:	e012      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007e06:	4b54      	ldr	r3, [pc, #336]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e14:	d106      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d103      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007e1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e22:	e003      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007e28:	f001 b945 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e2c:	f001 b943 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007e30:	4b49      	ldr	r3, [pc, #292]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d104      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e42:	f7fc f9dd 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007e46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e48:	f001 b935 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e52:	d108      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e54:	f107 0308 	add.w	r3, r7, #8
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fc75 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e62:	f001 b928 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007e66:	4b3c      	ldr	r3, [pc, #240]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d10d      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e78:	d109      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e7a:	4b37      	ldr	r3, [pc, #220]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	4a35      	ldr	r2, [pc, #212]	@ (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007e86:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e8c:	e011      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007e8e:	4b32      	ldr	r3, [pc, #200]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ea2:	d102      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea8:	e003      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007eae:	f001 b902 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007eb2:	f001 b900 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007eb6:	4b28      	ldr	r3, [pc, #160]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007eb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ebc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007ec0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ec8:	f7fc f99a 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8007ecc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ece:	f001 b8f2 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ed8:	d108      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eda:	f107 0308 	add.w	r3, r7, #8
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fc32 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ee8:	f001 b8e5 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007eec:	4b1a      	ldr	r3, [pc, #104]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d10d      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007efe:	d109      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f00:	4b15      	ldr	r3, [pc, #84]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	08db      	lsrs	r3, r3, #3
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	4a14      	ldr	r2, [pc, #80]	@ (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f12:	e011      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007f14:	4b10      	ldr	r3, [pc, #64]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f20:	d106      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f28:	d102      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f34:	f001 b8bf 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f38:	f001 b8bd 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007f46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10c      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007f4e:	f7fc f983 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 8007f52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f54:	f001 b8af 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f58:	44020c00 	.word	0x44020c00
 8007f5c:	03d09000 	.word	0x03d09000
 8007f60:	003d0900 	.word	0x003d0900
 8007f64:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f6e:	d108      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f70:	f107 0308 	add.w	r3, r7, #8
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fbe7 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f7e:	f001 b89a 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007f82:	4b9f      	ldr	r3, [pc, #636]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d10d      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f94:	d109      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f96:	4b9a      	ldr	r3, [pc, #616]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	08db      	lsrs	r3, r3, #3
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	4a98      	ldr	r2, [pc, #608]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa8:	e011      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007faa:	4b95      	ldr	r3, [pc, #596]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fb6:	d106      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fbe:	d102      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007fc0:	4b91      	ldr	r3, [pc, #580]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc4:	e003      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fca:	f001 b874 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fce:	f001 b872 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fd8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007fdc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007fe4:	f7fc f938 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 8007fe8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fea:	f001 b864 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ff4:	d108      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fba4 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008004:	f001 b857 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008008:	4b7d      	ldr	r3, [pc, #500]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b02      	cmp	r3, #2
 8008012:	d10d      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800801a:	d109      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800801c:	4b78      	ldr	r3, [pc, #480]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	08db      	lsrs	r3, r3, #3
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	4a77      	ldr	r2, [pc, #476]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
 800802e:	e011      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008030:	4b73      	ldr	r3, [pc, #460]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800803c:	d106      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008044:	d102      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008046:	4b70      	ldr	r3, [pc, #448]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
 800804a:	e003      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008050:	f001 b831 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008054:	f001 b82f 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008058:	4b69      	ldr	r3, [pc, #420]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800805a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800805e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008062:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800806a:	f7fc f8c9 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 800806e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008070:	f001 b821 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800807a:	d108      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800807c:	f107 0308 	add.w	r3, r7, #8
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fb61 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800808a:	f001 b814 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800808e:	4b5c      	ldr	r3, [pc, #368]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b02      	cmp	r3, #2
 8008098:	d10e      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080a0:	d10a      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080a2:	4b57      	ldr	r3, [pc, #348]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	08db      	lsrs	r3, r3, #3
 80080a8:	f003 0303 	and.w	r3, r3, #3
 80080ac:	4a55      	ldr	r2, [pc, #340]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80080ae:	fa22 f303 	lsr.w	r3, r2, r3
 80080b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080b4:	f000 bfff 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080bc:	f000 bffb 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080c0:	4b4f      	ldr	r3, [pc, #316]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80080c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80080c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80080d2:	d056      	beq.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80080da:	f200 808b 	bhi.w	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080e4:	d03e      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ec:	f200 8082 	bhi.w	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080f6:	d027      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080fe:	d879      	bhi.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008106:	d017      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810e:	d871      	bhi.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800811c:	d004      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800811e:	e069      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008120:	f7fc f89a 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 8008124:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008126:	e068      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008128:	f107 0314 	add.w	r3, r7, #20
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe f99f 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008136:	e060      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008138:	f107 0308 	add.w	r3, r7, #8
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fb03 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008146:	e058      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008148:	4b2d      	ldr	r3, [pc, #180]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800814a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d103      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800815a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800815c:	e04d      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008162:	e04a      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008164:	4b26      	ldr	r3, [pc, #152]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800816a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800816e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008172:	d103      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008174:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800817a:	e03e      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008180:	e03b      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008182:	4b1f      	ldr	r3, [pc, #124]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008188:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800818c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800818e:	4b1c      	ldr	r3, [pc, #112]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b02      	cmp	r3, #2
 8008198:	d10c      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800819a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081a0:	4b17      	ldr	r3, [pc, #92]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	08db      	lsrs	r3, r3, #3
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	4a16      	ldr	r2, [pc, #88]	@ (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
 80081b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b2:	e01e      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081b4:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c0:	d106      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80081c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c8:	d102      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80081ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80081cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ce:	e010      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081dc:	d106      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80081de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081e4:	d102      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80081e6:	4b09      	ldr	r3, [pc, #36]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ea:	e002      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80081f0:	e003      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80081f2:	e002      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081f8:	bf00      	nop
          }
        }
        break;
 80081fa:	f000 bf5c 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081fe:	bf00      	nop
 8008200:	44020c00 	.word	0x44020c00
 8008204:	03d09000 	.word	0x03d09000
 8008208:	003d0900 	.word	0x003d0900
 800820c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008210:	4b9e      	ldr	r3, [pc, #632]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008212:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008216:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800821a:	633b      	str	r3, [r7, #48]	@ 0x30
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008222:	d056      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800822a:	f200 808b 	bhi.w	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008234:	d03e      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800823c:	f200 8082 	bhi.w	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008246:	d027      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800824e:	d879      	bhi.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008256:	d017      	beq.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800825e:	d871      	bhi.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800826c:	d004      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800826e:	e069      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008270:	f7fb ffc6 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8008274:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008276:	e068      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe f8f7 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008286:	e060      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fa5b 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008296:	e058      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008298:	4b7c      	ldr	r3, [pc, #496]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800829a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d103      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80082a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80082ac:	e04d      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082b2:	e04a      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80082b4:	4b75      	ldr	r3, [pc, #468]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082c2:	d103      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80082c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80082ca:	e03e      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082d0:	e03b      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082d2:	4b6e      	ldr	r3, [pc, #440]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80082dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082de:	4b6b      	ldr	r3, [pc, #428]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d10c      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d109      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082f0:	4b66      	ldr	r3, [pc, #408]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	08db      	lsrs	r3, r3, #3
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	4a65      	ldr	r2, [pc, #404]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008300:	637b      	str	r3, [r7, #52]	@ 0x34
 8008302:	e01e      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008304:	4b61      	ldr	r3, [pc, #388]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800830c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008310:	d106      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008318:	d102      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800831a:	4b5e      	ldr	r3, [pc, #376]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800831c:	637b      	str	r3, [r7, #52]	@ 0x34
 800831e:	e010      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008320:	4b5a      	ldr	r3, [pc, #360]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800832c:	d106      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800832e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008334:	d102      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008336:	4b58      	ldr	r3, [pc, #352]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
 800833a:	e002      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008340:	e003      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008342:	e002      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008348:	bf00      	nop
          }
        }
        break;
 800834a:	f000 beb4 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800834e:	4b4f      	ldr	r3, [pc, #316]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008350:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008354:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008358:	633b      	str	r3, [r7, #48]	@ 0x30
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008360:	d056      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008368:	f200 808b 	bhi.w	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008372:	d03e      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800837a:	f200 8082 	bhi.w	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008384:	d027      	beq.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800838c:	d879      	bhi.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008394:	d017      	beq.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800839c:	d871      	bhi.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083aa:	d004      	beq.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80083ac:	e069      	b.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80083ae:	f7fb ff53 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 80083b2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80083b4:	e068      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe f858 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083c4:	e060      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe f9bc 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083d4:	e058      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80083d6:	4b2d      	ldr	r3, [pc, #180]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d103      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80083e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80083ea:	e04d      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083f0:	e04a      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80083f2:	4b26      	ldr	r3, [pc, #152]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008400:	d103      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008402:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008406:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008408:	e03e      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800840e:	e03b      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008410:	4b1e      	ldr	r3, [pc, #120]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008416:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800841a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800841c:	4b1b      	ldr	r3, [pc, #108]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b02      	cmp	r3, #2
 8008426:	d10c      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800842e:	4b17      	ldr	r3, [pc, #92]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a15      	ldr	r2, [pc, #84]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008440:	e01e      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008442:	4b12      	ldr	r3, [pc, #72]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800844a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800844e:	d106      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008456:	d102      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008458:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800845a:	637b      	str	r3, [r7, #52]	@ 0x34
 800845c:	e010      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800845e:	4b0b      	ldr	r3, [pc, #44]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800846a:	d106      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008472:	d102      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008474:	4b08      	ldr	r3, [pc, #32]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
 8008478:	e002      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800847e:	e003      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008480:	e002      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008486:	bf00      	nop
          }
        }
        break;
 8008488:	f000 be15 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800848c:	44020c00 	.word	0x44020c00
 8008490:	03d09000 	.word	0x03d09000
 8008494:	003d0900 	.word	0x003d0900
 8008498:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800849c:	4b9e      	ldr	r3, [pc, #632]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800849e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084a2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80084a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80084ae:	d056      	beq.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80084b6:	f200 808b 	bhi.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084c0:	d03e      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80084c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084c8:	f200 8082 	bhi.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084d2:	d027      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084da:	d879      	bhi.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084e2:	d017      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ea:	d871      	bhi.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084f8:	d004      	beq.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80084fa:	e069      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80084fc:	f7fb feac 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 8008500:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008502:	e068      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	4618      	mov	r0, r3
 800850a:	f7fd ffb1 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008512:	e060      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe f915 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008522:	e058      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008524:	4b7c      	ldr	r3, [pc, #496]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d103      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008538:	e04d      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800853e:	e04a      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008540:	4b75      	ldr	r3, [pc, #468]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800854a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800854e:	d103      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008550:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008554:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008556:	e03e      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800855c:	e03b      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800855e:	4b6e      	ldr	r3, [pc, #440]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008564:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008568:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800856a:	4b6b      	ldr	r3, [pc, #428]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b02      	cmp	r3, #2
 8008574:	d10c      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d109      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800857c:	4b66      	ldr	r3, [pc, #408]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	08db      	lsrs	r3, r3, #3
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	4a65      	ldr	r2, [pc, #404]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	637b      	str	r3, [r7, #52]	@ 0x34
 800858e:	e01e      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008590:	4b61      	ldr	r3, [pc, #388]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859c:	d106      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a4:	d102      	bne.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80085a6:	4b5e      	ldr	r3, [pc, #376]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80085a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085aa:	e010      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085b8:	d106      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80085ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085c0:	d102      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80085c2:	4b58      	ldr	r3, [pc, #352]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c6:	e002      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80085cc:	e003      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80085ce:	e002      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085d4:	bf00      	nop
          }
        }
        break;
 80085d6:	f000 bd6e 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80085da:	4b4f      	ldr	r3, [pc, #316]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80085dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80085e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80085e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80085ec:	d056      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80085f4:	f200 808b 	bhi.w	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085fe:	d03e      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008606:	f200 8082 	bhi.w	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008610:	d027      	beq.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008618:	d879      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008620:	d017      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008628:	d871      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008636:	d004      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008638:	e069      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800863a:	f7fb fe0d 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 800863e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008640:	e068      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008642:	f107 0314 	add.w	r3, r7, #20
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd ff12 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008650:	e060      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe f876 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008660:	e058      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008662:	4b2d      	ldr	r3, [pc, #180]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b02      	cmp	r3, #2
 800866e:	d103      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008674:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008676:	e04d      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800867c:	e04a      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800867e:	4b26      	ldr	r3, [pc, #152]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800868c:	d103      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800868e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008692:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008694:	e03e      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800869a:	e03b      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800869c:	4b1e      	ldr	r3, [pc, #120]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800869e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086a2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d10c      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80086b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d109      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086ba:	4b17      	ldr	r3, [pc, #92]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	08db      	lsrs	r3, r3, #3
 80086c0:	f003 0303 	and.w	r3, r3, #3
 80086c4:	4a15      	ldr	r2, [pc, #84]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80086c6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80086cc:	e01e      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ce:	4b12      	ldr	r3, [pc, #72]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086da:	d106      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80086dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e2:	d102      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80086e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e8:	e010      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f6:	d106      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086fe:	d102      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008700:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008702:	637b      	str	r3, [r7, #52]	@ 0x34
 8008704:	e002      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800870a:	e003      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800870c:	e002      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008712:	bf00      	nop
          }
        }
        break;
 8008714:	f000 bccf 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008718:	44020c00 	.word	0x44020c00
 800871c:	03d09000 	.word	0x03d09000
 8008720:	003d0900 	.word	0x003d0900
 8008724:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008728:	4b9e      	ldr	r3, [pc, #632]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800872a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800872e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008732:	633b      	str	r3, [r7, #48]	@ 0x30
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800873a:	d056      	beq.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008742:	f200 808b 	bhi.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874c:	d03e      	beq.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008754:	f200 8082 	bhi.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800875e:	d027      	beq.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008766:	d879      	bhi.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800876e:	d017      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008776:	d871      	bhi.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008784:	d004      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008786:	e069      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008788:	f7fb fd66 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 800878c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800878e:	e068      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008790:	f107 0314 	add.w	r3, r7, #20
 8008794:	4618      	mov	r0, r3
 8008796:	f7fd fe6b 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800879e:	e060      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a0:	f107 0308 	add.w	r3, r7, #8
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd ffcf 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087ae:	e058      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087b0:	4b7c      	ldr	r3, [pc, #496]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d103      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80087be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80087c4:	e04d      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087ca:	e04a      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80087cc:	4b75      	ldr	r3, [pc, #468]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087da:	d103      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80087dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80087e2:	e03e      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087e8:	e03b      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087ea:	4b6e      	ldr	r3, [pc, #440]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80087f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087f6:	4b6b      	ldr	r3, [pc, #428]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d10c      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d109      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008808:	4b66      	ldr	r3, [pc, #408]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	08db      	lsrs	r3, r3, #3
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	4a65      	ldr	r2, [pc, #404]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34
 800881a:	e01e      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800881c:	4b61      	ldr	r3, [pc, #388]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008828:	d106      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008830:	d102      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008832:	4b5e      	ldr	r3, [pc, #376]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
 8008836:	e010      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008838:	4b5a      	ldr	r3, [pc, #360]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800884c:	d102      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800884e:	4b58      	ldr	r3, [pc, #352]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008850:	637b      	str	r3, [r7, #52]	@ 0x34
 8008852:	e002      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008858:	e003      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800885a:	e002      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008860:	bf00      	nop
          }
        }
        break;
 8008862:	f000 bc28 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008866:	4b4f      	ldr	r3, [pc, #316]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800886c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008870:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008872:	4b4c      	ldr	r3, [pc, #304]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800887a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800887e:	d106      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008886:	4b4a      	ldr	r3, [pc, #296]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800888a:	f000 bc14 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008894:	d108      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008896:	f107 0320 	add.w	r3, r7, #32
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd fc7c 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a4:	f000 bc07 	b.w	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ae:	d107      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd fddb 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088be:	e3fa      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c4:	e3f7      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80088c6:	4b37      	ldr	r3, [pc, #220]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d861      	bhi.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	080088f5 	.word	0x080088f5
 80088e4:	08008905 	.word	0x08008905
 80088e8:	08008915 	.word	0x08008915
 80088ec:	08008925 	.word	0x08008925
 80088f0:	0800892b 	.word	0x0800892b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f4:	f107 0320 	add.w	r3, r7, #32
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fd fc4d 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008902:	e04e      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008904:	f107 0314 	add.w	r3, r7, #20
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fdb1 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008912:	e046      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd ff15 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008922:	e03e      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008924:	4b23      	ldr	r3, [pc, #140]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008928:	e03b      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800892a:	4b1e      	ldr	r3, [pc, #120]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800892c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008930:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008934:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008936:	4b1b      	ldr	r3, [pc, #108]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b02      	cmp	r3, #2
 8008940:	d10c      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008948:	4b16      	ldr	r3, [pc, #88]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	4a15      	ldr	r2, [pc, #84]	@ (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
 8008958:	637b      	str	r3, [r7, #52]	@ 0x34
 800895a:	e01e      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800895c:	4b11      	ldr	r3, [pc, #68]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008968:	d106      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800896a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008970:	d102      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008972:	4b0e      	ldr	r3, [pc, #56]	@ (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
 8008976:	e010      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008978:	4b0a      	ldr	r3, [pc, #40]	@ (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008984:	d106      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800898c:	d102      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800898e:	4b08      	ldr	r3, [pc, #32]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e002      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008998:	e003      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800899a:	e002      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089a0:	bf00      	nop
          }
        }
        break;
 80089a2:	e388      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089a4:	44020c00 	.word	0x44020c00
 80089a8:	03d09000 	.word	0x03d09000
 80089ac:	003d0900 	.word	0x003d0900
 80089b0:	007a1200 	.word	0x007a1200
 80089b4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80089b8:	4ba9      	ldr	r3, [pc, #676]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	f200 809a 	bhi.w	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80089cc:	a201      	add	r2, pc, #4	@ (adr r2, 80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80089ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d2:	bf00      	nop
 80089d4:	08008a59 	.word	0x08008a59
 80089d8:	08008b01 	.word	0x08008b01
 80089dc:	08008b01 	.word	0x08008b01
 80089e0:	08008b01 	.word	0x08008b01
 80089e4:	08008b01 	.word	0x08008b01
 80089e8:	08008b01 	.word	0x08008b01
 80089ec:	08008b01 	.word	0x08008b01
 80089f0:	08008b01 	.word	0x08008b01
 80089f4:	08008a69 	.word	0x08008a69
 80089f8:	08008b01 	.word	0x08008b01
 80089fc:	08008b01 	.word	0x08008b01
 8008a00:	08008b01 	.word	0x08008b01
 8008a04:	08008b01 	.word	0x08008b01
 8008a08:	08008b01 	.word	0x08008b01
 8008a0c:	08008b01 	.word	0x08008b01
 8008a10:	08008b01 	.word	0x08008b01
 8008a14:	08008a79 	.word	0x08008a79
 8008a18:	08008b01 	.word	0x08008b01
 8008a1c:	08008b01 	.word	0x08008b01
 8008a20:	08008b01 	.word	0x08008b01
 8008a24:	08008b01 	.word	0x08008b01
 8008a28:	08008b01 	.word	0x08008b01
 8008a2c:	08008b01 	.word	0x08008b01
 8008a30:	08008b01 	.word	0x08008b01
 8008a34:	08008a89 	.word	0x08008a89
 8008a38:	08008b01 	.word	0x08008b01
 8008a3c:	08008b01 	.word	0x08008b01
 8008a40:	08008b01 	.word	0x08008b01
 8008a44:	08008b01 	.word	0x08008b01
 8008a48:	08008b01 	.word	0x08008b01
 8008a4c:	08008b01 	.word	0x08008b01
 8008a50:	08008b01 	.word	0x08008b01
 8008a54:	08008a8f 	.word	0x08008a8f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a58:	f107 0320 	add.w	r3, r7, #32
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fd fb9b 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a66:	e04e      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a68:	f107 0314 	add.w	r3, r7, #20
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fd fcff 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a76:	e046      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fd fe63 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a86:	e03e      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008a88:	4b76      	ldr	r3, [pc, #472]	@ (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a8c:	e03b      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a8e:	4b74      	ldr	r3, [pc, #464]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a9a:	4b71      	ldr	r3, [pc, #452]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d10c      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d109      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008aac:	4b6c      	ldr	r3, [pc, #432]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	08db      	lsrs	r3, r3, #3
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abe:	e01e      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac0:	4b67      	ldr	r3, [pc, #412]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008acc:	d106      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad4:	d102      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008ad6:	4b65      	ldr	r3, [pc, #404]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ada:	e010      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008adc:	4b60      	ldr	r3, [pc, #384]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ae8:	d106      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008af0:	d102      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008af2:	4b5f      	ldr	r3, [pc, #380]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af6:	e002      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008afc:	e003      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b04:	bf00      	nop
          }
        }
        break;
 8008b06:	e2d6      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008b08:	4b55      	ldr	r3, [pc, #340]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b0e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b1a:	d031      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b22:	d866      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b28:	d027      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b2e:	d860      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	2b80      	cmp	r3, #128	@ 0x80
 8008b34:	d019      	beq.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	2b80      	cmp	r3, #128	@ 0x80
 8008b3a:	d85a      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d008      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008b48:	e053      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b4a:	f107 0320 	add.w	r3, r7, #32
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fd fb22 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b58:	e04e      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b5a:	f107 0314 	add.w	r3, r7, #20
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fd fc86 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b68:	e046      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b6a:	f107 0308 	add.w	r3, r7, #8
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fd fdea 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b78:	e03e      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b7e:	e03b      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b80:	4b37      	ldr	r3, [pc, #220]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b86:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b8c:	4b34      	ldr	r3, [pc, #208]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d10c      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b9e:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	08db      	lsrs	r3, r3, #3
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	4a2f      	ldr	r2, [pc, #188]	@ (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008baa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb0:	e01e      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bbe:	d106      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc6:	d102      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bc8:	4b28      	ldr	r3, [pc, #160]	@ (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bcc:	e010      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bce:	4b24      	ldr	r3, [pc, #144]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bda:	d106      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008be2:	d102      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008be4:	4b22      	ldr	r3, [pc, #136]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be8:	e002      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bee:	e003      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008bf0:	e002      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bf6:	bf00      	nop
          }
        }
        break;
 8008bf8:	e25d      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008bfa:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c00:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d103      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fb fb0e 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8008c10:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008c12:	e250      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008c14:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c20:	d10b      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c28:	d107      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c2a:	f107 0314 	add.w	r3, r7, #20
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fd fc1e 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c38:	e04f      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008c3a:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c46:	d115      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c4e:	d111      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c50:	f107 0308 	add.w	r3, r7, #8
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fd fd77 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5e:	e03c      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008c60:	44020c00 	.word	0x44020c00
 8008c64:	00bb8000 	.word	0x00bb8000
 8008c68:	03d09000 	.word	0x03d09000
 8008c6c:	003d0900 	.word	0x003d0900
 8008c70:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008c74:	4b94      	ldr	r3, [pc, #592]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d10d      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008c86:	d109      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c88:	4b8f      	ldr	r3, [pc, #572]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	08db      	lsrs	r3, r3, #3
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	4a8e      	ldr	r2, [pc, #568]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008c94:	fa22 f303 	lsr.w	r3, r2, r3
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c9a:	e01e      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ca8:	d106      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cb0:	d102      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008cb2:	4b87      	ldr	r3, [pc, #540]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb6:	e010      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008cb8:	4b83      	ldr	r3, [pc, #524]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc4:	d106      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008ccc:	d102      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008cce:	4b81      	ldr	r3, [pc, #516]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd2:	e002      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cd8:	e1ed      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cda:	e1ec      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008cdc:	4b7a      	ldr	r3, [pc, #488]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ce2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008ce6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008cee:	f7fb fab3 	bl	8004258 <HAL_RCC_GetPCLK3Freq>
 8008cf2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008cf4:	e1df      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008cf6:	4b74      	ldr	r3, [pc, #464]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d02:	d10b      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d0a:	d107      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fd fbad 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1a:	e045      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d28:	d10b      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d30:	d107      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d32:	f107 0308 	add.w	r3, r7, #8
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fd fd06 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d40:	e032      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008d42:	4b61      	ldr	r3, [pc, #388]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d10d      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d54:	d109      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d56:	4b5c      	ldr	r3, [pc, #368]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	4a5a      	ldr	r2, [pc, #360]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	e01e      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008d6a:	4b57      	ldr	r3, [pc, #348]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d76:	d106      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d7e:	d102      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008d80:	4b53      	ldr	r3, [pc, #332]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d84:	e010      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008d86:	4b50      	ldr	r3, [pc, #320]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d92:	d106      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008d9a:	d102      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da0:	e002      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008da6:	e186      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008da8:	e185      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008daa:	4b47      	ldr	r3, [pc, #284]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008db0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008db4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008dbc:	f7fb fa36 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8008dc0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008dc2:	e178      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008dc4:	4b40      	ldr	r3, [pc, #256]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd0:	d10b      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dd8:	d107      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dda:	f107 0314 	add.w	r3, r7, #20
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fd fb46 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de8:	e045      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008dea:	4b37      	ldr	r3, [pc, #220]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df6:	d10b      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fd fc9f 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0e:	e032      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008e10:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d10d      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008e22:	d109      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e24:	4b28      	ldr	r3, [pc, #160]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	4a27      	ldr	r2, [pc, #156]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e36:	e01e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008e38:	4b23      	ldr	r3, [pc, #140]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e44:	d106      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e4c:	d102      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008e4e:	4b20      	ldr	r3, [pc, #128]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e52:	e010      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008e54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e60:	d106      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008e68:	d102      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6e:	e002      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e74:	e11f      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e76:	e11e      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008e78:	4b13      	ldr	r3, [pc, #76]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d85f      	bhi.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008ea9 	.word	0x08008ea9
 8008e98:	08008eb9 	.word	0x08008eb9
 8008e9c:	08008ed9 	.word	0x08008ed9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008ea0:	f7fb f992 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8008ea4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ea6:	e053      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ea8:	f107 0320 	add.w	r3, r7, #32
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fd f973 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008eb6:	e04b      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb8:	f107 0314 	add.w	r3, r7, #20
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fd fad7 	bl	8006470 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ec6:	e043      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008ec8:	44020c00 	.word	0x44020c00
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	003d0900 	.word	0x003d0900
 8008ed4:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ed8:	4b79      	ldr	r3, [pc, #484]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ede:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ee4:	4b76      	ldr	r3, [pc, #472]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d10c      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d109      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ef6:	4b72      	ldr	r3, [pc, #456]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	4a70      	ldr	r2, [pc, #448]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f08:	e01e      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f16:	d106      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f1e:	d102      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f20:	4b69      	ldr	r3, [pc, #420]	@ (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f24:	e010      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f26:	4b66      	ldr	r3, [pc, #408]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f32:	d106      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f3a:	d102      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f3c:	4b63      	ldr	r3, [pc, #396]	@ (80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f40:	e002      	b.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f46:	e003      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008f48:	e002      	b.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f4e:	bf00      	nop
          }
        }
        break;
 8008f50:	e0b1      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008f52:	4b5b      	ldr	r3, [pc, #364]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008f5e:	4b58      	ldr	r3, [pc, #352]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d106      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d103      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f78:	e01f      	b.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008f7a:	4b51      	ldr	r3, [pc, #324]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f88:	d106      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	2b40      	cmp	r3, #64	@ 0x40
 8008f8e:	d103      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008f90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f96:	e010      	b.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008f98:	4b49      	ldr	r3, [pc, #292]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fa4:	d106      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	2b80      	cmp	r3, #128	@ 0x80
 8008faa:	d103      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008fac:	f248 0312 	movw	r3, #32786	@ 0x8012
 8008fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb2:	e002      	b.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008fb8:	e07d      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fba:	e07c      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008fbc:	4b40      	ldr	r3, [pc, #256]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008fc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd4:	d105      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe0:	e031      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008fe2:	4b37      	ldr	r3, [pc, #220]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fee:	d10a      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d107      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff6:	f107 0320 	add.w	r3, r7, #32
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fd f8cc 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	637b      	str	r3, [r7, #52]	@ 0x34
 8009004:	e01f      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009006:	4b2e      	ldr	r3, [pc, #184]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b02      	cmp	r3, #2
 8009012:	d106      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	2b20      	cmp	r3, #32
 8009018:	d103      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800901a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009020:	e011      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009022:	4b27      	ldr	r3, [pc, #156]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800902c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009030:	d106      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	2b30      	cmp	r3, #48	@ 0x30
 8009036:	d103      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009038:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
 800903e:	e002      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009044:	e037      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009046:	e036      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009048:	4b1d      	ldr	r3, [pc, #116]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800904a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800904e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009052:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	2b10      	cmp	r3, #16
 8009058:	d107      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800905a:	f107 0320 	add.w	r3, r7, #32
 800905e:	4618      	mov	r0, r3
 8009060:	f7fd f89a 	bl	8006198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009068:	e025      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800906a:	4b15      	ldr	r3, [pc, #84]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009076:	d10a      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	2b20      	cmp	r3, #32
 800907c:	d107      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907e:	f107 0308 	add.w	r3, r7, #8
 8009082:	4618      	mov	r0, r3
 8009084:	f7fd fb60 	bl	8006748 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
 800908c:	e00f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800908e:	4b0c      	ldr	r3, [pc, #48]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800909a:	d105      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2b30      	cmp	r3, #48	@ 0x30
 80090a0:	d102      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80090a2:	4b0b      	ldr	r3, [pc, #44]	@ (80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a6:	e002      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80090ac:	e003      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090ae:	e002      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090b4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80090b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	373c      	adds	r7, #60	@ 0x3c
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd90      	pop	{r4, r7, pc}
 80090c0:	44020c00 	.word	0x44020c00
 80090c4:	03d09000 	.word	0x03d09000
 80090c8:	003d0900 	.word	0x003d0900
 80090cc:	007a1200 	.word	0x007a1200
 80090d0:	02dc6c00 	.word	0x02dc6c00

080090d4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80090dc:	4b48      	ldr	r3, [pc, #288]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a47      	ldr	r2, [pc, #284]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80090e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80090e8:	f7f8 f89c 	bl	8001224 <HAL_GetTick>
 80090ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090ee:	e008      	b.n	8009102 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090f0:	f7f8 f898 	bl	8001224 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d901      	bls.n	8009102 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e07a      	b.n	80091f8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009102:	4b3f      	ldr	r3, [pc, #252]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f0      	bne.n	80090f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800910e:	4b3c      	ldr	r3, [pc, #240]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009112:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6811      	ldr	r1, [r2, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6852      	ldr	r2, [r2, #4]
 8009122:	0212      	lsls	r2, r2, #8
 8009124:	430a      	orrs	r2, r1
 8009126:	4936      	ldr	r1, [pc, #216]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009128:	4313      	orrs	r3, r2
 800912a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	3b01      	subs	r3, #1
 8009132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	3b01      	subs	r3, #1
 800913c:	025b      	lsls	r3, r3, #9
 800913e:	b29b      	uxth	r3, r3
 8009140:	431a      	orrs	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	3b01      	subs	r3, #1
 8009148:	041b      	lsls	r3, r3, #16
 800914a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	3b01      	subs	r3, #1
 8009156:	061b      	lsls	r3, r3, #24
 8009158:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800915c:	4928      	ldr	r1, [pc, #160]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 800915e:	4313      	orrs	r3, r2
 8009160:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009162:	4b27      	ldr	r3, [pc, #156]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009166:	f023 020c 	bic.w	r2, r3, #12
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	4924      	ldr	r1, [pc, #144]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009170:	4313      	orrs	r3, r2
 8009172:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009174:	4b22      	ldr	r3, [pc, #136]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	f023 0220 	bic.w	r2, r3, #32
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	491f      	ldr	r1, [pc, #124]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009182:	4313      	orrs	r3, r2
 8009184:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009186:	4b1e      	ldr	r3, [pc, #120]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	491c      	ldr	r1, [pc, #112]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009190:	4313      	orrs	r3, r2
 8009192:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009194:	4b1a      	ldr	r3, [pc, #104]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 8009196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009198:	4a19      	ldr	r2, [pc, #100]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 800919a:	f023 0310 	bic.w	r3, r3, #16
 800919e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80091a0:	4b17      	ldr	r3, [pc, #92]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6a12      	ldr	r2, [r2, #32]
 80091b0:	00d2      	lsls	r2, r2, #3
 80091b2:	4913      	ldr	r1, [pc, #76]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80091b8:	4b11      	ldr	r3, [pc, #68]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	4a10      	ldr	r2, [pc, #64]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091be:	f043 0310 	orr.w	r3, r3, #16
 80091c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80091c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80091ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80091d0:	f7f8 f828 	bl	8001224 <HAL_GetTick>
 80091d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091d6:	e008      	b.n	80091ea <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091d8:	f7f8 f824 	bl	8001224 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d901      	bls.n	80091ea <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e006      	b.n	80091f8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091ea:	4b05      	ldr	r3, [pc, #20]	@ (8009200 <RCCEx_PLL2_Config+0x12c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f0      	beq.n	80091d8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80091f6:	2300      	movs	r3, #0

}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	44020c00 	.word	0x44020c00

08009204 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800920c:	4b48      	ldr	r3, [pc, #288]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a47      	ldr	r2, [pc, #284]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 8009212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009216:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009218:	f7f8 f804 	bl	8001224 <HAL_GetTick>
 800921c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800921e:	e008      	b.n	8009232 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009220:	f7f8 f800 	bl	8001224 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b02      	cmp	r3, #2
 800922c:	d901      	bls.n	8009232 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e07a      	b.n	8009328 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009232:	4b3f      	ldr	r3, [pc, #252]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1f0      	bne.n	8009220 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800923e:	4b3c      	ldr	r3, [pc, #240]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 8009240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009242:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	6852      	ldr	r2, [r2, #4]
 8009252:	0212      	lsls	r2, r2, #8
 8009254:	430a      	orrs	r2, r1
 8009256:	4936      	ldr	r1, [pc, #216]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 8009258:	4313      	orrs	r3, r2
 800925a:	630b      	str	r3, [r1, #48]	@ 0x30
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	3b01      	subs	r3, #1
 8009262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	3b01      	subs	r3, #1
 800926c:	025b      	lsls	r3, r3, #9
 800926e:	b29b      	uxth	r3, r3
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	3b01      	subs	r3, #1
 8009278:	041b      	lsls	r3, r3, #16
 800927a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	3b01      	subs	r3, #1
 8009286:	061b      	lsls	r3, r3, #24
 8009288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800928c:	4928      	ldr	r1, [pc, #160]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 800928e:	4313      	orrs	r3, r2
 8009290:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009292:	4b27      	ldr	r3, [pc, #156]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009296:	f023 020c 	bic.w	r2, r3, #12
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	4924      	ldr	r1, [pc, #144]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80092a4:	4b22      	ldr	r3, [pc, #136]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a8:	f023 0220 	bic.w	r2, r3, #32
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	491f      	ldr	r1, [pc, #124]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80092b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	491c      	ldr	r1, [pc, #112]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80092c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c8:	4a19      	ldr	r2, [pc, #100]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092ca:	f023 0310 	bic.w	r3, r3, #16
 80092ce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80092d0:	4b17      	ldr	r3, [pc, #92]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	6a12      	ldr	r2, [r2, #32]
 80092e0:	00d2      	lsls	r2, r2, #3
 80092e2:	4913      	ldr	r1, [pc, #76]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80092e8:	4b11      	ldr	r3, [pc, #68]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ec:	4a10      	ldr	r2, [pc, #64]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092ee:	f043 0310 	orr.w	r3, r3, #16
 80092f2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80092f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a0d      	ldr	r2, [pc, #52]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 80092fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009300:	f7f7 ff90 	bl	8001224 <HAL_GetTick>
 8009304:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009306:	e008      	b.n	800931a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009308:	f7f7 ff8c 	bl	8001224 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e006      	b.n	8009328 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800931a:	4b05      	ldr	r3, [pc, #20]	@ (8009330 <RCCEx_PLL3_Config+0x12c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f0      	beq.n	8009308 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	44020c00 	.word	0x44020c00

08009334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e042      	b.n	80093cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f83b 	bl	80093d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2224      	movs	r2, #36	@ 0x24
 8009362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa20 	bl	80097c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f82f 	bl	80093e8 <UART_SetConfig>
 800938a:	4603      	mov	r3, r0
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e01b      	b.n	80093cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fa9f 	bl	8009908 <UART_CheckIdleState>
 80093ca:	4603      	mov	r3, r0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093ec:	b094      	sub	sp, #80	@ 0x50
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4b78      	ldr	r3, [pc, #480]	@ (80095e0 <UART_SetConfig+0x1f8>)
 80093fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	431a      	orrs	r2, r3
 800940a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	431a      	orrs	r2, r3
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	4313      	orrs	r3, r2
 8009416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4971      	ldr	r1, [pc, #452]	@ (80095e4 <UART_SetConfig+0x1fc>)
 8009420:	4019      	ands	r1, r3
 8009422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009428:	430b      	orrs	r3, r1
 800942a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800942c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009438:	68d9      	ldr	r1, [r3, #12]
 800943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	ea40 0301 	orr.w	r3, r0, r1
 8009442:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b64      	ldr	r3, [pc, #400]	@ (80095e0 <UART_SetConfig+0x1f8>)
 8009450:	429a      	cmp	r2, r3
 8009452:	d009      	beq.n	8009468 <UART_SetConfig+0x80>
 8009454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	4b63      	ldr	r3, [pc, #396]	@ (80095e8 <UART_SetConfig+0x200>)
 800945a:	429a      	cmp	r2, r3
 800945c:	d004      	beq.n	8009468 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	6a1a      	ldr	r2, [r3, #32]
 8009462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009464:	4313      	orrs	r3, r2
 8009466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009472:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800947c:	430b      	orrs	r3, r1
 800947e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009486:	f023 000f 	bic.w	r0, r3, #15
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	ea40 0301 	orr.w	r3, r0, r1
 8009496:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	4b53      	ldr	r3, [pc, #332]	@ (80095ec <UART_SetConfig+0x204>)
 800949e:	429a      	cmp	r2, r3
 80094a0:	d102      	bne.n	80094a8 <UART_SetConfig+0xc0>
 80094a2:	2301      	movs	r3, #1
 80094a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094a6:	e066      	b.n	8009576 <UART_SetConfig+0x18e>
 80094a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	4b50      	ldr	r3, [pc, #320]	@ (80095f0 <UART_SetConfig+0x208>)
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d102      	bne.n	80094b8 <UART_SetConfig+0xd0>
 80094b2:	2302      	movs	r3, #2
 80094b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094b6:	e05e      	b.n	8009576 <UART_SetConfig+0x18e>
 80094b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	4b4d      	ldr	r3, [pc, #308]	@ (80095f4 <UART_SetConfig+0x20c>)
 80094be:	429a      	cmp	r2, r3
 80094c0:	d102      	bne.n	80094c8 <UART_SetConfig+0xe0>
 80094c2:	2304      	movs	r3, #4
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094c6:	e056      	b.n	8009576 <UART_SetConfig+0x18e>
 80094c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	4b4a      	ldr	r3, [pc, #296]	@ (80095f8 <UART_SetConfig+0x210>)
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d102      	bne.n	80094d8 <UART_SetConfig+0xf0>
 80094d2:	2308      	movs	r3, #8
 80094d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094d6:	e04e      	b.n	8009576 <UART_SetConfig+0x18e>
 80094d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4b47      	ldr	r3, [pc, #284]	@ (80095fc <UART_SetConfig+0x214>)
 80094de:	429a      	cmp	r2, r3
 80094e0:	d102      	bne.n	80094e8 <UART_SetConfig+0x100>
 80094e2:	2310      	movs	r3, #16
 80094e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094e6:	e046      	b.n	8009576 <UART_SetConfig+0x18e>
 80094e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	4b44      	ldr	r3, [pc, #272]	@ (8009600 <UART_SetConfig+0x218>)
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d102      	bne.n	80094f8 <UART_SetConfig+0x110>
 80094f2:	2320      	movs	r3, #32
 80094f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094f6:	e03e      	b.n	8009576 <UART_SetConfig+0x18e>
 80094f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	4b41      	ldr	r3, [pc, #260]	@ (8009604 <UART_SetConfig+0x21c>)
 80094fe:	429a      	cmp	r2, r3
 8009500:	d102      	bne.n	8009508 <UART_SetConfig+0x120>
 8009502:	2340      	movs	r3, #64	@ 0x40
 8009504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009506:	e036      	b.n	8009576 <UART_SetConfig+0x18e>
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	4b3e      	ldr	r3, [pc, #248]	@ (8009608 <UART_SetConfig+0x220>)
 800950e:	429a      	cmp	r2, r3
 8009510:	d102      	bne.n	8009518 <UART_SetConfig+0x130>
 8009512:	2380      	movs	r3, #128	@ 0x80
 8009514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009516:	e02e      	b.n	8009576 <UART_SetConfig+0x18e>
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	4b3b      	ldr	r3, [pc, #236]	@ (800960c <UART_SetConfig+0x224>)
 800951e:	429a      	cmp	r2, r3
 8009520:	d103      	bne.n	800952a <UART_SetConfig+0x142>
 8009522:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009528:	e025      	b.n	8009576 <UART_SetConfig+0x18e>
 800952a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4b38      	ldr	r3, [pc, #224]	@ (8009610 <UART_SetConfig+0x228>)
 8009530:	429a      	cmp	r2, r3
 8009532:	d103      	bne.n	800953c <UART_SetConfig+0x154>
 8009534:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800953a:	e01c      	b.n	8009576 <UART_SetConfig+0x18e>
 800953c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	4b34      	ldr	r3, [pc, #208]	@ (8009614 <UART_SetConfig+0x22c>)
 8009542:	429a      	cmp	r2, r3
 8009544:	d103      	bne.n	800954e <UART_SetConfig+0x166>
 8009546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800954a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800954c:	e013      	b.n	8009576 <UART_SetConfig+0x18e>
 800954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	4b31      	ldr	r3, [pc, #196]	@ (8009618 <UART_SetConfig+0x230>)
 8009554:	429a      	cmp	r2, r3
 8009556:	d103      	bne.n	8009560 <UART_SetConfig+0x178>
 8009558:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800955c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800955e:	e00a      	b.n	8009576 <UART_SetConfig+0x18e>
 8009560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	4b1e      	ldr	r3, [pc, #120]	@ (80095e0 <UART_SetConfig+0x1f8>)
 8009566:	429a      	cmp	r2, r3
 8009568:	d103      	bne.n	8009572 <UART_SetConfig+0x18a>
 800956a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800956e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009570:	e001      	b.n	8009576 <UART_SetConfig+0x18e>
 8009572:	2300      	movs	r3, #0
 8009574:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b19      	ldr	r3, [pc, #100]	@ (80095e0 <UART_SetConfig+0x1f8>)
 800957c:	429a      	cmp	r2, r3
 800957e:	d005      	beq.n	800958c <UART_SetConfig+0x1a4>
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b18      	ldr	r3, [pc, #96]	@ (80095e8 <UART_SetConfig+0x200>)
 8009586:	429a      	cmp	r2, r3
 8009588:	f040 8094 	bne.w	80096b4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800958c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800958e:	2200      	movs	r2, #0
 8009590:	623b      	str	r3, [r7, #32]
 8009592:	627a      	str	r2, [r7, #36]	@ 0x24
 8009594:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009598:	f7fd fa42 	bl	8006a20 <HAL_RCCEx_GetPeriphCLKFreq>
 800959c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800959e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 80f7 	beq.w	8009794 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095aa:	4a1c      	ldr	r2, [pc, #112]	@ (800961c <UART_SetConfig+0x234>)
 80095ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b0:	461a      	mov	r2, r3
 80095b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80095b8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	4413      	add	r3, r2
 80095c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d305      	bcc.n	80095d6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d924      	bls.n	8009620 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80095dc:	e069      	b.n	80096b2 <UART_SetConfig+0x2ca>
 80095de:	bf00      	nop
 80095e0:	44002400 	.word	0x44002400
 80095e4:	cfff69f3 	.word	0xcfff69f3
 80095e8:	54002400 	.word	0x54002400
 80095ec:	40013800 	.word	0x40013800
 80095f0:	40004400 	.word	0x40004400
 80095f4:	40004800 	.word	0x40004800
 80095f8:	40004c00 	.word	0x40004c00
 80095fc:	40005000 	.word	0x40005000
 8009600:	40006400 	.word	0x40006400
 8009604:	40007800 	.word	0x40007800
 8009608:	40007c00 	.word	0x40007c00
 800960c:	40008000 	.word	0x40008000
 8009610:	40006800 	.word	0x40006800
 8009614:	40006c00 	.word	0x40006c00
 8009618:	40008400 	.word	0x40008400
 800961c:	0800ec2c 	.word	0x0800ec2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009622:	2200      	movs	r2, #0
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	61fa      	str	r2, [r7, #28]
 8009628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962c:	4a64      	ldr	r2, [pc, #400]	@ (80097c0 <UART_SetConfig+0x3d8>)
 800962e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009632:	b29b      	uxth	r3, r3
 8009634:	2200      	movs	r2, #0
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	617a      	str	r2, [r7, #20]
 800963a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800963e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009642:	f7f6 fe2b 	bl	800029c <__aeabi_uldivmod>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4610      	mov	r0, r2
 800964c:	4619      	mov	r1, r3
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	020b      	lsls	r3, r1, #8
 8009658:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800965c:	0202      	lsls	r2, r0, #8
 800965e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009660:	6849      	ldr	r1, [r1, #4]
 8009662:	0849      	lsrs	r1, r1, #1
 8009664:	2000      	movs	r0, #0
 8009666:	460c      	mov	r4, r1
 8009668:	4605      	mov	r5, r0
 800966a:	eb12 0804 	adds.w	r8, r2, r4
 800966e:	eb43 0905 	adc.w	r9, r3, r5
 8009672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	60bb      	str	r3, [r7, #8]
 800967a:	60fa      	str	r2, [r7, #12]
 800967c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009680:	4640      	mov	r0, r8
 8009682:	4649      	mov	r1, r9
 8009684:	f7f6 fe0a 	bl	800029c <__aeabi_uldivmod>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4613      	mov	r3, r2
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009696:	d308      	bcc.n	80096aa <UART_SetConfig+0x2c2>
 8009698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800969a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800969e:	d204      	bcs.n	80096aa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80096a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096a6:	60da      	str	r2, [r3, #12]
 80096a8:	e003      	b.n	80096b2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80096b0:	e070      	b.n	8009794 <UART_SetConfig+0x3ac>
 80096b2:	e06f      	b.n	8009794 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096bc:	d13c      	bne.n	8009738 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80096be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c0:	2200      	movs	r2, #0
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	607a      	str	r2, [r7, #4]
 80096c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096ca:	f7fd f9a9 	bl	8006a20 <HAL_RCCEx_GetPeriphCLKFreq>
 80096ce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d05e      	beq.n	8009794 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096da:	4a39      	ldr	r2, [pc, #228]	@ (80097c0 <UART_SetConfig+0x3d8>)
 80096dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096e8:	005a      	lsls	r2, r3, #1
 80096ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	085b      	lsrs	r3, r3, #1
 80096f0:	441a      	add	r2, r3
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fe:	2b0f      	cmp	r3, #15
 8009700:	d916      	bls.n	8009730 <UART_SetConfig+0x348>
 8009702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009708:	d212      	bcs.n	8009730 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800970a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800970c:	b29b      	uxth	r3, r3
 800970e:	f023 030f 	bic.w	r3, r3, #15
 8009712:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009716:	085b      	lsrs	r3, r3, #1
 8009718:	b29b      	uxth	r3, r3
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	b29a      	uxth	r2, r3
 8009720:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009722:	4313      	orrs	r3, r2
 8009724:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800972c:	60da      	str	r2, [r3, #12]
 800972e:	e031      	b.n	8009794 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009736:	e02d      	b.n	8009794 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800973a:	2200      	movs	r2, #0
 800973c:	469a      	mov	sl, r3
 800973e:	4693      	mov	fp, r2
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7fd f96c 	bl	8006a20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009748:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800974a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800974c:	2b00      	cmp	r3, #0
 800974e:	d021      	beq.n	8009794 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009754:	4a1a      	ldr	r2, [pc, #104]	@ (80097c0 <UART_SetConfig+0x3d8>)
 8009756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800975a:	461a      	mov	r2, r3
 800975c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800975e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	085b      	lsrs	r3, r3, #1
 8009768:	441a      	add	r2, r3
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009776:	2b0f      	cmp	r3, #15
 8009778:	d909      	bls.n	800978e <UART_SetConfig+0x3a6>
 800977a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009780:	d205      	bcs.n	800978e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009784:	b29a      	uxth	r2, r3
 8009786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60da      	str	r2, [r3, #12]
 800978c:	e002      	b.n	8009794 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	2201      	movs	r2, #1
 8009798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979e:	2201      	movs	r2, #1
 80097a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a6:	2200      	movs	r2, #0
 80097a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ac:	2200      	movs	r2, #0
 80097ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3750      	adds	r7, #80	@ 0x50
 80097b8:	46bd      	mov	sp, r7
 80097ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097be:	bf00      	nop
 80097c0:	0800ec2c 	.word	0x0800ec2c

080097c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009836:	f003 0304 	and.w	r3, r3, #4
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00a      	beq.n	8009876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	430a      	orrs	r2, r1
 8009896:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01a      	beq.n	80098da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c2:	d10a      	bne.n	80098da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	605a      	str	r2, [r3, #4]
  }
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b098      	sub	sp, #96	@ 0x60
 800990c:	af02      	add	r7, sp, #8
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009918:	f7f7 fc84 	bl	8001224 <HAL_GetTick>
 800991c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0308 	and.w	r3, r3, #8
 8009928:	2b08      	cmp	r3, #8
 800992a:	d12f      	bne.n	800998c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800992c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009934:	2200      	movs	r2, #0
 8009936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f88e 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d022      	beq.n	800998c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800995a:	653b      	str	r3, [r7, #80]	@ 0x50
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009964:	647b      	str	r3, [r7, #68]	@ 0x44
 8009966:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800996a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e6      	bne.n	8009946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e063      	b.n	8009a54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b04      	cmp	r3, #4
 8009998:	d149      	bne.n	8009a2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a2:	2200      	movs	r2, #0
 80099a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f857 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d03c      	beq.n	8009a2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	623b      	str	r3, [r7, #32]
   return(result);
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e6      	bne.n	80099b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a06:	61fa      	str	r2, [r7, #28]
 8009a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	69b9      	ldr	r1, [r7, #24]
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	617b      	str	r3, [r7, #20]
   return(result);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e5      	bne.n	80099e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e012      	b.n	8009a54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3758      	adds	r7, #88	@ 0x58
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a6c:	e04f      	b.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a74:	d04b      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a76:	f7f7 fbd5 	bl	8001224 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d302      	bcc.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e04e      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d037      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b80      	cmp	r3, #128	@ 0x80
 8009aa2:	d034      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b40      	cmp	r3, #64	@ 0x40
 8009aa8:	d031      	beq.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d110      	bne.n	8009ada <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2208      	movs	r2, #8
 8009abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f838 	bl	8009b36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2208      	movs	r2, #8
 8009aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e029      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae8:	d111      	bne.n	8009b0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f81e 	bl	8009b36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e00f      	b.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4013      	ands	r3, r2
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	bf0c      	ite	eq
 8009b1e:	2301      	moveq	r3, #1
 8009b20:	2300      	movne	r3, #0
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d0a0      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b095      	sub	sp, #84	@ 0x54
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e6      	bne.n	8009b3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3308      	adds	r3, #8
 8009b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b86:	f023 0301 	bic.w	r3, r3, #1
 8009b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3308      	adds	r3, #8
 8009b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e3      	bne.n	8009b70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d118      	bne.n	8009be2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f023 0310 	bic.w	r3, r3, #16
 8009bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bce:	61bb      	str	r3, [r7, #24]
 8009bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6979      	ldr	r1, [r7, #20]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	613b      	str	r3, [r7, #16]
   return(result);
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e6      	bne.n	8009bb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bf6:	bf00      	nop
 8009bf8:	3754      	adds	r7, #84	@ 0x54
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1a:	f043 0201 	orr.w	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009c30:	b084      	sub	sp, #16
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	f107 001c 	add.w	r0, r7, #28
 8009c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e008      	b.n	8009c5e <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff ffd8 	bl	8009c02 <USB_CoreReset>
 8009c52:	4603      	mov	r3, r0
 8009c54:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c68:	b004      	add	sp, #16
 8009c6a:	4770      	bx	lr

08009c6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c7a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009c7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c9c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009ca0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	43db      	mvns	r3, r3
 8009caa:	401a      	ands	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	641a      	str	r2, [r3, #64]	@ 0x40
 8009cdc:	e00b      	b.n	8009cf6 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d106      	bne.n	8009cf2 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	641a      	str	r2, [r3, #64]	@ 0x40
 8009cf0:	e001      	b.n	8009cf6 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009d04:	b084      	sub	sp, #16
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	f107 001c 	add.w	r0, r7, #28
 8009d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d20:	f023 0201 	bic.w	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009d28:	2100      	movs	r1, #0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff ffc7 	bl	8009cbe <USB_SetCurrentMode>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d46:	b004      	add	sp, #16
 8009d48:	4770      	bx	lr
	...

08009d4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b09f      	sub	sp, #124	@ 0x7c
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4ba0      	ldr	r3, [pc, #640]	@ (8009fec <USB_ActivateEndpoint+0x2a0>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	78db      	ldrb	r3, [r3, #3]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d819      	bhi.n	8009daa <USB_ActivateEndpoint+0x5e>
 8009d76:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <USB_ActivateEndpoint+0x30>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d8d 	.word	0x08009d8d
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	08009db3 	.word	0x08009db3
 8009d88:	08009d97 	.word	0x08009d97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009d8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d92:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009d94:	e00e      	b.n	8009db4 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d98:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009d9c:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009d9e:	e009      	b.n	8009db4 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009da0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009da6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009da8:	e004      	b.n	8009db4 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8009db0:	e000      	b.n	8009db4 <USB_ActivateEndpoint+0x68>
      break;
 8009db2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	441a      	add	r2, r3
 8009dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc8:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	4b86      	ldr	r3, [pc, #536]	@ (8009ff0 <USB_ActivateEndpoint+0x2a4>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	441a      	add	r2, r3
 8009dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df6:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	7b1b      	ldrb	r3, [r3, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 8177 	bne.w	800a0f0 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d079      	beq.n	8009efe <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009e28:	0c12      	lsrs	r2, r2, #16
 8009e2a:	0412      	lsls	r2, r2, #16
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009e3c:	6819      	ldr	r1, [r3, #0]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	089b      	lsrs	r3, r3, #2
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	009a      	lsls	r2, r3, #2
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009e56:	430a      	orrs	r2, r1
 8009e58:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d013      	beq.n	8009e9a <USB_ActivateEndpoint+0x14e>
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ff0 <USB_ActivateEndpoint+0x2a4>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	441a      	add	r2, r3
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e98:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	78db      	ldrb	r3, [r3, #3]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d018      	beq.n	8009ed4 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4b51      	ldr	r3, [pc, #324]	@ (8009ff4 <USB_ActivateEndpoint+0x2a8>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f083 0320 	eor.w	r3, r3, #32
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	441a      	add	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed0:	6013      	str	r3, [r2, #0]
 8009ed2:	e28c      	b.n	800a3ee <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	4b44      	ldr	r3, [pc, #272]	@ (8009ff4 <USB_ActivateEndpoint+0x2a8>)
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	441a      	add	r2, r3
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	e277      	b.n	800a3ee <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f1c:	0c12      	lsrs	r2, r2, #16
 8009f1e:	0412      	lsls	r2, r2, #16
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f30:	6859      	ldr	r1, [r3, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	88db      	ldrh	r3, [r3, #6]
 8009f36:	089b      	lsrs	r3, r3, #2
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	009a      	lsls	r2, r3, #2
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f6c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009f70:	605a      	str	r2, [r3, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d112      	bne.n	8009fa0 <USB_ActivateEndpoint+0x254>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009f98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009f9c:	605a      	str	r2, [r3, #4]
 8009f9e:	e04d      	b.n	800a03c <USB_ActivateEndpoint+0x2f0>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fa6:	d827      	bhi.n	8009ff8 <USB_ActivateEndpoint+0x2ac>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <USB_ActivateEndpoint+0x276>
 8009fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009fcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009fd0:	6859      	ldr	r1, [r3, #4]
 8009fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd4:	069a      	lsls	r2, r3, #26
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009fe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	e028      	b.n	800a03c <USB_ActivateEndpoint+0x2f0>
 8009fea:	bf00      	nop
 8009fec:	07ff898f 	.word	0x07ff898f
 8009ff0:	07ff8f8f 	.word	0x07ff8f8f
 8009ff4:	07ff8fbf 	.word	0x07ff8fbf
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	095b      	lsrs	r3, r3, #5
 8009ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f003 031f 	and.w	r3, r3, #31
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <USB_ActivateEndpoint+0x2c6>
 800a00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a00e:	3b01      	subs	r3, #1
 800a010:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a01c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a024:	069b      	lsls	r3, r3, #26
 800a026:	431a      	orrs	r2, r3
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a032:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a036:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a03a:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d013      	beq.n	800a07c <USB_ActivateEndpoint+0x330>
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	4b9c      	ldr	r3, [pc, #624]	@ (800a2d4 <USB_ActivateEndpoint+0x588>)
 800a062:	4013      	ands	r3, r2
 800a064:	627b      	str	r3, [r7, #36]	@ 0x24
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	441a      	add	r2, r3
 800a070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a072:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d11c      	bne.n	800a0be <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	4b91      	ldr	r3, [pc, #580]	@ (800a2d8 <USB_ActivateEndpoint+0x58c>)
 800a092:	4013      	ands	r3, r2
 800a094:	61fb      	str	r3, [r7, #28]
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	441a      	add	r2, r3
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	e197      	b.n	800a3ee <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b83      	ldr	r3, [pc, #524]	@ (800a2d8 <USB_ActivateEndpoint+0x58c>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	623b      	str	r3, [r7, #32]
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a0d6:	623b      	str	r3, [r7, #32]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	441a      	add	r2, r3
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	e17e      	b.n	800a3ee <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	78db      	ldrb	r3, [r3, #3]
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d114      	bne.n	800a122 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b73      	ldr	r3, [pc, #460]	@ (800a2d4 <USB_ActivateEndpoint+0x588>)
 800a106:	4013      	ands	r3, r2
 800a108:	663b      	str	r3, [r7, #96]	@ 0x60
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	441a      	add	r2, r3
 800a114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a116:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	e013      	b.n	800a14a <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b6b      	ldr	r3, [pc, #428]	@ (800a2dc <USB_ActivateEndpoint+0x590>)
 800a130:	4013      	ands	r3, r2
 800a132:	667b      	str	r3, [r7, #100]	@ 0x64
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	441a      	add	r2, r3
 800a13e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a148:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a154:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a164:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a168:	0c12      	lsrs	r2, r2, #16
 800a16a:	0412      	lsls	r2, r2, #16
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a178:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	891b      	ldrh	r3, [r3, #8]
 800a182:	089b      	lsrs	r3, r3, #2
 800a184:	b29b      	uxth	r3, r3
 800a186:	009a      	lsls	r2, r3, #2
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a192:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a196:	430a      	orrs	r2, r1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a1b8:	0c12      	lsrs	r2, r2, #16
 800a1ba:	0412      	lsls	r2, r2, #16
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	00db      	lsls	r3, r3, #3
 800a1c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a1cc:	6859      	ldr	r1, [r3, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	895b      	ldrh	r3, [r3, #10]
 800a1d2:	089b      	lsrs	r3, r3, #2
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	009a      	lsls	r2, r3, #2
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d178      	bne.n	800a2e4 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800a200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d013      	beq.n	800a232 <USB_ActivateEndpoint+0x4e6>
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	4b2f      	ldr	r3, [pc, #188]	@ (800a2d4 <USB_ActivateEndpoint+0x588>)
 800a218:	4013      	ands	r3, r2
 800a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	441a      	add	r2, r3
 800a226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a228:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a22c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a230:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d013      	beq.n	800a272 <USB_ActivateEndpoint+0x526>
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b1f      	ldr	r3, [pc, #124]	@ (800a2d4 <USB_ActivateEndpoint+0x588>)
 800a258:	4013      	ands	r3, r2
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a26c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a270:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b16      	ldr	r3, [pc, #88]	@ (800a2d8 <USB_ActivateEndpoint+0x58c>)
 800a280:	4013      	ands	r3, r2
 800a282:	633b      	str	r3, [r7, #48]	@ 0x30
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a28a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a292:	633b      	str	r3, [r7, #48]	@ 0x30
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	441a      	add	r2, r3
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a8:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <USB_ActivateEndpoint+0x594>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	441a      	add	r2, r3
 800a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	e08c      	b.n	800a3ee <USB_ActivateEndpoint+0x6a2>
 800a2d4:	07ff8f8f 	.word	0x07ff8f8f
 800a2d8:	07ffbf8f 	.word	0x07ffbf8f
 800a2dc:	07ff8e8f 	.word	0x07ff8e8f
 800a2e0:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d013      	beq.n	800a324 <USB_ActivateEndpoint+0x5d8>
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	4b3d      	ldr	r3, [pc, #244]	@ (800a400 <USB_ActivateEndpoint+0x6b4>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	441a      	add	r2, r3
 800a318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a31a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a322:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	657b      	str	r3, [r7, #84]	@ 0x54
 800a332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d013      	beq.n	800a364 <USB_ActivateEndpoint+0x618>
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	4b2d      	ldr	r3, [pc, #180]	@ (800a400 <USB_ActivateEndpoint+0x6b4>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	441a      	add	r2, r3
 800a358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a35e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a362:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	78db      	ldrb	r3, [r3, #3]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d018      	beq.n	800a39e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	4b22      	ldr	r3, [pc, #136]	@ (800a404 <USB_ActivateEndpoint+0x6b8>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a37e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a380:	f083 0320 	eor.w	r3, r3, #32
 800a384:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	441a      	add	r2, r3
 800a390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	e013      	b.n	800a3c6 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b16      	ldr	r3, [pc, #88]	@ (800a404 <USB_ActivateEndpoint+0x6b8>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	441a      	add	r2, r3
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c4:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a408 <USB_ActivateEndpoint+0x6bc>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	441a      	add	r2, r3
 800a3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ec:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a3ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	377c      	adds	r7, #124	@ 0x7c
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	07ff8f8f 	.word	0x07ff8f8f
 800a404:	07ff8fbf 	.word	0x07ff8fbf
 800a408:	07ffbf8f 	.word	0x07ffbf8f

0800a40c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b097      	sub	sp, #92	@ 0x5c
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	7b1b      	ldrb	r3, [r3, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d16d      	bne.n	800a4fa <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	785b      	ldrb	r3, [r3, #1]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d034      	beq.n	800a490 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d013      	beq.n	800a466 <USB_DeactivateEndpoint+0x5a>
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b6d      	ldr	r3, [pc, #436]	@ (800a600 <USB_DeactivateEndpoint+0x1f4>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	441a      	add	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a464:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4b64      	ldr	r3, [pc, #400]	@ (800a604 <USB_DeactivateEndpoint+0x1f8>)
 800a474:	4013      	ands	r3, r2
 800a476:	60bb      	str	r3, [r7, #8]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	441a      	add	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	e139      	b.n	800a704 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	61fb      	str	r3, [r7, #28]
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d013      	beq.n	800a4d0 <USB_DeactivateEndpoint+0xc4>
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	4b52      	ldr	r3, [pc, #328]	@ (800a600 <USB_DeactivateEndpoint+0x1f4>)
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	61bb      	str	r3, [r7, #24]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	441a      	add	r2, r3
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ce:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	4b4a      	ldr	r3, [pc, #296]	@ (800a608 <USB_DeactivateEndpoint+0x1fc>)
 800a4de:	4013      	ands	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	441a      	add	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	e104      	b.n	800a704 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	785b      	ldrb	r3, [r3, #1]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 8084 	bne.w	800a60c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d013      	beq.n	800a544 <USB_DeactivateEndpoint+0x138>
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	4b35      	ldr	r3, [pc, #212]	@ (800a600 <USB_DeactivateEndpoint+0x1f4>)
 800a52a:	4013      	ands	r3, r2
 800a52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	441a      	add	r2, r3
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a53e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a542:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	633b      	str	r3, [r7, #48]	@ 0x30
 800a552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d013      	beq.n	800a584 <USB_DeactivateEndpoint+0x178>
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	4b25      	ldr	r3, [pc, #148]	@ (800a600 <USB_DeactivateEndpoint+0x1f4>)
 800a56a:	4013      	ands	r3, r2
 800a56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	441a      	add	r2, r3
 800a578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a57e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a582:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	4b1b      	ldr	r3, [pc, #108]	@ (800a600 <USB_DeactivateEndpoint+0x1f4>)
 800a592:	4013      	ands	r3, r2
 800a594:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	441a      	add	r2, r3
 800a5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a5aa:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4b13      	ldr	r3, [pc, #76]	@ (800a608 <USB_DeactivateEndpoint+0x1fc>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	441a      	add	r2, r3
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5d2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	4b08      	ldr	r3, [pc, #32]	@ (800a604 <USB_DeactivateEndpoint+0x1f8>)
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	623b      	str	r3, [r7, #32]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	441a      	add	r2, r3
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	e082      	b.n	800a704 <USB_DeactivateEndpoint+0x2f8>
 800a5fe:	bf00      	nop
 800a600:	07ff8f8f 	.word	0x07ff8f8f
 800a604:	07ff8fbf 	.word	0x07ff8fbf
 800a608:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	657b      	str	r3, [r7, #84]	@ 0x54
 800a61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a61c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d013      	beq.n	800a64c <USB_DeactivateEndpoint+0x240>
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	4b38      	ldr	r3, [pc, #224]	@ (800a714 <USB_DeactivateEndpoint+0x308>)
 800a632:	4013      	ands	r3, r2
 800a634:	653b      	str	r3, [r7, #80]	@ 0x50
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	441a      	add	r2, r3
 800a640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a642:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a64a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a65a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	d013      	beq.n	800a68c <USB_DeactivateEndpoint+0x280>
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	4b28      	ldr	r3, [pc, #160]	@ (800a714 <USB_DeactivateEndpoint+0x308>)
 800a672:	4013      	ands	r3, r2
 800a674:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	441a      	add	r2, r3
 800a680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a686:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a68a:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	4b1e      	ldr	r3, [pc, #120]	@ (800a714 <USB_DeactivateEndpoint+0x308>)
 800a69a:	4013      	ands	r3, r2
 800a69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	441a      	add	r2, r3
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6b2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	4b15      	ldr	r3, [pc, #84]	@ (800a718 <USB_DeactivateEndpoint+0x30c>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	441a      	add	r2, r3
 800a6d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6da:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a71c <USB_DeactivateEndpoint+0x310>)
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a702:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	375c      	adds	r7, #92	@ 0x5c
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	07ff8f8f 	.word	0x07ff8f8f
 800a718:	07ff8fbf 	.word	0x07ff8fbf
 800a71c:	07ffbf8f 	.word	0x07ffbf8f

0800a720 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b096      	sub	sp, #88	@ 0x58
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	785b      	ldrb	r3, [r3, #1]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	f040 84ed 	bne.w	800b10e <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	699a      	ldr	r2, [r3, #24]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d903      	bls.n	800a748 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	657b      	str	r3, [r7, #84]	@ 0x54
 800a746:	e002      	b.n	800a74e <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	7b1b      	ldrb	r3, [r3, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d12e      	bne.n	800a7b4 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	6959      	ldr	r1, [r3, #20]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	88da      	ldrh	r2, [r3, #6]
 800a75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a760:	b29b      	uxth	r3, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f963 	bl	800ba2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a772:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	00db      	lsls	r3, r3, #3
 800a77e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a782:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a786:	b292      	uxth	r2, r2
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a794:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a798:	6819      	ldr	r1, [r3, #0]
 800a79a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a79c:	041a      	lsls	r2, r3, #16
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a7a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	f000 bc90 	b.w	800b0d4 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	78db      	ldrb	r3, [r3, #3]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	f040 8332 	bne.w	800ae22 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	6a1a      	ldr	r2, [r3, #32]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	f240 82e4 	bls.w	800ad94 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4ba4      	ldr	r3, [pc, #656]	@ (800aa6c <USB_EPStartXfer+0x34c>)
 800a7da:	4013      	ands	r3, r2
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	441a      	add	r2, r3
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7f2:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	6a1a      	ldr	r2, [r3, #32]
 800a7f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7fa:	1ad2      	subs	r2, r2, r3
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 8161 	beq.w	800aad8 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	785b      	ldrb	r3, [r3, #1]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d16a      	bne.n	800a8f4 <USB_EPStartXfer+0x1d4>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a828:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a83c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800a840:	605a      	str	r2, [r3, #4]
 800a842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a844:	2b00      	cmp	r3, #0
 800a846:	d112      	bne.n	800a86e <USB_EPStartXfer+0x14e>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a852:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a862:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a866:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a86a:	605a      	str	r2, [r3, #4]
 800a86c:	e06a      	b.n	800a944 <USB_EPStartXfer+0x224>
 800a86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a870:	2b3e      	cmp	r3, #62	@ 0x3e
 800a872:	d81e      	bhi.n	800a8b2 <USB_EPStartXfer+0x192>
 800a874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	653b      	str	r3, [r7, #80]	@ 0x50
 800a87a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <USB_EPStartXfer+0x16a>
 800a884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a886:	3301      	adds	r3, #1
 800a888:	653b      	str	r3, [r7, #80]	@ 0x50
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a894:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a898:	6859      	ldr	r1, [r3, #4]
 800a89a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a89c:	069a      	lsls	r2, r3, #26
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a8a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	605a      	str	r2, [r3, #4]
 800a8b0:	e048      	b.n	800a944 <USB_EPStartXfer+0x224>
 800a8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8b4:	095b      	lsrs	r3, r3, #5
 800a8b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8ba:	f003 031f 	and.w	r3, r3, #31
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <USB_EPStartXfer+0x1a8>
 800a8c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a8d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8da:	069b      	lsls	r3, r3, #26
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a8e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a8ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	e027      	b.n	800a944 <USB_EPStartXfer+0x224>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d123      	bne.n	800a944 <USB_EPStartXfer+0x224>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a906:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a916:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a91a:	b292      	uxth	r2, r2
 800a91c:	605a      	str	r2, [r3, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a928:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a92c:	6859      	ldr	r1, [r3, #4]
 800a92e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a930:	041a      	lsls	r2, r3, #16
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a93c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a940:	430a      	orrs	r2, r1
 800a942:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	895b      	ldrh	r3, [r3, #10]
 800a948:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	6959      	ldr	r1, [r3, #20]
 800a94e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a950:	b29b      	uxth	r3, r3
 800a952:	8b7a      	ldrh	r2, [r7, #26]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 f86a 	bl	800ba2e <USB_WritePMA>
            ep->xfer_buff += len;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	695a      	ldr	r2, [r3, #20]
 800a95e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a960:	441a      	add	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	6a1a      	ldr	r2, [r3, #32]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d906      	bls.n	800a980 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	6a1a      	ldr	r2, [r3, #32]
 800a976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	621a      	str	r2, [r3, #32]
 800a97e:	e005      	b.n	800a98c <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2200      	movs	r2, #0
 800a98a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d16d      	bne.n	800aa70 <USB_EPStartXfer+0x350>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a99e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a9ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a9b2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d112      	bne.n	800a9e4 <USB_EPStartXfer+0x2c4>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a9c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a9d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800a9dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	e06d      	b.n	800aac0 <USB_EPStartXfer+0x3a0>
 800a9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9e8:	d81e      	bhi.n	800aa28 <USB_EPStartXfer+0x308>
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ec:	085b      	lsrs	r3, r3, #1
 800a9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <USB_EPStartXfer+0x2e0>
 800a9fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa12:	069a      	lsls	r2, r3, #26
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aa22:	430a      	orrs	r2, r1
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	e04b      	b.n	800aac0 <USB_EPStartXfer+0x3a0>
 800aa28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa2a:	095b      	lsrs	r3, r3, #5
 800aa2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa30:	f003 031f 	and.w	r3, r3, #31
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <USB_EPStartXfer+0x31e>
 800aa38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa50:	069b      	lsls	r3, r3, #26
 800aa52:	431a      	orrs	r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aa62:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	e02a      	b.n	800aac0 <USB_EPStartXfer+0x3a0>
 800aa6a:	bf00      	nop
 800aa6c:	07ff8f8f 	.word	0x07ff8f8f
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	785b      	ldrb	r3, [r3, #1]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d123      	bne.n	800aac0 <USB_EPStartXfer+0x3a0>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aa96:	b292      	uxth	r2, r2
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aaa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aaa8:	6819      	ldr	r1, [r3, #0]
 800aaaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaac:	041a      	lsls	r2, r3, #16
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aab8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aabc:	430a      	orrs	r2, r1
 800aabe:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	891b      	ldrh	r3, [r3, #8]
 800aac4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6959      	ldr	r1, [r3, #20]
 800aaca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aacc:	b29b      	uxth	r3, r3
 800aace:	8b7a      	ldrh	r2, [r7, #26]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 ffac 	bl	800ba2e <USB_WritePMA>
 800aad6:	e2fd      	b.n	800b0d4 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	785b      	ldrb	r3, [r3, #1]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d16a      	bne.n	800abb6 <USB_EPStartXfer+0x496>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aaea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	00db      	lsls	r3, r3, #3
 800aaf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aafa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aafe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d112      	bne.n	800ab30 <USB_EPStartXfer+0x410>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	e06a      	b.n	800ac06 <USB_EPStartXfer+0x4e6>
 800ab30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab32:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab34:	d81e      	bhi.n	800ab74 <USB_EPStartXfer+0x454>
 800ab36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <USB_EPStartXfer+0x42c>
 800ab46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab48:	3301      	adds	r3, #1
 800ab4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab5a:	6819      	ldr	r1, [r3, #0]
 800ab5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab5e:	069a      	lsls	r2, r3, #26
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	00db      	lsls	r3, r3, #3
 800ab66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e048      	b.n	800ac06 <USB_EPStartXfer+0x4e6>
 800ab74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab76:	095b      	lsrs	r3, r3, #5
 800ab78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab7c:	f003 031f 	and.w	r3, r3, #31
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <USB_EPStartXfer+0x46a>
 800ab84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab86:	3b01      	subs	r3, #1
 800ab88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab9c:	069b      	lsls	r3, r3, #26
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800abae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	e027      	b.n	800ac06 <USB_EPStartXfer+0x4e6>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d123      	bne.n	800ac06 <USB_EPStartXfer+0x4e6>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800abdc:	b292      	uxth	r2, r2
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800abee:	6819      	ldr	r1, [r3, #0]
 800abf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf2:	041a      	lsls	r2, r3, #16
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	00db      	lsls	r3, r3, #3
 800abfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac02:	430a      	orrs	r2, r1
 800ac04:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	891b      	ldrh	r3, [r3, #8]
 800ac0a:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	6959      	ldr	r1, [r3, #20]
 800ac10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	8b7a      	ldrh	r2, [r7, #26]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 ff09 	bl	800ba2e <USB_WritePMA>
            ep->xfer_buff += len;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	695a      	ldr	r2, [r3, #20]
 800ac20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac22:	441a      	add	r2, r3
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	6a1a      	ldr	r2, [r3, #32]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d906      	bls.n	800ac42 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6a1a      	ldr	r2, [r3, #32]
 800ac38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac3a:	1ad2      	subs	r2, r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	621a      	str	r2, [r3, #32]
 800ac40:	e005      	b.n	800ac4e <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	785b      	ldrb	r3, [r3, #1]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d16a      	bne.n	800ad2c <USB_EPStartXfer+0x60c>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	00db      	lsls	r3, r3, #3
 800ac6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac74:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d112      	bne.n	800aca6 <USB_EPStartXfer+0x586>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	00db      	lsls	r3, r3, #3
 800ac86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac9e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800aca2:	605a      	str	r2, [r3, #4]
 800aca4:	e06a      	b.n	800ad7c <USB_EPStartXfer+0x65c>
 800aca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca8:	2b3e      	cmp	r3, #62	@ 0x3e
 800acaa:	d81e      	bhi.n	800acea <USB_EPStartXfer+0x5ca>
 800acac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acae:	085b      	lsrs	r3, r3, #1
 800acb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800acb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <USB_EPStartXfer+0x5a2>
 800acbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acbe:	3301      	adds	r3, #1
 800acc0:	647b      	str	r3, [r7, #68]	@ 0x44
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800accc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800acd0:	6859      	ldr	r1, [r3, #4]
 800acd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acd4:	069a      	lsls	r2, r3, #26
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ace0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ace4:	430a      	orrs	r2, r1
 800ace6:	605a      	str	r2, [r3, #4]
 800ace8:	e048      	b.n	800ad7c <USB_EPStartXfer+0x65c>
 800acea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acec:	095b      	lsrs	r3, r3, #5
 800acee:	647b      	str	r3, [r7, #68]	@ 0x44
 800acf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acf2:	f003 031f 	and.w	r3, r3, #31
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d102      	bne.n	800ad00 <USB_EPStartXfer+0x5e0>
 800acfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acfc:	3b01      	subs	r3, #1
 800acfe:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad12:	069b      	lsls	r3, r3, #26
 800ad14:	431a      	orrs	r2, r3
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ad28:	605a      	str	r2, [r3, #4]
 800ad2a:	e027      	b.n	800ad7c <USB_EPStartXfer+0x65c>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d123      	bne.n	800ad7c <USB_EPStartXfer+0x65c>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad52:	b292      	uxth	r2, r2
 800ad54:	605a      	str	r2, [r3, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad64:	6859      	ldr	r1, [r3, #4]
 800ad66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad68:	041a      	lsls	r2, r3, #16
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	895b      	ldrh	r3, [r3, #10]
 800ad80:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6959      	ldr	r1, [r3, #20]
 800ad86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	8b7a      	ldrh	r2, [r7, #26]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fe4e 	bl	800ba2e <USB_WritePMA>
 800ad92:	e19f      	b.n	800b0d4 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	4ba0      	ldr	r3, [pc, #640]	@ (800b028 <USB_EPStartXfer+0x908>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	441a      	add	r2, r3
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adc0:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800addc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ade0:	b292      	uxth	r2, r2
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800adf2:	6819      	ldr	r1, [r3, #0]
 800adf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adf6:	041a      	lsls	r2, r3, #16
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae06:	430a      	orrs	r2, r1
 800ae08:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	891b      	ldrh	r3, [r3, #8]
 800ae0e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	6959      	ldr	r1, [r3, #20]
 800ae14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	8b7a      	ldrh	r2, [r7, #26]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fe07 	bl	800ba2e <USB_WritePMA>
 800ae20:	e158      	b.n	800b0d4 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	6a1a      	ldr	r2, [r3, #32]
 800ae26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae28:	1ad2      	subs	r2, r2, r3
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 80a3 	beq.w	800af8a <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d16a      	bne.n	800af22 <USB_EPStartXfer+0x802>
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae6a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ae6e:	605a      	str	r2, [r3, #4]
 800ae70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d112      	bne.n	800ae9c <USB_EPStartXfer+0x77c>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae94:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ae98:	605a      	str	r2, [r3, #4]
 800ae9a:	e06a      	b.n	800af72 <USB_EPStartXfer+0x852>
 800ae9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800aea0:	d81e      	bhi.n	800aee0 <USB_EPStartXfer+0x7c0>
 800aea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea4:	085b      	lsrs	r3, r3, #1
 800aea6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <USB_EPStartXfer+0x798>
 800aeb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aec2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aec6:	6859      	ldr	r1, [r3, #4]
 800aec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeca:	069a      	lsls	r2, r3, #26
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aed6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]
 800aede:	e048      	b.n	800af72 <USB_EPStartXfer+0x852>
 800aee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	643b      	str	r3, [r7, #64]	@ 0x40
 800aee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee8:	f003 031f 	and.w	r3, r3, #31
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <USB_EPStartXfer+0x7d6>
 800aef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef2:	3b01      	subs	r3, #1
 800aef4:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af08:	069b      	lsls	r3, r3, #26
 800af0a:	431a      	orrs	r2, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800af1e:	605a      	str	r2, [r3, #4]
 800af20:	e027      	b.n	800af72 <USB_EPStartXfer+0x852>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	785b      	ldrb	r3, [r3, #1]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d123      	bne.n	800af72 <USB_EPStartXfer+0x852>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af48:	b292      	uxth	r2, r2
 800af4a:	605a      	str	r2, [r3, #4]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af5a:	6859      	ldr	r1, [r3, #4]
 800af5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af5e:	041a      	lsls	r2, r3, #16
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af6e:	430a      	orrs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	895b      	ldrh	r3, [r3, #10]
 800af76:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	6959      	ldr	r1, [r3, #20]
 800af7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af7e:	b29b      	uxth	r3, r3
 800af80:	8b7a      	ldrh	r2, [r7, #26]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fd53 	bl	800ba2e <USB_WritePMA>
 800af88:	e0a4      	b.n	800b0d4 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d16d      	bne.n	800b06e <USB_EPStartXfer+0x94e>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800afac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800afb0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d112      	bne.n	800afe2 <USB_EPStartXfer+0x8c2>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800afc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800afd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800afda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e06d      	b.n	800b0be <USB_EPStartXfer+0x99e>
 800afe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe4:	2b3e      	cmp	r3, #62	@ 0x3e
 800afe6:	d821      	bhi.n	800b02c <USB_EPStartXfer+0x90c>
 800afe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afea:	085b      	lsrs	r3, r3, #1
 800afec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <USB_EPStartXfer+0x8de>
 800aff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800affa:	3301      	adds	r3, #1
 800affc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b008:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b010:	069a      	lsls	r2, r3, #26
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b01c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b020:	430a      	orrs	r2, r1
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	e04b      	b.n	800b0be <USB_EPStartXfer+0x99e>
 800b026:	bf00      	nop
 800b028:	07ff8e8f 	.word	0x07ff8e8f
 800b02c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b02e:	095b      	lsrs	r3, r3, #5
 800b030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b034:	f003 031f 	and.w	r3, r3, #31
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <USB_EPStartXfer+0x922>
 800b03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03e:	3b01      	subs	r3, #1
 800b040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	00db      	lsls	r3, r3, #3
 800b048:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b04c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b054:	069b      	lsls	r3, r3, #26
 800b056:	431a      	orrs	r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b062:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b066:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	e027      	b.n	800b0be <USB_EPStartXfer+0x99e>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	785b      	ldrb	r3, [r3, #1]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d123      	bne.n	800b0be <USB_EPStartXfer+0x99e>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b080:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b090:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b094:	b292      	uxth	r2, r2
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b0a6:	6819      	ldr	r1, [r3, #0]
 800b0a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0aa:	041a      	lsls	r2, r3, #16
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	891b      	ldrh	r3, [r3, #8]
 800b0c2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	6959      	ldr	r1, [r3, #20]
 800b0c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	8b7a      	ldrh	r2, [r7, #26]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fcad 	bl	800ba2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	4b8b      	ldr	r3, [pc, #556]	@ (800b310 <USB_EPStartXfer+0xbf0>)
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f083 0310 	eor.w	r3, r3, #16
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f083 0320 	eor.w	r3, r3, #32
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	441a      	add	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	e36b      	b.n	800b7e6 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	7b1b      	ldrb	r3, [r3, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 8081 	bne.w	800b21a <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	699a      	ldr	r2, [r3, #24]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	429a      	cmp	r2, r3
 800b122:	d909      	bls.n	800b138 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b130:	1ad2      	subs	r2, r2, r3
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	619a      	str	r2, [r3, #24]
 800b136:	e005      	b.n	800b144 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2200      	movs	r2, #0
 800b142:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b14e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b15e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b162:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b166:	605a      	str	r2, [r3, #4]
 800b168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d112      	bne.n	800b194 <USB_EPStartXfer+0xa74>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b178:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b188:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b18c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b190:	605a      	str	r2, [r3, #4]
 800b192:	e30c      	b.n	800b7ae <USB_EPStartXfer+0x108e>
 800b194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b196:	2b3e      	cmp	r3, #62	@ 0x3e
 800b198:	d81e      	bhi.n	800b1d8 <USB_EPStartXfer+0xab8>
 800b19a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b19c:	085b      	lsrs	r3, r3, #1
 800b19e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <USB_EPStartXfer+0xa90>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b1be:	6859      	ldr	r1, [r3, #4]
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c2:	069a      	lsls	r2, r3, #26
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	e2ea      	b.n	800b7ae <USB_EPStartXfer+0x108e>
 800b1d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1da:	095b      	lsrs	r3, r3, #5
 800b1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1e0:	f003 031f 	and.w	r3, r3, #31
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <USB_EPStartXfer+0xace>
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b200:	069b      	lsls	r3, r3, #26
 800b202:	431a      	orrs	r2, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b20e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b212:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b216:	605a      	str	r2, [r3, #4]
 800b218:	e2c9      	b.n	800b7ae <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	78db      	ldrb	r3, [r3, #3]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	f040 8176 	bne.w	800b510 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	785b      	ldrb	r3, [r3, #1]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d173      	bne.n	800b314 <USB_EPStartXfer+0xbf4>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	00db      	lsls	r3, r3, #3
 800b232:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b236:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b246:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b24a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d112      	bne.n	800b27e <USB_EPStartXfer+0xb5e>
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b262:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b272:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b276:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	e073      	b.n	800b366 <USB_EPStartXfer+0xc46>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	2b3e      	cmp	r3, #62	@ 0x3e
 800b284:	d820      	bhi.n	800b2c8 <USB_EPStartXfer+0xba8>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	085b      	lsrs	r3, r3, #1
 800b28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <USB_EPStartXfer+0xb80>
 800b29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b29c:	3301      	adds	r3, #1
 800b29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b2:	069a      	lsls	r2, r3, #26
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	00db      	lsls	r3, r3, #3
 800b2ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	e04e      	b.n	800b366 <USB_EPStartXfer+0xc46>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	f003 031f 	and.w	r3, r3, #31
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <USB_EPStartXfer+0xbc2>
 800b2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2f4:	069b      	lsls	r3, r3, #26
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	00db      	lsls	r3, r3, #3
 800b2fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b302:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b306:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	e02b      	b.n	800b366 <USB_EPStartXfer+0xc46>
 800b30e:	bf00      	nop
 800b310:	07ff8fbf 	.word	0x07ff8fbf
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	785b      	ldrb	r3, [r3, #1]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d124      	bne.n	800b366 <USB_EPStartXfer+0xc46>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b326:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	00db      	lsls	r3, r3, #3
 800b332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b33a:	b292      	uxth	r2, r2
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b348:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b34c:	6819      	ldr	r1, [r3, #0]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	041a      	lsls	r2, r3, #16
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b35e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b362:	430a      	orrs	r2, r1
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d170      	bne.n	800b450 <USB_EPStartXfer+0xd30>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	00db      	lsls	r3, r3, #3
 800b374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b378:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b388:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b38c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b390:	605a      	str	r2, [r3, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d112      	bne.n	800b3c0 <USB_EPStartXfer+0xca0>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b3b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b3bc:	605a      	str	r2, [r3, #4]
 800b3be:	e070      	b.n	800b4a2 <USB_EPStartXfer+0xd82>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3c6:	d820      	bhi.n	800b40a <USB_EPStartXfer+0xcea>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	085b      	lsrs	r3, r3, #1
 800b3ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <USB_EPStartXfer+0xcc2>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	3301      	adds	r3, #1
 800b3e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b3f0:	6859      	ldr	r1, [r3, #4]
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f4:	069a      	lsls	r2, r3, #26
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b404:	430a      	orrs	r2, r1
 800b406:	605a      	str	r2, [r3, #4]
 800b408:	e04b      	b.n	800b4a2 <USB_EPStartXfer+0xd82>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	095b      	lsrs	r3, r3, #5
 800b410:	633b      	str	r3, [r7, #48]	@ 0x30
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	f003 031f 	and.w	r3, r3, #31
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d102      	bne.n	800b424 <USB_EPStartXfer+0xd04>
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	3b01      	subs	r3, #1
 800b422:	633b      	str	r3, [r7, #48]	@ 0x30
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b42e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	069b      	lsls	r3, r3, #26
 800b438:	431a      	orrs	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b444:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b448:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b44c:	605a      	str	r2, [r3, #4]
 800b44e:	e028      	b.n	800b4a2 <USB_EPStartXfer+0xd82>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d124      	bne.n	800b4a2 <USB_EPStartXfer+0xd82>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b462:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	00db      	lsls	r3, r3, #3
 800b46e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b472:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b476:	b292      	uxth	r2, r2
 800b478:	605a      	str	r2, [r3, #4]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b484:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b488:	6859      	ldr	r1, [r3, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	041a      	lsls	r2, r3, #16
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b49a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 8181 	beq.w	800b7ae <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <USB_EPStartXfer+0xdae>
 800b4c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10b      	bne.n	800b4e6 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f040 816a 	bne.w	800b7ae <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f040 8164 	bne.w	800b7ae <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b98      	ldr	r3, [pc, #608]	@ (800b754 <USB_EPStartXfer+0x1034>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	623b      	str	r3, [r7, #32]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	441a      	add	r2, r3
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b508:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	e14e      	b.n	800b7ae <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	78db      	ldrb	r3, [r3, #3]
 800b514:	2b01      	cmp	r3, #1
 800b516:	f040 8148 	bne.w	800b7aa <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	699a      	ldr	r2, [r3, #24]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	429a      	cmp	r2, r3
 800b524:	d909      	bls.n	800b53a <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b532:	1ad2      	subs	r2, r2, r3
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	619a      	str	r2, [r3, #24]
 800b538:	e005      	b.n	800b546 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2200      	movs	r2, #0
 800b544:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	785b      	ldrb	r3, [r3, #1]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d16a      	bne.n	800b624 <USB_EPStartXfer+0xf04>
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b558:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	00db      	lsls	r3, r3, #3
 800b564:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b568:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b56c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b574:	2b00      	cmp	r3, #0
 800b576:	d112      	bne.n	800b59e <USB_EPStartXfer+0xe7e>
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b582:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b592:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b596:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	e06a      	b.n	800b674 <USB_EPStartXfer+0xf54>
 800b59e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5a2:	d81e      	bhi.n	800b5e2 <USB_EPStartXfer+0xec2>
 800b5a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5a6:	085b      	lsrs	r3, r3, #1
 800b5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <USB_EPStartXfer+0xe9a>
 800b5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5c8:	6819      	ldr	r1, [r3, #0]
 800b5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5cc:	069a      	lsls	r2, r3, #26
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	e048      	b.n	800b674 <USB_EPStartXfer+0xf54>
 800b5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e4:	095b      	lsrs	r3, r3, #5
 800b5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ea:	f003 031f 	and.w	r3, r3, #31
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d102      	bne.n	800b5f8 <USB_EPStartXfer+0xed8>
 800b5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b602:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	069b      	lsls	r3, r3, #26
 800b60c:	431a      	orrs	r2, r3
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b61c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	e027      	b.n	800b674 <USB_EPStartXfer+0xf54>
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d123      	bne.n	800b674 <USB_EPStartXfer+0xf54>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b636:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b646:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b64a:	b292      	uxth	r2, r2
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b658:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b65c:	6819      	ldr	r1, [r3, #0]
 800b65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b660:	041a      	lsls	r2, r3, #16
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b66c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b670:	430a      	orrs	r2, r1
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d16d      	bne.n	800b758 <USB_EPStartXfer+0x1038>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b696:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b69a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b69e:	605a      	str	r2, [r3, #4]
 800b6a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d112      	bne.n	800b6cc <USB_EPStartXfer+0xfac>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b6c8:	605a      	str	r2, [r3, #4]
 800b6ca:	e070      	b.n	800b7ae <USB_EPStartXfer+0x108e>
 800b6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6d0:	d81e      	bhi.n	800b710 <USB_EPStartXfer+0xff0>
 800b6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6d4:	085b      	lsrs	r3, r3, #1
 800b6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <USB_EPStartXfer+0xfc8>
 800b6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	00db      	lsls	r3, r3, #3
 800b6ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6f6:	6859      	ldr	r1, [r3, #4]
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	069a      	lsls	r2, r3, #26
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b706:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b70a:	430a      	orrs	r2, r1
 800b70c:	605a      	str	r2, [r3, #4]
 800b70e:	e04e      	b.n	800b7ae <USB_EPStartXfer+0x108e>
 800b710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b712:	095b      	lsrs	r3, r3, #5
 800b714:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b718:	f003 031f 	and.w	r3, r3, #31
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d102      	bne.n	800b726 <USB_EPStartXfer+0x1006>
 800b720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b722:	3b01      	subs	r3, #1
 800b724:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b738:	069b      	lsls	r3, r3, #26
 800b73a:	431a      	orrs	r2, r3
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	00db      	lsls	r3, r3, #3
 800b742:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b746:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b74a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b74e:	605a      	str	r2, [r3, #4]
 800b750:	e02d      	b.n	800b7ae <USB_EPStartXfer+0x108e>
 800b752:	bf00      	nop
 800b754:	07ff8f8f 	.word	0x07ff8f8f
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	785b      	ldrb	r3, [r3, #1]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d126      	bne.n	800b7ae <USB_EPStartXfer+0x108e>
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b76a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b76e:	685a      	ldr	r2, [r3, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b77a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b77e:	b292      	uxth	r2, r2
 800b780:	605a      	str	r2, [r3, #4]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b78c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b790:	6859      	ldr	r1, [r3, #4]
 800b792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b794:	041a      	lsls	r2, r3, #16
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7a4:	430a      	orrs	r2, r1
 800b7a6:	605a      	str	r2, [r3, #4]
 800b7a8:	e001      	b.n	800b7ae <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e01c      	b.n	800b7e8 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <USB_EPStartXfer+0x10d0>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	441a      	add	r2, r3
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3758      	adds	r7, #88	@ 0x58
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	07ffbf8f 	.word	0x07ffbf8f

0800b7f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	785b      	ldrb	r3, [r3, #1]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d018      	beq.n	800b838 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4b19      	ldr	r3, [pc, #100]	@ (800b878 <USB_EPSetStall+0x84>)
 800b814:	4013      	ands	r3, r2
 800b816:	60bb      	str	r3, [r7, #8]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f083 0310 	eor.w	r3, r3, #16
 800b81e:	60bb      	str	r3, [r7, #8]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	441a      	add	r2, r3
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	e017      	b.n	800b868 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <USB_EPSetStall+0x88>)
 800b846:	4013      	ands	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	441a      	add	r2, r3
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b866:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	07ff8fbf 	.word	0x07ff8fbf
 800b87c:	07ffbf8f 	.word	0x07ffbf8f

0800b880 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b880:	b480      	push	{r7}
 800b882:	b089      	sub	sp, #36	@ 0x24
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	7b1b      	ldrb	r3, [r3, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d17c      	bne.n	800b98c <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	785b      	ldrb	r3, [r3, #1]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d03c      	beq.n	800b914 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	613b      	str	r3, [r7, #16]
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d013      	beq.n	800b8da <USB_EPClearStall+0x5a>
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b37      	ldr	r3, [pc, #220]	@ (800b99c <USB_EPClearStall+0x11c>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	441a      	add	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b8d8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	78db      	ldrb	r3, [r3, #3]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d054      	beq.n	800b98c <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b2c      	ldr	r3, [pc, #176]	@ (800b9a0 <USB_EPClearStall+0x120>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	60bb      	str	r3, [r7, #8]
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f083 0320 	eor.w	r3, r3, #32
 800b8fa:	60bb      	str	r3, [r7, #8]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	441a      	add	r2, r3
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b90c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	e03b      	b.n	800b98c <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	61fb      	str	r3, [r7, #28]
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d013      	beq.n	800b954 <USB_EPClearStall+0xd4>
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	4b18      	ldr	r3, [pc, #96]	@ (800b99c <USB_EPClearStall+0x11c>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	61bb      	str	r3, [r7, #24]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	441a      	add	r2, r3
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b952:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	4b10      	ldr	r3, [pc, #64]	@ (800b9a4 <USB_EPClearStall+0x124>)
 800b962:	4013      	ands	r3, r2
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	441a      	add	r2, r3
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b98a:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3724      	adds	r7, #36	@ 0x24
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	07ff8f8f 	.word	0x07ff8f8f
 800b9a0:	07ff8fbf 	.word	0x07ff8fbf
 800b9a4:	07ffbf8f 	.word	0x07ffbf8f

0800b9a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d102      	bne.n	800b9c0 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2280      	movs	r2, #128	@ 0x80
 800b9be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b083      	sub	sp, #12
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9da:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b085      	sub	sp, #20
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba20:	68fb      	ldr	r3, [r7, #12]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b08b      	sub	sp, #44	@ 0x2c
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	80fb      	strh	r3, [r7, #6]
 800ba40:	4613      	mov	r3, r2
 800ba42:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800ba44:	88bb      	ldrh	r3, [r7, #4]
 800ba46:	3303      	adds	r3, #3
 800ba48:	089b      	lsrs	r3, r3, #2
 800ba4a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800ba4c:	88bb      	ldrh	r3, [r7, #4]
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800ba58:	8afb      	ldrh	r3, [r7, #22]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <USB_WritePMA+0x36>
  {
    NbWords--;
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800ba64:	88fb      	ldrh	r3, [r7, #6]
 800ba66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba6e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	623b      	str	r3, [r7, #32]
 800ba74:	e015      	b.n	800baa2 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	3304      	adds	r3, #4
 800ba82:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	3301      	adds	r3, #1
 800ba88:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	3301      	adds	r3, #1
 800ba94:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	623b      	str	r3, [r7, #32]
 800baa2:	6a3b      	ldr	r3, [r7, #32]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e6      	bne.n	800ba76 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800baa8:	8afb      	ldrh	r3, [r7, #22]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d01a      	beq.n	800bae4 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	fa02 f303 	lsl.w	r3, r2, r3
 800bac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac2:	4313      	orrs	r3, r2
 800bac4:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	3301      	adds	r3, #1
 800baca:	623b      	str	r3, [r7, #32]
      pBuf++;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	3301      	adds	r3, #1
 800bad0:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800bad2:	8afb      	ldrh	r3, [r7, #22]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800bad8:	8afb      	ldrh	r3, [r7, #22]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1e9      	bne.n	800bab2 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bae2:	601a      	str	r2, [r3, #0]
  }
}
 800bae4:	bf00      	nop
 800bae6:	372c      	adds	r7, #44	@ 0x2c
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b08b      	sub	sp, #44	@ 0x2c
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4611      	mov	r1, r2
 800bafc:	461a      	mov	r2, r3
 800bafe:	460b      	mov	r3, r1
 800bb00:	80fb      	strh	r3, [r7, #6]
 800bb02:	4613      	mov	r3, r2
 800bb04:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800bb06:	88bb      	ldrh	r3, [r7, #4]
 800bb08:	3303      	adds	r3, #3
 800bb0a:	089b      	lsrs	r3, r3, #2
 800bb0c:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800bb0e:	88bb      	ldrh	r3, [r7, #4]
 800bb10:	f003 0303 	and.w	r3, r3, #3
 800bb14:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb24:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800bb26:	8b7b      	ldrh	r3, [r7, #26]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb36:	e015      	b.n	800bb64 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	3304      	adds	r3, #4
 800bb44:	623b      	str	r3, [r7, #32]
    pBuf++;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	3301      	adds	r3, #1
 800bb56:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	3b01      	subs	r3, #1
 800bb62:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1e6      	bne.n	800bb38 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800bb6a:	8b7b      	ldrh	r3, [r7, #26]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d017      	beq.n	800bba0 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	701a      	strb	r2, [r3, #0]
      count++;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	3301      	adds	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800bb94:	8b7b      	ldrh	r3, [r7, #26]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800bb9a:	8b7b      	ldrh	r3, [r7, #26]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1ea      	bne.n	800bb76 <USB_ReadPMA+0x86>
  }
}
 800bba0:	bf00      	nop
 800bba2:	372c      	adds	r7, #44	@ 0x2c
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bbb8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bbbc:	f000 ffa4 	bl	800cb08 <USBD_static_malloc>
 800bbc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d109      	bne.n	800bbdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	32b0      	adds	r2, #176	@ 0xb0
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e0d4      	b.n	800bd86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bbdc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f002 fb46 	bl	800e274 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	32b0      	adds	r2, #176	@ 0xb0
 800bbf2:	68f9      	ldr	r1, [r7, #12]
 800bbf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	32b0      	adds	r2, #176	@ 0xb0
 800bc02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7c1b      	ldrb	r3, [r3, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d138      	bne.n	800bc86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc14:	4b5e      	ldr	r3, [pc, #376]	@ (800bd90 <USBD_CDC_Init+0x1e4>)
 800bc16:	7819      	ldrb	r1, [r3, #0]
 800bc18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fe79 	bl	800c916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc24:	4b5a      	ldr	r3, [pc, #360]	@ (800bd90 <USBD_CDC_Init+0x1e4>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	f003 020f 	and.w	r2, r3, #15
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	3324      	adds	r3, #36	@ 0x24
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc3e:	4b55      	ldr	r3, [pc, #340]	@ (800bd94 <USBD_CDC_Init+0x1e8>)
 800bc40:	7819      	ldrb	r1, [r3, #0]
 800bc42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc46:	2202      	movs	r2, #2
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fe64 	bl	800c916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc4e:	4b51      	ldr	r3, [pc, #324]	@ (800bd94 <USBD_CDC_Init+0x1e8>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	f003 020f 	and.w	r2, r3, #15
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	440b      	add	r3, r1
 800bc62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc66:	2201      	movs	r2, #1
 800bc68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc6a:	4b4b      	ldr	r3, [pc, #300]	@ (800bd98 <USBD_CDC_Init+0x1ec>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	f003 020f 	and.w	r2, r3, #15
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	440b      	add	r3, r1
 800bc7e:	3326      	adds	r3, #38	@ 0x26
 800bc80:	2210      	movs	r2, #16
 800bc82:	801a      	strh	r2, [r3, #0]
 800bc84:	e035      	b.n	800bcf2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc86:	4b42      	ldr	r3, [pc, #264]	@ (800bd90 <USBD_CDC_Init+0x1e4>)
 800bc88:	7819      	ldrb	r1, [r3, #0]
 800bc8a:	2340      	movs	r3, #64	@ 0x40
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fe41 	bl	800c916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc94:	4b3e      	ldr	r3, [pc, #248]	@ (800bd90 <USBD_CDC_Init+0x1e4>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	f003 020f 	and.w	r2, r3, #15
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	3324      	adds	r3, #36	@ 0x24
 800bcaa:	2201      	movs	r2, #1
 800bcac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bcae:	4b39      	ldr	r3, [pc, #228]	@ (800bd94 <USBD_CDC_Init+0x1e8>)
 800bcb0:	7819      	ldrb	r1, [r3, #0]
 800bcb2:	2340      	movs	r3, #64	@ 0x40
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fe2d 	bl	800c916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bcbc:	4b35      	ldr	r3, [pc, #212]	@ (800bd94 <USBD_CDC_Init+0x1e8>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	f003 020f 	and.w	r2, r3, #15
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bcd8:	4b2f      	ldr	r3, [pc, #188]	@ (800bd98 <USBD_CDC_Init+0x1ec>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	f003 020f 	and.w	r2, r3, #15
 800bce0:	6879      	ldr	r1, [r7, #4]
 800bce2:	4613      	mov	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	440b      	add	r3, r1
 800bcec:	3326      	adds	r3, #38	@ 0x26
 800bcee:	2210      	movs	r2, #16
 800bcf0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bcf2:	4b29      	ldr	r3, [pc, #164]	@ (800bd98 <USBD_CDC_Init+0x1ec>)
 800bcf4:	7819      	ldrb	r1, [r3, #0]
 800bcf6:	2308      	movs	r3, #8
 800bcf8:	2203      	movs	r2, #3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fe0b 	bl	800c916 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bd00:	4b25      	ldr	r3, [pc, #148]	@ (800bd98 <USBD_CDC_Init+0x1ec>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f003 020f 	and.w	r2, r3, #15
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	440b      	add	r3, r1
 800bd14:	3324      	adds	r3, #36	@ 0x24
 800bd16:	2201      	movs	r2, #1
 800bd18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	33b0      	adds	r3, #176	@ 0xb0
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bd50:	2302      	movs	r3, #2
 800bd52:	e018      	b.n	800bd86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7c1b      	ldrb	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <USBD_CDC_Init+0x1e8>)
 800bd5e:	7819      	ldrb	r1, [r3, #0]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fe9e 	bl	800caac <USBD_LL_PrepareReceive>
 800bd70:	e008      	b.n	800bd84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd72:	4b08      	ldr	r3, [pc, #32]	@ (800bd94 <USBD_CDC_Init+0x1e8>)
 800bd74:	7819      	ldrb	r1, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd7c:	2340      	movs	r3, #64	@ 0x40
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fe94 	bl	800caac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	200000af 	.word	0x200000af
 800bd94:	200000b0 	.word	0x200000b0
 800bd98:	200000b1 	.word	0x200000b1

0800bd9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	460b      	mov	r3, r1
 800bda6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bda8:	4b3a      	ldr	r3, [pc, #232]	@ (800be94 <USBD_CDC_DeInit+0xf8>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fdd1 	bl	800c956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bdb4:	4b37      	ldr	r3, [pc, #220]	@ (800be94 <USBD_CDC_DeInit+0xf8>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 020f 	and.w	r2, r3, #15
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	3324      	adds	r3, #36	@ 0x24
 800bdca:	2200      	movs	r2, #0
 800bdcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bdce:	4b32      	ldr	r3, [pc, #200]	@ (800be98 <USBD_CDC_DeInit+0xfc>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fdbe 	bl	800c956 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bdda:	4b2f      	ldr	r3, [pc, #188]	@ (800be98 <USBD_CDC_DeInit+0xfc>)
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	f003 020f 	and.w	r2, r3, #15
 800bde2:	6879      	ldr	r1, [r7, #4]
 800bde4:	4613      	mov	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	440b      	add	r3, r1
 800bdee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bdf6:	4b29      	ldr	r3, [pc, #164]	@ (800be9c <USBD_CDC_DeInit+0x100>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fdaa 	bl	800c956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800be02:	4b26      	ldr	r3, [pc, #152]	@ (800be9c <USBD_CDC_DeInit+0x100>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	f003 020f 	and.w	r2, r3, #15
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	3324      	adds	r3, #36	@ 0x24
 800be18:	2200      	movs	r2, #0
 800be1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800be1c:	4b1f      	ldr	r3, [pc, #124]	@ (800be9c <USBD_CDC_DeInit+0x100>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 020f 	and.w	r2, r3, #15
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	440b      	add	r3, r1
 800be30:	3326      	adds	r3, #38	@ 0x26
 800be32:	2200      	movs	r2, #0
 800be34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	32b0      	adds	r2, #176	@ 0xb0
 800be40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d01f      	beq.n	800be88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	33b0      	adds	r3, #176	@ 0xb0
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	32b0      	adds	r2, #176	@ 0xb0
 800be66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fe5a 	bl	800cb24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	32b0      	adds	r2, #176	@ 0xb0
 800be7a:	2100      	movs	r1, #0
 800be7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	200000af 	.word	0x200000af
 800be98:	200000b0 	.word	0x200000b0
 800be9c:	200000b1 	.word	0x200000b1

0800bea0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	32b0      	adds	r2, #176	@ 0xb0
 800beb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800becc:	2303      	movs	r3, #3
 800bece:	e0bf      	b.n	800c050 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d050      	beq.n	800bf7e <USBD_CDC_Setup+0xde>
 800bedc:	2b20      	cmp	r3, #32
 800bede:	f040 80af 	bne.w	800c040 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	88db      	ldrh	r3, [r3, #6]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d03a      	beq.n	800bf60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	b25b      	sxtb	r3, r3
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	da1b      	bge.n	800bf2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	33b0      	adds	r3, #176	@ 0xb0
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bf0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	88d2      	ldrh	r2, [r2, #6]
 800bf10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	88db      	ldrh	r3, [r3, #6]
 800bf16:	2b07      	cmp	r3, #7
 800bf18:	bf28      	it	cs
 800bf1a:	2307      	movcs	r3, #7
 800bf1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	89fa      	ldrh	r2, [r7, #14]
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f002 f8f0 	bl	800e10a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bf2a:	e090      	b.n	800c04e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	785a      	ldrb	r2, [r3, #1]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	88db      	ldrh	r3, [r3, #6]
 800bf3a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bf3c:	d803      	bhi.n	800bf46 <USBD_CDC_Setup+0xa6>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	88db      	ldrh	r3, [r3, #6]
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	e000      	b.n	800bf48 <USBD_CDC_Setup+0xa8>
 800bf46:	2240      	movs	r2, #64	@ 0x40
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bf4e:	6939      	ldr	r1, [r7, #16]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bf56:	461a      	mov	r2, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f002 f902 	bl	800e162 <USBD_CtlPrepareRx>
      break;
 800bf5e:	e076      	b.n	800c04e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	33b0      	adds	r3, #176	@ 0xb0
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	7850      	ldrb	r0, [r2, #1]
 800bf76:	2200      	movs	r2, #0
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	4798      	blx	r3
      break;
 800bf7c:	e067      	b.n	800c04e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	2b0b      	cmp	r3, #11
 800bf84:	d851      	bhi.n	800c02a <USBD_CDC_Setup+0x18a>
 800bf86:	a201      	add	r2, pc, #4	@ (adr r2, 800bf8c <USBD_CDC_Setup+0xec>)
 800bf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8c:	0800bfbd 	.word	0x0800bfbd
 800bf90:	0800c039 	.word	0x0800c039
 800bf94:	0800c02b 	.word	0x0800c02b
 800bf98:	0800c02b 	.word	0x0800c02b
 800bf9c:	0800c02b 	.word	0x0800c02b
 800bfa0:	0800c02b 	.word	0x0800c02b
 800bfa4:	0800c02b 	.word	0x0800c02b
 800bfa8:	0800c02b 	.word	0x0800c02b
 800bfac:	0800c02b 	.word	0x0800c02b
 800bfb0:	0800c02b 	.word	0x0800c02b
 800bfb4:	0800bfe7 	.word	0x0800bfe7
 800bfb8:	0800c011 	.word	0x0800c011
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d107      	bne.n	800bfd8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfc8:	f107 030a 	add.w	r3, r7, #10
 800bfcc:	2202      	movs	r2, #2
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f002 f89a 	bl	800e10a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfd6:	e032      	b.n	800c03e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 ff17 	bl	800de0e <USBD_CtlError>
            ret = USBD_FAIL;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	75fb      	strb	r3, [r7, #23]
          break;
 800bfe4:	e02b      	b.n	800c03e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d107      	bne.n	800c002 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bff2:	f107 030d 	add.w	r3, r7, #13
 800bff6:	2201      	movs	r2, #1
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f002 f885 	bl	800e10a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c000:	e01d      	b.n	800c03e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 ff02 	bl	800de0e <USBD_CtlError>
            ret = USBD_FAIL;
 800c00a:	2303      	movs	r3, #3
 800c00c:	75fb      	strb	r3, [r7, #23]
          break;
 800c00e:	e016      	b.n	800c03e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d00f      	beq.n	800c03c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 fef5 	bl	800de0e <USBD_CtlError>
            ret = USBD_FAIL;
 800c024:	2303      	movs	r3, #3
 800c026:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c028:	e008      	b.n	800c03c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f001 feee 	bl	800de0e <USBD_CtlError>
          ret = USBD_FAIL;
 800c032:	2303      	movs	r3, #3
 800c034:	75fb      	strb	r3, [r7, #23]
          break;
 800c036:	e002      	b.n	800c03e <USBD_CDC_Setup+0x19e>
          break;
 800c038:	bf00      	nop
 800c03a:	e008      	b.n	800c04e <USBD_CDC_Setup+0x1ae>
          break;
 800c03c:	bf00      	nop
      }
      break;
 800c03e:	e006      	b.n	800c04e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 fee3 	bl	800de0e <USBD_CtlError>
      ret = USBD_FAIL;
 800c048:	2303      	movs	r3, #3
 800c04a:	75fb      	strb	r3, [r7, #23]
      break;
 800c04c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c06a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	32b0      	adds	r2, #176	@ 0xb0
 800c076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	e065      	b.n	800c14e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	32b0      	adds	r2, #176	@ 0xb0
 800c08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c090:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c092:	78fb      	ldrb	r3, [r7, #3]
 800c094:	f003 020f 	and.w	r2, r3, #15
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	3318      	adds	r3, #24
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d02f      	beq.n	800c10c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c0ac:	78fb      	ldrb	r3, [r7, #3]
 800c0ae:	f003 020f 	and.w	r2, r3, #15
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	440b      	add	r3, r1
 800c0be:	3318      	adds	r3, #24
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	f003 010f 	and.w	r1, r3, #15
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	4403      	add	r3, r0
 800c0d4:	3324      	adds	r3, #36	@ 0x24
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0dc:	fb01 f303 	mul.w	r3, r1, r3
 800c0e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d112      	bne.n	800c10c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c0e6:	78fb      	ldrb	r3, [r7, #3]
 800c0e8:	f003 020f 	and.w	r2, r3, #15
 800c0ec:	6879      	ldr	r1, [r7, #4]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	440b      	add	r3, r1
 800c0f8:	3318      	adds	r3, #24
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0fe:	78f9      	ldrb	r1, [r7, #3]
 800c100:	2300      	movs	r3, #0
 800c102:	2200      	movs	r2, #0
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fcb6 	bl	800ca76 <USBD_LL_Transmit>
 800c10a:	e01f      	b.n	800c14c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2200      	movs	r2, #0
 800c110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	33b0      	adds	r3, #176	@ 0xb0
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d010      	beq.n	800c14c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	33b0      	adds	r3, #176	@ 0xb0
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	32b0      	adds	r2, #176	@ 0xb0
 800c16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c170:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	32b0      	adds	r2, #176	@ 0xb0
 800c17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c184:	2303      	movs	r3, #3
 800c186:	e01a      	b.n	800c1be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fca8 	bl	800cae2 <USBD_LL_GetRxDataSize>
 800c192:	4602      	mov	r2, r0
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	33b0      	adds	r3, #176	@ 0xb0
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	32b0      	adds	r2, #176	@ 0xb0
 800c1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	e024      	b.n	800c232 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	33b0      	adds	r3, #176	@ 0xb0
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d019      	beq.n	800c230 <USBD_CDC_EP0_RxReady+0x6a>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c202:	2bff      	cmp	r3, #255	@ 0xff
 800c204:	d014      	beq.n	800c230 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	33b0      	adds	r3, #176	@ 0xb0
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c21e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c226:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	22ff      	movs	r2, #255	@ 0xff
 800c22c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c244:	2182      	movs	r1, #130	@ 0x82
 800c246:	4818      	ldr	r0, [pc, #96]	@ (800c2a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c248:	f000 ffab 	bl	800d1a2 <USBD_GetEpDesc>
 800c24c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c24e:	2101      	movs	r1, #1
 800c250:	4815      	ldr	r0, [pc, #84]	@ (800c2a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c252:	f000 ffa6 	bl	800d1a2 <USBD_GetEpDesc>
 800c256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c258:	2181      	movs	r1, #129	@ 0x81
 800c25a:	4813      	ldr	r0, [pc, #76]	@ (800c2a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c25c:	f000 ffa1 	bl	800d1a2 <USBD_GetEpDesc>
 800c260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2210      	movs	r2, #16
 800c26c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d006      	beq.n	800c282 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	2200      	movs	r2, #0
 800c278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c27c:	711a      	strb	r2, [r3, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c290:	711a      	strb	r2, [r3, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2243      	movs	r2, #67	@ 0x43
 800c29a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c29c:	4b02      	ldr	r3, [pc, #8]	@ (800c2a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	2000006c 	.word	0x2000006c

0800c2ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2b4:	2182      	movs	r1, #130	@ 0x82
 800c2b6:	4818      	ldr	r0, [pc, #96]	@ (800c318 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2b8:	f000 ff73 	bl	800d1a2 <USBD_GetEpDesc>
 800c2bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2be:	2101      	movs	r1, #1
 800c2c0:	4815      	ldr	r0, [pc, #84]	@ (800c318 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2c2:	f000 ff6e 	bl	800d1a2 <USBD_GetEpDesc>
 800c2c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2c8:	2181      	movs	r1, #129	@ 0x81
 800c2ca:	4813      	ldr	r0, [pc, #76]	@ (800c318 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2cc:	f000 ff69 	bl	800d1a2 <USBD_GetEpDesc>
 800c2d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2210      	movs	r2, #16
 800c2dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d006      	beq.n	800c2f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	711a      	strb	r2, [r3, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f042 0202 	orr.w	r2, r2, #2
 800c2f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d006      	beq.n	800c306 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	711a      	strb	r2, [r3, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f042 0202 	orr.w	r2, r2, #2
 800c304:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2243      	movs	r2, #67	@ 0x43
 800c30a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c30c:	4b02      	ldr	r3, [pc, #8]	@ (800c318 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000006c 	.word	0x2000006c

0800c31c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c324:	2182      	movs	r1, #130	@ 0x82
 800c326:	4818      	ldr	r0, [pc, #96]	@ (800c388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c328:	f000 ff3b 	bl	800d1a2 <USBD_GetEpDesc>
 800c32c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c32e:	2101      	movs	r1, #1
 800c330:	4815      	ldr	r0, [pc, #84]	@ (800c388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c332:	f000 ff36 	bl	800d1a2 <USBD_GetEpDesc>
 800c336:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c338:	2181      	movs	r1, #129	@ 0x81
 800c33a:	4813      	ldr	r0, [pc, #76]	@ (800c388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c33c:	f000 ff31 	bl	800d1a2 <USBD_GetEpDesc>
 800c340:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2210      	movs	r2, #16
 800c34c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d006      	beq.n	800c362 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	2200      	movs	r2, #0
 800c358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c35c:	711a      	strb	r2, [r3, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c370:	711a      	strb	r2, [r3, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2243      	movs	r2, #67	@ 0x43
 800c37a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c37c:	4b02      	ldr	r3, [pc, #8]	@ (800c388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000006c 	.word	0x2000006c

0800c38c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	220a      	movs	r2, #10
 800c398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c39a:	4b03      	ldr	r3, [pc, #12]	@ (800c3a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	20000028 	.word	0x20000028

0800c3ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e009      	b.n	800c3d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	33b0      	adds	r3, #176	@ 0xb0
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b087      	sub	sp, #28
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	32b0      	adds	r2, #176	@ 0xb0
 800c3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c402:	2303      	movs	r3, #3
 800c404:	e008      	b.n	800c418 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	371c      	adds	r7, #28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	32b0      	adds	r2, #176	@ 0xb0
 800c438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c444:	2303      	movs	r3, #3
 800c446:	e004      	b.n	800c452 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
	...

0800c460 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	32b0      	adds	r2, #176	@ 0xb0
 800c472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c476:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c478:	2301      	movs	r3, #1
 800c47a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c482:	2303      	movs	r3, #3
 800c484:	e025      	b.n	800c4d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d11f      	bne.n	800c4d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2201      	movs	r2, #1
 800c494:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c498:	4b10      	ldr	r3, [pc, #64]	@ (800c4dc <USBD_CDC_TransmitPacket+0x7c>)
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	f003 020f 	and.w	r2, r3, #15
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4403      	add	r3, r0
 800c4b2:	3318      	adds	r3, #24
 800c4b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c4b6:	4b09      	ldr	r3, [pc, #36]	@ (800c4dc <USBD_CDC_TransmitPacket+0x7c>)
 800c4b8:	7819      	ldrb	r1, [r3, #0]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fad5 	bl	800ca76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	200000af 	.word	0x200000af

0800c4e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	32b0      	adds	r2, #176	@ 0xb0
 800c4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	32b0      	adds	r2, #176	@ 0xb0
 800c502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e018      	b.n	800c540 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	7c1b      	ldrb	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10a      	bne.n	800c52c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c516:	4b0c      	ldr	r3, [pc, #48]	@ (800c548 <USBD_CDC_ReceivePacket+0x68>)
 800c518:	7819      	ldrb	r1, [r3, #0]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fac1 	bl	800caac <USBD_LL_PrepareReceive>
 800c52a:	e008      	b.n	800c53e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c52c:	4b06      	ldr	r3, [pc, #24]	@ (800c548 <USBD_CDC_ReceivePacket+0x68>)
 800c52e:	7819      	ldrb	r1, [r3, #0]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c536:	2340      	movs	r3, #64	@ 0x40
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fab7 	bl	800caac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	200000b0 	.word	0x200000b0

0800c54c <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c550:	2200      	movs	r2, #0
 800c552:	4905      	ldr	r1, [pc, #20]	@ (800c568 <TEMPLATE_Init+0x1c>)
 800c554:	4805      	ldr	r0, [pc, #20]	@ (800c56c <TEMPLATE_Init+0x20>)
 800c556:	f7ff ff43 	bl	800c3e0 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c55a:	4905      	ldr	r1, [pc, #20]	@ (800c570 <TEMPLATE_Init+0x24>)
 800c55c:	4803      	ldr	r0, [pc, #12]	@ (800c56c <TEMPLATE_Init+0x20>)
 800c55e:	f7ff ff61 	bl	800c424 <USBD_CDC_SetRxBuffer>
      return (0);
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	bd80      	pop	{r7, pc}
 800c568:	20000a04 	.word	0x20000a04
 800c56c:	20000480 	.word	0x20000480
 800c570:	20000804 	.word	0x20000804

0800c574 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800c574:	b480      	push	{r7}
 800c576:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <TEMPLATE_Transmit>:

uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c594:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <TEMPLATE_Transmit+0x48>)
 800c596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c59a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e00b      	b.n	800c5c2 <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c5aa:	887b      	ldrh	r3, [r7, #2]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4806      	ldr	r0, [pc, #24]	@ (800c5cc <TEMPLATE_Transmit+0x48>)
 800c5b2:	f7ff ff15 	bl	800c3e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c5b6:	4805      	ldr	r0, [pc, #20]	@ (800c5cc <TEMPLATE_Transmit+0x48>)
 800c5b8:	f7ff ff52 	bl	800c460 <USBD_CDC_TransmitPacket>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]
  return result;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000480 	.word	0x20000480

0800c5d0 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	71fb      	strb	r3, [r7, #7]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800c5e0:	79fb      	ldrb	r3, [r7, #7]
 800c5e2:	2b23      	cmp	r3, #35	@ 0x23
 800c5e4:	f200 8098 	bhi.w	800c718 <TEMPLATE_Control+0x148>
 800c5e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f0 <TEMPLATE_Control+0x20>)
 800c5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c719 	.word	0x0800c719
 800c5f4:	0800c719 	.word	0x0800c719
 800c5f8:	0800c719 	.word	0x0800c719
 800c5fc:	0800c719 	.word	0x0800c719
 800c600:	0800c719 	.word	0x0800c719
 800c604:	0800c719 	.word	0x0800c719
 800c608:	0800c719 	.word	0x0800c719
 800c60c:	0800c719 	.word	0x0800c719
 800c610:	0800c719 	.word	0x0800c719
 800c614:	0800c719 	.word	0x0800c719
 800c618:	0800c719 	.word	0x0800c719
 800c61c:	0800c719 	.word	0x0800c719
 800c620:	0800c719 	.word	0x0800c719
 800c624:	0800c719 	.word	0x0800c719
 800c628:	0800c719 	.word	0x0800c719
 800c62c:	0800c719 	.word	0x0800c719
 800c630:	0800c719 	.word	0x0800c719
 800c634:	0800c719 	.word	0x0800c719
 800c638:	0800c719 	.word	0x0800c719
 800c63c:	0800c719 	.word	0x0800c719
 800c640:	0800c719 	.word	0x0800c719
 800c644:	0800c719 	.word	0x0800c719
 800c648:	0800c719 	.word	0x0800c719
 800c64c:	0800c719 	.word	0x0800c719
 800c650:	0800c719 	.word	0x0800c719
 800c654:	0800c719 	.word	0x0800c719
 800c658:	0800c719 	.word	0x0800c719
 800c65c:	0800c719 	.word	0x0800c719
 800c660:	0800c719 	.word	0x0800c719
 800c664:	0800c719 	.word	0x0800c719
 800c668:	0800c719 	.word	0x0800c719
 800c66c:	0800c719 	.word	0x0800c719
 800c670:	0800c681 	.word	0x0800c681
 800c674:	0800c6c5 	.word	0x0800c6c5
 800c678:	0800c719 	.word	0x0800c719
 800c67c:	0800c719 	.word	0x0800c719
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	3301      	adds	r3, #1
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	3302      	adds	r3, #2
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800c698:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	3303      	adds	r3, #3
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	061b      	lsls	r3, r3, #24
 800c6a2:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4b20      	ldr	r3, [pc, #128]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6a8:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	791a      	ldrb	r2, [r3, #4]
 800c6ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6b0:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	795a      	ldrb	r2, [r3, #5]
 800c6b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6b8:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	799a      	ldrb	r2, [r3, #6]
 800c6be:	4b1a      	ldr	r3, [pc, #104]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6c0:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800c6c2:	e02a      	b.n	800c71a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800c6c4:	4b18      	ldr	r3, [pc, #96]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800c6ce:	4b16      	ldr	r3, [pc, #88]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	0a1a      	lsrs	r2, r3, #8
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800c6dc:	4b12      	ldr	r3, [pc, #72]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	0c1a      	lsrs	r2, r3, #16
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	3302      	adds	r3, #2
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800c6ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	0e1a      	lsrs	r2, r3, #24
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	3303      	adds	r3, #3
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	3304      	adds	r3, #4
 800c6fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c6fe:	7912      	ldrb	r2, [r2, #4]
 800c700:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	3305      	adds	r3, #5
 800c706:	4a08      	ldr	r2, [pc, #32]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c708:	7952      	ldrb	r2, [r2, #5]
 800c70a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	3306      	adds	r3, #6
 800c710:	4a05      	ldr	r2, [pc, #20]	@ (800c728 <TEMPLATE_Control+0x158>)
 800c712:	7992      	ldrb	r2, [r2, #6]
 800c714:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800c716:	e000      	b.n	800c71a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800c718:	bf00      	nop
  }

  return (0);
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	200000c8 	.word	0x200000c8

0800c72c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2b31      	cmp	r3, #49	@ 0x31
 800c73c:	d105      	bne.n	800c74a <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800c73e:	2201      	movs	r2, #1
 800c740:	2120      	movs	r1, #32
 800c742:	480a      	ldr	r0, [pc, #40]	@ (800c76c <TEMPLATE_Receive+0x40>)
 800c744:	f7f5 f908 	bl	8001958 <HAL_GPIO_WritePin>
 800c748:	e008      	b.n	800c75c <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b30      	cmp	r3, #48	@ 0x30
 800c750:	d104      	bne.n	800c75c <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800c752:	2200      	movs	r2, #0
 800c754:	2120      	movs	r1, #32
 800c756:	4805      	ldr	r0, [pc, #20]	@ (800c76c <TEMPLATE_Receive+0x40>)
 800c758:	f7f5 f8fe 	bl	8001958 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c75c:	4804      	ldr	r0, [pc, #16]	@ (800c770 <TEMPLATE_Receive+0x44>)
 800c75e:	f7ff febf 	bl	800c4e0 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	42020000 	.word	0x42020000
 800c770:	20000480 	.word	0x20000480

0800c774 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	f000 faa5 	bl	800ccf6 <USBD_LL_SetupStage>
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800c7c6:	78fa      	ldrb	r2, [r7, #3]
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	440b      	add	r3, r1
 800c7d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	78fb      	ldrb	r3, [r7, #3]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f000 fadf 	bl	800cda0 <USBD_LL_DataOutStage>
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800c7fc:	78fa      	ldrb	r2, [r7, #3]
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	4613      	mov	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	440b      	add	r3, r1
 800c80a:	3328      	adds	r3, #40	@ 0x28
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	78fb      	ldrb	r3, [r7, #3]
 800c810:	4619      	mov	r1, r3
 800c812:	f000 fb78 	bl	800cf06 <USBD_LL_DataInStage>
}
 800c816:	bf00      	nop
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fc7e 	bl	800d12e <USBD_LL_SOF>
}
 800c832:	bf00      	nop
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b084      	sub	sp, #16
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c842:	2301      	movs	r3, #1
 800c844:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	79db      	ldrb	r3, [r3, #7]
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d001      	beq.n	800c852 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c84e:	f7f4 f8d7 	bl	8000a00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c858:	7bfa      	ldrb	r2, [r7, #15]
 800c85a:	4611      	mov	r1, r2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 fc56 	bl	800d10e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 fbfe 	bl	800d06a <USBD_LL_Reset>
}
 800c86e:	bf00      	nop
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
	...

0800c878 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a19      	ldr	r2, [pc, #100]	@ (800c8e8 <USBD_LL_Init+0x70>)
 800c884:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c88e:	2340      	movs	r3, #64	@ 0x40
 800c890:	2200      	movs	r2, #0
 800c892:	2100      	movs	r1, #0
 800c894:	f7f6 fcf8 	bl	8003288 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c89e:	2380      	movs	r3, #128	@ 0x80
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2180      	movs	r1, #128	@ 0x80
 800c8a4:	f7f6 fcf0 	bl	8003288 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c8ae:	23c0      	movs	r3, #192	@ 0xc0
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	2181      	movs	r1, #129	@ 0x81
 800c8b4:	f7f6 fce8 	bl	8003288 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c8be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	f7f6 fcdf 	bl	8003288 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c8d0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2182      	movs	r1, #130	@ 0x82
 800c8d8:	f7f6 fcd6 	bl	8003288 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	2000019c 	.word	0x2000019c

0800c8ec <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7f5 f9a8 	bl	8001c50 <HAL_PCD_Start>
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800c904:	7bfb      	ldrb	r3, [r7, #15]
 800c906:	4618      	mov	r0, r3
 800c908:	f000 f916 	bl	800cb38 <USBD_Get_USB_Status>
 800c90c:	4603      	mov	r3, r0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	4608      	mov	r0, r1
 800c920:	4611      	mov	r1, r2
 800c922:	461a      	mov	r2, r3
 800c924:	4603      	mov	r3, r0
 800c926:	70fb      	strb	r3, [r7, #3]
 800c928:	460b      	mov	r3, r1
 800c92a:	70bb      	strb	r3, [r7, #2]
 800c92c:	4613      	mov	r3, r2
 800c92e:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c936:	78bb      	ldrb	r3, [r7, #2]
 800c938:	883a      	ldrh	r2, [r7, #0]
 800c93a:	78f9      	ldrb	r1, [r7, #3]
 800c93c:	f7f5 fad7 	bl	8001eee <HAL_PCD_EP_Open>
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800c944:	7bfb      	ldrb	r3, [r7, #15]
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f8f6 	bl	800cb38 <USBD_Get_USB_Status>
 800c94c:	4603      	mov	r3, r0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	460b      	mov	r3, r1
 800c960:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c968:	78fa      	ldrb	r2, [r7, #3]
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f5 fb1f 	bl	8001fb0 <HAL_PCD_EP_Close>
 800c972:	4603      	mov	r3, r0
 800c974:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800c976:	7bfb      	ldrb	r3, [r7, #15]
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 f8dd 	bl	800cb38 <USBD_Get_USB_Status>
 800c97e:	4603      	mov	r3, r0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c99a:	78fa      	ldrb	r2, [r7, #3]
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7f5 fbd2 	bl	8002148 <HAL_PCD_EP_SetStall>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f8c4 	bl	800cb38 <USBD_Get_USB_Status>
 800c9b0:	4603      	mov	r3, r0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f5 fc0d 	bl	80021f0 <HAL_PCD_EP_ClrStall>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 f8ab 	bl	800cb38 <USBD_Get_USB_Status>
 800c9e2:	4603      	mov	r3, r0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9fe:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800ca00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	da0b      	bge.n	800ca20 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca08:	78fb      	ldrb	r3, [r7, #3]
 800ca0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	4613      	mov	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	440b      	add	r3, r1
 800ca1a:	3316      	adds	r3, #22
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	e00b      	b.n	800ca38 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca20:	78fb      	ldrb	r3, [r7, #3]
 800ca22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca26:	68f9      	ldr	r1, [r7, #12]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800ca36:	781b      	ldrb	r3, [r3, #0]
      }
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7f5 fa23 	bl	8001ea6 <HAL_PCD_SetAddress>
 800ca60:	4603      	mov	r3, r0
 800ca62:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 f866 	bl	800cb38 <USBD_Get_USB_Status>
 800ca6c:	4603      	mov	r3, r0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b086      	sub	sp, #24
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	603b      	str	r3, [r7, #0]
 800ca82:	460b      	mov	r3, r1
 800ca84:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ca8c:	7af9      	ldrb	r1, [r7, #11]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	f7f5 fb21 	bl	80020d8 <HAL_PCD_EP_Transmit>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 f84b 	bl	800cb38 <USBD_Get_USB_Status>
 800caa2:	4603      	mov	r3, r0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	607a      	str	r2, [r7, #4]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	460b      	mov	r3, r1
 800caba:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cac2:	7af9      	ldrb	r1, [r7, #11]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	f7f5 fabc 	bl	8002044 <HAL_PCD_EP_Receive>
 800cacc:	4603      	mov	r3, r0
 800cace:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f830 	bl	800cb38 <USBD_Get_USB_Status>
 800cad8:	4603      	mov	r3, r0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	460b      	mov	r3, r1
 800caec:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800caf4:	78fa      	ldrb	r2, [r7, #3]
 800caf6:	4611      	mov	r1, r2
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7f5 fad5 	bl	80020a8 <HAL_PCD_EP_GetRxCount>
 800cafe:	4603      	mov	r3, r0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800cb10:	4b03      	ldr	r3, [pc, #12]	@ (800cb20 <USBD_static_malloc+0x18>)
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	20000c04 	.word	0x20000c04

0800cb24 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d817      	bhi.n	800cb7c <USBD_Get_USB_Status+0x44>
 800cb4c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb54 <USBD_Get_USB_Status+0x1c>)
 800cb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb52:	bf00      	nop
 800cb54:	0800cb65 	.word	0x0800cb65
 800cb58:	0800cb6b 	.word	0x0800cb6b
 800cb5c:	0800cb71 	.word	0x0800cb71
 800cb60:	0800cb77 	.word	0x0800cb77
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
             break;
 800cb68:	e00b      	b.n	800cb82 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	73fb      	strb	r3, [r7, #15]
             break;
 800cb6e:	e008      	b.n	800cb82 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800cb70:	2301      	movs	r3, #1
 800cb72:	73fb      	strb	r3, [r7, #15]
             break;
 800cb74:	e005      	b.n	800cb82 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800cb76:	2303      	movs	r3, #3
 800cb78:	73fb      	strb	r3, [r7, #15]
             break;
 800cb7a:	e002      	b.n	800cb82 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	73fb      	strb	r3, [r7, #15]
             break;
 800cb80:	bf00      	nop
      }
      return usb_status;
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e01f      	b.n	800cbe8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	79fa      	ldrb	r2, [r7, #7]
 800cbda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7ff fe4b 	bl	800c878 <USBD_LL_Init>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e025      	b.n	800cc54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	32ae      	adds	r2, #174	@ 0xae
 800cc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00f      	beq.n	800cc44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	32ae      	adds	r2, #174	@ 0xae
 800cc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc34:	f107 020e 	add.w	r2, r7, #14
 800cc38:	4610      	mov	r0, r2
 800cc3a:	4798      	blx	r3
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fe41 	bl	800c8ec <USBD_LL_Start>
 800cc6a:	4603      	mov	r3, r0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d009      	beq.n	800ccb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	78fa      	ldrb	r2, [r7, #3]
 800ccae:	4611      	mov	r1, r2
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	4798      	blx	r3
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	78fa      	ldrb	r2, [r7, #3]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	4798      	blx	r3
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cce8:	2303      	movs	r3, #3
 800ccea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f001 f846 	bl	800dd9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cd2a:	f003 031f 	and.w	r3, r3, #31
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d01a      	beq.n	800cd68 <USBD_LL_SetupStage+0x72>
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d822      	bhi.n	800cd7c <USBD_LL_SetupStage+0x86>
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <USBD_LL_SetupStage+0x4a>
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d00a      	beq.n	800cd54 <USBD_LL_SetupStage+0x5e>
 800cd3e:	e01d      	b.n	800cd7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fa9d 	bl	800d288 <USBD_StdDevReq>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	73fb      	strb	r3, [r7, #15]
      break;
 800cd52:	e020      	b.n	800cd96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fb05 	bl	800d36c <USBD_StdItfReq>
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]
      break;
 800cd66:	e016      	b.n	800cd96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fb67 	bl	800d444 <USBD_StdEPReq>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]
      break;
 800cd7a:	e00c      	b.n	800cd96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cd82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fdfc 	bl	800c988 <USBD_LL_StallEP>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]
      break;
 800cd94:	bf00      	nop
  }

  return ret;
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cdb2:	7afb      	ldrb	r3, [r7, #11]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d16e      	bne.n	800ce96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cdbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	f040 8098 	bne.w	800cefc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	689a      	ldr	r2, [r3, #8]
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d913      	bls.n	800ce00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	1ad2      	subs	r2, r2, r3
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	68da      	ldr	r2, [r3, #12]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	bf28      	it	cs
 800cdf2:	4613      	movcs	r3, r2
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f001 f9cf 	bl	800e19c <USBD_CtlContinueRx>
 800cdfe:	e07d      	b.n	800cefc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ce06:	f003 031f 	and.w	r3, r3, #31
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d014      	beq.n	800ce38 <USBD_LL_DataOutStage+0x98>
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d81d      	bhi.n	800ce4e <USBD_LL_DataOutStage+0xae>
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d002      	beq.n	800ce1c <USBD_LL_DataOutStage+0x7c>
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d003      	beq.n	800ce22 <USBD_LL_DataOutStage+0x82>
 800ce1a:	e018      	b.n	800ce4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	75bb      	strb	r3, [r7, #22]
            break;
 800ce20:	e018      	b.n	800ce54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f000 f99e 	bl	800d16e <USBD_CoreFindIF>
 800ce32:	4603      	mov	r3, r0
 800ce34:	75bb      	strb	r3, [r7, #22]
            break;
 800ce36:	e00d      	b.n	800ce54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	4619      	mov	r1, r3
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f9a0 	bl	800d188 <USBD_CoreFindEP>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	75bb      	strb	r3, [r7, #22]
            break;
 800ce4c:	e002      	b.n	800ce54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	75bb      	strb	r3, [r7, #22]
            break;
 800ce52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ce54:	7dbb      	ldrb	r3, [r7, #22]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d119      	bne.n	800ce8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d113      	bne.n	800ce8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ce66:	7dba      	ldrb	r2, [r7, #22]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	32ae      	adds	r2, #174	@ 0xae
 800ce6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00b      	beq.n	800ce8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ce76:	7dba      	ldrb	r2, [r7, #22]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ce7e:	7dba      	ldrb	r2, [r7, #22]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	32ae      	adds	r2, #174	@ 0xae
 800ce84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f001 f995 	bl	800e1be <USBD_CtlSendStatus>
 800ce94:	e032      	b.n	800cefc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ce96:	7afb      	ldrb	r3, [r7, #11]
 800ce98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	4619      	mov	r1, r3
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 f971 	bl	800d188 <USBD_CoreFindEP>
 800cea6:	4603      	mov	r3, r0
 800cea8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ceaa:	7dbb      	ldrb	r3, [r7, #22]
 800ceac:	2bff      	cmp	r3, #255	@ 0xff
 800ceae:	d025      	beq.n	800cefc <USBD_LL_DataOutStage+0x15c>
 800ceb0:	7dbb      	ldrb	r3, [r7, #22]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d122      	bne.n	800cefc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d117      	bne.n	800cef2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cec2:	7dba      	ldrb	r2, [r7, #22]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	32ae      	adds	r2, #174	@ 0xae
 800cec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00f      	beq.n	800cef2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ced2:	7dba      	ldrb	r2, [r7, #22]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ceda:	7dba      	ldrb	r2, [r7, #22]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	32ae      	adds	r2, #174	@ 0xae
 800cee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	7afa      	ldrb	r2, [r7, #11]
 800cee8:	4611      	mov	r1, r2
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	4798      	blx	r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cef2:	7dfb      	ldrb	r3, [r7, #23]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	e000      	b.n	800cefe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b086      	sub	sp, #24
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	460b      	mov	r3, r1
 800cf10:	607a      	str	r2, [r7, #4]
 800cf12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cf14:	7afb      	ldrb	r3, [r7, #11]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d16f      	bne.n	800cffa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3314      	adds	r3, #20
 800cf1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d15a      	bne.n	800cfe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	689a      	ldr	r2, [r3, #8]
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d914      	bls.n	800cf60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	1ad2      	subs	r2, r2, r3
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f001 f8f7 	bl	800e140 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf52:	2300      	movs	r3, #0
 800cf54:	2200      	movs	r2, #0
 800cf56:	2100      	movs	r1, #0
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff fda7 	bl	800caac <USBD_LL_PrepareReceive>
 800cf5e:	e03f      	b.n	800cfe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d11c      	bne.n	800cfa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	685a      	ldr	r2, [r3, #4]
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d316      	bcc.n	800cfa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d20f      	bcs.n	800cfa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cf86:	2200      	movs	r2, #0
 800cf88:	2100      	movs	r1, #0
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f001 f8d8 	bl	800e140 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf98:	2300      	movs	r3, #0
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f7ff fd84 	bl	800caac <USBD_LL_PrepareReceive>
 800cfa4:	e01c      	b.n	800cfe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d10f      	bne.n	800cfd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d009      	beq.n	800cfd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfd2:	2180      	movs	r1, #128	@ 0x80
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7ff fcd7 	bl	800c988 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f001 f902 	bl	800e1e4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d03a      	beq.n	800d060 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7ff fe42 	bl	800cc74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cff8:	e032      	b.n	800d060 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cffa:	7afb      	ldrb	r3, [r7, #11]
 800cffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d000:	b2db      	uxtb	r3, r3
 800d002:	4619      	mov	r1, r3
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 f8bf 	bl	800d188 <USBD_CoreFindEP>
 800d00a:	4603      	mov	r3, r0
 800d00c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	2bff      	cmp	r3, #255	@ 0xff
 800d012:	d025      	beq.n	800d060 <USBD_LL_DataInStage+0x15a>
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d122      	bne.n	800d060 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b03      	cmp	r3, #3
 800d024:	d11c      	bne.n	800d060 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d026:	7dfa      	ldrb	r2, [r7, #23]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	32ae      	adds	r2, #174	@ 0xae
 800d02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d014      	beq.n	800d060 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d036:	7dfa      	ldrb	r2, [r7, #23]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d03e:	7dfa      	ldrb	r2, [r7, #23]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	32ae      	adds	r2, #174	@ 0xae
 800d044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	7afa      	ldrb	r2, [r7, #11]
 800d04c:	4611      	mov	r1, r2
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	4798      	blx	r3
 800d052:	4603      	mov	r3, r0
 800d054:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d056:	7dbb      	ldrb	r3, [r7, #22]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d05c:	7dbb      	ldrb	r3, [r7, #22]
 800d05e:	e000      	b.n	800d062 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b084      	sub	sp, #16
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d014      	beq.n	800d0d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00e      	beq.n	800d0d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	6852      	ldr	r2, [r2, #4]
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	4798      	blx	r3
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0d0:	2340      	movs	r3, #64	@ 0x40
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff fc1d 	bl	800c916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2240      	movs	r2, #64	@ 0x40
 800d0e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0ec:	2340      	movs	r3, #64	@ 0x40
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2180      	movs	r1, #128	@ 0x80
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fc0f 	bl	800c916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2240      	movs	r2, #64	@ 0x40
 800d102:	621a      	str	r2, [r3, #32]

  return ret;
 800d104:	7bfb      	ldrb	r3, [r7, #15]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d10e:	b480      	push	{r7}
 800d110:	b083      	sub	sp, #12
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	460b      	mov	r3, r1
 800d118:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	78fa      	ldrb	r2, [r7, #3]
 800d11e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d110      	bne.n	800d164 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00b      	beq.n	800d164 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d005      	beq.n	800d164 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d16e:	b480      	push	{r7}
 800d170:	b083      	sub	sp, #12
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d17a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	460b      	mov	r3, r1
 800d192:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d194:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d196:	4618      	mov	r0, r3
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b086      	sub	sp, #24
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	885b      	ldrh	r3, [r3, #2]
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	7812      	ldrb	r2, [r2, #0]
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d91f      	bls.n	800d208 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d1ce:	e013      	b.n	800d1f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d1d0:	f107 030a 	add.w	r3, r7, #10
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6978      	ldr	r0, [r7, #20]
 800d1d8:	f000 f81b 	bl	800d212 <USBD_GetNextDesc>
 800d1dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	785b      	ldrb	r3, [r3, #1]
 800d1e2:	2b05      	cmp	r3, #5
 800d1e4:	d108      	bne.n	800d1f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	789b      	ldrb	r3, [r3, #2]
 800d1ee:	78fa      	ldrb	r2, [r7, #3]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d008      	beq.n	800d206 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	885b      	ldrh	r3, [r3, #2]
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	897b      	ldrh	r3, [r7, #10]
 800d200:	429a      	cmp	r2, r3
 800d202:	d8e5      	bhi.n	800d1d0 <USBD_GetEpDesc+0x2e>
 800d204:	e000      	b.n	800d208 <USBD_GetEpDesc+0x66>
          break;
 800d206:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d208:	693b      	ldr	r3, [r7, #16]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d212:	b480      	push	{r7}
 800d214:	b085      	sub	sp, #20
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	7812      	ldrb	r2, [r2, #0]
 800d228:	4413      	add	r3, r2
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	461a      	mov	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4413      	add	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d23c:	68fb      	ldr	r3, [r7, #12]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b087      	sub	sp, #28
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	3301      	adds	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d268:	8a3b      	ldrh	r3, [r7, #16]
 800d26a:	021b      	lsls	r3, r3, #8
 800d26c:	b21a      	sxth	r2, r3
 800d26e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d272:	4313      	orrs	r3, r2
 800d274:	b21b      	sxth	r3, r3
 800d276:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d278:	89fb      	ldrh	r3, [r7, #14]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	371c      	adds	r7, #28
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
	...

0800d288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d29e:	2b40      	cmp	r3, #64	@ 0x40
 800d2a0:	d005      	beq.n	800d2ae <USBD_StdDevReq+0x26>
 800d2a2:	2b40      	cmp	r3, #64	@ 0x40
 800d2a4:	d857      	bhi.n	800d356 <USBD_StdDevReq+0xce>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00f      	beq.n	800d2ca <USBD_StdDevReq+0x42>
 800d2aa:	2b20      	cmp	r3, #32
 800d2ac:	d153      	bne.n	800d356 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	32ae      	adds	r2, #174	@ 0xae
 800d2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	4798      	blx	r3
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800d2c8:	e04a      	b.n	800d360 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	2b09      	cmp	r3, #9
 800d2d0:	d83b      	bhi.n	800d34a <USBD_StdDevReq+0xc2>
 800d2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2d8 <USBD_StdDevReq+0x50>)
 800d2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d8:	0800d32d 	.word	0x0800d32d
 800d2dc:	0800d341 	.word	0x0800d341
 800d2e0:	0800d34b 	.word	0x0800d34b
 800d2e4:	0800d337 	.word	0x0800d337
 800d2e8:	0800d34b 	.word	0x0800d34b
 800d2ec:	0800d30b 	.word	0x0800d30b
 800d2f0:	0800d301 	.word	0x0800d301
 800d2f4:	0800d34b 	.word	0x0800d34b
 800d2f8:	0800d323 	.word	0x0800d323
 800d2fc:	0800d315 	.word	0x0800d315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fa3c 	bl	800d780 <USBD_GetDescriptor>
          break;
 800d308:	e024      	b.n	800d354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fba1 	bl	800da54 <USBD_SetAddress>
          break;
 800d312:	e01f      	b.n	800d354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fbe0 	bl	800dadc <USBD_SetConfig>
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]
          break;
 800d320:	e018      	b.n	800d354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fc83 	bl	800dc30 <USBD_GetConfig>
          break;
 800d32a:	e013      	b.n	800d354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fcb4 	bl	800dc9c <USBD_GetStatus>
          break;
 800d334:	e00e      	b.n	800d354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fce3 	bl	800dd04 <USBD_SetFeature>
          break;
 800d33e:	e009      	b.n	800d354 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fd07 	bl	800dd56 <USBD_ClrFeature>
          break;
 800d348:	e004      	b.n	800d354 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fd5e 	bl	800de0e <USBD_CtlError>
          break;
 800d352:	bf00      	nop
      }
      break;
 800d354:	e004      	b.n	800d360 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fd58 	bl	800de0e <USBD_CtlError>
      break;
 800d35e:	bf00      	nop
  }

  return ret;
 800d360:	7bfb      	ldrb	r3, [r7, #15]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop

0800d36c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d382:	2b40      	cmp	r3, #64	@ 0x40
 800d384:	d005      	beq.n	800d392 <USBD_StdItfReq+0x26>
 800d386:	2b40      	cmp	r3, #64	@ 0x40
 800d388:	d852      	bhi.n	800d430 <USBD_StdItfReq+0xc4>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <USBD_StdItfReq+0x26>
 800d38e:	2b20      	cmp	r3, #32
 800d390:	d14e      	bne.n	800d430 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	3b01      	subs	r3, #1
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d840      	bhi.n	800d422 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	889b      	ldrh	r3, [r3, #4]
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d836      	bhi.n	800d418 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	889b      	ldrh	r3, [r3, #4]
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7ff fedb 	bl	800d16e <USBD_CoreFindIF>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	2bff      	cmp	r3, #255	@ 0xff
 800d3c0:	d01d      	beq.n	800d3fe <USBD_StdItfReq+0x92>
 800d3c2:	7bbb      	ldrb	r3, [r7, #14]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d11a      	bne.n	800d3fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d3c8:	7bba      	ldrb	r2, [r7, #14]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	32ae      	adds	r2, #174	@ 0xae
 800d3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00f      	beq.n	800d3f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d3d8:	7bba      	ldrb	r2, [r7, #14]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d3e0:	7bba      	ldrb	r2, [r7, #14]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	32ae      	adds	r2, #174	@ 0xae
 800d3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	6839      	ldr	r1, [r7, #0]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	4798      	blx	r3
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d3f6:	e004      	b.n	800d402 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d3fc:	e001      	b.n	800d402 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d3fe:	2303      	movs	r3, #3
 800d400:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	88db      	ldrh	r3, [r3, #6]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d110      	bne.n	800d42c <USBD_StdItfReq+0xc0>
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10d      	bne.n	800d42c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fed4 	bl	800e1be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d416:	e009      	b.n	800d42c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fcf7 	bl	800de0e <USBD_CtlError>
          break;
 800d420:	e004      	b.n	800d42c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 fcf2 	bl	800de0e <USBD_CtlError>
          break;
 800d42a:	e000      	b.n	800d42e <USBD_StdItfReq+0xc2>
          break;
 800d42c:	bf00      	nop
      }
      break;
 800d42e:	e004      	b.n	800d43a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fceb 	bl	800de0e <USBD_CtlError>
      break;
 800d438:	bf00      	nop
  }

  return ret;
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	889b      	ldrh	r3, [r3, #4]
 800d456:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d460:	2b40      	cmp	r3, #64	@ 0x40
 800d462:	d007      	beq.n	800d474 <USBD_StdEPReq+0x30>
 800d464:	2b40      	cmp	r3, #64	@ 0x40
 800d466:	f200 817f 	bhi.w	800d768 <USBD_StdEPReq+0x324>
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d02a      	beq.n	800d4c4 <USBD_StdEPReq+0x80>
 800d46e:	2b20      	cmp	r3, #32
 800d470:	f040 817a 	bne.w	800d768 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7ff fe85 	bl	800d188 <USBD_CoreFindEP>
 800d47e:	4603      	mov	r3, r0
 800d480:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d482:	7b7b      	ldrb	r3, [r7, #13]
 800d484:	2bff      	cmp	r3, #255	@ 0xff
 800d486:	f000 8174 	beq.w	800d772 <USBD_StdEPReq+0x32e>
 800d48a:	7b7b      	ldrb	r3, [r7, #13]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f040 8170 	bne.w	800d772 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d492:	7b7a      	ldrb	r2, [r7, #13]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d49a:	7b7a      	ldrb	r2, [r7, #13]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	32ae      	adds	r2, #174	@ 0xae
 800d4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 8163 	beq.w	800d772 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d4ac:	7b7a      	ldrb	r2, [r7, #13]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	32ae      	adds	r2, #174	@ 0xae
 800d4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	4798      	blx	r3
 800d4be:	4603      	mov	r3, r0
 800d4c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d4c2:	e156      	b.n	800d772 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	785b      	ldrb	r3, [r3, #1]
 800d4c8:	2b03      	cmp	r3, #3
 800d4ca:	d008      	beq.n	800d4de <USBD_StdEPReq+0x9a>
 800d4cc:	2b03      	cmp	r3, #3
 800d4ce:	f300 8145 	bgt.w	800d75c <USBD_StdEPReq+0x318>
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 809b 	beq.w	800d60e <USBD_StdEPReq+0x1ca>
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d03c      	beq.n	800d556 <USBD_StdEPReq+0x112>
 800d4dc:	e13e      	b.n	800d75c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d002      	beq.n	800d4f0 <USBD_StdEPReq+0xac>
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	d016      	beq.n	800d51c <USBD_StdEPReq+0xd8>
 800d4ee:	e02c      	b.n	800d54a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00d      	beq.n	800d512 <USBD_StdEPReq+0xce>
 800d4f6:	7bbb      	ldrb	r3, [r7, #14]
 800d4f8:	2b80      	cmp	r3, #128	@ 0x80
 800d4fa:	d00a      	beq.n	800d512 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4fc:	7bbb      	ldrb	r3, [r7, #14]
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff fa41 	bl	800c988 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d506:	2180      	movs	r1, #128	@ 0x80
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff fa3d 	bl	800c988 <USBD_LL_StallEP>
 800d50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d510:	e020      	b.n	800d554 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fc7a 	bl	800de0e <USBD_CtlError>
              break;
 800d51a:	e01b      	b.n	800d554 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	885b      	ldrh	r3, [r3, #2]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10e      	bne.n	800d542 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d524:	7bbb      	ldrb	r3, [r7, #14]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00b      	beq.n	800d542 <USBD_StdEPReq+0xfe>
 800d52a:	7bbb      	ldrb	r3, [r7, #14]
 800d52c:	2b80      	cmp	r3, #128	@ 0x80
 800d52e:	d008      	beq.n	800d542 <USBD_StdEPReq+0xfe>
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	88db      	ldrh	r3, [r3, #6]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d104      	bne.n	800d542 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d538:	7bbb      	ldrb	r3, [r7, #14]
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff fa23 	bl	800c988 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fe3b 	bl	800e1be <USBD_CtlSendStatus>

              break;
 800d548:	e004      	b.n	800d554 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fc5e 	bl	800de0e <USBD_CtlError>
              break;
 800d552:	bf00      	nop
          }
          break;
 800d554:	e107      	b.n	800d766 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d002      	beq.n	800d568 <USBD_StdEPReq+0x124>
 800d562:	2b03      	cmp	r3, #3
 800d564:	d016      	beq.n	800d594 <USBD_StdEPReq+0x150>
 800d566:	e04b      	b.n	800d600 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d568:	7bbb      	ldrb	r3, [r7, #14]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00d      	beq.n	800d58a <USBD_StdEPReq+0x146>
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b80      	cmp	r3, #128	@ 0x80
 800d572:	d00a      	beq.n	800d58a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d574:	7bbb      	ldrb	r3, [r7, #14]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff fa05 	bl	800c988 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d57e:	2180      	movs	r1, #128	@ 0x80
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7ff fa01 	bl	800c988 <USBD_LL_StallEP>
 800d586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d588:	e040      	b.n	800d60c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fc3e 	bl	800de0e <USBD_CtlError>
              break;
 800d592:	e03b      	b.n	800d60c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	885b      	ldrh	r3, [r3, #2]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d136      	bne.n	800d60a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d59c:	7bbb      	ldrb	r3, [r7, #14]
 800d59e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d004      	beq.n	800d5b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d5a6:	7bbb      	ldrb	r3, [r7, #14]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fa05 	bl	800c9ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fe04 	bl	800e1be <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d5b6:	7bbb      	ldrb	r3, [r7, #14]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff fde4 	bl	800d188 <USBD_CoreFindEP>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5c4:	7b7b      	ldrb	r3, [r7, #13]
 800d5c6:	2bff      	cmp	r3, #255	@ 0xff
 800d5c8:	d01f      	beq.n	800d60a <USBD_StdEPReq+0x1c6>
 800d5ca:	7b7b      	ldrb	r3, [r7, #13]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d11c      	bne.n	800d60a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d5d0:	7b7a      	ldrb	r2, [r7, #13]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d5d8:	7b7a      	ldrb	r2, [r7, #13]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	32ae      	adds	r2, #174	@ 0xae
 800d5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d010      	beq.n	800d60a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d5e8:	7b7a      	ldrb	r2, [r7, #13]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	32ae      	adds	r2, #174	@ 0xae
 800d5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	4798      	blx	r3
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d5fe:	e004      	b.n	800d60a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fc03 	bl	800de0e <USBD_CtlError>
              break;
 800d608:	e000      	b.n	800d60c <USBD_StdEPReq+0x1c8>
              break;
 800d60a:	bf00      	nop
          }
          break;
 800d60c:	e0ab      	b.n	800d766 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b02      	cmp	r3, #2
 800d618:	d002      	beq.n	800d620 <USBD_StdEPReq+0x1dc>
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d032      	beq.n	800d684 <USBD_StdEPReq+0x240>
 800d61e:	e097      	b.n	800d750 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <USBD_StdEPReq+0x1f2>
 800d626:	7bbb      	ldrb	r3, [r7, #14]
 800d628:	2b80      	cmp	r3, #128	@ 0x80
 800d62a:	d004      	beq.n	800d636 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fbed 	bl	800de0e <USBD_CtlError>
                break;
 800d634:	e091      	b.n	800d75a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	da0b      	bge.n	800d656 <USBD_StdEPReq+0x212>
 800d63e:	7bbb      	ldrb	r3, [r7, #14]
 800d640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d644:	4613      	mov	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	3310      	adds	r3, #16
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4413      	add	r3, r2
 800d652:	3304      	adds	r3, #4
 800d654:	e00b      	b.n	800d66e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d656:	7bbb      	ldrb	r3, [r7, #14]
 800d658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d65c:	4613      	mov	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	4413      	add	r3, r2
 800d66c:	3304      	adds	r3, #4
 800d66e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2200      	movs	r2, #0
 800d674:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	2202      	movs	r2, #2
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fd44 	bl	800e10a <USBD_CtlSendData>
              break;
 800d682:	e06a      	b.n	800d75a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da11      	bge.n	800d6b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	f003 020f 	and.w	r2, r3, #15
 800d692:	6879      	ldr	r1, [r7, #4]
 800d694:	4613      	mov	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	3324      	adds	r3, #36	@ 0x24
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d117      	bne.n	800d6d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d6a6:	6839      	ldr	r1, [r7, #0]
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 fbb0 	bl	800de0e <USBD_CtlError>
                  break;
 800d6ae:	e054      	b.n	800d75a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d6b0:	7bbb      	ldrb	r3, [r7, #14]
 800d6b2:	f003 020f 	and.w	r2, r3, #15
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	440b      	add	r3, r1
 800d6c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d104      	bne.n	800d6d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fb9d 	bl	800de0e <USBD_CtlError>
                  break;
 800d6d4:	e041      	b.n	800d75a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	da0b      	bge.n	800d6f6 <USBD_StdEPReq+0x2b2>
 800d6de:	7bbb      	ldrb	r3, [r7, #14]
 800d6e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	3310      	adds	r3, #16
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	e00b      	b.n	800d70e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6f6:	7bbb      	ldrb	r3, [r7, #14]
 800d6f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	4413      	add	r3, r2
 800d70c:	3304      	adds	r3, #4
 800d70e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <USBD_StdEPReq+0x2d8>
 800d716:	7bbb      	ldrb	r3, [r7, #14]
 800d718:	2b80      	cmp	r3, #128	@ 0x80
 800d71a:	d103      	bne.n	800d724 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2200      	movs	r2, #0
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	e00e      	b.n	800d742 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d724:	7bbb      	ldrb	r3, [r7, #14]
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff f95f 	bl	800c9ec <USBD_LL_IsStallEP>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d003      	beq.n	800d73c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2201      	movs	r2, #1
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	e002      	b.n	800d742 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	2202      	movs	r2, #2
 800d746:	4619      	mov	r1, r3
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 fcde 	bl	800e10a <USBD_CtlSendData>
              break;
 800d74e:	e004      	b.n	800d75a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d750:	6839      	ldr	r1, [r7, #0]
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 fb5b 	bl	800de0e <USBD_CtlError>
              break;
 800d758:	bf00      	nop
          }
          break;
 800d75a:	e004      	b.n	800d766 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fb55 	bl	800de0e <USBD_CtlError>
          break;
 800d764:	bf00      	nop
      }
      break;
 800d766:	e005      	b.n	800d774 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fb4f 	bl	800de0e <USBD_CtlError>
      break;
 800d770:	e000      	b.n	800d774 <USBD_StdEPReq+0x330>
      break;
 800d772:	bf00      	nop
  }

  return ret;
 800d774:	7bfb      	ldrb	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d78e:	2300      	movs	r3, #0
 800d790:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	885b      	ldrh	r3, [r3, #2]
 800d79a:	0a1b      	lsrs	r3, r3, #8
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	2b06      	cmp	r3, #6
 800d7a2:	f200 8128 	bhi.w	800d9f6 <USBD_GetDescriptor+0x276>
 800d7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7ac <USBD_GetDescriptor+0x2c>)
 800d7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ac:	0800d7c9 	.word	0x0800d7c9
 800d7b0:	0800d7e1 	.word	0x0800d7e1
 800d7b4:	0800d821 	.word	0x0800d821
 800d7b8:	0800d9f7 	.word	0x0800d9f7
 800d7bc:	0800d9f7 	.word	0x0800d9f7
 800d7c0:	0800d997 	.word	0x0800d997
 800d7c4:	0800d9c3 	.word	0x0800d9c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	7c12      	ldrb	r2, [r2, #16]
 800d7d4:	f107 0108 	add.w	r1, r7, #8
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
 800d7dc:	60f8      	str	r0, [r7, #12]
      break;
 800d7de:	e112      	b.n	800da06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7c1b      	ldrb	r3, [r3, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10d      	bne.n	800d804 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f0:	f107 0208 	add.w	r2, r7, #8
 800d7f4:	4610      	mov	r0, r2
 800d7f6:	4798      	blx	r3
 800d7f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	2202      	movs	r2, #2
 800d800:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d802:	e100      	b.n	800da06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80c:	f107 0208 	add.w	r2, r7, #8
 800d810:	4610      	mov	r0, r2
 800d812:	4798      	blx	r3
 800d814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3301      	adds	r3, #1
 800d81a:	2202      	movs	r2, #2
 800d81c:	701a      	strb	r2, [r3, #0]
      break;
 800d81e:	e0f2      	b.n	800da06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	885b      	ldrh	r3, [r3, #2]
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b05      	cmp	r3, #5
 800d828:	f200 80ac 	bhi.w	800d984 <USBD_GetDescriptor+0x204>
 800d82c:	a201      	add	r2, pc, #4	@ (adr r2, 800d834 <USBD_GetDescriptor+0xb4>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d84d 	.word	0x0800d84d
 800d838:	0800d881 	.word	0x0800d881
 800d83c:	0800d8b5 	.word	0x0800d8b5
 800d840:	0800d8e9 	.word	0x0800d8e9
 800d844:	0800d91d 	.word	0x0800d91d
 800d848:	0800d951 	.word	0x0800d951
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00b      	beq.n	800d870 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	7c12      	ldrb	r2, [r2, #16]
 800d864:	f107 0108 	add.w	r1, r7, #8
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
 800d86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d86e:	e091      	b.n	800d994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 facb 	bl	800de0e <USBD_CtlError>
            err++;
 800d878:	7afb      	ldrb	r3, [r7, #11]
 800d87a:	3301      	adds	r3, #1
 800d87c:	72fb      	strb	r3, [r7, #11]
          break;
 800d87e:	e089      	b.n	800d994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00b      	beq.n	800d8a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	7c12      	ldrb	r2, [r2, #16]
 800d898:	f107 0108 	add.w	r1, r7, #8
 800d89c:	4610      	mov	r0, r2
 800d89e:	4798      	blx	r3
 800d8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8a2:	e077      	b.n	800d994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fab1 	bl	800de0e <USBD_CtlError>
            err++;
 800d8ac:	7afb      	ldrb	r3, [r7, #11]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8b2:	e06f      	b.n	800d994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00b      	beq.n	800d8d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	7c12      	ldrb	r2, [r2, #16]
 800d8cc:	f107 0108 	add.w	r1, r7, #8
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	4798      	blx	r3
 800d8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8d6:	e05d      	b.n	800d994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8d8:	6839      	ldr	r1, [r7, #0]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 fa97 	bl	800de0e <USBD_CtlError>
            err++;
 800d8e0:	7afb      	ldrb	r3, [r7, #11]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d8e6:	e055      	b.n	800d994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00b      	beq.n	800d90c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8fa:	691b      	ldr	r3, [r3, #16]
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	7c12      	ldrb	r2, [r2, #16]
 800d900:	f107 0108 	add.w	r1, r7, #8
 800d904:	4610      	mov	r0, r2
 800d906:	4798      	blx	r3
 800d908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d90a:	e043      	b.n	800d994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fa7d 	bl	800de0e <USBD_CtlError>
            err++;
 800d914:	7afb      	ldrb	r3, [r7, #11]
 800d916:	3301      	adds	r3, #1
 800d918:	72fb      	strb	r3, [r7, #11]
          break;
 800d91a:	e03b      	b.n	800d994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d92e:	695b      	ldr	r3, [r3, #20]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	7c12      	ldrb	r2, [r2, #16]
 800d934:	f107 0108 	add.w	r1, r7, #8
 800d938:	4610      	mov	r0, r2
 800d93a:	4798      	blx	r3
 800d93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d93e:	e029      	b.n	800d994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fa63 	bl	800de0e <USBD_CtlError>
            err++;
 800d948:	7afb      	ldrb	r3, [r7, #11]
 800d94a:	3301      	adds	r3, #1
 800d94c:	72fb      	strb	r3, [r7, #11]
          break;
 800d94e:	e021      	b.n	800d994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00b      	beq.n	800d974 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	7c12      	ldrb	r2, [r2, #16]
 800d968:	f107 0108 	add.w	r1, r7, #8
 800d96c:	4610      	mov	r0, r2
 800d96e:	4798      	blx	r3
 800d970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d972:	e00f      	b.n	800d994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 fa49 	bl	800de0e <USBD_CtlError>
            err++;
 800d97c:	7afb      	ldrb	r3, [r7, #11]
 800d97e:	3301      	adds	r3, #1
 800d980:	72fb      	strb	r3, [r7, #11]
          break;
 800d982:	e007      	b.n	800d994 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fa41 	bl	800de0e <USBD_CtlError>
          err++;
 800d98c:	7afb      	ldrb	r3, [r7, #11]
 800d98e:	3301      	adds	r3, #1
 800d990:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d992:	bf00      	nop
      }
      break;
 800d994:	e037      	b.n	800da06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	7c1b      	ldrb	r3, [r3, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9a6:	f107 0208 	add.w	r2, r7, #8
 800d9aa:	4610      	mov	r0, r2
 800d9ac:	4798      	blx	r3
 800d9ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9b0:	e029      	b.n	800da06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fa2a 	bl	800de0e <USBD_CtlError>
        err++;
 800d9ba:	7afb      	ldrb	r3, [r7, #11]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	72fb      	strb	r3, [r7, #11]
      break;
 800d9c0:	e021      	b.n	800da06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7c1b      	ldrb	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10d      	bne.n	800d9e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d2:	f107 0208 	add.w	r2, r7, #8
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	4798      	blx	r3
 800d9da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	2207      	movs	r2, #7
 800d9e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9e4:	e00f      	b.n	800da06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fa10 	bl	800de0e <USBD_CtlError>
        err++;
 800d9ee:	7afb      	ldrb	r3, [r7, #11]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d9f4:	e007      	b.n	800da06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fa08 	bl	800de0e <USBD_CtlError>
      err++;
 800d9fe:	7afb      	ldrb	r3, [r7, #11]
 800da00:	3301      	adds	r3, #1
 800da02:	72fb      	strb	r3, [r7, #11]
      break;
 800da04:	bf00      	nop
  }

  if (err != 0U)
 800da06:	7afb      	ldrb	r3, [r7, #11]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d11e      	bne.n	800da4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	88db      	ldrh	r3, [r3, #6]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d016      	beq.n	800da42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800da14:	893b      	ldrh	r3, [r7, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00e      	beq.n	800da38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	88da      	ldrh	r2, [r3, #6]
 800da1e:	893b      	ldrh	r3, [r7, #8]
 800da20:	4293      	cmp	r3, r2
 800da22:	bf28      	it	cs
 800da24:	4613      	movcs	r3, r2
 800da26:	b29b      	uxth	r3, r3
 800da28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800da2a:	893b      	ldrh	r3, [r7, #8]
 800da2c:	461a      	mov	r2, r3
 800da2e:	68f9      	ldr	r1, [r7, #12]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fb6a 	bl	800e10a <USBD_CtlSendData>
 800da36:	e009      	b.n	800da4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f9e7 	bl	800de0e <USBD_CtlError>
 800da40:	e004      	b.n	800da4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fbbb 	bl	800e1be <USBD_CtlSendStatus>
 800da48:	e000      	b.n	800da4c <USBD_GetDescriptor+0x2cc>
    return;
 800da4a:	bf00      	nop
  }
}
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop

0800da54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	889b      	ldrh	r3, [r3, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d131      	bne.n	800daca <USBD_SetAddress+0x76>
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	88db      	ldrh	r3, [r3, #6]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d12d      	bne.n	800daca <USBD_SetAddress+0x76>
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	885b      	ldrh	r3, [r3, #2]
 800da72:	2b7f      	cmp	r3, #127	@ 0x7f
 800da74:	d829      	bhi.n	800daca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	885b      	ldrh	r3, [r3, #2]
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d104      	bne.n	800da98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800da8e:	6839      	ldr	r1, [r7, #0]
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f9bc 	bl	800de0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da96:	e01d      	b.n	800dad4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	7bfa      	ldrb	r2, [r7, #15]
 800da9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7fe ffcd 	bl	800ca44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fb87 	bl	800e1be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d004      	beq.n	800dac0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2202      	movs	r2, #2
 800daba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dabe:	e009      	b.n	800dad4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dac8:	e004      	b.n	800dad4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f99e 	bl	800de0e <USBD_CtlError>
  }
}
 800dad2:	bf00      	nop
 800dad4:	bf00      	nop
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	885b      	ldrh	r3, [r3, #2]
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	4b4e      	ldr	r3, [pc, #312]	@ (800dc2c <USBD_SetConfig+0x150>)
 800daf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800daf4:	4b4d      	ldr	r3, [pc, #308]	@ (800dc2c <USBD_SetConfig+0x150>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d905      	bls.n	800db08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f985 	bl	800de0e <USBD_CtlError>
    return USBD_FAIL;
 800db04:	2303      	movs	r3, #3
 800db06:	e08c      	b.n	800dc22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2b02      	cmp	r3, #2
 800db12:	d002      	beq.n	800db1a <USBD_SetConfig+0x3e>
 800db14:	2b03      	cmp	r3, #3
 800db16:	d029      	beq.n	800db6c <USBD_SetConfig+0x90>
 800db18:	e075      	b.n	800dc06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800db1a:	4b44      	ldr	r3, [pc, #272]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d020      	beq.n	800db64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800db22:	4b42      	ldr	r3, [pc, #264]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db2c:	4b3f      	ldr	r3, [pc, #252]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff f8a9 	bl	800cc8a <USBD_SetClassConfig>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d008      	beq.n	800db54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f962 	bl	800de0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2202      	movs	r2, #2
 800db4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db52:	e065      	b.n	800dc20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 fb32 	bl	800e1be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2203      	movs	r2, #3
 800db5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800db62:	e05d      	b.n	800dc20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 fb2a 	bl	800e1be <USBD_CtlSendStatus>
      break;
 800db6a:	e059      	b.n	800dc20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800db6c:	4b2f      	ldr	r3, [pc, #188]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d112      	bne.n	800db9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2202      	movs	r2, #2
 800db78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800db7c:	4b2b      	ldr	r3, [pc, #172]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	461a      	mov	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db86:	4b29      	ldr	r3, [pc, #164]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff f898 	bl	800ccc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fb13 	bl	800e1be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db98:	e042      	b.n	800dc20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800db9a:	4b24      	ldr	r3, [pc, #144]	@ (800dc2c <USBD_SetConfig+0x150>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	461a      	mov	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d02a      	beq.n	800dbfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff f886 	bl	800ccc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dbb6:	4b1d      	ldr	r3, [pc, #116]	@ (800dc2c <USBD_SetConfig+0x150>)
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbc0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc2c <USBD_SetConfig+0x150>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff f85f 	bl	800cc8a <USBD_SetClassConfig>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00f      	beq.n	800dbf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f918 	bl	800de0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff f86b 	bl	800ccc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2202      	movs	r2, #2
 800dbf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dbf4:	e014      	b.n	800dc20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fae1 	bl	800e1be <USBD_CtlSendStatus>
      break;
 800dbfc:	e010      	b.n	800dc20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fadd 	bl	800e1be <USBD_CtlSendStatus>
      break;
 800dc04:	e00c      	b.n	800dc20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f900 	bl	800de0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc0e:	4b07      	ldr	r3, [pc, #28]	@ (800dc2c <USBD_SetConfig+0x150>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7ff f854 	bl	800ccc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc1e:	bf00      	nop
  }

  return ret;
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20000e24 	.word	0x20000e24

0800dc30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	88db      	ldrh	r3, [r3, #6]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d004      	beq.n	800dc4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 f8e2 	bl	800de0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dc4a:	e023      	b.n	800dc94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	dc02      	bgt.n	800dc5e <USBD_GetConfig+0x2e>
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	dc03      	bgt.n	800dc64 <USBD_GetConfig+0x34>
 800dc5c:	e015      	b.n	800dc8a <USBD_GetConfig+0x5a>
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d00b      	beq.n	800dc7a <USBD_GetConfig+0x4a>
 800dc62:	e012      	b.n	800dc8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	2201      	movs	r2, #1
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 fa49 	bl	800e10a <USBD_CtlSendData>
        break;
 800dc78:	e00c      	b.n	800dc94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	3304      	adds	r3, #4
 800dc7e:	2201      	movs	r2, #1
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fa41 	bl	800e10a <USBD_CtlSendData>
        break;
 800dc88:	e004      	b.n	800dc94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 f8be 	bl	800de0e <USBD_CtlError>
        break;
 800dc92:	bf00      	nop
}
 800dc94:	bf00      	nop
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d81e      	bhi.n	800dcf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	88db      	ldrh	r3, [r3, #6]
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d004      	beq.n	800dcc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f8a5 	bl	800de0e <USBD_CtlError>
        break;
 800dcc4:	e01a      	b.n	800dcfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d005      	beq.n	800dce2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	f043 0202 	orr.w	r2, r3, #2
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	330c      	adds	r3, #12
 800dce6:	2202      	movs	r2, #2
 800dce8:	4619      	mov	r1, r3
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fa0d 	bl	800e10a <USBD_CtlSendData>
      break;
 800dcf0:	e004      	b.n	800dcfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f88a 	bl	800de0e <USBD_CtlError>
      break;
 800dcfa:	bf00      	nop
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	885b      	ldrh	r3, [r3, #2]
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d107      	bne.n	800dd26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fa4d 	bl	800e1be <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dd24:	e013      	b.n	800dd4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	885b      	ldrh	r3, [r3, #2]
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d10b      	bne.n	800dd46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	889b      	ldrh	r3, [r3, #4]
 800dd32:	0a1b      	lsrs	r3, r3, #8
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fa3d 	bl	800e1be <USBD_CtlSendStatus>
}
 800dd44:	e003      	b.n	800dd4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 f860 	bl	800de0e <USBD_CtlError>
}
 800dd4e:	bf00      	nop
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b082      	sub	sp, #8
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	2b02      	cmp	r3, #2
 800dd6c:	d80b      	bhi.n	800dd86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	885b      	ldrh	r3, [r3, #2]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d10c      	bne.n	800dd90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 fa1d 	bl	800e1be <USBD_CtlSendStatus>
      }
      break;
 800dd84:	e004      	b.n	800dd90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f840 	bl	800de0e <USBD_CtlError>
      break;
 800dd8e:	e000      	b.n	800dd92 <USBD_ClrFeature+0x3c>
      break;
 800dd90:	bf00      	nop
  }
}
 800dd92:	bf00      	nop
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b084      	sub	sp, #16
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
 800dda2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	781a      	ldrb	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	781a      	ldrb	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f7ff fa40 	bl	800d24a <SWAPBYTE>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7ff fa33 	bl	800d24a <SWAPBYTE>
 800dde4:	4603      	mov	r3, r0
 800dde6:	461a      	mov	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff fa26 	bl	800d24a <SWAPBYTE>
 800ddfe:	4603      	mov	r3, r0
 800de00:	461a      	mov	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	80da      	strh	r2, [r3, #6]
}
 800de06:	bf00      	nop
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b082      	sub	sp, #8
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de18:	2180      	movs	r1, #128	@ 0x80
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7fe fdb4 	bl	800c988 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de20:	2100      	movs	r1, #0
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7fe fdb0 	bl	800c988 <USBD_LL_StallEP>
}
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de3c:	2300      	movs	r3, #0
 800de3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d036      	beq.n	800deb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de4a:	6938      	ldr	r0, [r7, #16]
 800de4c:	f000 f836 	bl	800debc <USBD_GetLen>
 800de50:	4603      	mov	r3, r0
 800de52:	3301      	adds	r3, #1
 800de54:	b29b      	uxth	r3, r3
 800de56:	005b      	lsls	r3, r3, #1
 800de58:	b29a      	uxth	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	68ba      	ldr	r2, [r7, #8]
 800de62:	4413      	add	r3, r2
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	7812      	ldrb	r2, [r2, #0]
 800de68:	701a      	strb	r2, [r3, #0]
  idx++;
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
 800de6c:	3301      	adds	r3, #1
 800de6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de70:	7dfb      	ldrb	r3, [r7, #23]
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	4413      	add	r3, r2
 800de76:	2203      	movs	r2, #3
 800de78:	701a      	strb	r2, [r3, #0]
  idx++;
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	3301      	adds	r3, #1
 800de7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de80:	e013      	b.n	800deaa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	4413      	add	r3, r2
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	7812      	ldrb	r2, [r2, #0]
 800de8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	3301      	adds	r3, #1
 800de92:	613b      	str	r3, [r7, #16]
    idx++;
 800de94:	7dfb      	ldrb	r3, [r7, #23]
 800de96:	3301      	adds	r3, #1
 800de98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	4413      	add	r3, r2
 800dea0:	2200      	movs	r2, #0
 800dea2:	701a      	strb	r2, [r3, #0]
    idx++;
 800dea4:	7dfb      	ldrb	r3, [r7, #23]
 800dea6:	3301      	adds	r3, #1
 800dea8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1e7      	bne.n	800de82 <USBD_GetString+0x52>
 800deb2:	e000      	b.n	800deb6 <USBD_GetString+0x86>
    return;
 800deb4:	bf00      	nop
  }
}
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800decc:	e005      	b.n	800deda <USBD_GetLen+0x1e>
  {
    len++;
 800dece:	7bfb      	ldrb	r3, [r7, #15]
 800ded0:	3301      	adds	r3, #1
 800ded2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	3301      	adds	r3, #1
 800ded8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1f5      	bne.n	800dece <USBD_GetLen+0x12>
  }

  return len;
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	6039      	str	r1, [r7, #0]
 800defa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	2212      	movs	r2, #18
 800df00:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800df02:	4b03      	ldr	r3, [pc, #12]	@ (800df10 <USBD_Class_DeviceDescriptor+0x20>)
}
 800df04:	4618      	mov	r0, r3
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr
 800df10:	200000ec 	.word	0x200000ec

0800df14 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	4603      	mov	r3, r0
 800df1c:	6039      	str	r1, [r7, #0]
 800df1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2204      	movs	r2, #4
 800df24:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800df26:	4b03      	ldr	r3, [pc, #12]	@ (800df34 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800df28:	4618      	mov	r0, r3
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	20000100 	.word	0x20000100

0800df38 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	4603      	mov	r3, r0
 800df40:	6039      	str	r1, [r7, #0]
 800df42:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d105      	bne.n	800df56 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800df4a:	683a      	ldr	r2, [r7, #0]
 800df4c:	4907      	ldr	r1, [pc, #28]	@ (800df6c <USBD_Class_ProductStrDescriptor+0x34>)
 800df4e:	4808      	ldr	r0, [pc, #32]	@ (800df70 <USBD_Class_ProductStrDescriptor+0x38>)
 800df50:	f7ff ff6e 	bl	800de30 <USBD_GetString>
 800df54:	e004      	b.n	800df60 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	4904      	ldr	r1, [pc, #16]	@ (800df6c <USBD_Class_ProductStrDescriptor+0x34>)
 800df5a:	4805      	ldr	r0, [pc, #20]	@ (800df70 <USBD_Class_ProductStrDescriptor+0x38>)
 800df5c:	f7ff ff68 	bl	800de30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df60:	4b02      	ldr	r3, [pc, #8]	@ (800df6c <USBD_Class_ProductStrDescriptor+0x34>)
}
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20000e28 	.word	0x20000e28
 800df70:	0800ebc0 	.word	0x0800ebc0

0800df74 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	6039      	str	r1, [r7, #0]
 800df7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	4904      	ldr	r1, [pc, #16]	@ (800df94 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800df84:	4804      	ldr	r0, [pc, #16]	@ (800df98 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800df86:	f7ff ff53 	bl	800de30 <USBD_GetString>
  return USBD_StrDesc;
 800df8a:	4b02      	ldr	r3, [pc, #8]	@ (800df94 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20000e28 	.word	0x20000e28
 800df98:	0800ebd8 	.word	0x0800ebd8

0800df9c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	6039      	str	r1, [r7, #0]
 800dfa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	221a      	movs	r2, #26
 800dfac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800dfae:	f000 f843 	bl	800e038 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800dfb2:	4b02      	ldr	r3, [pc, #8]	@ (800dfbc <USBD_Class_SerialStrDescriptor+0x20>)
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20000104 	.word	0x20000104

0800dfc0 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	6039      	str	r1, [r7, #0]
 800dfca:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d105      	bne.n	800dfde <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	4907      	ldr	r1, [pc, #28]	@ (800dff4 <USBD_Class_ConfigStrDescriptor+0x34>)
 800dfd6:	4808      	ldr	r0, [pc, #32]	@ (800dff8 <USBD_Class_ConfigStrDescriptor+0x38>)
 800dfd8:	f7ff ff2a 	bl	800de30 <USBD_GetString>
 800dfdc:	e004      	b.n	800dfe8 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	4904      	ldr	r1, [pc, #16]	@ (800dff4 <USBD_Class_ConfigStrDescriptor+0x34>)
 800dfe2:	4805      	ldr	r0, [pc, #20]	@ (800dff8 <USBD_Class_ConfigStrDescriptor+0x38>)
 800dfe4:	f7ff ff24 	bl	800de30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfe8:	4b02      	ldr	r3, [pc, #8]	@ (800dff4 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20000e28 	.word	0x20000e28
 800dff8:	0800ebec 	.word	0x0800ebec

0800dffc <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	4603      	mov	r3, r0
 800e004:	6039      	str	r1, [r7, #0]
 800e006:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d105      	bne.n	800e01a <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	4907      	ldr	r1, [pc, #28]	@ (800e030 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800e012:	4808      	ldr	r0, [pc, #32]	@ (800e034 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800e014:	f7ff ff0c 	bl	800de30 <USBD_GetString>
 800e018:	e004      	b.n	800e024 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800e01a:	683a      	ldr	r2, [r7, #0]
 800e01c:	4904      	ldr	r1, [pc, #16]	@ (800e030 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800e01e:	4805      	ldr	r0, [pc, #20]	@ (800e034 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800e020:	f7ff ff06 	bl	800de30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e024:	4b02      	ldr	r3, [pc, #8]	@ (800e030 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000e28 	.word	0x20000e28
 800e034:	0800ebf8 	.word	0x0800ebf8

0800e038 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800e03e:	4b0f      	ldr	r3, [pc, #60]	@ (800e07c <Get_SerialNum+0x44>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800e044:	4b0e      	ldr	r3, [pc, #56]	@ (800e080 <Get_SerialNum+0x48>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800e04a:	4b0e      	ldr	r3, [pc, #56]	@ (800e084 <Get_SerialNum+0x4c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4413      	add	r3, r2
 800e056:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d009      	beq.n	800e072 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800e05e:	2208      	movs	r2, #8
 800e060:	4909      	ldr	r1, [pc, #36]	@ (800e088 <Get_SerialNum+0x50>)
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 f814 	bl	800e090 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800e068:	2204      	movs	r2, #4
 800e06a:	4908      	ldr	r1, [pc, #32]	@ (800e08c <Get_SerialNum+0x54>)
 800e06c:	68b8      	ldr	r0, [r7, #8]
 800e06e:	f000 f80f 	bl	800e090 <IntToUnicode>
  }
}
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	08fff800 	.word	0x08fff800
 800e080:	08fff804 	.word	0x08fff804
 800e084:	08fff808 	.word	0x08fff808
 800e088:	20000106 	.word	0x20000106
 800e08c:	20000116 	.word	0x20000116

0800e090 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800e090:	b480      	push	{r7}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	4613      	mov	r3, r2
 800e09c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	75fb      	strb	r3, [r7, #23]
 800e0a6:	e025      	b.n	800e0f4 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	0f1b      	lsrs	r3, r3, #28
 800e0ac:	2b09      	cmp	r3, #9
 800e0ae:	d80a      	bhi.n	800e0c6 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	0f1b      	lsrs	r3, r3, #28
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	7dfb      	ldrb	r3, [r7, #23]
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	440b      	add	r3, r1
 800e0be:	3230      	adds	r2, #48	@ 0x30
 800e0c0:	b2d2      	uxtb	r2, r2
 800e0c2:	701a      	strb	r2, [r3, #0]
 800e0c4:	e009      	b.n	800e0da <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	0f1b      	lsrs	r3, r3, #28
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	7dfb      	ldrb	r3, [r7, #23]
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	68b9      	ldr	r1, [r7, #8]
 800e0d2:	440b      	add	r3, r1
 800e0d4:	3237      	adds	r2, #55	@ 0x37
 800e0d6:	b2d2      	uxtb	r2, r2
 800e0d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	011b      	lsls	r3, r3, #4
 800e0de:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800e0e0:	7dfb      	ldrb	r3, [r7, #23]
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	75fb      	strb	r3, [r7, #23]
 800e0f4:	7dfa      	ldrb	r2, [r7, #23]
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d3d5      	bcc.n	800e0a8 <IntToUnicode+0x18>
  }
}
 800e0fc:	bf00      	nop
 800e0fe:	bf00      	nop
 800e100:	371c      	adds	r7, #28
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b084      	sub	sp, #16
 800e10e:	af00      	add	r7, sp, #0
 800e110:	60f8      	str	r0, [r7, #12]
 800e112:	60b9      	str	r1, [r7, #8]
 800e114:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2202      	movs	r2, #2
 800e11a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	2100      	movs	r1, #0
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f7fe fca0 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	2100      	movs	r1, #0
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7fe fc8f 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	60b9      	str	r1, [r7, #8]
 800e16c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2203      	movs	r2, #3
 800e172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	2100      	movs	r1, #0
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7fe fc8d 	bl	800caac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7fe fc7c 	bl	800caac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2204      	movs	r2, #4
 800e1ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7fe fc4e 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2205      	movs	r2, #5
 800e1f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7fe fc56 	bl	800caac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <sniprintf>:
 800e20c:	b40c      	push	{r2, r3}
 800e20e:	4b18      	ldr	r3, [pc, #96]	@ (800e270 <sniprintf+0x64>)
 800e210:	b530      	push	{r4, r5, lr}
 800e212:	1e0c      	subs	r4, r1, #0
 800e214:	b09d      	sub	sp, #116	@ 0x74
 800e216:	681d      	ldr	r5, [r3, #0]
 800e218:	da08      	bge.n	800e22c <sniprintf+0x20>
 800e21a:	238b      	movs	r3, #139	@ 0x8b
 800e21c:	f04f 30ff 	mov.w	r0, #4294967295
 800e220:	602b      	str	r3, [r5, #0]
 800e222:	b01d      	add	sp, #116	@ 0x74
 800e224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e228:	b002      	add	sp, #8
 800e22a:	4770      	bx	lr
 800e22c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e230:	9002      	str	r0, [sp, #8]
 800e232:	9006      	str	r0, [sp, #24]
 800e234:	a902      	add	r1, sp, #8
 800e236:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e23a:	bf14      	ite	ne
 800e23c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e240:	4623      	moveq	r3, r4
 800e242:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e244:	4628      	mov	r0, r5
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	9307      	str	r3, [sp, #28]
 800e24a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e24e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e252:	ab21      	add	r3, sp, #132	@ 0x84
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	f000 f995 	bl	800e584 <_svfiprintf_r>
 800e25a:	1c43      	adds	r3, r0, #1
 800e25c:	bfbc      	itt	lt
 800e25e:	238b      	movlt	r3, #139	@ 0x8b
 800e260:	602b      	strlt	r3, [r5, #0]
 800e262:	2c00      	cmp	r4, #0
 800e264:	d0dd      	beq.n	800e222 <sniprintf+0x16>
 800e266:	9b02      	ldr	r3, [sp, #8]
 800e268:	2200      	movs	r2, #0
 800e26a:	701a      	strb	r2, [r3, #0]
 800e26c:	e7d9      	b.n	800e222 <sniprintf+0x16>
 800e26e:	bf00      	nop
 800e270:	20000120 	.word	0x20000120

0800e274 <memset>:
 800e274:	4402      	add	r2, r0
 800e276:	4603      	mov	r3, r0
 800e278:	4293      	cmp	r3, r2
 800e27a:	d100      	bne.n	800e27e <memset+0xa>
 800e27c:	4770      	bx	lr
 800e27e:	f803 1b01 	strb.w	r1, [r3], #1
 800e282:	e7f9      	b.n	800e278 <memset+0x4>

0800e284 <__errno>:
 800e284:	4b01      	ldr	r3, [pc, #4]	@ (800e28c <__errno+0x8>)
 800e286:	6818      	ldr	r0, [r3, #0]
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	20000120 	.word	0x20000120

0800e290 <__libc_init_array>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	4d0d      	ldr	r5, [pc, #52]	@ (800e2c8 <__libc_init_array+0x38>)
 800e294:	2600      	movs	r6, #0
 800e296:	4c0d      	ldr	r4, [pc, #52]	@ (800e2cc <__libc_init_array+0x3c>)
 800e298:	1b64      	subs	r4, r4, r5
 800e29a:	10a4      	asrs	r4, r4, #2
 800e29c:	42a6      	cmp	r6, r4
 800e29e:	d109      	bne.n	800e2b4 <__libc_init_array+0x24>
 800e2a0:	4d0b      	ldr	r5, [pc, #44]	@ (800e2d0 <__libc_init_array+0x40>)
 800e2a2:	2600      	movs	r6, #0
 800e2a4:	4c0b      	ldr	r4, [pc, #44]	@ (800e2d4 <__libc_init_array+0x44>)
 800e2a6:	f000 fc77 	bl	800eb98 <_init>
 800e2aa:	1b64      	subs	r4, r4, r5
 800e2ac:	10a4      	asrs	r4, r4, #2
 800e2ae:	42a6      	cmp	r6, r4
 800e2b0:	d105      	bne.n	800e2be <__libc_init_array+0x2e>
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2b8:	3601      	adds	r6, #1
 800e2ba:	4798      	blx	r3
 800e2bc:	e7ee      	b.n	800e29c <__libc_init_array+0xc>
 800e2be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2c2:	3601      	adds	r6, #1
 800e2c4:	4798      	blx	r3
 800e2c6:	e7f2      	b.n	800e2ae <__libc_init_array+0x1e>
 800e2c8:	0800ec80 	.word	0x0800ec80
 800e2cc:	0800ec80 	.word	0x0800ec80
 800e2d0:	0800ec80 	.word	0x0800ec80
 800e2d4:	0800ec84 	.word	0x0800ec84

0800e2d8 <__retarget_lock_acquire_recursive>:
 800e2d8:	4770      	bx	lr

0800e2da <__retarget_lock_release_recursive>:
 800e2da:	4770      	bx	lr

0800e2dc <_free_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4605      	mov	r5, r0
 800e2e0:	2900      	cmp	r1, #0
 800e2e2:	d041      	beq.n	800e368 <_free_r+0x8c>
 800e2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e8:	1f0c      	subs	r4, r1, #4
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	bfb8      	it	lt
 800e2ee:	18e4      	addlt	r4, r4, r3
 800e2f0:	f000 f8e0 	bl	800e4b4 <__malloc_lock>
 800e2f4:	4a1d      	ldr	r2, [pc, #116]	@ (800e36c <_free_r+0x90>)
 800e2f6:	6813      	ldr	r3, [r2, #0]
 800e2f8:	b933      	cbnz	r3, 800e308 <_free_r+0x2c>
 800e2fa:	6063      	str	r3, [r4, #4]
 800e2fc:	6014      	str	r4, [r2, #0]
 800e2fe:	4628      	mov	r0, r5
 800e300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e304:	f000 b8dc 	b.w	800e4c0 <__malloc_unlock>
 800e308:	42a3      	cmp	r3, r4
 800e30a:	d908      	bls.n	800e31e <_free_r+0x42>
 800e30c:	6820      	ldr	r0, [r4, #0]
 800e30e:	1821      	adds	r1, r4, r0
 800e310:	428b      	cmp	r3, r1
 800e312:	bf01      	itttt	eq
 800e314:	6819      	ldreq	r1, [r3, #0]
 800e316:	685b      	ldreq	r3, [r3, #4]
 800e318:	1809      	addeq	r1, r1, r0
 800e31a:	6021      	streq	r1, [r4, #0]
 800e31c:	e7ed      	b.n	800e2fa <_free_r+0x1e>
 800e31e:	461a      	mov	r2, r3
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	b10b      	cbz	r3, 800e328 <_free_r+0x4c>
 800e324:	42a3      	cmp	r3, r4
 800e326:	d9fa      	bls.n	800e31e <_free_r+0x42>
 800e328:	6811      	ldr	r1, [r2, #0]
 800e32a:	1850      	adds	r0, r2, r1
 800e32c:	42a0      	cmp	r0, r4
 800e32e:	d10b      	bne.n	800e348 <_free_r+0x6c>
 800e330:	6820      	ldr	r0, [r4, #0]
 800e332:	4401      	add	r1, r0
 800e334:	1850      	adds	r0, r2, r1
 800e336:	6011      	str	r1, [r2, #0]
 800e338:	4283      	cmp	r3, r0
 800e33a:	d1e0      	bne.n	800e2fe <_free_r+0x22>
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	4408      	add	r0, r1
 800e342:	6053      	str	r3, [r2, #4]
 800e344:	6010      	str	r0, [r2, #0]
 800e346:	e7da      	b.n	800e2fe <_free_r+0x22>
 800e348:	d902      	bls.n	800e350 <_free_r+0x74>
 800e34a:	230c      	movs	r3, #12
 800e34c:	602b      	str	r3, [r5, #0]
 800e34e:	e7d6      	b.n	800e2fe <_free_r+0x22>
 800e350:	6820      	ldr	r0, [r4, #0]
 800e352:	1821      	adds	r1, r4, r0
 800e354:	428b      	cmp	r3, r1
 800e356:	bf02      	ittt	eq
 800e358:	6819      	ldreq	r1, [r3, #0]
 800e35a:	685b      	ldreq	r3, [r3, #4]
 800e35c:	1809      	addeq	r1, r1, r0
 800e35e:	6063      	str	r3, [r4, #4]
 800e360:	bf08      	it	eq
 800e362:	6021      	streq	r1, [r4, #0]
 800e364:	6054      	str	r4, [r2, #4]
 800e366:	e7ca      	b.n	800e2fe <_free_r+0x22>
 800e368:	bd38      	pop	{r3, r4, r5, pc}
 800e36a:	bf00      	nop
 800e36c:	2000106c 	.word	0x2000106c

0800e370 <sbrk_aligned>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	4e0f      	ldr	r6, [pc, #60]	@ (800e3b0 <sbrk_aligned+0x40>)
 800e374:	460c      	mov	r4, r1
 800e376:	4605      	mov	r5, r0
 800e378:	6831      	ldr	r1, [r6, #0]
 800e37a:	b911      	cbnz	r1, 800e382 <sbrk_aligned+0x12>
 800e37c:	f000 fbaa 	bl	800ead4 <_sbrk_r>
 800e380:	6030      	str	r0, [r6, #0]
 800e382:	4621      	mov	r1, r4
 800e384:	4628      	mov	r0, r5
 800e386:	f000 fba5 	bl	800ead4 <_sbrk_r>
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	d103      	bne.n	800e396 <sbrk_aligned+0x26>
 800e38e:	f04f 34ff 	mov.w	r4, #4294967295
 800e392:	4620      	mov	r0, r4
 800e394:	bd70      	pop	{r4, r5, r6, pc}
 800e396:	1cc4      	adds	r4, r0, #3
 800e398:	f024 0403 	bic.w	r4, r4, #3
 800e39c:	42a0      	cmp	r0, r4
 800e39e:	d0f8      	beq.n	800e392 <sbrk_aligned+0x22>
 800e3a0:	1a21      	subs	r1, r4, r0
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 fb96 	bl	800ead4 <_sbrk_r>
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	d1f2      	bne.n	800e392 <sbrk_aligned+0x22>
 800e3ac:	e7ef      	b.n	800e38e <sbrk_aligned+0x1e>
 800e3ae:	bf00      	nop
 800e3b0:	20001068 	.word	0x20001068

0800e3b4 <_malloc_r>:
 800e3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b8:	1ccd      	adds	r5, r1, #3
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	f025 0503 	bic.w	r5, r5, #3
 800e3c0:	3508      	adds	r5, #8
 800e3c2:	2d0c      	cmp	r5, #12
 800e3c4:	bf38      	it	cc
 800e3c6:	250c      	movcc	r5, #12
 800e3c8:	2d00      	cmp	r5, #0
 800e3ca:	db01      	blt.n	800e3d0 <_malloc_r+0x1c>
 800e3cc:	42a9      	cmp	r1, r5
 800e3ce:	d904      	bls.n	800e3da <_malloc_r+0x26>
 800e3d0:	230c      	movs	r3, #12
 800e3d2:	6033      	str	r3, [r6, #0]
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4b0 <_malloc_r+0xfc>
 800e3de:	f000 f869 	bl	800e4b4 <__malloc_lock>
 800e3e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e3e6:	461c      	mov	r4, r3
 800e3e8:	bb44      	cbnz	r4, 800e43c <_malloc_r+0x88>
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff ffbf 	bl	800e370 <sbrk_aligned>
 800e3f2:	1c43      	adds	r3, r0, #1
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	d158      	bne.n	800e4aa <_malloc_r+0xf6>
 800e3f8:	f8d8 4000 	ldr.w	r4, [r8]
 800e3fc:	4627      	mov	r7, r4
 800e3fe:	2f00      	cmp	r7, #0
 800e400:	d143      	bne.n	800e48a <_malloc_r+0xd6>
 800e402:	2c00      	cmp	r4, #0
 800e404:	d04b      	beq.n	800e49e <_malloc_r+0xea>
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	4639      	mov	r1, r7
 800e40a:	4630      	mov	r0, r6
 800e40c:	eb04 0903 	add.w	r9, r4, r3
 800e410:	f000 fb60 	bl	800ead4 <_sbrk_r>
 800e414:	4581      	cmp	r9, r0
 800e416:	d142      	bne.n	800e49e <_malloc_r+0xea>
 800e418:	6821      	ldr	r1, [r4, #0]
 800e41a:	4630      	mov	r0, r6
 800e41c:	1a6d      	subs	r5, r5, r1
 800e41e:	4629      	mov	r1, r5
 800e420:	f7ff ffa6 	bl	800e370 <sbrk_aligned>
 800e424:	3001      	adds	r0, #1
 800e426:	d03a      	beq.n	800e49e <_malloc_r+0xea>
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	442b      	add	r3, r5
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	f8d8 3000 	ldr.w	r3, [r8]
 800e432:	685a      	ldr	r2, [r3, #4]
 800e434:	bb62      	cbnz	r2, 800e490 <_malloc_r+0xdc>
 800e436:	f8c8 7000 	str.w	r7, [r8]
 800e43a:	e00f      	b.n	800e45c <_malloc_r+0xa8>
 800e43c:	6822      	ldr	r2, [r4, #0]
 800e43e:	1b52      	subs	r2, r2, r5
 800e440:	d420      	bmi.n	800e484 <_malloc_r+0xd0>
 800e442:	2a0b      	cmp	r2, #11
 800e444:	d917      	bls.n	800e476 <_malloc_r+0xc2>
 800e446:	1961      	adds	r1, r4, r5
 800e448:	42a3      	cmp	r3, r4
 800e44a:	6025      	str	r5, [r4, #0]
 800e44c:	bf18      	it	ne
 800e44e:	6059      	strne	r1, [r3, #4]
 800e450:	6863      	ldr	r3, [r4, #4]
 800e452:	bf08      	it	eq
 800e454:	f8c8 1000 	streq.w	r1, [r8]
 800e458:	5162      	str	r2, [r4, r5]
 800e45a:	604b      	str	r3, [r1, #4]
 800e45c:	4630      	mov	r0, r6
 800e45e:	f000 f82f 	bl	800e4c0 <__malloc_unlock>
 800e462:	f104 000b 	add.w	r0, r4, #11
 800e466:	1d23      	adds	r3, r4, #4
 800e468:	f020 0007 	bic.w	r0, r0, #7
 800e46c:	1ac2      	subs	r2, r0, r3
 800e46e:	bf1c      	itt	ne
 800e470:	1a1b      	subne	r3, r3, r0
 800e472:	50a3      	strne	r3, [r4, r2]
 800e474:	e7af      	b.n	800e3d6 <_malloc_r+0x22>
 800e476:	6862      	ldr	r2, [r4, #4]
 800e478:	42a3      	cmp	r3, r4
 800e47a:	bf0c      	ite	eq
 800e47c:	f8c8 2000 	streq.w	r2, [r8]
 800e480:	605a      	strne	r2, [r3, #4]
 800e482:	e7eb      	b.n	800e45c <_malloc_r+0xa8>
 800e484:	4623      	mov	r3, r4
 800e486:	6864      	ldr	r4, [r4, #4]
 800e488:	e7ae      	b.n	800e3e8 <_malloc_r+0x34>
 800e48a:	463c      	mov	r4, r7
 800e48c:	687f      	ldr	r7, [r7, #4]
 800e48e:	e7b6      	b.n	800e3fe <_malloc_r+0x4a>
 800e490:	461a      	mov	r2, r3
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	42a3      	cmp	r3, r4
 800e496:	d1fb      	bne.n	800e490 <_malloc_r+0xdc>
 800e498:	2300      	movs	r3, #0
 800e49a:	6053      	str	r3, [r2, #4]
 800e49c:	e7de      	b.n	800e45c <_malloc_r+0xa8>
 800e49e:	230c      	movs	r3, #12
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	6033      	str	r3, [r6, #0]
 800e4a4:	f000 f80c 	bl	800e4c0 <__malloc_unlock>
 800e4a8:	e794      	b.n	800e3d4 <_malloc_r+0x20>
 800e4aa:	6005      	str	r5, [r0, #0]
 800e4ac:	e7d6      	b.n	800e45c <_malloc_r+0xa8>
 800e4ae:	bf00      	nop
 800e4b0:	2000106c 	.word	0x2000106c

0800e4b4 <__malloc_lock>:
 800e4b4:	4801      	ldr	r0, [pc, #4]	@ (800e4bc <__malloc_lock+0x8>)
 800e4b6:	f7ff bf0f 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e4ba:	bf00      	nop
 800e4bc:	20001064 	.word	0x20001064

0800e4c0 <__malloc_unlock>:
 800e4c0:	4801      	ldr	r0, [pc, #4]	@ (800e4c8 <__malloc_unlock+0x8>)
 800e4c2:	f7ff bf0a 	b.w	800e2da <__retarget_lock_release_recursive>
 800e4c6:	bf00      	nop
 800e4c8:	20001064 	.word	0x20001064

0800e4cc <__ssputs_r>:
 800e4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d0:	461f      	mov	r7, r3
 800e4d2:	688e      	ldr	r6, [r1, #8]
 800e4d4:	4682      	mov	sl, r0
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	42be      	cmp	r6, r7
 800e4da:	4690      	mov	r8, r2
 800e4dc:	680b      	ldr	r3, [r1, #0]
 800e4de:	d82d      	bhi.n	800e53c <__ssputs_r+0x70>
 800e4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e4e8:	d026      	beq.n	800e538 <__ssputs_r+0x6c>
 800e4ea:	6965      	ldr	r5, [r4, #20]
 800e4ec:	6909      	ldr	r1, [r1, #16]
 800e4ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4f2:	eba3 0901 	sub.w	r9, r3, r1
 800e4f6:	1c7b      	adds	r3, r7, #1
 800e4f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e4fc:	444b      	add	r3, r9
 800e4fe:	106d      	asrs	r5, r5, #1
 800e500:	429d      	cmp	r5, r3
 800e502:	bf38      	it	cc
 800e504:	461d      	movcc	r5, r3
 800e506:	0553      	lsls	r3, r2, #21
 800e508:	d527      	bpl.n	800e55a <__ssputs_r+0x8e>
 800e50a:	4629      	mov	r1, r5
 800e50c:	f7ff ff52 	bl	800e3b4 <_malloc_r>
 800e510:	4606      	mov	r6, r0
 800e512:	b360      	cbz	r0, 800e56e <__ssputs_r+0xa2>
 800e514:	464a      	mov	r2, r9
 800e516:	6921      	ldr	r1, [r4, #16]
 800e518:	f000 fafa 	bl	800eb10 <memcpy>
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	6126      	str	r6, [r4, #16]
 800e52a:	444e      	add	r6, r9
 800e52c:	6165      	str	r5, [r4, #20]
 800e52e:	eba5 0509 	sub.w	r5, r5, r9
 800e532:	6026      	str	r6, [r4, #0]
 800e534:	463e      	mov	r6, r7
 800e536:	60a5      	str	r5, [r4, #8]
 800e538:	42be      	cmp	r6, r7
 800e53a:	d900      	bls.n	800e53e <__ssputs_r+0x72>
 800e53c:	463e      	mov	r6, r7
 800e53e:	4632      	mov	r2, r6
 800e540:	4641      	mov	r1, r8
 800e542:	6820      	ldr	r0, [r4, #0]
 800e544:	f000 faac 	bl	800eaa0 <memmove>
 800e548:	68a3      	ldr	r3, [r4, #8]
 800e54a:	2000      	movs	r0, #0
 800e54c:	1b9b      	subs	r3, r3, r6
 800e54e:	60a3      	str	r3, [r4, #8]
 800e550:	6823      	ldr	r3, [r4, #0]
 800e552:	4433      	add	r3, r6
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e55a:	462a      	mov	r2, r5
 800e55c:	f000 fae5 	bl	800eb2a <_realloc_r>
 800e560:	4606      	mov	r6, r0
 800e562:	2800      	cmp	r0, #0
 800e564:	d1e0      	bne.n	800e528 <__ssputs_r+0x5c>
 800e566:	6921      	ldr	r1, [r4, #16]
 800e568:	4650      	mov	r0, sl
 800e56a:	f7ff feb7 	bl	800e2dc <_free_r>
 800e56e:	230c      	movs	r3, #12
 800e570:	f04f 30ff 	mov.w	r0, #4294967295
 800e574:	f8ca 3000 	str.w	r3, [sl]
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e57e:	81a3      	strh	r3, [r4, #12]
 800e580:	e7e9      	b.n	800e556 <__ssputs_r+0x8a>
	...

0800e584 <_svfiprintf_r>:
 800e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e588:	4698      	mov	r8, r3
 800e58a:	898b      	ldrh	r3, [r1, #12]
 800e58c:	b09d      	sub	sp, #116	@ 0x74
 800e58e:	4607      	mov	r7, r0
 800e590:	061b      	lsls	r3, r3, #24
 800e592:	460d      	mov	r5, r1
 800e594:	4614      	mov	r4, r2
 800e596:	d510      	bpl.n	800e5ba <_svfiprintf_r+0x36>
 800e598:	690b      	ldr	r3, [r1, #16]
 800e59a:	b973      	cbnz	r3, 800e5ba <_svfiprintf_r+0x36>
 800e59c:	2140      	movs	r1, #64	@ 0x40
 800e59e:	f7ff ff09 	bl	800e3b4 <_malloc_r>
 800e5a2:	6028      	str	r0, [r5, #0]
 800e5a4:	6128      	str	r0, [r5, #16]
 800e5a6:	b930      	cbnz	r0, 800e5b6 <_svfiprintf_r+0x32>
 800e5a8:	230c      	movs	r3, #12
 800e5aa:	603b      	str	r3, [r7, #0]
 800e5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b0:	b01d      	add	sp, #116	@ 0x74
 800e5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b6:	2340      	movs	r3, #64	@ 0x40
 800e5b8:	616b      	str	r3, [r5, #20]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5c0:	f04f 0901 	mov.w	r9, #1
 800e5c4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e768 <_svfiprintf_r+0x1e4>
 800e5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ca:	2320      	movs	r3, #32
 800e5cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5d0:	2330      	movs	r3, #48	@ 0x30
 800e5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5d6:	4623      	mov	r3, r4
 800e5d8:	469a      	mov	sl, r3
 800e5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5de:	b10a      	cbz	r2, 800e5e4 <_svfiprintf_r+0x60>
 800e5e0:	2a25      	cmp	r2, #37	@ 0x25
 800e5e2:	d1f9      	bne.n	800e5d8 <_svfiprintf_r+0x54>
 800e5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e5e8:	d00b      	beq.n	800e602 <_svfiprintf_r+0x7e>
 800e5ea:	465b      	mov	r3, fp
 800e5ec:	4622      	mov	r2, r4
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	4638      	mov	r0, r7
 800e5f2:	f7ff ff6b 	bl	800e4cc <__ssputs_r>
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	f000 80a7 	beq.w	800e74a <_svfiprintf_r+0x1c6>
 800e5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5fe:	445a      	add	r2, fp
 800e600:	9209      	str	r2, [sp, #36]	@ 0x24
 800e602:	f89a 3000 	ldrb.w	r3, [sl]
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 809f 	beq.w	800e74a <_svfiprintf_r+0x1c6>
 800e60c:	2300      	movs	r3, #0
 800e60e:	f04f 32ff 	mov.w	r2, #4294967295
 800e612:	f10a 0a01 	add.w	sl, sl, #1
 800e616:	9304      	str	r3, [sp, #16]
 800e618:	9307      	str	r3, [sp, #28]
 800e61a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e61e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e624:	4654      	mov	r4, sl
 800e626:	2205      	movs	r2, #5
 800e628:	484f      	ldr	r0, [pc, #316]	@ (800e768 <_svfiprintf_r+0x1e4>)
 800e62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e62e:	f000 fa61 	bl	800eaf4 <memchr>
 800e632:	9a04      	ldr	r2, [sp, #16]
 800e634:	b9d8      	cbnz	r0, 800e66e <_svfiprintf_r+0xea>
 800e636:	06d0      	lsls	r0, r2, #27
 800e638:	bf44      	itt	mi
 800e63a:	2320      	movmi	r3, #32
 800e63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e640:	0711      	lsls	r1, r2, #28
 800e642:	bf44      	itt	mi
 800e644:	232b      	movmi	r3, #43	@ 0x2b
 800e646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e64a:	f89a 3000 	ldrb.w	r3, [sl]
 800e64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e650:	d015      	beq.n	800e67e <_svfiprintf_r+0xfa>
 800e652:	9a07      	ldr	r2, [sp, #28]
 800e654:	4654      	mov	r4, sl
 800e656:	2000      	movs	r0, #0
 800e658:	f04f 0c0a 	mov.w	ip, #10
 800e65c:	4621      	mov	r1, r4
 800e65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e662:	3b30      	subs	r3, #48	@ 0x30
 800e664:	2b09      	cmp	r3, #9
 800e666:	d94b      	bls.n	800e700 <_svfiprintf_r+0x17c>
 800e668:	b1b0      	cbz	r0, 800e698 <_svfiprintf_r+0x114>
 800e66a:	9207      	str	r2, [sp, #28]
 800e66c:	e014      	b.n	800e698 <_svfiprintf_r+0x114>
 800e66e:	eba0 0308 	sub.w	r3, r0, r8
 800e672:	46a2      	mov	sl, r4
 800e674:	fa09 f303 	lsl.w	r3, r9, r3
 800e678:	4313      	orrs	r3, r2
 800e67a:	9304      	str	r3, [sp, #16]
 800e67c:	e7d2      	b.n	800e624 <_svfiprintf_r+0xa0>
 800e67e:	9b03      	ldr	r3, [sp, #12]
 800e680:	1d19      	adds	r1, r3, #4
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	9103      	str	r1, [sp, #12]
 800e688:	bfbb      	ittet	lt
 800e68a:	425b      	neglt	r3, r3
 800e68c:	f042 0202 	orrlt.w	r2, r2, #2
 800e690:	9307      	strge	r3, [sp, #28]
 800e692:	9307      	strlt	r3, [sp, #28]
 800e694:	bfb8      	it	lt
 800e696:	9204      	strlt	r2, [sp, #16]
 800e698:	7823      	ldrb	r3, [r4, #0]
 800e69a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e69c:	d10a      	bne.n	800e6b4 <_svfiprintf_r+0x130>
 800e69e:	7863      	ldrb	r3, [r4, #1]
 800e6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6a2:	d132      	bne.n	800e70a <_svfiprintf_r+0x186>
 800e6a4:	9b03      	ldr	r3, [sp, #12]
 800e6a6:	3402      	adds	r4, #2
 800e6a8:	1d1a      	adds	r2, r3, #4
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6b0:	9203      	str	r2, [sp, #12]
 800e6b2:	9305      	str	r3, [sp, #20]
 800e6b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e778 <_svfiprintf_r+0x1f4>
 800e6b8:	2203      	movs	r2, #3
 800e6ba:	7821      	ldrb	r1, [r4, #0]
 800e6bc:	4650      	mov	r0, sl
 800e6be:	f000 fa19 	bl	800eaf4 <memchr>
 800e6c2:	b138      	cbz	r0, 800e6d4 <_svfiprintf_r+0x150>
 800e6c4:	eba0 000a 	sub.w	r0, r0, sl
 800e6c8:	2240      	movs	r2, #64	@ 0x40
 800e6ca:	9b04      	ldr	r3, [sp, #16]
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	4082      	lsls	r2, r0
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	9304      	str	r3, [sp, #16]
 800e6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d8:	2206      	movs	r2, #6
 800e6da:	4824      	ldr	r0, [pc, #144]	@ (800e76c <_svfiprintf_r+0x1e8>)
 800e6dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6e0:	f000 fa08 	bl	800eaf4 <memchr>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d036      	beq.n	800e756 <_svfiprintf_r+0x1d2>
 800e6e8:	4b21      	ldr	r3, [pc, #132]	@ (800e770 <_svfiprintf_r+0x1ec>)
 800e6ea:	bb1b      	cbnz	r3, 800e734 <_svfiprintf_r+0x1b0>
 800e6ec:	9b03      	ldr	r3, [sp, #12]
 800e6ee:	3307      	adds	r3, #7
 800e6f0:	f023 0307 	bic.w	r3, r3, #7
 800e6f4:	3308      	adds	r3, #8
 800e6f6:	9303      	str	r3, [sp, #12]
 800e6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6fa:	4433      	add	r3, r6
 800e6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6fe:	e76a      	b.n	800e5d6 <_svfiprintf_r+0x52>
 800e700:	fb0c 3202 	mla	r2, ip, r2, r3
 800e704:	460c      	mov	r4, r1
 800e706:	2001      	movs	r0, #1
 800e708:	e7a8      	b.n	800e65c <_svfiprintf_r+0xd8>
 800e70a:	2300      	movs	r3, #0
 800e70c:	3401      	adds	r4, #1
 800e70e:	f04f 0c0a 	mov.w	ip, #10
 800e712:	4619      	mov	r1, r3
 800e714:	9305      	str	r3, [sp, #20]
 800e716:	4620      	mov	r0, r4
 800e718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e71c:	3a30      	subs	r2, #48	@ 0x30
 800e71e:	2a09      	cmp	r2, #9
 800e720:	d903      	bls.n	800e72a <_svfiprintf_r+0x1a6>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d0c6      	beq.n	800e6b4 <_svfiprintf_r+0x130>
 800e726:	9105      	str	r1, [sp, #20]
 800e728:	e7c4      	b.n	800e6b4 <_svfiprintf_r+0x130>
 800e72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e72e:	4604      	mov	r4, r0
 800e730:	2301      	movs	r3, #1
 800e732:	e7f0      	b.n	800e716 <_svfiprintf_r+0x192>
 800e734:	ab03      	add	r3, sp, #12
 800e736:	462a      	mov	r2, r5
 800e738:	a904      	add	r1, sp, #16
 800e73a:	4638      	mov	r0, r7
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	4b0d      	ldr	r3, [pc, #52]	@ (800e774 <_svfiprintf_r+0x1f0>)
 800e740:	f3af 8000 	nop.w
 800e744:	1c42      	adds	r2, r0, #1
 800e746:	4606      	mov	r6, r0
 800e748:	d1d6      	bne.n	800e6f8 <_svfiprintf_r+0x174>
 800e74a:	89ab      	ldrh	r3, [r5, #12]
 800e74c:	065b      	lsls	r3, r3, #25
 800e74e:	f53f af2d 	bmi.w	800e5ac <_svfiprintf_r+0x28>
 800e752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e754:	e72c      	b.n	800e5b0 <_svfiprintf_r+0x2c>
 800e756:	ab03      	add	r3, sp, #12
 800e758:	462a      	mov	r2, r5
 800e75a:	a904      	add	r1, sp, #16
 800e75c:	4638      	mov	r0, r7
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	4b04      	ldr	r3, [pc, #16]	@ (800e774 <_svfiprintf_r+0x1f0>)
 800e762:	f000 f87d 	bl	800e860 <_printf_i>
 800e766:	e7ed      	b.n	800e744 <_svfiprintf_r+0x1c0>
 800e768:	0800ec44 	.word	0x0800ec44
 800e76c:	0800ec4e 	.word	0x0800ec4e
 800e770:	00000000 	.word	0x00000000
 800e774:	0800e4cd 	.word	0x0800e4cd
 800e778:	0800ec4a 	.word	0x0800ec4a

0800e77c <_printf_common>:
 800e77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e780:	4616      	mov	r6, r2
 800e782:	4698      	mov	r8, r3
 800e784:	688a      	ldr	r2, [r1, #8]
 800e786:	4607      	mov	r7, r0
 800e788:	690b      	ldr	r3, [r1, #16]
 800e78a:	460c      	mov	r4, r1
 800e78c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e790:	4293      	cmp	r3, r2
 800e792:	bfb8      	it	lt
 800e794:	4613      	movlt	r3, r2
 800e796:	6033      	str	r3, [r6, #0]
 800e798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e79c:	b10a      	cbz	r2, 800e7a2 <_printf_common+0x26>
 800e79e:	3301      	adds	r3, #1
 800e7a0:	6033      	str	r3, [r6, #0]
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	0699      	lsls	r1, r3, #26
 800e7a6:	bf42      	ittt	mi
 800e7a8:	6833      	ldrmi	r3, [r6, #0]
 800e7aa:	3302      	addmi	r3, #2
 800e7ac:	6033      	strmi	r3, [r6, #0]
 800e7ae:	6825      	ldr	r5, [r4, #0]
 800e7b0:	f015 0506 	ands.w	r5, r5, #6
 800e7b4:	d106      	bne.n	800e7c4 <_printf_common+0x48>
 800e7b6:	f104 0a19 	add.w	sl, r4, #25
 800e7ba:	68e3      	ldr	r3, [r4, #12]
 800e7bc:	6832      	ldr	r2, [r6, #0]
 800e7be:	1a9b      	subs	r3, r3, r2
 800e7c0:	42ab      	cmp	r3, r5
 800e7c2:	dc2b      	bgt.n	800e81c <_printf_common+0xa0>
 800e7c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e7c8:	6822      	ldr	r2, [r4, #0]
 800e7ca:	3b00      	subs	r3, #0
 800e7cc:	bf18      	it	ne
 800e7ce:	2301      	movne	r3, #1
 800e7d0:	0692      	lsls	r2, r2, #26
 800e7d2:	d430      	bmi.n	800e836 <_printf_common+0xba>
 800e7d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7d8:	4641      	mov	r1, r8
 800e7da:	4638      	mov	r0, r7
 800e7dc:	47c8      	blx	r9
 800e7de:	3001      	adds	r0, #1
 800e7e0:	d023      	beq.n	800e82a <_printf_common+0xae>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	341a      	adds	r4, #26
 800e7e6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e7ea:	f003 0306 	and.w	r3, r3, #6
 800e7ee:	2b04      	cmp	r3, #4
 800e7f0:	bf0a      	itet	eq
 800e7f2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e7f6:	2500      	movne	r5, #0
 800e7f8:	6833      	ldreq	r3, [r6, #0]
 800e7fa:	f04f 0600 	mov.w	r6, #0
 800e7fe:	bf08      	it	eq
 800e800:	1aed      	subeq	r5, r5, r3
 800e802:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e806:	bf08      	it	eq
 800e808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e80c:	4293      	cmp	r3, r2
 800e80e:	bfc4      	itt	gt
 800e810:	1a9b      	subgt	r3, r3, r2
 800e812:	18ed      	addgt	r5, r5, r3
 800e814:	42b5      	cmp	r5, r6
 800e816:	d11a      	bne.n	800e84e <_printf_common+0xd2>
 800e818:	2000      	movs	r0, #0
 800e81a:	e008      	b.n	800e82e <_printf_common+0xb2>
 800e81c:	2301      	movs	r3, #1
 800e81e:	4652      	mov	r2, sl
 800e820:	4641      	mov	r1, r8
 800e822:	4638      	mov	r0, r7
 800e824:	47c8      	blx	r9
 800e826:	3001      	adds	r0, #1
 800e828:	d103      	bne.n	800e832 <_printf_common+0xb6>
 800e82a:	f04f 30ff 	mov.w	r0, #4294967295
 800e82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e832:	3501      	adds	r5, #1
 800e834:	e7c1      	b.n	800e7ba <_printf_common+0x3e>
 800e836:	18e1      	adds	r1, r4, r3
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	2030      	movs	r0, #48	@ 0x30
 800e83c:	3302      	adds	r3, #2
 800e83e:	4422      	add	r2, r4
 800e840:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e84c:	e7c2      	b.n	800e7d4 <_printf_common+0x58>
 800e84e:	2301      	movs	r3, #1
 800e850:	4622      	mov	r2, r4
 800e852:	4641      	mov	r1, r8
 800e854:	4638      	mov	r0, r7
 800e856:	47c8      	blx	r9
 800e858:	3001      	adds	r0, #1
 800e85a:	d0e6      	beq.n	800e82a <_printf_common+0xae>
 800e85c:	3601      	adds	r6, #1
 800e85e:	e7d9      	b.n	800e814 <_printf_common+0x98>

0800e860 <_printf_i>:
 800e860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e864:	7e0f      	ldrb	r7, [r1, #24]
 800e866:	4691      	mov	r9, r2
 800e868:	4680      	mov	r8, r0
 800e86a:	460c      	mov	r4, r1
 800e86c:	2f78      	cmp	r7, #120	@ 0x78
 800e86e:	469a      	mov	sl, r3
 800e870:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e876:	d807      	bhi.n	800e888 <_printf_i+0x28>
 800e878:	2f62      	cmp	r7, #98	@ 0x62
 800e87a:	d80a      	bhi.n	800e892 <_printf_i+0x32>
 800e87c:	2f00      	cmp	r7, #0
 800e87e:	f000 80d2 	beq.w	800ea26 <_printf_i+0x1c6>
 800e882:	2f58      	cmp	r7, #88	@ 0x58
 800e884:	f000 80b9 	beq.w	800e9fa <_printf_i+0x19a>
 800e888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e88c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e890:	e03a      	b.n	800e908 <_printf_i+0xa8>
 800e892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e896:	2b15      	cmp	r3, #21
 800e898:	d8f6      	bhi.n	800e888 <_printf_i+0x28>
 800e89a:	a101      	add	r1, pc, #4	@ (adr r1, 800e8a0 <_printf_i+0x40>)
 800e89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8a0:	0800e8f9 	.word	0x0800e8f9
 800e8a4:	0800e90d 	.word	0x0800e90d
 800e8a8:	0800e889 	.word	0x0800e889
 800e8ac:	0800e889 	.word	0x0800e889
 800e8b0:	0800e889 	.word	0x0800e889
 800e8b4:	0800e889 	.word	0x0800e889
 800e8b8:	0800e90d 	.word	0x0800e90d
 800e8bc:	0800e889 	.word	0x0800e889
 800e8c0:	0800e889 	.word	0x0800e889
 800e8c4:	0800e889 	.word	0x0800e889
 800e8c8:	0800e889 	.word	0x0800e889
 800e8cc:	0800ea0d 	.word	0x0800ea0d
 800e8d0:	0800e937 	.word	0x0800e937
 800e8d4:	0800e9c7 	.word	0x0800e9c7
 800e8d8:	0800e889 	.word	0x0800e889
 800e8dc:	0800e889 	.word	0x0800e889
 800e8e0:	0800ea2f 	.word	0x0800ea2f
 800e8e4:	0800e889 	.word	0x0800e889
 800e8e8:	0800e937 	.word	0x0800e937
 800e8ec:	0800e889 	.word	0x0800e889
 800e8f0:	0800e889 	.word	0x0800e889
 800e8f4:	0800e9cf 	.word	0x0800e9cf
 800e8f8:	6833      	ldr	r3, [r6, #0]
 800e8fa:	1d1a      	adds	r2, r3, #4
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	6032      	str	r2, [r6, #0]
 800e900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e908:	2301      	movs	r3, #1
 800e90a:	e09d      	b.n	800ea48 <_printf_i+0x1e8>
 800e90c:	6833      	ldr	r3, [r6, #0]
 800e90e:	6820      	ldr	r0, [r4, #0]
 800e910:	1d19      	adds	r1, r3, #4
 800e912:	6031      	str	r1, [r6, #0]
 800e914:	0606      	lsls	r6, r0, #24
 800e916:	d501      	bpl.n	800e91c <_printf_i+0xbc>
 800e918:	681d      	ldr	r5, [r3, #0]
 800e91a:	e003      	b.n	800e924 <_printf_i+0xc4>
 800e91c:	0645      	lsls	r5, r0, #25
 800e91e:	d5fb      	bpl.n	800e918 <_printf_i+0xb8>
 800e920:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e924:	2d00      	cmp	r5, #0
 800e926:	da03      	bge.n	800e930 <_printf_i+0xd0>
 800e928:	232d      	movs	r3, #45	@ 0x2d
 800e92a:	426d      	negs	r5, r5
 800e92c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e930:	4859      	ldr	r0, [pc, #356]	@ (800ea98 <_printf_i+0x238>)
 800e932:	230a      	movs	r3, #10
 800e934:	e011      	b.n	800e95a <_printf_i+0xfa>
 800e936:	6821      	ldr	r1, [r4, #0]
 800e938:	6833      	ldr	r3, [r6, #0]
 800e93a:	0608      	lsls	r0, r1, #24
 800e93c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e940:	d402      	bmi.n	800e948 <_printf_i+0xe8>
 800e942:	0649      	lsls	r1, r1, #25
 800e944:	bf48      	it	mi
 800e946:	b2ad      	uxthmi	r5, r5
 800e948:	2f6f      	cmp	r7, #111	@ 0x6f
 800e94a:	6033      	str	r3, [r6, #0]
 800e94c:	4852      	ldr	r0, [pc, #328]	@ (800ea98 <_printf_i+0x238>)
 800e94e:	bf14      	ite	ne
 800e950:	230a      	movne	r3, #10
 800e952:	2308      	moveq	r3, #8
 800e954:	2100      	movs	r1, #0
 800e956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e95a:	6866      	ldr	r6, [r4, #4]
 800e95c:	2e00      	cmp	r6, #0
 800e95e:	60a6      	str	r6, [r4, #8]
 800e960:	bfa2      	ittt	ge
 800e962:	6821      	ldrge	r1, [r4, #0]
 800e964:	f021 0104 	bicge.w	r1, r1, #4
 800e968:	6021      	strge	r1, [r4, #0]
 800e96a:	b90d      	cbnz	r5, 800e970 <_printf_i+0x110>
 800e96c:	2e00      	cmp	r6, #0
 800e96e:	d04b      	beq.n	800ea08 <_printf_i+0x1a8>
 800e970:	4616      	mov	r6, r2
 800e972:	fbb5 f1f3 	udiv	r1, r5, r3
 800e976:	fb03 5711 	mls	r7, r3, r1, r5
 800e97a:	5dc7      	ldrb	r7, [r0, r7]
 800e97c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e980:	462f      	mov	r7, r5
 800e982:	460d      	mov	r5, r1
 800e984:	42bb      	cmp	r3, r7
 800e986:	d9f4      	bls.n	800e972 <_printf_i+0x112>
 800e988:	2b08      	cmp	r3, #8
 800e98a:	d10b      	bne.n	800e9a4 <_printf_i+0x144>
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	07df      	lsls	r7, r3, #31
 800e990:	d508      	bpl.n	800e9a4 <_printf_i+0x144>
 800e992:	6923      	ldr	r3, [r4, #16]
 800e994:	6861      	ldr	r1, [r4, #4]
 800e996:	4299      	cmp	r1, r3
 800e998:	bfde      	ittt	le
 800e99a:	2330      	movle	r3, #48	@ 0x30
 800e99c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9a4:	1b92      	subs	r2, r2, r6
 800e9a6:	6122      	str	r2, [r4, #16]
 800e9a8:	464b      	mov	r3, r9
 800e9aa:	aa03      	add	r2, sp, #12
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4640      	mov	r0, r8
 800e9b0:	f8cd a000 	str.w	sl, [sp]
 800e9b4:	f7ff fee2 	bl	800e77c <_printf_common>
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d14a      	bne.n	800ea52 <_printf_i+0x1f2>
 800e9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c0:	b004      	add	sp, #16
 800e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f043 0320 	orr.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2778      	movs	r7, #120	@ 0x78
 800e9d0:	4832      	ldr	r0, [pc, #200]	@ (800ea9c <_printf_i+0x23c>)
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9d8:	061f      	lsls	r7, r3, #24
 800e9da:	6831      	ldr	r1, [r6, #0]
 800e9dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9e0:	d402      	bmi.n	800e9e8 <_printf_i+0x188>
 800e9e2:	065f      	lsls	r7, r3, #25
 800e9e4:	bf48      	it	mi
 800e9e6:	b2ad      	uxthmi	r5, r5
 800e9e8:	6031      	str	r1, [r6, #0]
 800e9ea:	07d9      	lsls	r1, r3, #31
 800e9ec:	bf44      	itt	mi
 800e9ee:	f043 0320 	orrmi.w	r3, r3, #32
 800e9f2:	6023      	strmi	r3, [r4, #0]
 800e9f4:	b11d      	cbz	r5, 800e9fe <_printf_i+0x19e>
 800e9f6:	2310      	movs	r3, #16
 800e9f8:	e7ac      	b.n	800e954 <_printf_i+0xf4>
 800e9fa:	4827      	ldr	r0, [pc, #156]	@ (800ea98 <_printf_i+0x238>)
 800e9fc:	e7e9      	b.n	800e9d2 <_printf_i+0x172>
 800e9fe:	6823      	ldr	r3, [r4, #0]
 800ea00:	f023 0320 	bic.w	r3, r3, #32
 800ea04:	6023      	str	r3, [r4, #0]
 800ea06:	e7f6      	b.n	800e9f6 <_printf_i+0x196>
 800ea08:	4616      	mov	r6, r2
 800ea0a:	e7bd      	b.n	800e988 <_printf_i+0x128>
 800ea0c:	6833      	ldr	r3, [r6, #0]
 800ea0e:	6825      	ldr	r5, [r4, #0]
 800ea10:	1d18      	adds	r0, r3, #4
 800ea12:	6961      	ldr	r1, [r4, #20]
 800ea14:	6030      	str	r0, [r6, #0]
 800ea16:	062e      	lsls	r6, r5, #24
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	d501      	bpl.n	800ea20 <_printf_i+0x1c0>
 800ea1c:	6019      	str	r1, [r3, #0]
 800ea1e:	e002      	b.n	800ea26 <_printf_i+0x1c6>
 800ea20:	0668      	lsls	r0, r5, #25
 800ea22:	d5fb      	bpl.n	800ea1c <_printf_i+0x1bc>
 800ea24:	8019      	strh	r1, [r3, #0]
 800ea26:	2300      	movs	r3, #0
 800ea28:	4616      	mov	r6, r2
 800ea2a:	6123      	str	r3, [r4, #16]
 800ea2c:	e7bc      	b.n	800e9a8 <_printf_i+0x148>
 800ea2e:	6833      	ldr	r3, [r6, #0]
 800ea30:	2100      	movs	r1, #0
 800ea32:	1d1a      	adds	r2, r3, #4
 800ea34:	6032      	str	r2, [r6, #0]
 800ea36:	681e      	ldr	r6, [r3, #0]
 800ea38:	6862      	ldr	r2, [r4, #4]
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f000 f85a 	bl	800eaf4 <memchr>
 800ea40:	b108      	cbz	r0, 800ea46 <_printf_i+0x1e6>
 800ea42:	1b80      	subs	r0, r0, r6
 800ea44:	6060      	str	r0, [r4, #4]
 800ea46:	6863      	ldr	r3, [r4, #4]
 800ea48:	6123      	str	r3, [r4, #16]
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea50:	e7aa      	b.n	800e9a8 <_printf_i+0x148>
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	4632      	mov	r2, r6
 800ea56:	4649      	mov	r1, r9
 800ea58:	4640      	mov	r0, r8
 800ea5a:	47d0      	blx	sl
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d0ad      	beq.n	800e9bc <_printf_i+0x15c>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	079b      	lsls	r3, r3, #30
 800ea64:	d413      	bmi.n	800ea8e <_printf_i+0x22e>
 800ea66:	68e0      	ldr	r0, [r4, #12]
 800ea68:	9b03      	ldr	r3, [sp, #12]
 800ea6a:	4298      	cmp	r0, r3
 800ea6c:	bfb8      	it	lt
 800ea6e:	4618      	movlt	r0, r3
 800ea70:	e7a6      	b.n	800e9c0 <_printf_i+0x160>
 800ea72:	2301      	movs	r3, #1
 800ea74:	4632      	mov	r2, r6
 800ea76:	4649      	mov	r1, r9
 800ea78:	4640      	mov	r0, r8
 800ea7a:	47d0      	blx	sl
 800ea7c:	3001      	adds	r0, #1
 800ea7e:	d09d      	beq.n	800e9bc <_printf_i+0x15c>
 800ea80:	3501      	adds	r5, #1
 800ea82:	68e3      	ldr	r3, [r4, #12]
 800ea84:	9903      	ldr	r1, [sp, #12]
 800ea86:	1a5b      	subs	r3, r3, r1
 800ea88:	42ab      	cmp	r3, r5
 800ea8a:	dcf2      	bgt.n	800ea72 <_printf_i+0x212>
 800ea8c:	e7eb      	b.n	800ea66 <_printf_i+0x206>
 800ea8e:	2500      	movs	r5, #0
 800ea90:	f104 0619 	add.w	r6, r4, #25
 800ea94:	e7f5      	b.n	800ea82 <_printf_i+0x222>
 800ea96:	bf00      	nop
 800ea98:	0800ec55 	.word	0x0800ec55
 800ea9c:	0800ec66 	.word	0x0800ec66

0800eaa0 <memmove>:
 800eaa0:	4288      	cmp	r0, r1
 800eaa2:	b510      	push	{r4, lr}
 800eaa4:	eb01 0402 	add.w	r4, r1, r2
 800eaa8:	d902      	bls.n	800eab0 <memmove+0x10>
 800eaaa:	4284      	cmp	r4, r0
 800eaac:	4623      	mov	r3, r4
 800eaae:	d807      	bhi.n	800eac0 <memmove+0x20>
 800eab0:	1e43      	subs	r3, r0, #1
 800eab2:	42a1      	cmp	r1, r4
 800eab4:	d008      	beq.n	800eac8 <memmove+0x28>
 800eab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eabe:	e7f8      	b.n	800eab2 <memmove+0x12>
 800eac0:	4402      	add	r2, r0
 800eac2:	4601      	mov	r1, r0
 800eac4:	428a      	cmp	r2, r1
 800eac6:	d100      	bne.n	800eaca <memmove+0x2a>
 800eac8:	bd10      	pop	{r4, pc}
 800eaca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ead2:	e7f7      	b.n	800eac4 <memmove+0x24>

0800ead4 <_sbrk_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	2300      	movs	r3, #0
 800ead8:	4d05      	ldr	r5, [pc, #20]	@ (800eaf0 <_sbrk_r+0x1c>)
 800eada:	4604      	mov	r4, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	602b      	str	r3, [r5, #0]
 800eae0:	f7f2 f83e 	bl	8000b60 <_sbrk>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_sbrk_r+0x1a>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_sbrk_r+0x1a>
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	20001060 	.word	0x20001060

0800eaf4 <memchr>:
 800eaf4:	b2c9      	uxtb	r1, r1
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	4402      	add	r2, r0
 800eafa:	b510      	push	{r4, lr}
 800eafc:	4293      	cmp	r3, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	d101      	bne.n	800eb06 <memchr+0x12>
 800eb02:	2000      	movs	r0, #0
 800eb04:	e003      	b.n	800eb0e <memchr+0x1a>
 800eb06:	7804      	ldrb	r4, [r0, #0]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	428c      	cmp	r4, r1
 800eb0c:	d1f6      	bne.n	800eafc <memchr+0x8>
 800eb0e:	bd10      	pop	{r4, pc}

0800eb10 <memcpy>:
 800eb10:	440a      	add	r2, r1
 800eb12:	1e43      	subs	r3, r0, #1
 800eb14:	4291      	cmp	r1, r2
 800eb16:	d100      	bne.n	800eb1a <memcpy+0xa>
 800eb18:	4770      	bx	lr
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb20:	4291      	cmp	r1, r2
 800eb22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb26:	d1f9      	bne.n	800eb1c <memcpy+0xc>
 800eb28:	bd10      	pop	{r4, pc}

0800eb2a <_realloc_r>:
 800eb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2e:	4680      	mov	r8, r0
 800eb30:	4615      	mov	r5, r2
 800eb32:	460c      	mov	r4, r1
 800eb34:	b921      	cbnz	r1, 800eb40 <_realloc_r+0x16>
 800eb36:	4611      	mov	r1, r2
 800eb38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3c:	f7ff bc3a 	b.w	800e3b4 <_malloc_r>
 800eb40:	b92a      	cbnz	r2, 800eb4e <_realloc_r+0x24>
 800eb42:	f7ff fbcb 	bl	800e2dc <_free_r>
 800eb46:	2400      	movs	r4, #0
 800eb48:	4620      	mov	r0, r4
 800eb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4e:	f000 f81a 	bl	800eb86 <_malloc_usable_size_r>
 800eb52:	4285      	cmp	r5, r0
 800eb54:	4606      	mov	r6, r0
 800eb56:	d802      	bhi.n	800eb5e <_realloc_r+0x34>
 800eb58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb5c:	d8f4      	bhi.n	800eb48 <_realloc_r+0x1e>
 800eb5e:	4629      	mov	r1, r5
 800eb60:	4640      	mov	r0, r8
 800eb62:	f7ff fc27 	bl	800e3b4 <_malloc_r>
 800eb66:	4607      	mov	r7, r0
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d0ec      	beq.n	800eb46 <_realloc_r+0x1c>
 800eb6c:	42b5      	cmp	r5, r6
 800eb6e:	462a      	mov	r2, r5
 800eb70:	4621      	mov	r1, r4
 800eb72:	bf28      	it	cs
 800eb74:	4632      	movcs	r2, r6
 800eb76:	f7ff ffcb 	bl	800eb10 <memcpy>
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	463c      	mov	r4, r7
 800eb80:	f7ff fbac 	bl	800e2dc <_free_r>
 800eb84:	e7e0      	b.n	800eb48 <_realloc_r+0x1e>

0800eb86 <_malloc_usable_size_r>:
 800eb86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb8a:	1f18      	subs	r0, r3, #4
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	bfbc      	itt	lt
 800eb90:	580b      	ldrlt	r3, [r1, r0]
 800eb92:	18c0      	addlt	r0, r0, r3
 800eb94:	4770      	bx	lr
	...

0800eb98 <_init>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	bf00      	nop
 800eb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb9e:	bc08      	pop	{r3}
 800eba0:	469e      	mov	lr, r3
 800eba2:	4770      	bx	lr

0800eba4 <_fini>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	bf00      	nop
 800eba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebaa:	bc08      	pop	{r3}
 800ebac:	469e      	mov	lr, r3
 800ebae:	4770      	bx	lr
