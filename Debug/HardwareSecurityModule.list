
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114c4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08011710  08011710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b3c  08011b3c  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  08011b3c  08011b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b44  08011b44  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b44  08011b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b48  08011b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08011b4c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  08011ccc  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  08011ccc  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002673d  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f8a  00000000  00000000  000398f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  0003e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  00040698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000862d  00000000  00000000  00041da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af86  00000000  00000000  0004a3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bc62  00000000  00000000  00075357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e4  00000000  00000000  001c0ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c98e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080116f8 	.word	0x080116f8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080116f8 	.word	0x080116f8

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	460b      	mov	r3, r1
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 80005b2:	485c      	ldr	r0, [pc, #368]	@ (8000724 <PacketParser_Parse+0x180>)
 80005b4:	f000 f92a 	bl	800080c <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <PacketParser_Parse+0x20>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 80005c4:	4858      	ldr	r0, [pc, #352]	@ (8000728 <PacketParser_Parse+0x184>)
 80005c6:	f000 f955 	bl	8000874 <log_error>
    	return PARSE_NULL_POINTER;
 80005ca:	2303      	movs	r3, #3
 80005cc:	e0a6      	b.n	800071c <PacketParser_Parse+0x178>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 80005ce:	4857      	ldr	r0, [pc, #348]	@ (800072c <PacketParser_Parse+0x188>)
 80005d0:	f000 f91c 	bl	800080c <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80005d4:	897b      	ldrh	r3, [r7, #10]
 80005d6:	2b0b      	cmp	r3, #11
 80005d8:	d804      	bhi.n	80005e4 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80005da:	4855      	ldr	r0, [pc, #340]	@ (8000730 <PacketParser_Parse+0x18c>)
 80005dc:	f000 f94a 	bl	8000874 <log_error>
    	return PARSE_INVALID_LENGTH;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e09b      	b.n	800071c <PacketParser_Parse+0x178>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 80005e8:	4852      	ldr	r0, [pc, #328]	@ (8000734 <PacketParser_Parse+0x190>)
 80005ea:	f000 f90f 	bl	800080c <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80005ee:	8afb      	ldrh	r3, [r7, #22]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 80005f8:	8afb      	ldrh	r3, [r7, #22]
 80005fa:	3301      	adds	r3, #1
 80005fc:	68f9      	ldr	r1, [r7, #12]
 80005fe:	440b      	add	r3, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000604:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	3302      	adds	r3, #2
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8000612:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8000614:	8afa      	ldrh	r2, [r7, #22]
 8000616:	3203      	adds	r2, #3
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	440a      	add	r2, r1
 800061c:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 800061e:	4313      	orrs	r3, r2
 8000620:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8000626:	8afb      	ldrh	r3, [r7, #22]
 8000628:	3304      	adds	r3, #4
 800062a:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 800062c:	4842      	ldr	r0, [pc, #264]	@ (8000738 <PacketParser_Parse+0x194>)
 800062e:	f000 f8ed 	bl	800080c <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8000632:	8afb      	ldrh	r3, [r7, #22]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	82fa      	strh	r2, [r7, #22]
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4413      	add	r3, r2
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	82fa      	strh	r2, [r7, #22]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8000656:	8afb      	ldrh	r3, [r7, #22]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b21a      	sxth	r2, r3
 8000662:	8afb      	ldrh	r3, [r7, #22]
 8000664:	3301      	adds	r3, #1
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	440b      	add	r3, r1
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b21b      	sxth	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b21b      	sxth	r3, r3
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8000678:	8afb      	ldrh	r3, [r7, #22]
 800067a:	3302      	adds	r3, #2
 800067c:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 800067e:	482f      	ldr	r0, [pc, #188]	@ (800073c <PacketParser_Parse+0x198>)
 8000680:	f000 f8c4 	bl	800080c <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || (index + parsedPacket->inputSize + 4) > rawLength)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	88db      	ldrh	r3, [r3, #6]
 8000688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800068c:	d807      	bhi.n	800069e <PacketParser_Parse+0xfa>
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	88d2      	ldrh	r2, [r2, #6]
 8000694:	4413      	add	r3, r2
 8000696:	1cda      	adds	r2, r3, #3
 8000698:	897b      	ldrh	r3, [r7, #10]
 800069a:	429a      	cmp	r2, r3
 800069c:	db04      	blt.n	80006a8 <PacketParser_Parse+0x104>
    {
    	log_error("Input Data Size is too big.");
 800069e:	4828      	ldr	r0, [pc, #160]	@ (8000740 <PacketParser_Parse+0x19c>)
 80006a0:	f000 f8e8 	bl	8000874 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	e039      	b.n	800071c <PacketParser_Parse+0x178>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 80006a8:	4826      	ldr	r0, [pc, #152]	@ (8000744 <PacketParser_Parse+0x1a0>)
 80006aa:	f000 f8af 	bl	800080c <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f103 0008 	add.w	r0, r3, #8
 80006b4:	8afb      	ldrh	r3, [r7, #22]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	18d1      	adds	r1, r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	88db      	ldrh	r3, [r3, #6]
 80006be:	461a      	mov	r2, r3
 80006c0:	f010 f8b7 	bl	8010832 <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	88da      	ldrh	r2, [r3, #6]
 80006c8:	8afb      	ldrh	r3, [r7, #22]
 80006ca:	4413      	add	r3, r2
 80006cc:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking the Received EOD word.");
 80006ce:	481e      	ldr	r0, [pc, #120]	@ (8000748 <PacketParser_Parse+0x1a4>)
 80006d0:	f000 f89c 	bl	800080c <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t receivedEOD = (rawData[index]     << 24) |
 80006d4:	8afb      	ldrh	r3, [r7, #22]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	061a      	lsls	r2, r3, #24
                           (rawData[index + 1] << 16) |
 80006de:	8afb      	ldrh	r3, [r7, #22]
 80006e0:	3301      	adds	r3, #1
 80006e2:	68f9      	ldr	r1, [r7, #12]
 80006e4:	440b      	add	r3, r1
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	041b      	lsls	r3, r3, #16
    uint32_t receivedEOD = (rawData[index]     << 24) |
 80006ea:	431a      	orrs	r2, r3
                           (rawData[index + 2] << 8)  |
 80006ec:	8afb      	ldrh	r3, [r7, #22]
 80006ee:	3302      	adds	r3, #2
 80006f0:	68f9      	ldr	r1, [r7, #12]
 80006f2:	440b      	add	r3, r1
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	021b      	lsls	r3, r3, #8
                           (rawData[index + 1] << 16) |
 80006f8:	4313      	orrs	r3, r2
                           (rawData[index + 3]);
 80006fa:	8afa      	ldrh	r2, [r7, #22]
 80006fc:	3203      	adds	r2, #3
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	440a      	add	r2, r1
 8000702:	7812      	ldrb	r2, [r2, #0]
                           (rawData[index + 2] << 8)  |
 8000704:	4313      	orrs	r3, r2
    uint32_t receivedEOD = (rawData[index]     << 24) |
 8000706:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (receivedEOD != EOD_FLAG)
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	4a10      	ldr	r2, [pc, #64]	@ (800074c <PacketParser_Parse+0x1a8>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d004      	beq.n	800071a <PacketParser_Parse+0x176>
    {
    	log_error("Received EOD Flag is Invalid");
 8000710:	480f      	ldr	r0, [pc, #60]	@ (8000750 <PacketParser_Parse+0x1ac>)
 8000712:	f000 f8af 	bl	8000874 <log_error>
        return PARSE_EOD_MISMATCH;
 8000716:	2302      	movs	r3, #2
 8000718:	e000      	b.n	800071c <PacketParser_Parse+0x178>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08011710 	.word	0x08011710
 8000728:	08011748 	.word	0x08011748
 800072c:	08011770 	.word	0x08011770
 8000730:	080117a8 	.word	0x080117a8
 8000734:	080117d0 	.word	0x080117d0
 8000738:	080117ec 	.word	0x080117ec
 800073c:	0801181c 	.word	0x0801181c
 8000740:	0801184c 	.word	0x0801184c
 8000744:	08011868 	.word	0x08011868
 8000748:	08011890 	.word	0x08011890
 800074c:	deadbeef 	.word	0xdeadbeef
 8000750:	080118b0 	.word	0x080118b0

08000754 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 800075e:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <log_init+0x1c>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	7013      	strb	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	20000000 	.word	0x20000000

08000774 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b0c7      	sub	sp, #284	@ 0x11c
 8000778:	af02      	add	r7, sp, #8
 800077a:	4604      	mov	r4, r0
 800077c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000780:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000784:	6001      	str	r1, [r0, #0]
 8000786:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800078a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800078e:	600a      	str	r2, [r1, #0]
 8000790:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000794:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800079e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80007a2:	4622      	mov	r2, r4
 80007a4:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <log_generic+0x8c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007ae:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d31e      	bcc.n	80007f6 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007bc:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007c0:	f107 0010 	add.w	r0, r7, #16
 80007c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ce:	f00f ffa7 	bl	8010720 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007da:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80007de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80007e2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80007e6:	4807      	ldr	r0, [pc, #28]	@ (8000804 <log_generic+0x90>)
 80007e8:	9000      	str	r0, [sp, #0]
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	6809      	ldr	r1, [r1, #0]
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <log_generic+0x94>)
 80007f0:	f00f ff16 	bl	8010620 <iprintf>
 80007f4:	e000      	b.n	80007f8 <log_generic+0x84>
        return;
 80007f6:	bf00      	nop
}
 80007f8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	080118e0 	.word	0x080118e0
 8000808:	080118d0 	.word	0x080118d0

0800080c <log_debug>:

void log_debug(const char *fmt, ...)
{
 800080c:	b40f      	push	{r0, r1, r2, r3}
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <log_debug+0x2c>)
 8000822:	4906      	ldr	r1, [pc, #24]	@ (800083c <log_debug+0x30>)
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff ffa5 	bl	8000774 <log_generic>
    va_end(args);
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000834:	b004      	add	sp, #16
 8000836:	4770      	bx	lr
 8000838:	080118e8 	.word	0x080118e8
 800083c:	080118f0 	.word	0x080118f0

08000840 <log_info>:

void log_info(const char *fmt, ...)
{
 8000840:	b40f      	push	{r0, r1, r2, r3}
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	4a05      	ldr	r2, [pc, #20]	@ (800086c <log_info+0x2c>)
 8000856:	4906      	ldr	r1, [pc, #24]	@ (8000870 <log_info+0x30>)
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff8b 	bl	8000774 <log_generic>
    va_end(args);
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr
 800086c:	080118f8 	.word	0x080118f8
 8000870:	08011900 	.word	0x08011900

08000874 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000874:	b40f      	push	{r0, r1, r2, r3}
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <log_error+0x2c>)
 800088a:	4906      	ldr	r1, [pc, #24]	@ (80008a4 <log_error+0x30>)
 800088c:	2003      	movs	r0, #3
 800088e:	f7ff ff71 	bl	8000774 <log_generic>
    va_end(args);
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800089c:	b004      	add	sp, #16
 800089e:	4770      	bx	lr
 80008a0:	08011918 	.word	0x08011918
 80008a4:	08011920 	.word	0x08011920

080008a8 <fill_test_packet>:
static void MX_RNG_Init(void);
static void MX_HASH_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void fill_test_packet(uint8_t *buffer, uint16_t *length)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    if (!buffer || !length) return;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d04a      	beq.n	800094e <fill_test_packet+0xa6>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d047      	beq.n	800094e <fill_test_packet+0xa6>

    // Transaction ID: 0x12345678
    buffer[0] = 0x12;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2212      	movs	r2, #18
 80008c2:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x34;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	2234      	movs	r2, #52	@ 0x34
 80008ca:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x56;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3302      	adds	r3, #2
 80008d0:	2256      	movs	r2, #86	@ 0x56
 80008d2:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x78;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3303      	adds	r3, #3
 80008d8:	2278      	movs	r2, #120	@ 0x78
 80008da:	701a      	strb	r2, [r3, #0]

    // CMD
    buffer[4] = 0x03;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3304      	adds	r3, #4
 80008e0:	2203      	movs	r2, #3
 80008e2:	701a      	strb	r2, [r3, #0]

    // OPTION
    buffer[5] = 0x22;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3305      	adds	r3, #5
 80008e8:	2222      	movs	r2, #34	@ 0x22
 80008ea:	701a      	strb	r2, [r3, #0]

    // INPUT SIZE: 192 bytes (0x00C0)
    buffer[6] = 0x00;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3306      	adds	r3, #6
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
    buffer[7] = 0xC0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3307      	adds	r3, #7
 80008f8:	22c0      	movs	r2, #192	@ 0xc0
 80008fa:	701a      	strb	r2, [r3, #0]

    // Input Data: 188 bytes of pseudo-random values
    for (uint16_t i = 0; i < 192; ++i)
 80008fc:	2300      	movs	r3, #0
 80008fe:	81fb      	strh	r3, [r7, #14]
 8000900:	e00e      	b.n	8000920 <fill_test_packet+0x78>
    {
        buffer[8 + i] = (uint8_t)((i ^ 0xAA) & 0xFF);
 8000902:	89fb      	ldrh	r3, [r7, #14]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	89fa      	ldrh	r2, [r7, #14]
 8000908:	3208      	adds	r2, #8
 800090a:	4611      	mov	r1, r2
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	440a      	add	r2, r1
 8000910:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 8000914:	43db      	mvns	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	7013      	strb	r3, [r2, #0]
    for (uint16_t i = 0; i < 192; ++i)
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	3301      	adds	r3, #1
 800091e:	81fb      	strh	r3, [r7, #14]
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	2bbf      	cmp	r3, #191	@ 0xbf
 8000924:	d9ed      	bls.n	8000902 <fill_test_packet+0x5a>
    }

    // EOD Flag: 0xDEADBEEF
    buffer[200] = 0xDE;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	33c8      	adds	r3, #200	@ 0xc8
 800092a:	22de      	movs	r2, #222	@ 0xde
 800092c:	701a      	strb	r2, [r3, #0]
    buffer[201] = 0xAD;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	33c9      	adds	r3, #201	@ 0xc9
 8000932:	22ad      	movs	r2, #173	@ 0xad
 8000934:	701a      	strb	r2, [r3, #0]
    buffer[202] = 0xBE;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	33ca      	adds	r3, #202	@ 0xca
 800093a:	22be      	movs	r2, #190	@ 0xbe
 800093c:	701a      	strb	r2, [r3, #0]
    buffer[203] = 0xEF;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	33cb      	adds	r3, #203	@ 0xcb
 8000942:	22ef      	movs	r2, #239	@ 0xef
 8000944:	701a      	strb	r2, [r3, #0]

    *length = TEST_PACKET_SIZE;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	22cc      	movs	r2, #204	@ 0xcc
 800094a:	801a      	strh	r2, [r3, #0]
 800094c:	e000      	b.n	8000950 <fill_test_packet+0xa8>
    if (!buffer || !length) return;
 800094e:	bf00      	nop
}
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <test_parse_packet>:

void test_parse_packet(const uint8_t *buffer, uint16_t length)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	f107 0318 	add.w	r3, r7, #24
 800096a:	f843 0c14 	str.w	r0, [r3, #-20]
 800096e:	460a      	mov	r2, r1
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	f823 2c16 	strh.w	r2, [r3, #-22]
    ParsedPacket_t parsedPacket;
    ParseStatus_t status = PacketParser_Parse(buffer, length, &parsedPacket);
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	3b0c      	subs	r3, #12
 800097e:	f107 0218 	add.w	r2, r7, #24
 8000982:	f832 1c16 	ldrh.w	r1, [r2, #-22]
 8000986:	f107 0218 	add.w	r2, r7, #24
 800098a:	4610      	mov	r0, r2
 800098c:	461a      	mov	r2, r3
 800098e:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8000992:	f7ff fe07 	bl	80005a4 <PacketParser_Parse>
 8000996:	4603      	mov	r3, r0
 8000998:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800099c:	f102 0215 	add.w	r2, r2, #21
 80009a0:	7013      	strb	r3, [r2, #0]

    if (status == PARSE_SUCCESS)
 80009a2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009a6:	f103 0315 	add.w	r3, r3, #21
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d15d      	bne.n	8000a6c <test_parse_packet+0x110>
    {
        log_info("=== Parser Test Successful ===");
 80009b0:	4836      	ldr	r0, [pc, #216]	@ (8000a8c <test_parse_packet+0x130>)
 80009b2:	f7ff ff45 	bl	8000840 <log_info>
        log_debug("Transaction ID : 0x%08X", parsedPacket.transactionID);
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80009be:	4619      	mov	r1, r3
 80009c0:	4833      	ldr	r0, [pc, #204]	@ (8000a90 <test_parse_packet+0x134>)
 80009c2:	f7ff ff23 	bl	800080c <log_debug>
        log_debug("Command        : 0x%02X", parsedPacket.cmd);
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80009ce:	4619      	mov	r1, r3
 80009d0:	4830      	ldr	r0, [pc, #192]	@ (8000a94 <test_parse_packet+0x138>)
 80009d2:	f7ff ff1b 	bl	800080c <log_debug>
        log_debug("Option         : 0x%02X", parsedPacket.option);
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	f813 3c07 	ldrb.w	r3, [r3, #-7]
 80009de:	4619      	mov	r1, r3
 80009e0:	482d      	ldr	r0, [pc, #180]	@ (8000a98 <test_parse_packet+0x13c>)
 80009e2:	f7ff ff13 	bl	800080c <log_debug>
        log_debug("Input Size     : %d bytes", parsedPacket.inputSize);
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 80009ee:	4619      	mov	r1, r3
 80009f0:	482a      	ldr	r0, [pc, #168]	@ (8000a9c <test_parse_packet+0x140>)
 80009f2:	f7ff ff0b 	bl	800080c <log_debug>

        log_debug("First 16 Input Data bytes:");
 80009f6:	482a      	ldr	r0, [pc, #168]	@ (8000aa0 <test_parse_packet+0x144>)
 80009f8:	f7ff ff08 	bl	800080c <log_debug>
        for (uint16_t i = 0; i < 16 && i < parsedPacket.inputSize; ++i)
 80009fc:	2300      	movs	r3, #0
 80009fe:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000a02:	f102 0216 	add.w	r2, r2, #22
 8000a06:	8013      	strh	r3, [r2, #0]
 8000a08:	e01d      	b.n	8000a46 <test_parse_packet+0xea>
        {
            log_debug("  Byte[%02d] = 0x%02X", i, parsedPacket.inputData[i]);
 8000a0a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a0e:	f103 0316 	add.w	r3, r3, #22
 8000a12:	8819      	ldrh	r1, [r3, #0]
 8000a14:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a18:	f103 0316 	add.w	r3, r3, #22
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	f107 0218 	add.w	r2, r7, #24
 8000a22:	4413      	add	r3, r2
 8000a24:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	481e      	ldr	r0, [pc, #120]	@ (8000aa4 <test_parse_packet+0x148>)
 8000a2c:	f7ff feee 	bl	800080c <log_debug>
        for (uint16_t i = 0; i < 16 && i < parsedPacket.inputSize; ++i)
 8000a30:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a34:	f103 0316 	add.w	r3, r3, #22
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000a40:	f102 0216 	add.w	r2, r2, #22
 8000a44:	8013      	strh	r3, [r2, #0]
 8000a46:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a4a:	f103 0316 	add.w	r3, r3, #22
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d814      	bhi.n	8000a7e <test_parse_packet+0x122>
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 8000a5c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000a60:	f102 0216 	add.w	r2, r2, #22
 8000a64:	8812      	ldrh	r2, [r2, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3cf      	bcc.n	8000a0a <test_parse_packet+0xae>
    }
    else
    {
        log_error("Parser failed with error code: %d", status);
    }
}
 8000a6a:	e008      	b.n	8000a7e <test_parse_packet+0x122>
        log_error("Parser failed with error code: %d", status);
 8000a6c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a70:	f103 0315 	add.w	r3, r3, #21
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <test_parse_packet+0x14c>)
 8000a7a:	f7ff fefb 	bl	8000874 <log_error>
}
 8000a7e:	bf00      	nop
 8000a80:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08011928 	.word	0x08011928
 8000a90:	08011948 	.word	0x08011948
 8000a94:	08011960 	.word	0x08011960
 8000a98:	08011978 	.word	0x08011978
 8000a9c:	08011990 	.word	0x08011990
 8000aa0:	080119ac 	.word	0x080119ac
 8000aa4:	080119c8 	.word	0x080119c8
 8000aa8:	080119e0 	.word	0x080119e0

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0b4      	sub	sp, #208	@ 0xd0
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f001 fcbf 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f8cb 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 fbcd 	bl	8001258 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000abe:	f000 fb69 	bl	8001194 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 fa83 	bl	8000fcc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ac6:	f000 f953 	bl	8000d70 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000aca:	f000 fa29 	bl	8000f20 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000ace:	f000 fb15 	bl	80010fc <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000ad2:	f000 f9a3 	bl	8000e1c <MX_RTC_Init>
  MX_RNG_Init();
 8000ad6:	f000 f98b 	bl	8000df0 <MX_RNG_Init>
  MX_HASH_Init();
 8000ada:	f000 f92f 	bl	8000d3c <MX_HASH_Init>
  MX_USART3_UART_Init();
 8000ade:	f000 fac1 	bl	8001064 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000ae2:	bf00      	nop
 8000ae4:	4b53      	ldr	r3, [pc, #332]	@ (8000c34 <main+0x188>)
 8000ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0fa      	beq.n	8000ae4 <main+0x38>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f001 fa86 	bl	8002000 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f001 fa83 	bl	8002000 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f001 fa80 	bl	8002000 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000b00:	2101      	movs	r1, #1
 8000b02:	2000      	movs	r0, #0
 8000b04:	f001 fb1c 	bl	8002140 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b08:	4b4b      	ldr	r3, [pc, #300]	@ (8000c38 <main+0x18c>)
 8000b0a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b0e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b10:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <main+0x18c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b16:	4b48      	ldr	r3, [pc, #288]	@ (8000c38 <main+0x18c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b1c:	4b46      	ldr	r3, [pc, #280]	@ (8000c38 <main+0x18c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b22:	4b45      	ldr	r3, [pc, #276]	@ (8000c38 <main+0x18c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b28:	4943      	ldr	r1, [pc, #268]	@ (8000c38 <main+0x18c>)
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f001 fba2 	bl	8002274 <BSP_COM_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <main+0x8e>
  {
    Error_Handler();
 8000b36:	f000 fc8b 	bl	8001450 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  log_init(LOG_LEVEL_DEBUG);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe0a 	bl	8000754 <log_init>
  log_info("Turning LED ON.");
 8000b40:	483e      	ldr	r0, [pc, #248]	@ (8000c3c <main+0x190>)
 8000b42:	f7ff fe7d 	bl	8000840 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f001 fad0 	bl	80020ec <BSP_LED_Toggle>
 8000b4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b50:	f001 fd2e 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b54:	2002      	movs	r0, #2
 8000b56:	f001 fac9 	bl	80020ec <BSP_LED_Toggle>
 8000b5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5e:	f001 fd27 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 fac2 	bl	80020ec <BSP_LED_Toggle>
 8000b68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b6c:	f001 fd20 	bl	80025b0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b70:	4833      	ldr	r0, [pc, #204]	@ (8000c40 <main+0x194>)
 8000b72:	f7ff fe65 	bl	8000840 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f001 fab8 	bl	80020ec <BSP_LED_Toggle>
 8000b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b80:	f001 fd16 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b84:	2002      	movs	r0, #2
 8000b86:	f001 fab1 	bl	80020ec <BSP_LED_Toggle>
 8000b8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8e:	f001 fd0f 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f001 faaa 	bl	80020ec <BSP_LED_Toggle>
 8000b98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b9c:	f001 fd08 	bl	80025b0 <HAL_Delay>
  log_info("Turning LED ON.");
 8000ba0:	4826      	ldr	r0, [pc, #152]	@ (8000c3c <main+0x190>)
 8000ba2:	f7ff fe4d 	bl	8000840 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f001 faa0 	bl	80020ec <BSP_LED_Toggle>
 8000bac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb0:	f001 fcfe 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f001 fa99 	bl	80020ec <BSP_LED_Toggle>
 8000bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bbe:	f001 fcf7 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f001 fa92 	bl	80020ec <BSP_LED_Toggle>
 8000bc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bcc:	f001 fcf0 	bl	80025b0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bd0:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <main+0x194>)
 8000bd2:	f7ff fe35 	bl	8000840 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f001 fa88 	bl	80020ec <BSP_LED_Toggle>
 8000bdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be0:	f001 fce6 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000be4:	2002      	movs	r0, #2
 8000be6:	f001 fa81 	bl	80020ec <BSP_LED_Toggle>
 8000bea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bee:	f001 fcdf 	bl	80025b0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f001 fa7a 	bl	80020ec <BSP_LED_Toggle>
 8000bf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bfc:	f001 fcd8 	bl	80025b0 <HAL_Delay>

  uint8_t test_packet[TEST_PACKET_SIZE];
  uint16_t test_length = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	807b      	strh	r3, [r7, #2]
  log_info("Filling Test Packet");
 8000c04:	480f      	ldr	r0, [pc, #60]	@ (8000c44 <main+0x198>)
 8000c06:	f7ff fe1b 	bl	8000840 <log_info>
  fill_test_packet(test_packet, &test_length);
 8000c0a:	1cba      	adds	r2, r7, #2
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe49 	bl	80008a8 <fill_test_packet>
  log_info("Parsing Test Packet");
 8000c16:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <main+0x19c>)
 8000c18:	f7ff fe12 	bl	8000840 <log_info>
  test_parse_packet(test_packet, test_length);
 8000c1c:	887a      	ldrh	r2, [r7, #2]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe9a 	bl	800095c <test_parse_packet>
  log_info("Logic Completed");
 8000c28:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <main+0x1a0>)
 8000c2a:	f7ff fe09 	bl	8000840 <log_info>

  while (1)
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <main+0x182>
 8000c32:	bf00      	nop
 8000c34:	200007b4 	.word	0x200007b4
 8000c38:	2000019c 	.word	0x2000019c
 8000c3c:	08011a04 	.word	0x08011a04
 8000c40:	08011a14 	.word	0x08011a14
 8000c44:	08011a28 	.word	0x08011a28
 8000c48:	08011a3c 	.word	0x08011a3c
 8000c4c:	08011a50 	.word	0x08011a50

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b09c      	sub	sp, #112	@ 0x70
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2250      	movs	r2, #80	@ 0x50
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f00f fd6c 	bl	801073c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c76:	4b2f      	ldr	r3, [pc, #188]	@ (8000d34 <SystemClock_Config+0xe4>)
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d34 <SystemClock_Config+0xe4>)
 8000c7c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c80:	6113      	str	r3, [r2, #16]
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <SystemClock_Config+0xe4>)
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c8e:	bf00      	nop
 8000c90:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <SystemClock_Config+0xe4>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d1f9      	bne.n	8000c90 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000c9c:	2329      	movs	r3, #41	@ 0x29
 8000c9e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ca0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ca6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000cbe:	23fa      	movs	r3, #250	@ 0xfa
 8000cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fe94 	bl	8004a0c <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cea:	f000 fbb1 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	231f      	movs	r3, #31
 8000cf0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 fab5 	bl	800527c <HAL_RCC_ClockConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d18:	f000 fb9a 	bl	8001450 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <SystemClock_Config+0xe8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <SystemClock_Config+0xe8>)
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	3770      	adds	r7, #112	@ 0x70
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	44020800 	.word	0x44020800
 8000d38:	40022000 	.word	0x40022000

08000d3c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_HASH_Init+0x2c>)
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <MX_HASH_Init+0x30>)
 8000d44:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_HASH_Init+0x2c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_HASH_Init+0x2c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_HASH_Init+0x2c>)
 8000d54:	f001 ffec 	bl	8002d30 <HAL_HASH_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8000d5e:	f000 fb77 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001ac 	.word	0x200001ac
 8000d6c:	420c0400 	.word	0x420c0400

08000d70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <MX_I2C1_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <MX_I2C1_Init+0x7c>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000dac:	f001 fff8 	bl	8002da0 <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000db6:	f000 fb4b 	bl	8001450 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000dbe:	f002 f88a 	bl	8002ed6 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc8:	f000 fb42 	bl	8001450 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_I2C1_Init+0x74>)
 8000dd0:	f002 f8cc 	bl	8002f6c <HAL_I2CEx_ConfigDigitalFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 fb39 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001ec 	.word	0x200001ec
 8000de8:	40005400 	.word	0x40005400
 8000dec:	10c043e5 	.word	0x10c043e5

08000df0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <MX_RNG_Init+0x24>)
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <MX_RNG_Init+0x28>)
 8000df8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_RNG_Init+0x24>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_RNG_Init+0x24>)
 8000e02:	f009 fdd5 	bl	800a9b0 <HAL_RNG_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000e0c:	f000 fb20 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000240 	.word	0x20000240
 8000e18:	420c0800 	.word	0x420c0800

08000e1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	@ 0x38
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e4c:	4a33      	ldr	r2, [pc, #204]	@ (8000f1c <MX_RTC_Init+0x100>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e50:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e58:	227f      	movs	r2, #127	@ 0x7f
 8000e5a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e5e:	22ff      	movs	r2, #255	@ 0xff
 8000e60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e88:	4823      	ldr	r0, [pc, #140]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000e8a:	f009 fe2f 	bl	800aaec <HAL_RTC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e94:	f000 fadc 	bl	8001450 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000eb0:	f00a f882 	bl	800afb8 <HAL_RTCEx_PrivilegeModeSet>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000eba:	f000 fac9 	bl	8001450 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480f      	ldr	r0, [pc, #60]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000edc:	f009 fe88 	bl	800abf0 <HAL_RTC_SetTime>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000ee6:	f000 fab3 	bl	8001450 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eea:	2301      	movs	r3, #1
 8000eec:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_RTC_Init+0xfc>)
 8000f02:	f009 ff07 	bl	800ad14 <HAL_RTC_SetDate>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000f0c:	f000 faa0 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3738      	adds	r7, #56	@ 0x38
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000254 	.word	0x20000254
 8000f1c:	44007800 	.word	0x44007800

08000f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f24:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f26:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <MX_SPI1_Init+0xa8>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f2c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f54:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000f58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f80:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_SPI1_Init+0xa4>)
 8000fb2:	f00a f82f 	bl	800b014 <HAL_SPI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000fbc:	f000 fa48 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000284 	.word	0x20000284
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fd2:	4a23      	ldr	r2, [pc, #140]	@ (8001060 <MX_USART2_UART_Init+0x94>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_USART2_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001014:	4811      	ldr	r0, [pc, #68]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001016:	f00a f988 	bl	800b32a <HAL_UART_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001020:	f000 fa16 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_USART2_UART_Init+0x90>)
 8001028:	f00a feb4 	bl	800bd94 <HAL_UARTEx_SetTxFifoThreshold>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001032:	f000 fa0d 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4808      	ldr	r0, [pc, #32]	@ (800105c <MX_USART2_UART_Init+0x90>)
 800103a:	f00a fee9 	bl	800be10 <HAL_UARTEx_SetRxFifoThreshold>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001044:	f000 fa04 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_USART2_UART_Init+0x90>)
 800104a:	f00a fe6a 	bl	800bd22 <HAL_UARTEx_DisableFifoMode>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001054:	f000 f9fc 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000314 	.word	0x20000314
 8001060:	40004400 	.word	0x40004400

08001064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800106a:	4a23      	ldr	r2, [pc, #140]	@ (80010f8 <MX_USART3_UART_Init+0x94>)
 800106c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010ae:	f00a f93c 	bl	800b32a <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010b8:	f000 f9ca 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010c0:	f00a fe68 	bl	800bd94 <HAL_UARTEx_SetTxFifoThreshold>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ca:	f000 f9c1 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010d2:	f00a fe9d 	bl	800be10 <HAL_UARTEx_SetRxFifoThreshold>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f9b8 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_USART3_UART_Init+0x90>)
 80010e2:	f00a fe1e 	bl	800bd22 <HAL_UARTEx_DisableFifoMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f9b0 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200003a8 	.word	0x200003a8
 80010f8:	40004800 	.word	0x40004800

080010fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001102:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <MX_USART6_UART_Init+0x94>)
 8001104:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_USART6_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART6_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART6_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001146:	f00a f8f0 	bl	800b32a <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f97e 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART6_UART_Init+0x90>)
 8001158:	f00a fe1c 	bl	800bd94 <HAL_UARTEx_SetTxFifoThreshold>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001162:	f000 f975 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <MX_USART6_UART_Init+0x90>)
 800116a:	f00a fe51 	bl	800be10 <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 f96c 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_USART6_UART_Init+0x90>)
 800117a:	f00a fdd2 	bl	800bd22 <HAL_UARTEx_DisableFifoMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f964 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000043c 	.word	0x2000043c
 8001190:	40006400 	.word	0x40006400

08001194 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 800119a:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <MX_USB_PCD_Init+0xb0>)
 800119c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011a2:	4a29      	ldr	r2, [pc, #164]	@ (8001248 <MX_USB_PCD_Init+0xb4>)
 80011a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011a8:	2208      	movs	r2, #8
 80011aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80011b8:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80011be:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80011e2:	4817      	ldr	r0, [pc, #92]	@ (8001240 <MX_USB_PCD_Init+0xac>)
 80011e4:	f001 ff71 	bl	80030ca <HAL_PCD_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 80011ee:	f000 f92f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80011f2:	2200      	movs	r2, #0
 80011f4:	4915      	ldr	r1, [pc, #84]	@ (800124c <MX_USB_PCD_Init+0xb8>)
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_USB_PCD_Init+0xb0>)
 80011f8:	f00d fe12 	bl	800ee20 <USBD_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001202:	f000 f925 	bl	8001450 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001206:	4912      	ldr	r1, [pc, #72]	@ (8001250 <MX_USB_PCD_Init+0xbc>)
 8001208:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_USB_PCD_Init+0xb0>)
 800120a:	f00d fe39 	bl	800ee80 <USBD_RegisterClass>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001214:	f000 f91c 	bl	8001450 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001218:	490e      	ldr	r1, [pc, #56]	@ (8001254 <MX_USB_PCD_Init+0xc0>)
 800121a:	480a      	ldr	r0, [pc, #40]	@ (8001244 <MX_USB_PCD_Init+0xb0>)
 800121c:	f00d fa58 	bl	800e6d0 <USBD_CDC_RegisterInterface>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001226:	f000 f913 	bl	8001450 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_USB_PCD_Init+0xb0>)
 800122c:	f00d fe5e 	bl	800eeec <USBD_Start>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001236:	f000 f90b 	bl	8001450 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200004d0 	.word	0x200004d0
 8001244:	200007b4 	.word	0x200007b4
 8001248:	40016000 	.word	0x40016000
 800124c:	200000d4 	.word	0x200000d4
 8001250:	20000038 	.word	0x20000038
 8001254:	200000b8 	.word	0x200000b8

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800126e:	4b72      	ldr	r3, [pc, #456]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001274:	4a70      	ldr	r2, [pc, #448]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127e:	4b6e      	ldr	r3, [pc, #440]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	4b6a      	ldr	r3, [pc, #424]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 800128e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001292:	4a69      	ldr	r2, [pc, #420]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800129c:	4b66      	ldr	r3, [pc, #408]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4b63      	ldr	r3, [pc, #396]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b0:	4a61      	ldr	r2, [pc, #388]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012d8:	4b57      	ldr	r3, [pc, #348]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b54      	ldr	r3, [pc, #336]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012f6:	4b50      	ldr	r3, [pc, #320]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b4c      	ldr	r3, [pc, #304]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130a:	4a4b      	ldr	r2, [pc, #300]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001314:	4b48      	ldr	r3, [pc, #288]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	4b45      	ldr	r3, [pc, #276]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	4a43      	ldr	r2, [pc, #268]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 800132a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001332:	4b41      	ldr	r3, [pc, #260]	@ (8001438 <MX_GPIO_Init+0x1e0>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001340:	2332      	movs	r3, #50	@ 0x32
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001350:	230b      	movs	r3, #11
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4838      	ldr	r0, [pc, #224]	@ (800143c <MX_GPIO_Init+0x1e4>)
 800135c:	f001 fb64 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001360:	2384      	movs	r3, #132	@ 0x84
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001370:	230b      	movs	r3, #11
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4831      	ldr	r0, [pc, #196]	@ (8001440 <MX_GPIO_Init+0x1e8>)
 800137c:	f001 fb54 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001380:	2310      	movs	r3, #16
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	482b      	ldr	r0, [pc, #172]	@ (8001440 <MX_GPIO_Init+0x1e8>)
 8001394:	f001 fb48 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001398:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4825      	ldr	r0, [pc, #148]	@ (8001444 <MX_GPIO_Init+0x1ec>)
 80013ae:	f001 fb3b 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c4:	230b      	movs	r3, #11
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	481d      	ldr	r0, [pc, #116]	@ (8001444 <MX_GPIO_Init+0x1ec>)
 80013d0:	f001 fb2a 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <MX_GPIO_Init+0x1f0>)
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4819      	ldr	r0, [pc, #100]	@ (800144c <MX_GPIO_Init+0x1f4>)
 80013e8:	f001 fb1e 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80013ec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fe:	230b      	movs	r3, #11
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4810      	ldr	r0, [pc, #64]	@ (800144c <MX_GPIO_Init+0x1f4>)
 800140a:	f001 fb0d 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800140e:	23c0      	movs	r3, #192	@ 0xc0
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800141e:	2308      	movs	r3, #8
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4806      	ldr	r0, [pc, #24]	@ (8001444 <MX_GPIO_Init+0x1ec>)
 800142a:	f001 fafd 	bl	8002a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	@ 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	44020c00 	.word	0x44020c00
 800143c:	42020800 	.word	0x42020800
 8001440:	42020000 	.word	0x42020000
 8001444:	42020400 	.word	0x42020400
 8001448:	10110000 	.word	0x10110000
 800144c:	42021800 	.word	0x42021800

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_HASH_MspInit+0x34>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <HAL_HASH_MspInit+0x34>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_HASH_MspInit+0x34>)
 8001486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	44020c00 	.word	0x44020c00

080014a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b0cc      	sub	sp, #304	@ 0x130
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014b2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014cc:	4618      	mov	r0, r3
 80014ce:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80014d2:	461a      	mov	r2, r3
 80014d4:	2100      	movs	r1, #0
 80014d6:	f00f f931 	bl	801073c <memset>
  if(hi2c->Instance==I2C1)
 80014da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <HAL_I2C_MspInit+0x110>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d15e      	bne.n	80015aa <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014f0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80014f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001500:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001504:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001508:	2200      	movs	r2, #0
 800150a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	4618      	mov	r0, r3
 8001514:	f004 f9f4 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800151e:	f7ff ff97 	bl	8001450 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <HAL_I2C_MspInit+0x114>)
 8001524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001528:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <HAL_I2C_MspInit+0x114>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_I2C_MspInit+0x114>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001538:	f003 0202 	and.w	r2, r3, #2
 800153c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001540:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800154a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800154e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001550:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001554:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001558:	2312      	movs	r3, #18
 800155a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156a:	2304      	movs	r3, #4
 800156c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001574:	4619      	mov	r1, r3
 8001576:	4811      	ldr	r0, [pc, #68]	@ (80015bc <HAL_I2C_MspInit+0x118>)
 8001578:	f001 fa56 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_I2C_MspInit+0x114>)
 800157e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001582:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <HAL_I2C_MspInit+0x114>)
 8001584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001588:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_I2C_MspInit+0x114>)
 800158e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001592:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001596:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800159a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015a8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40005400 	.word	0x40005400
 80015b8:	44020c00 	.word	0x44020c00
 80015bc:	42020400 	.word	0x42020400

080015c0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0c6      	sub	sp, #280	@ 0x118
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015ce:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015d8:	4618      	mov	r0, r3
 80015da:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80015de:	461a      	mov	r2, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	f00f f8ab 	bl	801073c <memset>
  if(hrng->Instance==RNG)
 80015e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <HAL_RNG_MspInit+0xa8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d131      	bne.n	800165c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80015f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015fc:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001600:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800160c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001614:	2200      	movs	r2, #0
 8001616:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4618      	mov	r0, r3
 8001620:	f004 f96e 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800162a:	f7ff ff11 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_RNG_MspInit+0xac>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_RNG_MspInit+0xac>)
 8001636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_RNG_MspInit+0xac>)
 8001640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001644:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001648:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800164c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800165a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800165c:	bf00      	nop
 800165e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	420c0800 	.word	0x420c0800
 800166c:	44020c00 	.word	0x44020c00

08001670 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0c6      	sub	sp, #280	@ 0x118
 8001674:	af00      	add	r7, sp, #0
 8001676:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800167a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800167e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001688:	4618      	mov	r0, r3
 800168a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800168e:	461a      	mov	r2, r3
 8001690:	2100      	movs	r1, #0
 8001692:	f00f f853 	bl	801073c <memset>
  if(hrtc->Instance==RTC)
 8001696:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800169a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <HAL_RTC_MspInit+0xb8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13a      	bne.n	800171e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016ac:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80016b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 f915 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80016dc:	f7ff feb8 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_RTC_MspInit+0xbc>)
 80016e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016e6:	4a11      	ldr	r2, [pc, #68]	@ (800172c <HAL_RTC_MspInit+0xbc>)
 80016e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <HAL_RTC_MspInit+0xbc>)
 80016f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016f6:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <HAL_RTC_MspInit+0xbc>)
 80016f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016fc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_RTC_MspInit+0xbc>)
 8001702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001706:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800170a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800170e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001718:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800171c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	44007800 	.word	0x44007800
 800172c:	44020c00 	.word	0x44020c00

08001730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0ce      	sub	sp, #312	@ 0x138
 8001734:	af00      	add	r7, sp, #0
 8001736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800173a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800173e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001750:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001754:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001758:	4618      	mov	r0, r3
 800175a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800175e:	461a      	mov	r2, r3
 8001760:	2100      	movs	r1, #0
 8001762:	f00e ffeb 	bl	801073c <memset>
  if(hspi->Instance==SPI1)
 8001766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800176a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a49      	ldr	r2, [pc, #292]	@ (8001898 <HAL_SPI_MspInit+0x168>)
 8001774:	4293      	cmp	r3, r2
 8001776:	f040 808a 	bne.w	800188e <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800177a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800177e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001782:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800178e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001792:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001796:	2200      	movs	r2, #0
 8001798:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 f8ad 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80017ac:	f7ff fe50 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b0:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 80017b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017b6:	4a39      	ldr	r2, [pc, #228]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 80017b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017bc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017c0:	4b36      	ldr	r3, [pc, #216]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 80017c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80017ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017dc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e4:	4a2d      	ldr	r2, [pc, #180]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 80017f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001806:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800180a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180c:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 800180e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001812:	4a22      	ldr	r2, [pc, #136]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_SPI_MspInit+0x16c>)
 800181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001822:	f003 0208 	and.w	r2, r3, #8
 8001826:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800182a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001834:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001838:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800183a:	2360      	movs	r3, #96	@ 0x60
 800183c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001852:	2305      	movs	r3, #5
 8001854:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800185c:	4619      	mov	r1, r3
 800185e:	4810      	ldr	r0, [pc, #64]	@ (80018a0 <HAL_SPI_MspInit+0x170>)
 8001860:	f001 f8e2 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187c:	2305      	movs	r3, #5
 800187e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001882:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001886:	4619      	mov	r1, r3
 8001888:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <HAL_SPI_MspInit+0x174>)
 800188a:	f001 f8cd 	bl	8002a28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800188e:	bf00      	nop
 8001890:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40013000 	.word	0x40013000
 800189c:	44020c00 	.word	0x44020c00
 80018a0:	42020000 	.word	0x42020000
 80018a4:	42020c00 	.word	0x42020c00

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0d2      	sub	sp, #328	@ 0x148
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80018b6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018d0:	4618      	mov	r0, r3
 80018d2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80018d6:	461a      	mov	r2, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	f00e ff2f 	bl	801073c <memset>
  if(huart->Instance==USART2)
 80018de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4ac7      	ldr	r2, [pc, #796]	@ (8001c08 <HAL_UART_MspInit+0x360>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	f040 808a 	bne.w	8001a06 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018f6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80018fa:	f04f 0202 	mov.w	r2, #2
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001906:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800190a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800190e:	2200      	movs	r2, #0
 8001910:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fff2 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001922:	f7ff fd95 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001926:	4bb9      	ldr	r3, [pc, #740]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001928:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800192c:	4ab7      	ldr	r2, [pc, #732]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 800192e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001932:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001936:	4bb5      	ldr	r3, [pc, #724]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001938:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800193c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001940:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001944:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800194e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001952:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4bad      	ldr	r3, [pc, #692]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800195a:	4aac      	ldr	r2, [pc, #688]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001964:	4ba9      	ldr	r3, [pc, #676]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196a:	f003 0201 	and.w	r2, r3, #1
 800196e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001972:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800197c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001980:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	4ba2      	ldr	r3, [pc, #648]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001988:	4aa0      	ldr	r2, [pc, #640]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001992:	4b9e      	ldr	r3, [pc, #632]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001998:	f003 0208 	and.w	r2, r3, #8
 800199c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019ae:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b0:	2308      	movs	r3, #8
 80019b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c8:	2307      	movs	r3, #7
 80019ca:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80019d2:	4619      	mov	r1, r3
 80019d4:	488e      	ldr	r0, [pc, #568]	@ (8001c10 <HAL_UART_MspInit+0x368>)
 80019d6:	f001 f827 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019da:	2320      	movs	r3, #32
 80019dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80019fc:	4619      	mov	r1, r3
 80019fe:	4885      	ldr	r0, [pc, #532]	@ (8001c14 <HAL_UART_MspInit+0x36c>)
 8001a00:	f001 f812 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a04:	e0fb      	b.n	8001bfe <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 8001a06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a81      	ldr	r2, [pc, #516]	@ (8001c18 <HAL_UART_MspInit+0x370>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	f040 808c 	bne.w	8001b32 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a1a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a1e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001a22:	f04f 0204 	mov.w	r2, #4
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a36:	2200      	movs	r2, #0
 8001a38:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 ff5e 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8001a4a:	f7ff fd01 	bl	8001450 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a54:	4a6d      	ldr	r2, [pc, #436]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a64:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001a68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a6c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a7a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7c:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a82:	4a62      	ldr	r2, [pc, #392]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a92:	f003 0202 	and.w	r2, r3, #2
 8001a96:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001aa4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001aa8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	4b58      	ldr	r3, [pc, #352]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab0:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aba:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac0:	f003 0208 	and.w	r2, r3, #8
 8001ac4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ac8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ad2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ad6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001adc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001af2:	2307      	movs	r3, #7
 8001af4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001afc:	4619      	mov	r1, r3
 8001afe:	4847      	ldr	r0, [pc, #284]	@ (8001c1c <HAL_UART_MspInit+0x374>)
 8001b00:	f000 ff92 	bl	8002a28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b08:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b24:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b28:	4619      	mov	r1, r3
 8001b2a:	483a      	ldr	r0, [pc, #232]	@ (8001c14 <HAL_UART_MspInit+0x36c>)
 8001b2c:	f000 ff7c 	bl	8002a28 <HAL_GPIO_Init>
}
 8001b30:	e065      	b.n	8001bfe <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 8001b32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a38      	ldr	r2, [pc, #224]	@ (8001c20 <HAL_UART_MspInit+0x378>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d15c      	bne.n	8001bfe <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001b44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b48:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001b4c:	f04f 0220 	mov.w	r2, #32
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001b58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b60:	2200      	movs	r2, #0
 8001b62:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fec9 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001b74:	f7ff fc6c 	bl	8001450 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b7e:	4a23      	ldr	r2, [pc, #140]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001b80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b8e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001b92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ba0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ba4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bac:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_UART_MspInit+0x364>)
 8001bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bbc:	f003 0204 	and.w	r2, r3, #4
 8001bc0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001bc4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001bce:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bd2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd4:	23c0      	movs	r3, #192	@ 0xc0
 8001bd6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001bec:	2307      	movs	r3, #7
 8001bee:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <HAL_UART_MspInit+0x37c>)
 8001bfa:	f000 ff15 	bl	8002a28 <HAL_GPIO_Init>
}
 8001bfe:	bf00      	nop
 8001c00:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40004400 	.word	0x40004400
 8001c0c:	44020c00 	.word	0x44020c00
 8001c10:	42020000 	.word	0x42020000
 8001c14:	42020c00 	.word	0x42020c00
 8001c18:	40004800 	.word	0x40004800
 8001c1c:	42020400 	.word	0x42020400
 8001c20:	40006400 	.word	0x40006400
 8001c24:	42020800 	.word	0x42020800

08001c28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0c6      	sub	sp, #280	@ 0x118
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c36:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c40:	4618      	mov	r0, r3
 8001c42:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001c46:	461a      	mov	r2, r3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f00e fd77 	bl	801073c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001c4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_PCD_MspInit+0xbc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d13b      	bne.n	8001cd8 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c64:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0310 	mov.w	r3, #16
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c7c:	2230      	movs	r2, #48	@ 0x30
 8001c7e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fe3a 	bl	8005900 <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001c92:	f7ff fbdd 	bl	8001450 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001c96:	f002 fea9 	bl	80049ec <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_PCD_MspInit+0xc0>)
 8001c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ca0:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_PCD_MspInit+0xc0>)
 8001ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_PCD_MspInit+0xc0>)
 8001cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cb0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001cb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cc6:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	204a      	movs	r0, #74	@ 0x4a
 8001cce:	f000 fd4b 	bl	8002768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001cd2:	204a      	movs	r0, #74	@ 0x4a
 8001cd4:	f000 fd62 	bl	800279c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001cd8:	bf00      	nop
 8001cda:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40016000 	.word	0x40016000
 8001ce8:	44020c00 	.word	0x44020c00

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <MemManage_Handler+0x4>

08001d04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d42:	f000 fc15 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 fa6e 	bl	8002230 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <USB_DRD_FS_IRQHandler+0x10>)
 8001d5e:	f001 fad7 	bl	8003310 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200004d0 	.word	0x200004d0

08001d6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
  }

  return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fabb 	bl	800233c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
  }
  return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e06:	605a      	str	r2, [r3, #4]
  return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_isatty>:

int _isatty(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	@ (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f00e fcae 	bl	80107d8 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200a0000 	.word	0x200a0000
 8001ea8:	00000500 	.word	0x00000500
 8001eac:	20000a90 	.word	0x20000a90
 8001eb0:	200113b8 	.word	0x200113b8

08001eb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eba:	4b35      	ldr	r3, [pc, #212]	@ (8001f90 <SystemInit+0xdc>)
 8001ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec0:	4a33      	ldr	r2, [pc, #204]	@ (8001f90 <SystemInit+0xdc>)
 8001ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001eca:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <SystemInit+0xe0>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ed0:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <SystemInit+0xe0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f94 <SystemInit+0xe0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001edc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <SystemInit+0xe0>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <SystemInit+0xe0>)
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <SystemInit+0xe4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <SystemInit+0xe0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001eee:	4b29      	ldr	r3, [pc, #164]	@ (8001f94 <SystemInit+0xe0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <SystemInit+0xe0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001efa:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <SystemInit+0xe0>)
 8001efc:	4a27      	ldr	r2, [pc, #156]	@ (8001f9c <SystemInit+0xe8>)
 8001efe:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001f00:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <SystemInit+0xe0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <SystemInit+0xe0>)
 8001f08:	4a24      	ldr	r2, [pc, #144]	@ (8001f9c <SystemInit+0xe8>)
 8001f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <SystemInit+0xe0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <SystemInit+0xe0>)
 8001f14:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <SystemInit+0xe8>)
 8001f16:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <SystemInit+0xe0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <SystemInit+0xe0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1c      	ldr	r2, [pc, #112]	@ (8001f94 <SystemInit+0xe0>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <SystemInit+0xe0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <SystemInit+0xdc>)
 8001f32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f36:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <SystemInit+0xec>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001f40:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001f48:	d003      	beq.n	8001f52 <SystemInit+0x9e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001f50:	d117      	bne.n	8001f82 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001f52:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <SystemInit+0xec>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <SystemInit+0xec>)
 8001f60:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <SystemInit+0xf0>)
 8001f62:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <SystemInit+0xec>)
 8001f66:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <SystemInit+0xf4>)
 8001f68:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <SystemInit+0xec>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <SystemInit+0xec>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <SystemInit+0xec>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <SystemInit+0xec>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	61d3      	str	r3, [r2, #28]
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	44020c00 	.word	0x44020c00
 8001f98:	eae2eae3 	.word	0xeae2eae3
 8001f9c:	01010280 	.word	0x01010280
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	08192a3b 	.word	0x08192a3b
 8001fa8:	4c5d6e7f 	.word	0x4c5d6e7f

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fac:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fb0:	f7ff ff80 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	@ (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fda:	f00e fc03 	bl	80107e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fde:	f7fe fd65 	bl	8000aac <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   r0, =_estack
 8001fe4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001ff0:	08011b4c 	.word	0x08011b4c
  ldr r2, =_sbss
 8001ff4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001ff8:	200113b4 	.word	0x200113b4

08001ffc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_IRQHandler>
	...

08002000 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	@ 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d009      	beq.n	8002028 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <BSP_LED_Init+0x28>
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d003      	beq.n	8002028 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002020:	f06f 0301 	mvn.w	r3, #1
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002026:	e055      	b.n	80020d4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10f      	bne.n	800204e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800202e:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002034:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800203e:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	e021      	b.n	8002092 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002054:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800205a:	4a21      	ldr	r2, [pc, #132]	@ (80020e0 <BSP_LED_Init+0xe0>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	e00e      	b.n	8002092 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800207a:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <BSP_LED_Init+0xe0>)
 800207c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002080:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002084:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <BSP_LED_Init+0xe0>)
 8002086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800208a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a13      	ldr	r2, [pc, #76]	@ (80020e4 <BSP_LED_Init+0xe4>)
 8002096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800209a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800209c:	2301      	movs	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <BSP_LED_Init+0xe8>)
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	f107 0218 	add.w	r2, r7, #24
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fcb6 	bl	8002a28 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <BSP_LED_Init+0xe8>)
 80020c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <BSP_LED_Init+0xe4>)
 80020c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f000 fdfc 	bl	8002ccc <HAL_GPIO_WritePin>
  }

  return ret;
 80020d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3730      	adds	r7, #48	@ 0x30
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	44020c00 	.word	0x44020c00
 80020e4:	08011ad4 	.word	0x08011ad4
 80020e8:	2000000c 	.word	0x2000000c

080020ec <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d009      	beq.n	8002114 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <BSP_LED_Toggle+0x28>
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d003      	beq.n	8002114 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800210c:	f06f 0301 	mvn.w	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e00b      	b.n	800212c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <BSP_LED_Toggle+0x4c>)
 8002118:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	4907      	ldr	r1, [pc, #28]	@ (800213c <BSP_LED_Toggle+0x50>)
 8002120:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 fde8 	bl	8002cfc <HAL_GPIO_TogglePin>
  }

  return ret;
 800212c:	68fb      	ldr	r3, [r7, #12]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c
 800213c:	08011ad4 	.word	0x08011ad4

08002140 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	460a      	mov	r2, r1
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	4613      	mov	r3, r2
 800214e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002150:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <BSP_PB_Init+0xd4>)
 8002152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002156:	4a2f      	ldr	r2, [pc, #188]	@ (8002214 <BSP_PB_Init+0xd4>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <BSP_PB_Init+0xd4>)
 8002162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800216e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002172:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002174:	2302      	movs	r3, #2
 8002176:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <BSP_PB_Init+0xd8>)
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	f107 020c 	add.w	r2, r7, #12
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fc47 	bl	8002a28 <HAL_GPIO_Init>
 800219a:	e036      	b.n	800220a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <BSP_PB_Init+0xdc>)
 800219e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002218 <BSP_PB_Init+0xd8>)
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	f107 020c 	add.w	r2, r7, #12
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fc3a 	bl	8002a28 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <BSP_PB_Init+0xe0>)
 80021c0:	441a      	add	r2, r3
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	4917      	ldr	r1, [pc, #92]	@ (8002224 <BSP_PB_Init+0xe4>)
 80021c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f000 fbcf 	bl	8002970 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80021d2:	79fa      	ldrb	r2, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <BSP_PB_Init+0xe0>)
 80021de:	1898      	adds	r0, r3, r2
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <BSP_PB_Init+0xe8>)
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	461a      	mov	r2, r3
 80021ea:	2100      	movs	r1, #0
 80021ec:	f000 fb94 	bl	8002918 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80021f0:	2018      	movs	r0, #24
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <BSP_PB_Init+0xec>)
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	2200      	movs	r2, #0
 80021fc:	4619      	mov	r1, r3
 80021fe:	f000 fab3 	bl	8002768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002202:	2318      	movs	r3, #24
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fac9 	bl	800279c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	44020c00 	.word	0x44020c00
 8002218:	20000018 	.word	0x20000018
 800221c:	10110000 	.word	0x10110000
 8002220:	20000a94 	.word	0x20000a94
 8002224:	08011adc 	.word	0x08011adc
 8002228:	2000001c 	.word	0x2000001c
 800222c:	20000020 	.word	0x20000020

08002230 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <BSP_PB_IRQHandler+0x28>)
 8002246:	4413      	add	r3, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fba5 	bl	8002998 <HAL_EXTI_IRQHandler>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000a94 	.word	0x20000a94

0800225c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800228a:	f06f 0301 	mvn.w	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e018      	b.n	80022c4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2294      	movs	r2, #148	@ 0x94
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <BSP_COM_Init+0x5c>)
 800229c:	4413      	add	r3, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f870 	bl	8002384 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2294      	movs	r2, #148	@ 0x94
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <BSP_COM_Init+0x5c>)
 80022ae:	4413      	add	r3, r2
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f80e 	bl	80022d4 <MX_USART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80022be:	f06f 0303 	mvn.w	r3, #3
 80022c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80022c4:	68fb      	ldr	r3, [r7, #12]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000aa0 	.word	0x20000aa0

080022d4 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <MX_USART_Init+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	220c      	movs	r2, #12
 80022f2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	895b      	ldrh	r3, [r3, #10]
 80022f8:	461a      	mov	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	891b      	ldrh	r3, [r3, #8]
 800230a:	461a      	mov	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	899b      	ldrh	r3, [r3, #12]
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002320:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f008 fffe 	bl	800b32a <HAL_UART_Init>
 800232e:	4603      	mov	r3, r0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000008 	.word	0x20000008

0800233c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <__io_putchar+0x30>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	2394      	movs	r3, #148	@ 0x94
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	4a07      	ldr	r2, [pc, #28]	@ (8002370 <__io_putchar+0x34>)
 8002352:	1898      	adds	r0, r3, r2
 8002354:	1d39      	adds	r1, r7, #4
 8002356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235a:	2201      	movs	r2, #1
 800235c:	f009 f835 	bl	800b3ca <HAL_UART_Transmit>
  return ch;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000b34 	.word	0x20000b34
 8002370:	20000aa0 	.word	0x20000aa0

08002374 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff ff6f 	bl	800225c <BSP_PB_Callback>
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800238c:	4b27      	ldr	r3, [pc, #156]	@ (800242c <COM1_MspInit+0xa8>)
 800238e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002392:	4a26      	ldr	r2, [pc, #152]	@ (800242c <COM1_MspInit+0xa8>)
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <COM1_MspInit+0xa8>)
 800239e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <COM1_MspInit+0xa8>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b0:	4a1e      	ldr	r2, [pc, #120]	@ (800242c <COM1_MspInit+0xa8>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <COM1_MspInit+0xa8>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <COM1_MspInit+0xa8>)
 80023ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023ce:	4a17      	ldr	r2, [pc, #92]	@ (800242c <COM1_MspInit+0xa8>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <COM1_MspInit+0xa8>)
 80023da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80023e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80023f0:	2302      	movs	r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80023f8:	2307      	movs	r3, #7
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	480b      	ldr	r0, [pc, #44]	@ (8002430 <COM1_MspInit+0xac>)
 8002404:	f000 fb10 	bl	8002a28 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800240c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002412:	2307      	movs	r3, #7
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4619      	mov	r1, r3
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <COM1_MspInit+0xac>)
 800241e:	f000 fb03 	bl	8002a28 <HAL_GPIO_Init>
}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	@ 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	44020c00 	.word	0x44020c00
 8002430:	42020c00 	.word	0x42020c00

08002434 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f98a 	bl	8002752 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800243e:	f003 f8d5 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <HAL_Init+0x44>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	490b      	ldr	r1, [pc, #44]	@ (800247c <HAL_Init+0x48>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <HAL_Init+0x4c>)
 8002456:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002458:	2004      	movs	r0, #4
 800245a:	f000 f9cf 	bl	80027fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245e:	200f      	movs	r0, #15
 8002460:	f000 f810 	bl	8002484 <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e002      	b.n	8002474 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800246e:	f7fe fff5 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	44020c00 	.word	0x44020c00
 800247c:	08011abc 	.word	0x08011abc
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002490:	4b33      	ldr	r3, [pc, #204]	@ (8002560 <HAL_InitTick+0xdc>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e05c      	b.n	8002556 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800249c:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <HAL_InitTick+0xe0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d10c      	bne.n	80024c2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80024a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002568 <HAL_InitTick+0xe4>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002560 <HAL_InitTick+0xdc>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e037      	b.n	8002532 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80024c2:	f000 f9f3 	bl	80028ac <HAL_SYSTICK_GetCLKSourceConfig>
 80024c6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d023      	beq.n	8002516 <HAL_InitTick+0x92>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d82d      	bhi.n	8002530 <HAL_InitTick+0xac>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_InitTick+0x5e>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d00d      	beq.n	80024fc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80024e0:	e026      	b.n	8002530 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80024e2:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_InitTick+0xe4>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_InitTick+0xdc>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4619      	mov	r1, r3
 80024ec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80024f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	60fb      	str	r3, [r7, #12]
        break;
 80024fa:	e01a      	b.n	8002532 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_InitTick+0xdc>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002506:	fbb3 f3f2 	udiv	r3, r3, r2
 800250a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	60fb      	str	r3, [r7, #12]
        break;
 8002514:	e00d      	b.n	8002532 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_InitTick+0xdc>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002520:	fbb3 f3f2 	udiv	r3, r3, r2
 8002524:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	60fb      	str	r3, [r7, #12]
        break;
 800252e:	e000      	b.n	8002532 <HAL_InitTick+0xae>
        break;
 8002530:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f940 	bl	80027b8 <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e009      	b.n	8002556 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002542:	2200      	movs	r2, #0
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	f04f 30ff 	mov.w	r0, #4294967295
 800254a:	f000 f90d 	bl	8002768 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800254e:	4a07      	ldr	r2, [pc, #28]	@ (800256c <HAL_InitTick+0xe8>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000028 	.word	0x20000028
 8002564:	e000e010 	.word	0xe000e010
 8002568:	20000004 	.word	0x20000004
 800256c:	20000024 	.word	0x20000024

08002570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000028 	.word	0x20000028
 8002594:	20000b38 	.word	0x20000b38

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000b38 	.word	0x20000b38

080025b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff ffee 	bl	8002598 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d005      	beq.n	80025d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <HAL_Delay+0x44>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d6:	bf00      	nop
 80025d8:	f7ff ffde 	bl	8002598 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d8f7      	bhi.n	80025d8 <HAL_Delay+0x28>
  {
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000028 	.word	0x20000028

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262a:	4a04      	ldr	r2, [pc, #16]	@ (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	60d3      	str	r3, [r2, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4907      	ldr	r1, [pc, #28]	@ (8002694 <__NVIC_EnableIRQ+0x38>)
 8002676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	@ (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	@ (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	@ 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff4c 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002776:	f7ff ff63 	bl	8002640 <__NVIC_GetPriorityGrouping>
 800277a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	6978      	ldr	r0, [r7, #20]
 8002782:	f7ff ffb3 	bl	80026ec <NVIC_EncodePriority>
 8002786:	4602      	mov	r2, r0
 8002788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff82 	bl	8002698 <__NVIC_SetPriority>
}
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff56 	bl	800265c <__NVIC_EnableIRQ>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d301      	bcc.n	80027ce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00d      	b.n	80027ea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <HAL_SYSTICK_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_SYSTICK_Config+0x40>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_SYSTICK_Config+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <HAL_SYSTICK_Config+0x40>)
 80027e2:	f043 0303 	orr.w	r3, r3, #3
 80027e6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d844      	bhi.n	8002894 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800280a:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002810:	08002833 	.word	0x08002833
 8002814:	08002851 	.word	0x08002851
 8002818:	08002873 	.word	0x08002873
 800281c:	08002895 	.word	0x08002895
 8002820:	08002825 	.word	0x08002825
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6013      	str	r3, [r2, #0]
      break;
 8002830:	e031      	b.n	8002896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002840:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002844:	4a18      	ldr	r2, [pc, #96]	@ (80028a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002846:	f023 030c 	bic.w	r3, r3, #12
 800284a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800284e:	e022      	b.n	8002896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800285e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002862:	f023 030c 	bic.w	r3, r3, #12
 8002866:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002870:	e011      	b.n	8002896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002872:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0b      	ldr	r2, [pc, #44]	@ (80028a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002884:	f023 030c 	bic.w	r3, r3, #12
 8002888:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002892:	e000      	b.n	8002896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002894:	bf00      	nop
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010
 80028a8:	44020c00 	.word	0x44020c00

080028ac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80028b2:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80028be:	2304      	movs	r3, #4
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	e01e      	b.n	8002902 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80028c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d00f      	beq.n	80028f6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d80f      	bhi.n	80028fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d003      	beq.n	80028f0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80028e8:	e008      	b.n	80028fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
        break;
 80028ee:	e008      	b.n	8002902 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80028f0:	2301      	movs	r3, #1
 80028f2:	607b      	str	r3, [r7, #4]
        break;
 80028f4:	e005      	b.n	8002902 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80028f6:	2302      	movs	r3, #2
 80028f8:	607b      	str	r3, [r7, #4]
        break;
 80028fa:	e002      	b.n	8002902 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
        break;
 8002900:	bf00      	nop
    }
  }
  return systick_source;
 8002902:	687b      	ldr	r3, [r7, #4]
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e010 	.word	0xe000e010
 8002914:	44020c00 	.word	0x44020c00

08002918 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	460b      	mov	r3, r1
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800292a:	7afb      	ldrb	r3, [r7, #11]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d011      	beq.n	8002954 <HAL_EXTI_RegisterCallback+0x3c>
 8002930:	2b02      	cmp	r3, #2
 8002932:	dc13      	bgt.n	800295c <HAL_EXTI_RegisterCallback+0x44>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_EXTI_RegisterCallback+0x26>
 8002938:	2b01      	cmp	r3, #1
 800293a:	d007      	beq.n	800294c <HAL_EXTI_RegisterCallback+0x34>
 800293c:	e00e      	b.n	800295c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]
      break;
 800294a:	e00a      	b.n	8002962 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	605a      	str	r2, [r3, #4]
      break;
 8002952:	e006      	b.n	8002962 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e002      	b.n	8002962 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
      break;
 8002960:	bf00      	nop
  }

  return status;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e003      	b.n	800298c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800298a:	2300      	movs	r3, #0
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2201      	movs	r2, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	4b17      	ldr	r3, [pc, #92]	@ (8002a20 <HAL_EXTI_IRQHandler+0x88>)
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <HAL_EXTI_IRQHandler+0x8c>)
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4798      	blx	r3
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	4402200c 	.word	0x4402200c
 8002a24:	44022010 	.word	0x44022010

08002a28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a36:	e136      	b.n	8002ca6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8128 	beq.w	8002ca0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x38>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d125      	bne.n	8002aac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4013      	ands	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	6979      	ldr	r1, [r7, #20]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d00b      	beq.n	8002b00 <HAL_GPIO_Init+0xd8>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af4:	2b11      	cmp	r3, #17
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b12      	cmp	r3, #18
 8002afe:	d130      	bne.n	8002b62 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b36:	2201      	movs	r2, #1
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4013      	ands	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 0201 	and.w	r2, r3, #1
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d017      	beq.n	8002b9a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d07c      	beq.n	8002ca0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002ba6:	4a47      	ldr	r2, [pc, #284]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3318      	adds	r3, #24
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0a9a      	lsrs	r2, r3, #10
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	f002 0203 	and.w	r2, r2, #3
 8002bd8:	00d2      	lsls	r2, r2, #3
 8002bda:	4093      	lsls	r3, r2
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002be2:	4938      	ldr	r1, [pc, #224]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3318      	adds	r3, #24
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002bf0:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002c14:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4013      	ands	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002c3e:	4a21      	ldr	r2, [pc, #132]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4013      	ands	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002c6a:	4a16      	ldr	r2, [pc, #88]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002c72:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c78:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002c98:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f aec1 	bne.w	8002a38 <HAL_GPIO_Init+0x10>
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	44022000 	.word	0x44022000
 8002cc8:	002f7f7f 	.word	0x002f7f7f

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce8:	e002      	b.n	8002cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	041a      	lsls	r2, r3, #16
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43d9      	mvns	r1, r3
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e02a      	b.n	8002d98 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fb88 	bl	800146c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8002d72:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e08d      	b.n	8002ece <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe fb6c 	bl	80014a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	@ 0x24
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e006      	b.n	8002e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d108      	bne.n	8002e42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	e007      	b.n	8002e52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d138      	bne.n	8002f5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e032      	b.n	8002f60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2224      	movs	r2, #36	@ 0x24
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d139      	bne.n	8002ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e033      	b.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	@ 0x24
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
  }
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8003010:	230a      	movs	r3, #10
 8003012:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003014:	e002      	b.n	800301c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3b01      	subs	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800302a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	b29b      	uxth	r3, r3
 8003034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003038:	b29b      	uxth	r3, r3
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8003052:	230a      	movs	r3, #10
 8003054:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003056:	e002      	b.n	800305e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3b01      	subs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f9      	bne.n	8003058 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800306c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	b29b      	uxth	r3, r3
 8003076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307a:	b29b      	uxth	r3, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8003094:	230a      	movs	r3, #10
 8003096:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003098:	e002      	b.n	80030a0 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b01      	subs	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f9      	bne.n	800309a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030bc:	b29b      	uxth	r3, r3
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af02      	add	r7, sp, #8
 80030d0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0f3      	b.n	80032c4 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fe fd99 	bl	8001c28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2203      	movs	r2, #3
 80030fa:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f008 ff59 	bl	800bfba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7c1a      	ldrb	r2, [r3, #16]
 8003110:	f88d 2000 	strb.w	r2, [sp]
 8003114:	3304      	adds	r3, #4
 8003116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003118:	f008 ff1d 	bl	800bf56 <USB_CoreInit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0ca      	b.n	80032c4 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f008 ff55 	bl	800bfe4 <USB_SetCurrentMode>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0bb      	b.n	80032c4 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e03f      	b.n	80031d2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3315      	adds	r3, #21
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	3314      	adds	r3, #20
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	3317      	adds	r3, #23
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	3324      	adds	r3, #36	@ 0x24
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	440b      	add	r3, r1
 80031b0:	3328      	adds	r3, #40	@ 0x28
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3304      	adds	r3, #4
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	3301      	adds	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	791b      	ldrb	r3, [r3, #4]
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d3ba      	bcc.n	8003152 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e044      	b.n	800326c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	3301      	adds	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	791b      	ldrb	r3, [r3, #4]
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	429a      	cmp	r2, r3
 8003274:	d3b5      	bcc.n	80031e2 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7c1a      	ldrb	r2, [r3, #16]
 800327e:	f88d 2000 	strb.w	r2, [sp]
 8003282:	3304      	adds	r3, #4
 8003284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003286:	f008 fed0 	bl	800c02a <USB_DevInit>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e013      	b.n	80032c4 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7b1b      	ldrb	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d102      	bne.n	80032b8 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f001 fb6b 	bl	800498e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f00a fd29 	bl	800dd14 <USB_DevDisconnect>

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_Start+0x16>
 80032de:	2302      	movs	r3, #2
 80032e0:	e012      	b.n	8003308 <HAL_PCD_Start+0x3c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f008 fe4f 	bl	800bf92 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00a fcfa 	bl	800dcf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f00a fd0a 	bl	800dd36 <USB_ReadInterrupts>
 8003322:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 faf2 	bl	8003918 <PCD_EP_ISR_Handler>

    return;
 8003334:	e0de      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800334e:	400b      	ands	r3, r1
 8003350:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f00b fbb9 	bl	800eaca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003358:	2100      	movs	r1, #0
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8e1 	bl	8003522 <HAL_PCD_SetAddress>

    return;
 8003360:	e0c8      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800337a:	400b      	ands	r3, r1
 800337c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800337e:	e0b9      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8003398:	400b      	ands	r3, r1
 800339a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800339c:	e0aa      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d029      	beq.n	80033fc <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0208 	bic.w	r2, r2, #8
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033da:	2100      	movs	r1, #0
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 faf8 	bl	80049d2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f893 	bl	800350e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80033f6:	400b      	ands	r3, r1
 80033f8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80033fa:	e07b      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01c      	beq.n	8003440 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0208 	orr.w	r2, r2, #8
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8003424:	400b      	ands	r3, r1
 8003426:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0204 	orr.w	r2, r2, #4
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f85e 	bl	80034fa <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800343e:	e059      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d033      	beq.n	80034b2 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8003458:	400b      	ands	r3, r1
 800345a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0204 	orr.w	r2, r2, #4
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0208 	orr.w	r2, r2, #8
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034a0:	2101      	movs	r1, #1
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 fa95 	bl	80049d2 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80034a8:	e024      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f825 	bl	80034fa <HAL_PCD_SuspendCallback>
    return;
 80034b0:	e020      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80034ca:	400b      	ands	r3, r1
 80034cc:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f00b faed 	bl	800eaae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034d4:	e00e      	b.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80034ee:	400b      	ands	r3, r1
 80034f0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80034f2:	bf00      	nop
  }
}
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_PCD_SetAddress+0x1a>
 8003538:	2302      	movs	r3, #2
 800353a:	e012      	b.n	8003562 <HAL_PCD_SetAddress+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f00a fbba 	bl	800dccc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	4608      	mov	r0, r1
 8003574:	4611      	mov	r1, r2
 8003576:	461a      	mov	r2, r3
 8003578:	4603      	mov	r3, r0
 800357a:	70fb      	strb	r3, [r7, #3]
 800357c:	460b      	mov	r3, r1
 800357e:	803b      	strh	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	da0f      	bge.n	80035b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 0207 	and.w	r2, r3, #7
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	3310      	adds	r3, #16
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	705a      	strb	r2, [r3, #1]
 80035ae:	e00f      	b.n	80035d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 0207 	and.w	r2, r3, #7
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80035dc:	883b      	ldrh	r3, [r7, #0]
 80035de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	78ba      	ldrb	r2, [r7, #2]
 80035ea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035ec:	78bb      	ldrb	r3, [r7, #2]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d102      	bne.n	80035f8 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_PCD_EP_Open+0x9c>
 8003602:	2302      	movs	r3, #2
 8003604:	e00e      	b.n	8003624 <HAL_PCD_EP_Open+0xba>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	4618      	mov	r0, r3
 8003616:	f008 fd2b 	bl	800c070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8003622:	7afb      	ldrb	r3, [r7, #11]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0f      	bge.n	8003660 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 0207 	and.w	r2, r3, #7
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	3310      	adds	r3, #16
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	705a      	strb	r2, [r3, #1]
 800365e:	e00f      	b.n	8003680 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 0207 	and.w	r2, r3, #7
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_PCD_EP_Close+0x6e>
 8003696:	2302      	movs	r3, #2
 8003698:	e00e      	b.n	80036b8 <HAL_PCD_EP_Close+0x8c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f009 f841 	bl	800c730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	460b      	mov	r3, r1
 80036ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	f003 0207 	and.w	r2, r3, #7
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	b2da      	uxtb	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	4618      	mov	r0, r3
 8003716:	f009 f995 	bl	800ca44 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0207 	and.w	r2, r3, #7
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	440b      	add	r3, r1
 8003742:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	460b      	mov	r3, r1
 8003762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003764:	7afb      	ldrb	r3, [r7, #11]
 8003766:	f003 0207 	and.w	r2, r3, #7
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	3310      	adds	r3, #16
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2201      	movs	r2, #1
 80037a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6979      	ldr	r1, [r7, #20]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f009 f945 	bl	800ca44 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	7912      	ldrb	r2, [r2, #4]
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e040      	b.n	8003864 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da0f      	bge.n	800380a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0207 	and.w	r2, r3, #7
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	3310      	adds	r3, #16
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	705a      	strb	r2, [r3, #1]
 8003808:	e00d      	b.n	8003826 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_PCD_EP_SetStall+0x82>
 8003842:	2302      	movs	r3, #2
 8003844:	e00e      	b.n	8003864 <HAL_PCD_EP_SetStall+0xa0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	f00a f95f 	bl	800db18 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	7912      	ldrb	r2, [r2, #4]
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e042      	b.n	8003910 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800388a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	da0f      	bge.n	80038b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 0207 	and.w	r2, r3, #7
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	3310      	adds	r3, #16
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	705a      	strb	r2, [r3, #1]
 80038b0:	e00f      	b.n	80038d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 0207 	and.w	r2, r3, #7
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_EP_ClrStall+0x86>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e00e      	b.n	8003910 <HAL_PCD_EP_ClrStall+0xa4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f00a f94f 	bl	800dba4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08e      	sub	sp, #56	@ 0x38
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003920:	e326      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003928:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800392a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003936:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 8124 	bne.w	8003b88 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003940:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d13e      	bne.n	80039c8 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b89      	ldr	r3, [pc, #548]	@ (8003b78 <PCD_EP_ISR_Handler+0x260>)
 8003952:	4013      	ands	r3, r2
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003960:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3314      	adds	r3, #20
 8003966:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003972:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800397e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003980:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	441a      	add	r2, r3
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003990:	2100      	movs	r1, #0
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f00b f871 	bl	800ea7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7c5b      	ldrb	r3, [r3, #17]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 82e6 	beq.w	8003f70 <PCD_EP_ISR_Handler+0x658>
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 82e1 	bne.w	8003f70 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7c5b      	ldrb	r3, [r3, #17]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	745a      	strb	r2, [r3, #17]
 80039c6:	e2d3      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039d8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d027      	beq.n	8003a32 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7ff fb09 	bl	8003004 <PCD_GET_EP_RX_CNT>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f00a fa01 	bl	800de14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b58      	ldr	r3, [pc, #352]	@ (8003b7c <PCD_EP_ISR_Handler+0x264>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a28:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f00a fff8 	bl	800ea20 <HAL_PCD_SetupStageCallback>
 8003a30:	e29e      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8003a32:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f280 829a 	bge.w	8003f70 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b4e      	ldr	r3, [pc, #312]	@ (8003b7c <PCD_EP_ISR_Handler+0x264>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a52:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f7ff fad0 	bl	8003004 <PCD_GET_EP_RX_CNT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x190>
 8003a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a82:	6959      	ldr	r1, [r3, #20]
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f00a f9c1 	bl	800de14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	441a      	add	r2, r3
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f00a ffce 	bl	800ea44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ab0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 825a 	bne.w	8003f70 <PCD_EP_ISR_Handler+0x658>
 8003abc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003abe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ac6:	f000 8253 	beq.w	8003f70 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003aca:	4b2d      	ldr	r3, [pc, #180]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4a2c      	ldr	r2, [pc, #176]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003ad0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003ad4:	6053      	str	r3, [r2, #4]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <PCD_EP_ISR_Handler+0x1d4>
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003ae4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ae8:	6053      	str	r3, [r2, #4]
 8003aea:	e02e      	b.n	8003b4a <PCD_EP_ISR_Handler+0x232>
 8003aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003af2:	d814      	bhi.n	8003b1e <PCD_EP_ISR_Handler+0x206>
 8003af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <PCD_EP_ISR_Handler+0x1f6>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	069b      	lsls	r3, r3, #26
 8003b16:	491a      	ldr	r1, [pc, #104]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
 8003b1c:	e015      	b.n	8003b4a <PCD_EP_ISR_Handler+0x232>
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <PCD_EP_ISR_Handler+0x220>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	069b      	lsls	r3, r3, #26
 8003b40:	4313      	orrs	r3, r2
 8003b42:	4a0f      	ldr	r2, [pc, #60]	@ (8003b80 <PCD_EP_ISR_Handler+0x268>)
 8003b44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b48:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <PCD_EP_ISR_Handler+0x26c>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e1fb      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
 8003b78:	07ff8f0f 	.word	0x07ff8f0f
 8003b7c:	07ff0f8f 	.word	0x07ff0f8f
 8003b80:	40016400 	.word	0x40016400
 8003b84:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8003b9a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f280 80bd 	bge.w	8003d1e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e30 <PCD_EP_ISR_Handler+0x518>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bce:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003bd0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	7b1b      	ldrb	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d116      	bne.n	8003c1e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f7ff fa02 	bl	8003004 <PCD_GET_EP_RX_CNT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003c04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d067      	beq.n	8003cda <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	6959      	ldr	r1, [r3, #20]
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	88da      	ldrh	r2, [r3, #6]
 8003c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c18:	f00a f8fc 	bl	800de14 <USB_ReadPMA>
 8003c1c:	e05d      	b.n	8003cda <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c20:	78db      	ldrb	r3, [r3, #3]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d108      	bne.n	8003c38 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c26:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f9ad 	bl	8003f8c <HAL_PCD_EP_DB_Receive>
 8003c32:	4603      	mov	r3, r0
 8003c34:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003c36:	e050      	b.n	8003cda <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b7a      	ldr	r3, [pc, #488]	@ (8003e34 <PCD_EP_ISR_Handler+0x51c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c66:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f7ff f9db 	bl	8003046 <PCD_GET_EP_DBUF0_CNT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003c94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01f      	beq.n	8003cda <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	6959      	ldr	r1, [r3, #20]
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca4:	891a      	ldrh	r2, [r3, #8]
 8003ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ca8:	f00a f8b4 	bl	800de14 <USB_ReadPMA>
 8003cac:	e015      	b.n	8003cda <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7ff f9e5 	bl	8003088 <PCD_GET_EP_DBUF1_CNT>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cce:	6959      	ldr	r1, [r3, #20]
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	895a      	ldrh	r2, [r3, #10]
 8003cd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003cd6:	f00a f89d 	bl	800de14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ce0:	441a      	add	r2, r3
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003cec:	441a      	add	r2, r3
 8003cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <PCD_EP_ISR_Handler+0x3ec>
 8003cfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d206      	bcs.n	8003d12 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f00a fe9a 	bl	800ea44 <HAL_PCD_DataOutStageCallback>
 8003d10:	e005      	b.n	8003d1e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f008 fe93 	bl	800ca44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003d1e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8123 	beq.w	8003f70 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d2a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	3310      	adds	r3, #16
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b39      	ldr	r3, [pc, #228]	@ (8003e38 <PCD_EP_ISR_Handler+0x520>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d6a:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6e:	78db      	ldrb	r3, [r3, #3]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 80b8 	bne.w	8003ee6 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d78:	2200      	movs	r2, #0
 8003d7a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	7b1b      	ldrb	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a9 	beq.w	8003ed8 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d055      	beq.n	8003e3c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d124      	bne.n	8003de2 <PCD_EP_ISR_Handler+0x4ca>
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003da2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003db6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e07a      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x5c0>
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d176      	bne.n	8003ed8 <PCD_EP_ISR_Handler+0x5c0>
 8003dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003df4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e16:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e054      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x5c0>
 8003e2e:	bf00      	nop
 8003e30:	07ff0f8f 	.word	0x07ff0f8f
 8003e34:	07ff8f8f 	.word	0x07ff8f8f
 8003e38:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3e:	785b      	ldrb	r3, [r3, #1]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d124      	bne.n	8003e8e <PCD_EP_ISR_Handler+0x576>
 8003e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e62:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e024      	b.n	8003ed8 <PCD_EP_ISR_Handler+0x5c0>
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d120      	bne.n	8003ed8 <PCD_EP_ISR_Handler+0x5c0>
 8003e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003ec2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ed4:	6852      	ldr	r2, [r2, #4]
 8003ed6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f00a fdcb 	bl	800ea7a <HAL_PCD_DataInStageCallback>
 8003ee4:	e044      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ee6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d139      	bne.n	8003f64 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003efa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f08:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d906      	bls.n	8003f22 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1e:	619a      	str	r2, [r3, #24]
 8003f20:	e002      	b.n	8003f28 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f24:	2200      	movs	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f00a fd9f 	bl	800ea7a <HAL_PCD_DataInStageCallback>
 8003f3c:	e018      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f44:	441a      	add	r2, r3
 8003f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f48:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f50:	441a      	add	r2, r3
 8003f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f54:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f008 fd71 	bl	800ca44 <USB_EPStartXfer>
 8003f62:	e005      	b.n	8003f70 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f66:	461a      	mov	r2, r3
 8003f68:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8e8 	bl	8004140 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f47f acd1 	bne.w	8003922 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3738      	adds	r7, #56	@ 0x38
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop

08003f8c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	@ 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d062      	beq.n	800406a <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f7ff f849 	bl	8003046 <PCD_GET_EP_DBUF0_CNT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	8bfb      	ldrh	r3, [r7, #30]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d306      	bcc.n	8003fd0 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	8bfb      	ldrh	r3, [r7, #30]
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	619a      	str	r2, [r3, #24]
 8003fce:	e002      	b.n	8003fd6 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11b      	bne.n	8004016 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b52      	ldr	r3, [pc, #328]	@ (8004138 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004014:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b42      	ldr	r3, [pc, #264]	@ (800413c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8004032:	4013      	ands	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800404a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800404e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8004050:	8bfb      	ldrh	r3, [r7, #30]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d06b      	beq.n	800412e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6959      	ldr	r1, [r3, #20]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	891a      	ldrh	r2, [r3, #8]
 8004062:	8bfb      	ldrh	r3, [r7, #30]
 8004064:	f009 fed6 	bl	800de14 <USB_ReadPMA>
 8004068:	e061      	b.n	800412e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7ff f807 	bl	8003088 <PCD_GET_EP_DBUF1_CNT>
 800407a:	4603      	mov	r3, r0
 800407c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	8bfb      	ldrh	r3, [r7, #30]
 8004084:	429a      	cmp	r2, r3
 8004086:	d306      	bcc.n	8004096 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	e002      	b.n	800409c <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11b      	bne.n	80040dc <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b20      	ldr	r3, [pc, #128]	@ (8004138 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040da:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d117      	bne.n	8004116 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b11      	ldr	r3, [pc, #68]	@ (800413c <HAL_PCD_EP_DB_Receive+0x1b0>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004110:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004114:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8004116:	8bfb      	ldrh	r3, [r7, #30]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6959      	ldr	r1, [r3, #20]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	895a      	ldrh	r2, [r3, #10]
 8004128:	8bfb      	ldrh	r3, [r7, #30]
 800412a:	f009 fe73 	bl	800de14 <USB_ReadPMA>
    }
  }

  return count;
 800412e:	8bfb      	ldrh	r3, [r7, #30]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3728      	adds	r7, #40	@ 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	07ffbf8f 	.word	0x07ffbf8f
 800413c:	07ff8f8f 	.word	0x07ff8f8f

08004140 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	@ 0x38
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 81d5 	beq.w	8004504 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7fe ff6e 	bl	8003046 <PCD_GET_EP_DBUF0_CNT>
 800416a:	4603      	mov	r3, r0
 800416c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	8bfb      	ldrh	r3, [r7, #30]
 8004174:	429a      	cmp	r2, r3
 8004176:	d906      	bls.n	8004186 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	8bfb      	ldrh	r3, [r7, #30]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	619a      	str	r2, [r3, #24]
 8004184:	e002      	b.n	800418c <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 80c1 	bne.w	8004318 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d124      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0xa8>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041bc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e024      	b.n	8004232 <HAL_PCD_EP_DB_Transmit+0xf2>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d120      	bne.n	8004232 <HAL_PCD_EP_DB_Transmit+0xf2>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800420a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800420e:	b292      	uxth	r2, r2
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800421c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800422a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d124      	bne.n	8004284 <HAL_PCD_EP_DB_Transmit+0x144>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004254:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004258:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004268:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004278:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800427c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	e024      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x18e>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d120      	bne.n	80042ce <HAL_PCD_EP_DB_Transmit+0x18e>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004296:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042aa:	b292      	uxth	r2, r2
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80042b8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f00a fbd0 	bl	800ea7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 82e5 	beq.w	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b8e      	ldr	r3, [pc, #568]	@ (8004530 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e2cb      	b.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b7f      	ldr	r3, [pc, #508]	@ (8004530 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004334:	4013      	ands	r3, r2
 8004336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800434c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004350:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 82a9 	bne.w	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	8bfb      	ldrh	r3, [r7, #30]
 8004364:	441a      	add	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	8bfb      	ldrh	r3, [r7, #30]
 8004370:	441a      	add	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d309      	bcc.n	8004396 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	621a      	str	r2, [r3, #32]
 8004394:	e014      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 800439e:	8bfb      	ldrh	r3, [r7, #30]
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043aa:	e009      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d16a      	bne.n	800449e <HAL_PCD_EP_DB_Transmit+0x35e>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043e6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d112      	bne.n	8004418 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800440c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004410:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e06a      	b.n	80044ee <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	2b3e      	cmp	r3, #62	@ 0x3e
 800441c:	d81e      	bhi.n	800445c <HAL_PCD_EP_DB_Transmit+0x31c>
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800442e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004430:	3301      	adds	r3, #1
 8004432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800443e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	069a      	lsls	r2, r3, #26
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004452:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004456:	430a      	orrs	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e048      	b.n	80044ee <HAL_PCD_EP_DB_Transmit+0x3ae>
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <HAL_PCD_EP_DB_Transmit+0x332>
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	3b01      	subs	r3, #1
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800447c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	069b      	lsls	r3, r3, #26
 8004486:	431a      	orrs	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004492:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004496:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e027      	b.n	80044ee <HAL_PCD_EP_DB_Transmit+0x3ae>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d123      	bne.n	80044ee <HAL_PCD_EP_DB_Transmit+0x3ae>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044c4:	b292      	uxth	r2, r2
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044d6:	6819      	ldr	r1, [r3, #0]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	041a      	lsls	r2, r3, #16
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6959      	ldr	r1, [r3, #20]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	891a      	ldrh	r2, [r3, #8]
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f009 fc28 	bl	800dd52 <USB_WritePMA>
 8004502:	e1d5      	b.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe fdba 	bl	8003088 <PCD_GET_EP_DBUF1_CNT>
 8004514:	4603      	mov	r3, r0
 8004516:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	8bfb      	ldrh	r3, [r7, #30]
 800451e:	429a      	cmp	r2, r3
 8004520:	d308      	bcc.n	8004534 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	8bfb      	ldrh	r3, [r7, #30]
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	619a      	str	r2, [r3, #24]
 800452e:	e004      	b.n	800453a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8004530:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 80c1 	bne.w	80046c6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d124      	bne.n	8004596 <HAL_PCD_EP_DB_Transmit+0x456>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004556:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800456a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800457a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800458a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800458e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e024      	b.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d120      	bne.n	80045e0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045bc:	b292      	uxth	r2, r2
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80045ca:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d124      	bne.n	8004632 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004602:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004606:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004616:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004626:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800462a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	e024      	b.n	800467c <HAL_PCD_EP_DB_Transmit+0x53c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d120      	bne.n	800467c <HAL_PCD_EP_DB_Transmit+0x53c>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004644:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004654:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004658:	b292      	uxth	r2, r2
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004666:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004674:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004678:	6852      	ldr	r2, [r2, #4]
 800467a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f00a f9f9 	bl	800ea7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 810e 	bne.w	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b95      	ldr	r3, [pc, #596]	@ (80048fc <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	441a      	add	r2, r3
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	e0f4      	b.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d117      	bne.n	8004700 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b86      	ldr	r3, [pc, #536]	@ (80048fc <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fe:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 80d2 	bne.w	80048b0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	441a      	add	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	8bfb      	ldrh	r3, [r7, #30]
 800471e:	441a      	add	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6a1a      	ldr	r2, [r3, #32]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	429a      	cmp	r2, r3
 800472e:	d309      	bcc.n	8004744 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6a1a      	ldr	r2, [r3, #32]
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	1ad2      	subs	r2, r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	621a      	str	r2, [r3, #32]
 8004742:	e014      	b.n	800476e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 800474c:	8bfb      	ldrh	r3, [r7, #30]
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004758:	e009      	b.n	800476e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2200      	movs	r2, #0
 8004764:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d16a      	bne.n	800484c <HAL_PCD_EP_DB_Transmit+0x70c>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004790:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004794:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d112      	bne.n	80047c6 <HAL_PCD_EP_DB_Transmit+0x686>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	e06a      	b.n	800489c <HAL_PCD_EP_DB_Transmit+0x75c>
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80047ca:	d81e      	bhi.n	800480a <HAL_PCD_EP_DB_Transmit+0x6ca>
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	3301      	adds	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	069a      	lsls	r2, r3, #26
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004800:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	e048      	b.n	800489c <HAL_PCD_EP_DB_Transmit+0x75c>
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3b01      	subs	r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800482a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	069b      	lsls	r3, r3, #26
 8004834:	431a      	orrs	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004840:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004844:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	e027      	b.n	800489c <HAL_PCD_EP_DB_Transmit+0x75c>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d123      	bne.n	800489c <HAL_PCD_EP_DB_Transmit+0x75c>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800485e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800486e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004872:	b292      	uxth	r2, r2
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	041a      	lsls	r2, r3, #16
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004894:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6959      	ldr	r1, [r3, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	895a      	ldrh	r2, [r3, #10]
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f009 fa51 	bl	800dd52 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	f083 0310 	eor.w	r3, r3, #16
 80048cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	f083 0320 	eor.w	r3, r3, #32
 80048d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3738      	adds	r7, #56	@ 0x38
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	07ff8f8f 	.word	0x07ff8f8f
 8004900:	07ff8fbf 	.word	0x07ff8fbf

08004904 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	817b      	strh	r3, [r7, #10]
 8004912:	4613      	mov	r3, r2
 8004914:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00c      	beq.n	800493c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004922:	897b      	ldrh	r3, [r7, #10]
 8004924:	f003 0207 	and.w	r2, r3, #7
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3310      	adds	r3, #16
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e00a      	b.n	8004952 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800493c:	897a      	ldrh	r2, [r7, #10]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	3304      	adds	r3, #4
 8004950:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004952:	893b      	ldrh	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	b29a      	uxth	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	80da      	strh	r2, [r3, #6]
 8004966:	e00b      	b.n	8004980 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2201      	movs	r2, #1
 800496c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	b29a      	uxth	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b29a      	uxth	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	f043 0201 	orr.w	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049bc:	f043 0202 	orr.w	r2, r3, #2
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80049f0:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f4:	4a04      	ldr	r2, [pc, #16]	@ (8004a08 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	44020800 	.word	0x44020800

08004a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f000 bc28 	b.w	8005270 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a20:	4b94      	ldr	r3, [pc, #592]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f003 0318 	and.w	r3, r3, #24
 8004a28:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004a2a:	4b92      	ldr	r3, [pc, #584]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d05b      	beq.n	8004af8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d005      	beq.n	8004a52 <HAL_RCC_OscConfig+0x46>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b18      	cmp	r3, #24
 8004a4a:	d114      	bne.n	8004a76 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d111      	bne.n	8004a76 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f000 bc08 	b.w	8005270 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004a60:	4b84      	ldr	r3, [pc, #528]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	041b      	lsls	r3, r3, #16
 8004a6e:	4981      	ldr	r1, [pc, #516]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004a74:	e040      	b.n	8004af8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d023      	beq.n	8004ac6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7c      	ldr	r2, [pc, #496]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fd85 	bl	8002598 <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004a92:	f7fd fd81 	bl	8002598 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e3e5      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004aa4:	4b73      	ldr	r3, [pc, #460]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004ab0:	4b70      	ldr	r3, [pc, #448]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	496d      	ldr	r1, [pc, #436]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	618b      	str	r3, [r1, #24]
 8004ac4:	e018      	b.n	8004af8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ac6:	4b6b      	ldr	r3, [pc, #428]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6a      	ldr	r2, [pc, #424]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fd61 	bl	8002598 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004ada:	f7fd fd5d 	bl	8002598 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e3c1      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004aec:	4b61      	ldr	r3, [pc, #388]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a0 	beq.w	8004c46 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x10c>
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b18      	cmp	r3, #24
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8092 	bne.w	8004c46 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e3a4      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x132>
 8004b30:	4b50      	ldr	r3, [pc, #320]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4f      	ldr	r2, [pc, #316]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e058      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1e4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d112      	bne.n	8004b6c <HAL_RCC_OscConfig+0x160>
 8004b46:	4b4b      	ldr	r3, [pc, #300]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b48      	ldr	r3, [pc, #288]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a47      	ldr	r2, [pc, #284]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b45      	ldr	r3, [pc, #276]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a44      	ldr	r2, [pc, #272]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e041      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1e4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b74:	d112      	bne.n	8004b9c <HAL_RCC_OscConfig+0x190>
 8004b76:	4b3f      	ldr	r3, [pc, #252]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b3c      	ldr	r3, [pc, #240]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b39      	ldr	r3, [pc, #228]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a38      	ldr	r2, [pc, #224]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e029      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1e4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004ba4:	d112      	bne.n	8004bcc <HAL_RCC_OscConfig+0x1c0>
 8004ba6:	4b33      	ldr	r3, [pc, #204]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b30      	ldr	r3, [pc, #192]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e011      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1e4>
 8004bcc:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a28      	ldr	r2, [pc, #160]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a22      	ldr	r2, [pc, #136]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004bea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fcce 	bl	8002598 <HAL_GetTick>
 8004bfc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004c00:	f7fd fcca 	bl	8002598 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	@ 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e32e      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c12:	4b18      	ldr	r3, [pc, #96]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x1f4>
 8004c1e:	e012      	b.n	8004c46 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fcba 	bl	8002598 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004c28:	f7fd fcb6 	bl	8002598 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	@ 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e31a      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c74 <HAL_RCC_OscConfig+0x268>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 809a 	beq.w	8004d88 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_RCC_OscConfig+0x25a>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2b18      	cmp	r3, #24
 8004c5e:	d149      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d146      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e2fe      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
 8004c72:	bf00      	nop
 8004c74:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004c7e:	4b9a      	ldr	r3, [pc, #616]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0218 	and.w	r2, r3, #24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d014      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004c8e:	4b96      	ldr	r3, [pc, #600]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0218 	bic.w	r2, r3, #24
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4993      	ldr	r1, [pc, #588]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004ca0:	f000 fdd0 	bl	8005844 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ca4:	4b91      	ldr	r3, [pc, #580]	@ (8004eec <HAL_RCC_OscConfig+0x4e0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fd fbeb 	bl	8002484 <HAL_InitTick>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e2db      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fc6e 	bl	8002598 <HAL_GetTick>
 8004cbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd fc6a 	bl	8002598 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e2ce      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd2:	4b85      	ldr	r3, [pc, #532]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004cde:	4b82      	ldr	r3, [pc, #520]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	497e      	ldr	r1, [pc, #504]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004cf2:	e049      	b.n	8004d88 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02c      	beq.n	8004d56 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004cfc:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 0218 	bic.w	r2, r3, #24
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4977      	ldr	r1, [pc, #476]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004d0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a75      	ldr	r2, [pc, #468]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fd fc3d 	bl	8002598 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004d22:	f7fd fc39 	bl	8002598 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e29d      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d34:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004d40:	4b69      	ldr	r3, [pc, #420]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	4966      	ldr	r1, [pc, #408]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	610b      	str	r3, [r1, #16]
 8004d54:	e018      	b.n	8004d88 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d56:	4b64      	ldr	r3, [pc, #400]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a63      	ldr	r2, [pc, #396]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fd fc19 	bl	8002598 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004d6a:	f7fd fc15 	bl	8002598 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e279      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9c:	4b52      	ldr	r3, [pc, #328]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004da2:	4a51      	ldr	r2, [pc, #324]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004da4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fd fbf4 	bl	8002598 <HAL_GetTick>
 8004db0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004db4:	f7fd fbf0 	bl	8002598 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e254      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004dc6:	4b48      	ldr	r3, [pc, #288]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3a8>
 8004dd4:	e01b      	b.n	8004e0e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ddc:	4a42      	ldr	r2, [pc, #264]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004dde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fd fbd7 	bl	8002598 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004dee:	f7fd fbd3 	bl	8002598 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e237      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e00:	4b39      	ldr	r3, [pc, #228]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80d2 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <HAL_RCC_OscConfig+0x4e4>)
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d118      	bne.n	8004e5a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004e28:	4b31      	ldr	r3, [pc, #196]	@ (8004ef0 <HAL_RCC_OscConfig+0x4e4>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	4a30      	ldr	r2, [pc, #192]	@ (8004ef0 <HAL_RCC_OscConfig+0x4e4>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e34:	f7fd fbb0 	bl	8002598 <HAL_GetTick>
 8004e38:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3c:	f7fd fbac 	bl	8002598 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e210      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004e4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ef0 <HAL_RCC_OscConfig+0x4e4>)
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d108      	bne.n	8004e74 <HAL_RCC_OscConfig+0x468>
 8004e62:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e72:	e074      	b.n	8004f5e <HAL_RCC_OscConfig+0x552>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d118      	bne.n	8004eae <HAL_RCC_OscConfig+0x4a2>
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e82:	4a19      	ldr	r2, [pc, #100]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e8c:	4b16      	ldr	r3, [pc, #88]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e92:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea2:	4a11      	ldr	r2, [pc, #68]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004eac:	e057      	b.n	8004f5e <HAL_RCC_OscConfig+0x552>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d11e      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x4e8>
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ebe:	f043 0304 	orr.w	r3, r3, #4
 8004ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ec6:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ecc:	4a06      	ldr	r2, [pc, #24]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ed6:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004edc:	4a02      	ldr	r2, [pc, #8]	@ (8004ee8 <HAL_RCC_OscConfig+0x4dc>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ee6:	e03a      	b.n	8004f5e <HAL_RCC_OscConfig+0x552>
 8004ee8:	44020c00 	.word	0x44020c00
 8004eec:	20000024 	.word	0x20000024
 8004ef0:	44020800 	.word	0x44020800
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b85      	cmp	r3, #133	@ 0x85
 8004efa:	d118      	bne.n	8004f2e <HAL_RCC_OscConfig+0x522>
 8004efc:	4ba2      	ldr	r3, [pc, #648]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f02:	4aa1      	ldr	r2, [pc, #644]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f0c:	4b9e      	ldr	r3, [pc, #632]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f12:	4a9d      	ldr	r2, [pc, #628]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f22:	4a99      	ldr	r2, [pc, #612]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f2c:	e017      	b.n	8004f5e <HAL_RCC_OscConfig+0x552>
 8004f2e:	4b96      	ldr	r3, [pc, #600]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f34:	4a94      	ldr	r2, [pc, #592]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f3e:	4b92      	ldr	r3, [pc, #584]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f44:	4a90      	ldr	r2, [pc, #576]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f46:	f023 0304 	bic.w	r3, r3, #4
 8004f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f4e:	4b8e      	ldr	r3, [pc, #568]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f54:	4a8c      	ldr	r2, [pc, #560]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fd fb17 	bl	8002598 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6c:	e00a      	b.n	8004f84 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fd fb13 	bl	8002598 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e175      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f84:	4b80      	ldr	r3, [pc, #512]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ed      	beq.n	8004f6e <HAL_RCC_OscConfig+0x562>
 8004f92:	e015      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fd fb00 	bl	8002598 <HAL_GetTick>
 8004f98:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fafc 	bl	8002598 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e15e      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb2:	4b75      	ldr	r3, [pc, #468]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ed      	bne.n	8004f9c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d036      	beq.n	800503a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d019      	beq.n	8005008 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004fda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fd fada 	bl	8002598 <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004fe8:	f7fd fad6 	bl	8002598 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e13a      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004ffa:	4b63      	ldr	r3, [pc, #396]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x5dc>
 8005006:	e018      	b.n	800503a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005008:	4b5f      	ldr	r3, [pc, #380]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5e      	ldr	r2, [pc, #376]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800500e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005012:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fd fac0 	bl	8002598 <HAL_GetTick>
 8005018:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800501c:	f7fd fabc 	bl	8002598 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e120      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800502e:	4b56      	ldr	r3, [pc, #344]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8115 	beq.w	800526e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b18      	cmp	r3, #24
 8005048:	f000 80af 	beq.w	80051aa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	2b02      	cmp	r3, #2
 8005052:	f040 8086 	bne.w	8005162 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005056:	4b4c      	ldr	r3, [pc, #304]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a4b      	ldr	r2, [pc, #300]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800505c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fd fa99 	bl	8002598 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800506a:	f7fd fa95 	bl	8002598 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e0f9      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800507c:	4b42      	ldr	r3, [pc, #264]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005090:	f023 0303 	bic.w	r3, r3, #3
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800509c:	0212      	lsls	r2, r2, #8
 800509e:	430a      	orrs	r2, r1
 80050a0:	4939      	ldr	r1, [pc, #228]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	3b01      	subs	r3, #1
 80050ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	3b01      	subs	r3, #1
 80050b6:	025b      	lsls	r3, r3, #9
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	3b01      	subs	r3, #1
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	3b01      	subs	r3, #1
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050d6:	492c      	ldr	r1, [pc, #176]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80050dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	4a29      	ldr	r2, [pc, #164]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ec:	4a26      	ldr	r2, [pc, #152]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80050f2:	4b25      	ldr	r3, [pc, #148]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	4a24      	ldr	r2, [pc, #144]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 80050f8:	f043 0310 	orr.w	r3, r3, #16
 80050fc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80050fe:	4b22      	ldr	r3, [pc, #136]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	491f      	ldr	r1, [pc, #124]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005110:	4b1d      	ldr	r3, [pc, #116]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	f023 0220 	bic.w	r2, r3, #32
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511c:	491a      	ldr	r1, [pc, #104]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005122:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800512e:	4b16      	ldr	r3, [pc, #88]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a15      	ldr	r2, [pc, #84]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005134:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fd fa2d 	bl	8002598 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005142:	f7fd fa29 	bl	8002598 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e08d      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x736>
 8005160:	e085      	b.n	800526e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005162:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a08      	ldr	r2, [pc, #32]	@ (8005188 <HAL_RCC_OscConfig+0x77c>)
 8005168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800516c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fd fa13 	bl	8002598 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005174:	e00a      	b.n	800518c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005176:	f7fd fa0f 	bl	8002598 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d903      	bls.n	800518c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e073      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
 8005188:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800518c:	4b3a      	ldr	r3, [pc, #232]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ee      	bne.n	8005176 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005198:	4b37      	ldr	r3, [pc, #220]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	4a36      	ldr	r2, [pc, #216]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 800519e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	6293      	str	r3, [r2, #40]	@ 0x28
 80051a8:	e061      	b.n	800526e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80051aa:	4b33      	ldr	r3, [pc, #204]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051b0:	4b31      	ldr	r3, [pc, #196]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d031      	beq.n	8005222 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 0203 	and.w	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d12a      	bne.n	8005222 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d122      	bne.n	8005222 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d11a      	bne.n	8005222 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d111      	bne.n	8005222 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d108      	bne.n	8005222 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	0e1b      	lsrs	r3, r3, #24
 8005214:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d001      	beq.n	8005226 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e024      	b.n	8005270 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005226:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 8005228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522a:	08db      	lsrs	r3, r3, #3
 800522c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005234:	429a      	cmp	r2, r3
 8005236:	d01a      	beq.n	800526e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005238:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	4a0e      	ldr	r2, [pc, #56]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 800523e:	f023 0310 	bic.w	r3, r3, #16
 8005242:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd f9a8 	bl	8002598 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800524a:	bf00      	nop
 800524c:	f7fd f9a4 	bl	8002598 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4293      	cmp	r3, r2
 8005256:	d0f9      	beq.n	800524c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525c:	4a06      	ldr	r2, [pc, #24]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005262:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	4a04      	ldr	r2, [pc, #16]	@ (8005278 <HAL_RCC_OscConfig+0x86c>)
 8005268:	f043 0310 	orr.w	r3, r3, #16
 800526c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	44020c00 	.word	0x44020c00

0800527c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e19e      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005290:	4b83      	ldr	r3, [pc, #524]	@ (80054a0 <HAL_RCC_ClockConfig+0x224>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d910      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b80      	ldr	r3, [pc, #512]	@ (80054a0 <HAL_RCC_ClockConfig+0x224>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 020f 	bic.w	r2, r3, #15
 80052a6:	497e      	ldr	r1, [pc, #504]	@ (80054a0 <HAL_RCC_ClockConfig+0x224>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b7c      	ldr	r3, [pc, #496]	@ (80054a0 <HAL_RCC_ClockConfig+0x224>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e186      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d012      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	4b74      	ldr	r3, [pc, #464]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052da:	429a      	cmp	r2, r3
 80052dc:	d909      	bls.n	80052f2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80052de:	4b71      	ldr	r3, [pc, #452]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	496d      	ldr	r1, [pc, #436]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d012      	beq.n	8005324 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	4b68      	ldr	r3, [pc, #416]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800530c:	429a      	cmp	r2, r3
 800530e:	d909      	bls.n	8005324 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005310:	4b64      	ldr	r3, [pc, #400]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4961      	ldr	r1, [pc, #388]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005320:	4313      	orrs	r3, r2
 8005322:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d010      	beq.n	8005352 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4b5b      	ldr	r3, [pc, #364]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005340:	4b58      	ldr	r3, [pc, #352]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4955      	ldr	r1, [pc, #340]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 800534e:	4313      	orrs	r3, r2
 8005350:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	4b50      	ldr	r3, [pc, #320]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	429a      	cmp	r2, r3
 800536c:	d908      	bls.n	8005380 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800536e:	4b4d      	ldr	r3, [pc, #308]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 020f 	bic.w	r2, r3, #15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	494a      	ldr	r1, [pc, #296]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 800537c:	4313      	orrs	r3, r2
 800537e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8093 	beq.w	80054b4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b03      	cmp	r3, #3
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005396:	4b43      	ldr	r3, [pc, #268]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d121      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e113      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ae:	4b3d      	ldr	r3, [pc, #244]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d115      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e107      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d107      	bne.n	80053d6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80053c6:	4b37      	ldr	r3, [pc, #220]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0fb      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d6:	4b33      	ldr	r3, [pc, #204]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e0f3      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80053e6:	4b2f      	ldr	r3, [pc, #188]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f023 0203 	bic.w	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	492c      	ldr	r1, [pc, #176]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f8:	f7fd f8ce 	bl	8002598 <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d112      	bne.n	800542c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005406:	e00a      	b.n	800541e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005408:	f7fd f8c6 	bl	8002598 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0d7      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800541e:	4b21      	ldr	r3, [pc, #132]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f003 0318 	and.w	r3, r3, #24
 8005426:	2b18      	cmp	r3, #24
 8005428:	d1ee      	bne.n	8005408 <HAL_RCC_ClockConfig+0x18c>
 800542a:	e043      	b.n	80054b4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d112      	bne.n	800545a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005434:	e00a      	b.n	800544c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005436:	f7fd f8af 	bl	8002598 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0c0      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800544c:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0318 	and.w	r3, r3, #24
 8005454:	2b10      	cmp	r3, #16
 8005456:	d1ee      	bne.n	8005436 <HAL_RCC_ClockConfig+0x1ba>
 8005458:	e02c      	b.n	80054b4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d122      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005462:	e00a      	b.n	800547a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005464:	f7fd f898 	bl	8002598 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e0a9      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <HAL_RCC_ClockConfig+0x228>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0318 	and.w	r3, r3, #24
 8005482:	2b08      	cmp	r3, #8
 8005484:	d1ee      	bne.n	8005464 <HAL_RCC_ClockConfig+0x1e8>
 8005486:	e015      	b.n	80054b4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005488:	f7fd f886 	bl	8002598 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d906      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e097      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
 800549e:	bf00      	nop
 80054a0:	40022000 	.word	0x40022000
 80054a4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054a8:	4b4b      	ldr	r3, [pc, #300]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f003 0318 	and.w	r3, r3, #24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e9      	bne.n	8005488 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	4b44      	ldr	r3, [pc, #272]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d208      	bcs.n	80054e2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80054d0:	4b41      	ldr	r3, [pc, #260]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f023 020f 	bic.w	r2, r3, #15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	493e      	ldr	r1, [pc, #248]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e2:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <HAL_RCC_ClockConfig+0x360>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d210      	bcs.n	8005512 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f0:	4b3a      	ldr	r3, [pc, #232]	@ (80055dc <HAL_RCC_ClockConfig+0x360>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 020f 	bic.w	r2, r3, #15
 80054f8:	4938      	ldr	r1, [pc, #224]	@ (80055dc <HAL_RCC_ClockConfig+0x360>)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005500:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <HAL_RCC_ClockConfig+0x360>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d001      	beq.n	8005512 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e05d      	b.n	80055ce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	4b2d      	ldr	r3, [pc, #180]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800552a:	429a      	cmp	r2, r3
 800552c:	d208      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800552e:	4b2a      	ldr	r3, [pc, #168]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	4927      	ldr	r1, [pc, #156]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d012      	beq.n	8005572 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	4b21      	ldr	r3, [pc, #132]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800555a:	429a      	cmp	r2, r3
 800555c:	d209      	bcs.n	8005572 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	491a      	ldr	r1, [pc, #104]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d012      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	4b15      	ldr	r3, [pc, #84]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	0a1b      	lsrs	r3, r3, #8
 8005588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800558c:	429a      	cmp	r2, r3
 800558e:	d209      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005590:	4b11      	ldr	r3, [pc, #68]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	490e      	ldr	r1, [pc, #56]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80055a4:	f000 f822 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <HAL_RCC_ClockConfig+0x35c>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	490b      	ldr	r1, [pc, #44]	@ (80055e0 <HAL_RCC_ClockConfig+0x364>)
 80055b4:	5ccb      	ldrb	r3, [r1, r3]
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <HAL_RCC_ClockConfig+0x368>)
 80055bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055be:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <HAL_RCC_ClockConfig+0x36c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fc ff5e 	bl	8002484 <HAL_InitTick>
 80055c8:	4603      	mov	r3, r0
 80055ca:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80055cc:	7afb      	ldrb	r3, [r7, #11]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	44020c00 	.word	0x44020c00
 80055dc:	40022000 	.word	0x40022000
 80055e0:	08011abc 	.word	0x08011abc
 80055e4:	20000004 	.word	0x20000004
 80055e8:	20000024 	.word	0x20000024

080055ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	@ 0x24
 80055f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80055f2:	4b8c      	ldr	r3, [pc, #560]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0318 	and.w	r3, r3, #24
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d102      	bne.n	8005604 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80055fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005828 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	e107      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005604:	4b87      	ldr	r3, [pc, #540]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f003 0318 	and.w	r3, r3, #24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d112      	bne.n	8005636 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005610:	4b84      	ldr	r3, [pc, #528]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800561c:	4b81      	ldr	r3, [pc, #516]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	4a81      	ldr	r2, [pc, #516]	@ (800582c <HAL_RCC_GetSysClockFreq+0x240>)
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	e0f1      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005630:	4b7e      	ldr	r3, [pc, #504]	@ (800582c <HAL_RCC_GetSysClockFreq+0x240>)
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e0ee      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005636:	4b7b      	ldr	r3, [pc, #492]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0318 	and.w	r3, r3, #24
 800563e:	2b10      	cmp	r3, #16
 8005640:	d102      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005642:	4b7b      	ldr	r3, [pc, #492]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x244>)
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e0e5      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005648:	4b76      	ldr	r3, [pc, #472]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f003 0318 	and.w	r3, r3, #24
 8005650:	2b18      	cmp	r3, #24
 8005652:	f040 80dd 	bne.w	8005810 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005656:	4b73      	ldr	r3, [pc, #460]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005660:	4b70      	ldr	r3, [pc, #448]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800566a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800566c:	4b6d      	ldr	r3, [pc, #436]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005678:	4b6a      	ldr	r3, [pc, #424]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005690:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80b7 	beq.w	800580a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d003      	beq.n	80056aa <HAL_RCC_GetSysClockFreq+0xbe>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d056      	beq.n	8005756 <HAL_RCC_GetSysClockFreq+0x16a>
 80056a8:	e077      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80056aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02d      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	4a5a      	ldr	r2, [pc, #360]	@ (800582c <HAL_RCC_GetSysClockFreq+0x240>)
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e0:	4b50      	ldr	r3, [pc, #320]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 80056e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005834 <HAL_RCC_GetSysClockFreq+0x248>
 80056f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005704:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005710:	e065      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005838 <HAL_RCC_GetSysClockFreq+0x24c>
 8005720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005724:	4b3f      	ldr	r3, [pc, #252]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005734:	ed97 6a02 	vldr	s12, [r7, #8]
 8005738:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005834 <HAL_RCC_GetSysClockFreq+0x248>
 800573c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005740:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005748:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800574c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005750:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005754:	e043      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005760:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800583c <HAL_RCC_GetSysClockFreq+0x250>
 8005764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005768:	4b2e      	ldr	r3, [pc, #184]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 800576a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005778:	ed97 6a02 	vldr	s12, [r7, #8]
 800577c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005834 <HAL_RCC_GetSysClockFreq+0x248>
 8005780:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005784:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005794:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005798:	e021      	b.n	80057de <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005840 <HAL_RCC_GetSysClockFreq+0x254>
 80057a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 80057ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80057bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80057c0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005834 <HAL_RCC_GetSysClockFreq+0x248>
 80057c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80057cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80057dc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80057de:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <HAL_RCC_GetSysClockFreq+0x238>)
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	0a5b      	lsrs	r3, r3, #9
 80057e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e8:	3301      	adds	r3, #1
 80057ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80057fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005802:	ee17 3a90 	vmov	r3, s15
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e004      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	e001      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005810:	4b06      	ldr	r3, [pc, #24]	@ (800582c <HAL_RCC_GetSysClockFreq+0x240>)
 8005812:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005814:	69fb      	ldr	r3, [r7, #28]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3724      	adds	r7, #36	@ 0x24
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	44020c00 	.word	0x44020c00
 8005828:	003d0900 	.word	0x003d0900
 800582c:	03d09000 	.word	0x03d09000
 8005830:	007a1200 	.word	0x007a1200
 8005834:	46000000 	.word	0x46000000
 8005838:	4c742400 	.word	0x4c742400
 800583c:	4af42400 	.word	0x4af42400
 8005840:	4a742400 	.word	0x4a742400

08005844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005848:	f7ff fed0 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b08      	ldr	r3, [pc, #32]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005852:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005856:	4907      	ldr	r1, [pc, #28]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x30>)
 8005858:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800585a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800585e:	fa22 f303 	lsr.w	r3, r2, r3
 8005862:	4a05      	ldr	r2, [pc, #20]	@ (8005878 <HAL_RCC_GetHCLKFreq+0x34>)
 8005864:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005866:	4b04      	ldr	r3, [pc, #16]	@ (8005878 <HAL_RCC_GetHCLKFreq+0x34>)
 8005868:	681b      	ldr	r3, [r3, #0]
}
 800586a:	4618      	mov	r0, r3
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	44020c00 	.word	0x44020c00
 8005874:	08011abc 	.word	0x08011abc
 8005878:	20000004 	.word	0x20000004

0800587c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005880:	f7ff ffe0 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	4904      	ldr	r1, [pc, #16]	@ (80058a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	44020c00 	.word	0x44020c00
 80058a4:	08011acc 	.word	0x08011acc

080058a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80058ac:	f7ff ffca 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 80058b0:	4602      	mov	r2, r0
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	4904      	ldr	r1, [pc, #16]	@ (80058d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058be:	5ccb      	ldrb	r3, [r1, r3]
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	44020c00 	.word	0x44020c00
 80058d0:	08011acc 	.word	0x08011acc

080058d4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80058d8:	f7ff ffb4 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	0b1b      	lsrs	r3, r3, #12
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	4904      	ldr	r1, [pc, #16]	@ (80058fc <HAL_RCC_GetPCLK3Freq+0x28>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	44020c00 	.word	0x44020c00
 80058fc:	08011acc 	.word	0x08011acc

08005900 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b0d8      	sub	sp, #352	@ 0x160
 8005906:	af00      	add	r7, sp, #0
 8005908:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800590c:	2300      	movs	r3, #0
 800590e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005912:	2300      	movs	r3, #0
 8005914:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005918:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005924:	2500      	movs	r5, #0
 8005926:	ea54 0305 	orrs.w	r3, r4, r5
 800592a:	d00b      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800592c:	4bcd      	ldr	r3, [pc, #820]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800592e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005932:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005936:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800593a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593c:	4ac9      	ldr	r2, [pc, #804]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800593e:	430b      	orrs	r3, r1
 8005940:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f002 0801 	and.w	r8, r2, #1
 8005950:	f04f 0900 	mov.w	r9, #0
 8005954:	ea58 0309 	orrs.w	r3, r8, r9
 8005958:	d042      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800595a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800595e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005960:	2b05      	cmp	r3, #5
 8005962:	d823      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005964:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	080059b5 	.word	0x080059b5
 8005970:	08005985 	.word	0x08005985
 8005974:	08005999 	.word	0x08005999
 8005978:	080059b5 	.word	0x080059b5
 800597c:	080059b5 	.word	0x080059b5
 8005980:	080059b5 	.word	0x080059b5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005988:	3308      	adds	r3, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f004 fee0 	bl	800a750 <RCCEx_PLL2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005996:	e00e      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800599c:	3330      	adds	r3, #48	@ 0x30
 800599e:	4618      	mov	r0, r3
 80059a0:	f004 ff6e 	bl	800a880 <RCCEx_PLL3_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80059aa:	e004      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059b2:	e000      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80059b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80059be:	4ba9      	ldr	r3, [pc, #676]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80059c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059c4:	f023 0107 	bic.w	r1, r3, #7
 80059c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ce:	4aa5      	ldr	r2, [pc, #660]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80059d0:	430b      	orrs	r3, r1
 80059d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 0a02 	and.w	sl, r2, #2
 80059ec:	f04f 0b00 	mov.w	fp, #0
 80059f0:	ea5a 030b 	orrs.w	r3, sl, fp
 80059f4:	f000 8088 	beq.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80059f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fe:	2b28      	cmp	r3, #40	@ 0x28
 8005a00:	d868      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005a02:	a201      	add	r2, pc, #4	@ (adr r2, 8005a08 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005add 	.word	0x08005add
 8005a0c:	08005ad5 	.word	0x08005ad5
 8005a10:	08005ad5 	.word	0x08005ad5
 8005a14:	08005ad5 	.word	0x08005ad5
 8005a18:	08005ad5 	.word	0x08005ad5
 8005a1c:	08005ad5 	.word	0x08005ad5
 8005a20:	08005ad5 	.word	0x08005ad5
 8005a24:	08005ad5 	.word	0x08005ad5
 8005a28:	08005aad 	.word	0x08005aad
 8005a2c:	08005ad5 	.word	0x08005ad5
 8005a30:	08005ad5 	.word	0x08005ad5
 8005a34:	08005ad5 	.word	0x08005ad5
 8005a38:	08005ad5 	.word	0x08005ad5
 8005a3c:	08005ad5 	.word	0x08005ad5
 8005a40:	08005ad5 	.word	0x08005ad5
 8005a44:	08005ad5 	.word	0x08005ad5
 8005a48:	08005ac1 	.word	0x08005ac1
 8005a4c:	08005ad5 	.word	0x08005ad5
 8005a50:	08005ad5 	.word	0x08005ad5
 8005a54:	08005ad5 	.word	0x08005ad5
 8005a58:	08005ad5 	.word	0x08005ad5
 8005a5c:	08005ad5 	.word	0x08005ad5
 8005a60:	08005ad5 	.word	0x08005ad5
 8005a64:	08005ad5 	.word	0x08005ad5
 8005a68:	08005add 	.word	0x08005add
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005ad5 	.word	0x08005ad5
 8005a74:	08005ad5 	.word	0x08005ad5
 8005a78:	08005ad5 	.word	0x08005ad5
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005ad5 	.word	0x08005ad5
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005ad5 	.word	0x08005ad5
 8005a94:	08005ad5 	.word	0x08005ad5
 8005a98:	08005ad5 	.word	0x08005ad5
 8005a9c:	08005ad5 	.word	0x08005ad5
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005ad5 	.word	0x08005ad5
 8005aa8:	08005add 	.word	0x08005add
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f004 fe4c 	bl	800a750 <RCCEx_PLL2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005abe:	e00e      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ac4:	3330      	adds	r3, #48	@ 0x30
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f004 feda 	bl	800a880 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005ad2:	e004      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ade:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005aec:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af6:	4a5b      	ldr	r2, [pc, #364]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005af8:	430b      	orrs	r3, r1
 8005afa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005afe:	e003      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b04:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f002 0304 	and.w	r3, r2, #4
 8005b14:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005b1e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d04e      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005b32:	d02c      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005b34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005b38:	d825      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3e:	d028      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b44:	d81f      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b48:	d025      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b4c:	d81b      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b4e:	2b80      	cmp	r3, #128	@ 0x80
 8005b50:	d00f      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005b52:	2b80      	cmp	r3, #128	@ 0x80
 8005b54:	d817      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01f      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005b5a:	2b40      	cmp	r3, #64	@ 0x40
 8005b5c:	d113      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b62:	3308      	adds	r3, #8
 8005b64:	4618      	mov	r0, r3
 8005b66:	f004 fdf3 	bl	800a750 <RCCEx_PLL2_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b70:	e014      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b76:	3330      	adds	r3, #48	@ 0x30
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f004 fe81 	bl	800a880 <RCCEx_PLL3_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b84:	e00a      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b8e:	bf00      	nop
 8005b90:	e004      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b92:	bf00      	nop
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005baa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bc2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f002 0308 	and.w	r3, r2, #8
 8005bd2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005bdc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005be0:	460b      	mov	r3, r1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	d056      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005bf0:	d031      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005bf2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005bf6:	d82a      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bfc:	d02d      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c02:	d824      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005c04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c08:	d029      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005c0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c0e:	d81e      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c14:	d011      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	d818      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c24:	d113      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f004 fd8f 	bl	800a750 <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005c38:	e017      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3e:	3330      	adds	r3, #48	@ 0x30
 8005c40:	4618      	mov	r0, r3
 8005c42:	f004 fe1d 	bl	800a880 <RCCEx_PLL3_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005c4c:	e00d      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c54:	e009      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c56:	bf00      	nop
 8005c58:	e007      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e005      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e003      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005c62:	bf00      	nop
 8005c64:	44020c00 	.word	0x44020c00
        break;
 8005c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005c72:	4bbb      	ldr	r3, [pc, #748]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c78:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c82:	4ab7      	ldr	r2, [pc, #732]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c84:	430b      	orrs	r3, r1
 8005c86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f002 0310 	and.w	r3, r2, #16
 8005ca0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005caa:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d053      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005cbe:	d031      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005cc0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005cc4:	d82a      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cca:	d02d      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cd0:	d824      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cd6:	d029      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cdc:	d81e      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce2:	d011      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce8:	d818      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf2:	d113      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f004 fd28 	bl	800a750 <RCCEx_PLL2_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005d06:	e014      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d0c:	3330      	adds	r3, #48	@ 0x30
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f004 fdb6 	bl	800a880 <RCCEx_PLL3_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d22:	e006      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d24:	bf00      	nop
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d28:	bf00      	nop
 8005d2a:	e002      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005d3a:	4b89      	ldr	r3, [pc, #548]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d4a:	4a85      	ldr	r2, [pc, #532]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005d52:	e003      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f002 0320 	and.w	r3, r2, #32
 8005d68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005d72:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005d76:	460b      	mov	r3, r1
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d053      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d82:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005d86:	d031      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005d88:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005d8c:	d82a      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d92:	d02d      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d98:	d824      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d9a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005d9e:	d029      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005da0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005da4:	d81e      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005daa:	d011      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db0:	d818      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d020      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dba:	d113      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 fcc4 	bl	800a750 <RCCEx_PLL2_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005dce:	e014      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd4:	3330      	adds	r3, #48	@ 0x30
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f004 fd52 	bl	800a880 <RCCEx_PLL3_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005de2:	e00a      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dea:	e006      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005dec:	bf00      	nop
 8005dee:	e004      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005df0:	bf00      	nop
 8005df2:	e002      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005df4:	bf00      	nop
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005e02:	4b57      	ldr	r3, [pc, #348]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e08:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e12:	4a53      	ldr	r2, [pc, #332]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005e30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005e3a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d053      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e4a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005e4e:	d031      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005e50:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005e54:	d82a      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e5a:	d02d      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e60:	d824      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e66:	d029      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005e68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e6c:	d81e      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e72:	d011      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e78:	d818      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e82:	d113      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e88:	3308      	adds	r3, #8
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f004 fc60 	bl	800a750 <RCCEx_PLL2_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e96:	e014      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e9c:	3330      	adds	r3, #48	@ 0x30
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f004 fcee 	bl	800a880 <RCCEx_PLL3_Config>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eb2:	e006      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005eb4:	bf00      	nop
 8005eb6:	e004      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005eb8:	bf00      	nop
 8005eba:	e002      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005eca:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ed0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eda:	4a21      	ldr	r2, [pc, #132]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005edc:	430b      	orrs	r3, r1
 8005ede:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005ee2:	e003      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ee8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ef8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f02:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d055      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f16:	d033      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005f18:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f1c:	d82c      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f22:	d02f      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005f24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f28:	d826      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f2e:	d02b      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005f30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f34:	d820      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f3a:	d013      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f40:	d81a      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d022      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005f46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f4a:	d115      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f50:	3308      	adds	r3, #8
 8005f52:	4618      	mov	r0, r3
 8005f54:	f004 fbfc 	bl	800a750 <RCCEx_PLL2_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f5e:	e016      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005f60:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f68:	3330      	adds	r3, #48	@ 0x30
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f004 fc88 	bl	800a880 <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f76:	e00a      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f7e:	e006      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f80:	bf00      	nop
 8005f82:	e004      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f84:	bf00      	nop
 8005f86:	e002      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f88:	bf00      	nop
 8005f8a:	e000      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005f96:	4bbb      	ldr	r3, [pc, #748]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f9c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa6:	4ab7      	ldr	r2, [pc, #732]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005fae:	e003      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005fc4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005fce:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d053      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005fe2:	d031      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005fe4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005fe8:	d82a      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fee:	d02d      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ff4:	d824      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005ff6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ffa:	d029      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005ffc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006000:	d81e      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006006:	d011      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800600c:	d818      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8006012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006016:	d113      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006018:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800601c:	3308      	adds	r3, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f004 fb96 	bl	800a750 <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800602a:	e014      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800602c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006030:	3330      	adds	r3, #48	@ 0x30
 8006032:	4618      	mov	r0, r3
 8006034:	f004 fc24 	bl	800a880 <RCCEx_PLL3_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800603e:	e00a      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006046:	e006      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006048:	bf00      	nop
 800604a:	e004      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800604c:	bf00      	nop
 800604e:	e002      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006050:	bf00      	nop
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800605e:	4b89      	ldr	r3, [pc, #548]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006064:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800606c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800606e:	4a85      	ldr	r2, [pc, #532]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006070:	430b      	orrs	r3, r1
 8006072:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800607c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800608c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006096:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	d055      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80060a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060a8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80060ac:	d031      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80060ae:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80060b2:	d82a      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b8:	d02d      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80060ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060be:	d824      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80060c0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80060c4:	d029      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80060c6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80060ca:	d81e      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80060cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d0:	d011      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d6:	d818      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d020      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060e0:	d113      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060e6:	3308      	adds	r3, #8
 80060e8:	4618      	mov	r0, r3
 80060ea:	f004 fb31 	bl	800a750 <RCCEx_PLL2_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80060f4:	e014      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060fa:	3330      	adds	r3, #48	@ 0x30
 80060fc:	4618      	mov	r0, r3
 80060fe:	f004 fbbf 	bl	800a880 <RCCEx_PLL3_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006108:	e00a      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006110:	e006      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006112:	bf00      	nop
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006116:	bf00      	nop
 8006118:	e002      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800611e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006120:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006128:	4b56      	ldr	r3, [pc, #344]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800612a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800612e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8006132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800613a:	4a52      	ldr	r2, [pc, #328]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800613c:	430b      	orrs	r3, r1
 800613e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006142:	e003      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006148:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800614c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006158:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006162:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006166:	460b      	mov	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	d044      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800616c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006174:	2b05      	cmp	r3, #5
 8006176:	d823      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006178:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	080061c9 	.word	0x080061c9
 8006184:	08006199 	.word	0x08006199
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061c9 	.word	0x080061c9
 8006190:	080061c9 	.word	0x080061c9
 8006194:	080061c9 	.word	0x080061c9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006198:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800619c:	3308      	adds	r3, #8
 800619e:	4618      	mov	r0, r3
 80061a0:	f004 fad6 	bl	800a750 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80061aa:	e00e      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b0:	3330      	adds	r3, #48	@ 0x30
 80061b2:	4618      	mov	r0, r3
 80061b4:	f004 fb64 	bl	800a880 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10d      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80061d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80061d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061d8:	f023 0107 	bic.w	r1, r3, #7
 80061dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061e4:	4a27      	ldr	r2, [pc, #156]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80061ec:	e003      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80061f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006202:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006206:	2300      	movs	r3, #0
 8006208:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800620c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006210:	460b      	mov	r3, r1
 8006212:	4313      	orrs	r3, r2
 8006214:	d04f      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8006216:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	2b50      	cmp	r3, #80	@ 0x50
 8006220:	d029      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006222:	2b50      	cmp	r3, #80	@ 0x50
 8006224:	d823      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006226:	2b40      	cmp	r3, #64	@ 0x40
 8006228:	d027      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800622a:	2b40      	cmp	r3, #64	@ 0x40
 800622c:	d81f      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800622e:	2b30      	cmp	r3, #48	@ 0x30
 8006230:	d025      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006232:	2b30      	cmp	r3, #48	@ 0x30
 8006234:	d81b      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d00f      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d817      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d022      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006242:	2b10      	cmp	r3, #16
 8006244:	d113      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006246:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800624a:	3308      	adds	r3, #8
 800624c:	4618      	mov	r0, r3
 800624e:	f004 fa7f 	bl	800a750 <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006258:	e017      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800625a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625e:	3330      	adds	r3, #48	@ 0x30
 8006260:	4618      	mov	r0, r3
 8006262:	f004 fb0d 	bl	800a880 <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800626c:	e00d      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006274:	e009      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006276:	bf00      	nop
 8006278:	e007      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800627a:	bf00      	nop
 800627c:	e005      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800627e:	bf00      	nop
 8006280:	e003      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8006282:	bf00      	nop
 8006284:	44020c00 	.word	0x44020c00
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10d      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8006292:	4baf      	ldr	r3, [pc, #700]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006294:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006298:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800629c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	4aaa      	ldr	r2, [pc, #680]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80062cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d055      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80062d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062e2:	d031      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80062e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062e8:	d82a      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062ee:	d02d      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80062f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062f4:	d824      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062fa:	d029      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80062fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006300:	d81e      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006306:	d011      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800630c:	d818      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d020      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006316:	d113      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006318:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800631c:	3308      	adds	r3, #8
 800631e:	4618      	mov	r0, r3
 8006320:	f004 fa16 	bl	800a750 <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800632a:	e014      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800632c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006330:	3330      	adds	r3, #48	@ 0x30
 8006332:	4618      	mov	r0, r3
 8006334:	f004 faa4 	bl	800a880 <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800633e:	e00a      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006346:	e006      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006348:	bf00      	nop
 800634a:	e004      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800634c:	bf00      	nop
 800634e:	e002      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006356:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10d      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800635e:	4b7c      	ldr	r3, [pc, #496]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006364:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006368:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800636c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006370:	4a77      	ldr	r2, [pc, #476]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006372:	430b      	orrs	r3, r1
 8006374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006378:	e003      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800637e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800638e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006392:	2300      	movs	r3, #0
 8006394:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006398:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800639c:	460b      	mov	r3, r1
 800639e:	4313      	orrs	r3, r2
 80063a0:	d03d      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80063a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063ae:	d01b      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80063b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063b4:	d814      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80063b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ba:	d017      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80063bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c0:	d80e      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d014      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80063c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ca:	d109      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d0:	3330      	adds	r3, #48	@ 0x30
 80063d2:	4618      	mov	r0, r3
 80063d4:	f004 fa54 	bl	800a880 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80063de:	e008      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063e6:	e004      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80063e8:	bf00      	nop
 80063ea:	e002      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80063f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80063fa:	4b55      	ldr	r3, [pc, #340]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006400:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006404:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640c:	4a50      	ldr	r2, [pc, #320]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800640e:	430b      	orrs	r3, r1
 8006410:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006414:	e003      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800641a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800641e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800642a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006434:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006438:	460b      	mov	r3, r1
 800643a:	4313      	orrs	r3, r2
 800643c:	d03d      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800643e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006446:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800644a:	d01b      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800644c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006450:	d814      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006452:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006456:	d017      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006458:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800645c:	d80e      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d014      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8006462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006466:	d109      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800646c:	3330      	adds	r3, #48	@ 0x30
 800646e:	4618      	mov	r0, r3
 8006470:	f004 fa06 	bl	800a880 <RCCEx_PLL3_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800647a:	e008      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006482:	e004      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006484:	bf00      	nop
 8006486:	e002      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800648c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10d      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006496:	4b2e      	ldr	r3, [pc, #184]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800649c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80064a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064a8:	4a29      	ldr	r2, [pc, #164]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80064aa:	430b      	orrs	r3, r1
 80064ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064b0:	e003      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80064c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064ca:	2300      	movs	r3, #0
 80064cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064d4:	460b      	mov	r3, r1
 80064d6:	4313      	orrs	r3, r2
 80064d8:	d040      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80064da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064e6:	d01b      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80064e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064ec:	d814      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80064ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064f2:	d017      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80064f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064f8:	d80e      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d014      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006502:	d109      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006508:	3330      	adds	r3, #48	@ 0x30
 800650a:	4618      	mov	r0, r3
 800650c:	f004 f9b8 	bl	800a880 <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006516:	e008      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800651e:	e004      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006520:	bf00      	nop
 8006522:	e002      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006524:	bf00      	nop
 8006526:	e000      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800652e:	2b00      	cmp	r3, #0
 8006530:	d110      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006532:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006534:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006538:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800653c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006544:	4a02      	ldr	r2, [pc, #8]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006546:	430b      	orrs	r3, r1
 8006548:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800654c:	e006      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800654e:	bf00      	nop
 8006550:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006558:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800655c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	2100      	movs	r1, #0
 8006566:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800656a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800656e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006572:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d03d      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800657c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006580:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006584:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006588:	d01b      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800658a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800658e:	d814      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006590:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006594:	d017      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006596:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800659a:	d80e      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d014      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80065a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065a4:	d109      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065aa:	3330      	adds	r3, #48	@ 0x30
 80065ac:	4618      	mov	r0, r3
 80065ae:	f004 f967 	bl	800a880 <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80065b8:	e008      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065c0:	e004      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80065ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10d      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80065d4:	4bbe      	ldr	r3, [pc, #760]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065da:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80065de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e6:	4aba      	ldr	r2, [pc, #744]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065ee:	e003      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80065f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006604:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006608:	2300      	movs	r3, #0
 800660a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800660e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d035      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800661c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006624:	d015      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800662a:	d80e      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d012      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006634:	d109      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800663a:	3330      	adds	r3, #48	@ 0x30
 800663c:	4618      	mov	r0, r3
 800663e:	f004 f91f 	bl	800a880 <RCCEx_PLL3_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006648:	e006      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006650:	e002      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10d      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006660:	4b9b      	ldr	r3, [pc, #620]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006662:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006666:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800666a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800666e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006672:	4a97      	ldr	r2, [pc, #604]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006674:	430b      	orrs	r3, r1
 8006676:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800667a:	e003      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006680:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	2100      	movs	r1, #0
 800668e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006696:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800669a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800669e:	460b      	mov	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80066a4:	4b8a      	ldr	r3, [pc, #552]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	4a89      	ldr	r2, [pc, #548]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80066aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066ae:	61d3      	str	r3, [r2, #28]
 80066b0:	4b87      	ldr	r3, [pc, #540]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80066b2:	69d9      	ldr	r1, [r3, #28]
 80066b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80066bc:	4a84      	ldr	r2, [pc, #528]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80066be:	430b      	orrs	r3, r1
 80066c0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d055      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80066e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066ea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80066ee:	d031      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80066f0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80066f4:	d82a      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fa:	d02d      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80066fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006700:	d824      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006706:	d029      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800670c:	d81e      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800670e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006712:	d011      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d818      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d020      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800671e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006722:	d113      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006728:	3308      	adds	r3, #8
 800672a:	4618      	mov	r0, r3
 800672c:	f004 f810 	bl	800a750 <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006736:	e014      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006738:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800673c:	3330      	adds	r3, #48	@ 0x30
 800673e:	4618      	mov	r0, r3
 8006740:	f004 f89e 	bl	800a880 <RCCEx_PLL3_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800674a:	e00a      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006752:	e006      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006754:	bf00      	nop
 8006756:	e004      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006758:	bf00      	nop
 800675a:	e002      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006762:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10d      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800676a:	4b59      	ldr	r3, [pc, #356]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800676c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006770:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006774:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800677c:	4a54      	ldr	r2, [pc, #336]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800677e:	430b      	orrs	r3, r1
 8006780:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006784:	e003      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006786:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800678a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800678e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800679a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800679e:	2300      	movs	r3, #0
 80067a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4313      	orrs	r3, r2
 80067ac:	d055      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80067ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067ba:	d031      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80067bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067c0:	d82a      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c6:	d02d      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067cc:	d824      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067d2:	d029      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80067d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067d8:	d81e      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067de:	d011      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067e4:	d818      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d020      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ee:	d113      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f4:	3308      	adds	r3, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f003 ffaa 	bl	800a750 <RCCEx_PLL2_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006802:	e014      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006808:	3330      	adds	r3, #48	@ 0x30
 800680a:	4618      	mov	r0, r3
 800680c:	f004 f838 	bl	800a880 <RCCEx_PLL3_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006816:	e00a      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800681e:	e006      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006820:	bf00      	nop
 8006822:	e004      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800682c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006836:	4b26      	ldr	r3, [pc, #152]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006838:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800683c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006844:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006848:	4a21      	ldr	r2, [pc, #132]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800684a:	430b      	orrs	r3, r1
 800684c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006850:	e003      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006852:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006856:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800685a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	2100      	movs	r1, #0
 8006864:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d057      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800687a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800687e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006882:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006886:	d033      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800688c:	d82c      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800688e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006892:	d02f      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006894:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006898:	d826      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800689a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800689e:	d02b      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80068a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80068a4:	d820      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80068a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068aa:	d013      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80068ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068b0:	d81a      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d022      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80068b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ba:	d115      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068c0:	3308      	adds	r3, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f003 ff44 	bl	800a750 <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80068ce:	e016      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80068d0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d8:	3330      	adds	r3, #48	@ 0x30
 80068da:	4618      	mov	r0, r3
 80068dc:	f003 ffd0 	bl	800a880 <RCCEx_PLL3_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80068e6:	e00a      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068ee:	e006      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068f0:	bf00      	nop
 80068f2:	e004      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068f4:	bf00      	nop
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068f8:	bf00      	nop
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10d      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006906:	4bbb      	ldr	r3, [pc, #748]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006908:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800690c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006914:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006918:	4ab6      	ldr	r2, [pc, #728]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800691a:	430b      	orrs	r3, r1
 800691c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006920:	e003      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006926:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800692a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	2100      	movs	r1, #0
 8006934:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006940:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006944:	460b      	mov	r3, r1
 8006946:	4313      	orrs	r3, r2
 8006948:	d055      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800694a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006952:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006956:	d031      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006958:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800695c:	d82a      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800695e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006962:	d02d      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8006964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006968:	d824      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800696a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800696e:	d029      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006974:	d81e      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006976:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800697a:	d011      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800697c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006980:	d818      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d020      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8006986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800698a:	d113      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800698c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006990:	3308      	adds	r3, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f003 fedc 	bl	800a750 <RCCEx_PLL2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800699e:	e014      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069a4:	3330      	adds	r3, #48	@ 0x30
 80069a6:	4618      	mov	r0, r3
 80069a8:	f003 ff6a 	bl	800a880 <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80069b2:	e00a      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069ba:	e006      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80069bc:	bf00      	nop
 80069be:	e004      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80069c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80069d2:	4b88      	ldr	r3, [pc, #544]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80069d8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80069dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069e4:	4a83      	ldr	r2, [pc, #524]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80069ec:	e003      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80069f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	2100      	movs	r1, #0
 8006a00:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a0c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a10:	460b      	mov	r3, r1
 8006a12:	4313      	orrs	r3, r2
 8006a14:	d055      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a1e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a22:	d031      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006a24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a28:	d82a      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a2e:	d02d      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006a30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a34:	d824      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a3a:	d029      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006a3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a40:	d81e      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a46:	d011      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a4c:	d818      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d020      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a56:	d113      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f003 fe76 	bl	800a750 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a6a:	e014      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a70:	3330      	adds	r3, #48	@ 0x30
 8006a72:	4618      	mov	r0, r3
 8006a74:	f003 ff04 	bl	800a880 <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a7e:	e00a      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a86:	e006      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a88:	bf00      	nop
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006a9e:	4b55      	ldr	r3, [pc, #340]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006aa0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006aa4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ab0:	4a50      	ldr	r2, [pc, #320]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006ab8:	e003      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006abe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	2100      	movs	r1, #0
 8006acc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ad8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006adc:	460b      	mov	r3, r1
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	d055      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ae6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aee:	d031      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006af4:	d82a      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afa:	d02d      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b00:	d824      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006b02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b06:	d029      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006b08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b0c:	d81e      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b12:	d011      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b18:	d818      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d020      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b22:	d113      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b28:	3308      	adds	r3, #8
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f003 fe10 	bl	800a750 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006b36:	e014      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b3c:	3330      	adds	r3, #48	@ 0x30
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f003 fe9e 	bl	800a880 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b52:	e006      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b54:	bf00      	nop
 8006b56:	e004      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b58:	bf00      	nop
 8006b5a:	e002      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b5c:	bf00      	nop
 8006b5e:	e000      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10d      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006b6a:	4b22      	ldr	r3, [pc, #136]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b70:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ba4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d055      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bba:	d035      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006bbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bc0:	d82e      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006bc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bc6:	d031      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006bc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bcc:	d828      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006bce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bd2:	d01b      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bd8:	d822      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be2:	d009      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006be4:	e01c      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be6:	4b03      	ldr	r3, [pc, #12]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	4a02      	ldr	r2, [pc, #8]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bf2:	e01c      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006bf4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f003 fda6 	bl	800a750 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c0a:	e010      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c10:	3330      	adds	r3, #48	@ 0x30
 8006c12:	4618      	mov	r0, r3
 8006c14:	f003 fe34 	bl	800a880 <RCCEx_PLL3_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c1e:	e006      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006c36:	4bc3      	ldr	r3, [pc, #780]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c48:	4abe      	ldr	r2, [pc, #760]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c70:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d051      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c86:	d033      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c8c:	d82c      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c92:	d02d      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c94:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c98:	d826      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c9e:	d019      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca4:	d820      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006caa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006cae:	d007      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006cb0:	e01a      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	4aa3      	ldr	r2, [pc, #652]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006cbe:	e018      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f003 fd42 	bl	800a750 <RCCEx_PLL2_Config>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006cd2:	e00e      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd8:	3330      	adds	r3, #48	@ 0x30
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f003 fdd0 	bl	800a880 <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006ce6:	e004      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cee:	e000      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006cfa:	4b92      	ldr	r3, [pc, #584]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d00:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006d0c:	4a8d      	ldr	r2, [pc, #564]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d14:	e003      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006d34:	460b      	mov	r3, r1
 8006d36:	4313      	orrs	r3, r2
 8006d38:	d032      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d42:	2b05      	cmp	r3, #5
 8006d44:	d80f      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d211      	bcs.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d911      	bls.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d109      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d56:	3308      	adds	r3, #8
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f003 fcf9 	bl	800a750 <RCCEx_PLL2_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006d7c:	4b71      	ldr	r3, [pc, #452]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d82:	f023 0107 	bic.w	r1, r3, #7
 8006d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d90:	430b      	orrs	r3, r1
 8006d92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d96:	e003      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	2100      	movs	r1, #0
 8006daa:	6739      	str	r1, [r7, #112]	@ 0x70
 8006dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006db0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006db2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006db6:	460b      	mov	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	d024      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006dd2:	e002      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006de2:	4b58      	ldr	r3, [pc, #352]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006de8:	f023 0108 	bic.w	r1, r3, #8
 8006dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006df4:	4a53      	ldr	r2, [pc, #332]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006dfc:	e003      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006e12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e14:	2300      	movs	r3, #0
 8006e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f000 80b9 	beq.w	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006e24:	4b48      	ldr	r3, [pc, #288]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	4a47      	ldr	r2, [pc, #284]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e30:	f7fb fbb2 	bl	8002598 <HAL_GetTick>
 8006e34:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006e38:	e00b      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e3a:	f7fb fbad 	bl	8002598 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d903      	bls.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e50:	e005      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006e52:	4b3d      	ldr	r3, [pc, #244]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0ed      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006e5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f040 8093 	bne.w	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e68:	4b36      	ldr	r3, [pc, #216]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e72:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e76:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d023      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e82:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006e86:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01b      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e98:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e9c:	4b29      	ldr	r3, [pc, #164]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ea2:	4a28      	ldr	r2, [pc, #160]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ea8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006eac:	4b25      	ldr	r3, [pc, #148]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb2:	4a24      	ldr	r2, [pc, #144]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ebc:	4a21      	ldr	r2, [pc, #132]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ebe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ec6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d019      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed2:	f7fb fb61 	bl	8002598 <HAL_GetTick>
 8006ed6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eda:	e00d      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006edc:	f7fb fb5c 	bl	8002598 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006ef6:	e006      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ef8:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0ea      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006f06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13a      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f12:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f1e:	d115      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006f20:	4b08      	ldr	r3, [pc, #32]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f2c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006f3a:	4a02      	ldr	r2, [pc, #8]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	61d3      	str	r3, [r2, #28]
 8006f40:	e00a      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006f42:	bf00      	nop
 8006f44:	44020c00 	.word	0x44020c00
 8006f48:	44020800 	.word	0x44020800
 8006f4c:	4b9f      	ldr	r3, [pc, #636]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4a9e      	ldr	r2, [pc, #632]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f56:	61d3      	str	r3, [r2, #28]
 8006f58:	4b9c      	ldr	r3, [pc, #624]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f5e:	4a9b      	ldr	r2, [pc, #620]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f68:	4b98      	ldr	r3, [pc, #608]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f6a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f72:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f7a:	4a94      	ldr	r2, [pc, #592]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f82:	e008      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006f8c:	e003      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006fa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fa8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006fac:	460b      	mov	r3, r1
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d035      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006fba:	2b30      	cmp	r3, #48	@ 0x30
 8006fbc:	d014      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006fbe:	2b30      	cmp	r3, #48	@ 0x30
 8006fc0:	d80e      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d012      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d80a      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d106      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd2:	4b7e      	ldr	r3, [pc, #504]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	4a7d      	ldr	r2, [pc, #500]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fdc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fde:	e008      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fe6:	e004      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006ffa:	4b74      	ldr	r3, [pc, #464]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007000:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007008:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800700c:	4a6f      	ldr	r2, [pc, #444]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800700e:	430b      	orrs	r3, r1
 8007010:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800701a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800701e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800702a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800702c:	2300      	movs	r3, #0
 800702e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007030:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d033      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800703a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800703e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	d007      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800704a:	e010      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704c:	4b5f      	ldr	r3, [pc, #380]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	4a5e      	ldr	r2, [pc, #376]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007056:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007058:	e00d      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800705a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800705e:	3308      	adds	r3, #8
 8007060:	4618      	mov	r0, r3
 8007062:	f003 fb75 	bl	800a750 <RCCEx_PLL2_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800706c:	e003      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007076:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10d      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800707e:	4b53      	ldr	r3, [pc, #332]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007080:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007084:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800708c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007090:	4a4e      	ldr	r2, [pc, #312]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007092:	430b      	orrs	r3, r1
 8007094:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007098:	e003      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800709e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80070a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80070ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80070b0:	2300      	movs	r3, #0
 80070b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070b4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80070b8:	460b      	mov	r3, r1
 80070ba:	4313      	orrs	r3, r2
 80070bc:	d033      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80070be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80070ca:	2b80      	cmp	r3, #128	@ 0x80
 80070cc:	d007      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80070ce:	e010      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d0:	4b3e      	ldr	r3, [pc, #248]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	4a3d      	ldr	r2, [pc, #244]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80070dc:	e00d      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070e2:	3308      	adds	r3, #8
 80070e4:	4618      	mov	r0, r3
 80070e6:	f003 fb33 	bl	800a750 <RCCEx_PLL2_Config>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80070f0:	e003      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8007102:	4b32      	ldr	r3, [pc, #200]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007108:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800710c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007110:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007114:	4a2d      	ldr	r2, [pc, #180]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007116:	430b      	orrs	r3, r1
 8007118:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800711c:	e003      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007122:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007134:	2300      	movs	r3, #0
 8007136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007138:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800713c:	460b      	mov	r3, r1
 800713e:	4313      	orrs	r3, r2
 8007140:	d04a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007142:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800714a:	2b04      	cmp	r3, #4
 800714c:	d827      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800714e:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007169 	.word	0x08007169
 8007158:	08007177 	.word	0x08007177
 800715c:	0800718b 	.word	0x0800718b
 8007160:	080071a7 	.word	0x080071a7
 8007164:	080071a7 	.word	0x080071a7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	4a17      	ldr	r2, [pc, #92]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800716e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007172:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007174:	e018      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800717a:	3308      	adds	r3, #8
 800717c:	4618      	mov	r0, r3
 800717e:	f003 fae7 	bl	800a750 <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007188:	e00e      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800718a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800718e:	3330      	adds	r3, #48	@ 0x30
 8007190:	4618      	mov	r0, r3
 8007192:	f003 fb75 	bl	800a880 <RCCEx_PLL3_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800719c:	e004      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071a4:	e000      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80071a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10f      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80071b0:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80071b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071b6:	f023 0107 	bic.w	r1, r3, #7
 80071ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c2:	4a02      	ldr	r2, [pc, #8]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80071c4:	430b      	orrs	r3, r1
 80071c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071ca:	e005      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80071cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80071d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80071e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e6:	2300      	movs	r3, #0
 80071e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071ee:	460b      	mov	r3, r1
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f000 8081 	beq.w	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80071f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d85f      	bhi.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8007202:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	0800728d 	.word	0x0800728d
 800720c:	080072c3 	.word	0x080072c3
 8007210:	080072c3 	.word	0x080072c3
 8007214:	080072c3 	.word	0x080072c3
 8007218:	080072c3 	.word	0x080072c3
 800721c:	080072c3 	.word	0x080072c3
 8007220:	080072c3 	.word	0x080072c3
 8007224:	080072c3 	.word	0x080072c3
 8007228:	0800729b 	.word	0x0800729b
 800722c:	080072c3 	.word	0x080072c3
 8007230:	080072c3 	.word	0x080072c3
 8007234:	080072c3 	.word	0x080072c3
 8007238:	080072c3 	.word	0x080072c3
 800723c:	080072c3 	.word	0x080072c3
 8007240:	080072c3 	.word	0x080072c3
 8007244:	080072c3 	.word	0x080072c3
 8007248:	080072af 	.word	0x080072af
 800724c:	080072c3 	.word	0x080072c3
 8007250:	080072c3 	.word	0x080072c3
 8007254:	080072c3 	.word	0x080072c3
 8007258:	080072c3 	.word	0x080072c3
 800725c:	080072c3 	.word	0x080072c3
 8007260:	080072c3 	.word	0x080072c3
 8007264:	080072c3 	.word	0x080072c3
 8007268:	080072cb 	.word	0x080072cb
 800726c:	080072c3 	.word	0x080072c3
 8007270:	080072c3 	.word	0x080072c3
 8007274:	080072c3 	.word	0x080072c3
 8007278:	080072c3 	.word	0x080072c3
 800727c:	080072c3 	.word	0x080072c3
 8007280:	080072c3 	.word	0x080072c3
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072cb 	.word	0x080072cb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800728c:	4bab      	ldr	r3, [pc, #684]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	4aaa      	ldr	r2, [pc, #680]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007296:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007298:	e018      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800729a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729e:	3308      	adds	r3, #8
 80072a0:	4618      	mov	r0, r3
 80072a2:	f003 fa55 	bl	800a750 <RCCEx_PLL2_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80072ac:	e00e      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b2:	3330      	adds	r3, #48	@ 0x30
 80072b4:	4618      	mov	r0, r3
 80072b6:	f003 fae3 	bl	800a880 <RCCEx_PLL3_Config>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80072c0:	e004      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80072ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10d      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80072d4:	4b99      	ldr	r3, [pc, #612]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80072de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072e6:	4a95      	ldr	r2, [pc, #596]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072e8:	430b      	orrs	r3, r1
 80072ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80072ee:	e003      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80072f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007304:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007306:	2300      	movs	r3, #0
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800730a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d04e      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800731c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007320:	d02e      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007326:	d827      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007328:	2bc0      	cmp	r3, #192	@ 0xc0
 800732a:	d02b      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800732c:	2bc0      	cmp	r3, #192	@ 0xc0
 800732e:	d823      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d017      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007334:	2b80      	cmp	r3, #128	@ 0x80
 8007336:	d81f      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d007      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007340:	e01a      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007342:	4b7e      	ldr	r3, [pc, #504]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007346:	4a7d      	ldr	r2, [pc, #500]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800734c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800734e:	e01a      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007354:	3308      	adds	r3, #8
 8007356:	4618      	mov	r0, r3
 8007358:	f003 f9fa 	bl	800a750 <RCCEx_PLL2_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007362:	e010      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007368:	3330      	adds	r3, #48	@ 0x30
 800736a:	4618      	mov	r0, r3
 800736c:	f003 fa88 	bl	800a880 <RCCEx_PLL3_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007376:	e006      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800737e:	e002      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007386:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10d      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800738e:	4b6b      	ldr	r3, [pc, #428]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007394:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800739c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073a0:	4a66      	ldr	r2, [pc, #408]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80073a2:	430b      	orrs	r3, r1
 80073a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80073a8:	e003      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80073b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073be:	633b      	str	r3, [r7, #48]	@ 0x30
 80073c0:	2300      	movs	r3, #0
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073c8:	460b      	mov	r3, r1
 80073ca:	4313      	orrs	r3, r2
 80073cc:	d055      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80073ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80073d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80073da:	d031      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80073dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80073e0:	d82a      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073e6:	d02d      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ec:	d824      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073f2:	d029      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80073f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073f8:	d81e      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fe:	d011      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007404:	d818      	bhi.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d020      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800740a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800740e:	d113      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007414:	3308      	adds	r3, #8
 8007416:	4618      	mov	r0, r3
 8007418:	f003 f99a 	bl	800a750 <RCCEx_PLL2_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007422:	e014      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007428:	3330      	adds	r3, #48	@ 0x30
 800742a:	4618      	mov	r0, r3
 800742c:	f003 fa28 	bl	800a880 <RCCEx_PLL3_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007436:	e00a      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800743e:	e006      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007440:	bf00      	nop
 8007442:	e004      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007444:	bf00      	nop
 8007446:	e002      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007448:	bf00      	nop
 800744a:	e000      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800744c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007456:	4b39      	ldr	r3, [pc, #228]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800745c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007464:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007468:	4a34      	ldr	r2, [pc, #208]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800746a:	430b      	orrs	r3, r1
 800746c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007470:	e003      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007476:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800747a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007488:	2300      	movs	r3, #0
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800748c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007490:	460b      	mov	r3, r1
 8007492:	4313      	orrs	r3, r2
 8007494:	d058      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8007496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800749a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80074a2:	d031      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80074a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80074a8:	d82a      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80074aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074ae:	d02d      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80074b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074b4:	d824      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80074b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ba:	d029      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80074bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074c0:	d81e      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80074c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c6:	d011      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80074c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074cc:	d818      	bhi.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d020      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d6:	d113      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074dc:	3308      	adds	r3, #8
 80074de:	4618      	mov	r0, r3
 80074e0:	f003 f936 	bl	800a750 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80074ea:	e014      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074f0:	3330      	adds	r3, #48	@ 0x30
 80074f2:	4618      	mov	r0, r3
 80074f4:	f003 f9c4 	bl	800a880 <RCCEx_PLL3_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80074fe:	e00a      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007506:	e006      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007508:	bf00      	nop
 800750a:	e004      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800750c:	bf00      	nop
 800750e:	e002      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007516:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800751a:	2b00      	cmp	r3, #0
 800751c:	d110      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800751e:	4b07      	ldr	r3, [pc, #28]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007524:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800752c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007530:	4902      	ldr	r1, [pc, #8]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007538:	e006      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800753a:	bf00      	nop
 800753c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007544:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	2100      	movs	r1, #0
 8007552:	6239      	str	r1, [r7, #32]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
 800755a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d055      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8007564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800756c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007570:	d031      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8007572:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007576:	d82a      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800757c:	d02d      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800757e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007582:	d824      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007584:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007588:	d029      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800758a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800758e:	d81e      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007594:	d011      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8007596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800759a:	d818      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80075a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a4:	d113      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075aa:	3308      	adds	r3, #8
 80075ac:	4618      	mov	r0, r3
 80075ae:	f003 f8cf 	bl	800a750 <RCCEx_PLL2_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075b8:	e014      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075be:	3330      	adds	r3, #48	@ 0x30
 80075c0:	4618      	mov	r0, r3
 80075c2:	f003 f95d 	bl	800a880 <RCCEx_PLL3_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075cc:	e00a      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075d4:	e006      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075d6:	bf00      	nop
 80075d8:	e004      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075da:	bf00      	nop
 80075dc:	e002      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075de:	bf00      	nop
 80075e0:	e000      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10d      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80075ec:	4b88      	ldr	r3, [pc, #544]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075f2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80075f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075fe:	4984      	ldr	r1, [pc, #528]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007606:	e003      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800760c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	2100      	movs	r1, #0
 800761a:	61b9      	str	r1, [r7, #24]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007626:	460b      	mov	r3, r1
 8007628:	4313      	orrs	r3, r2
 800762a:	d03d      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800762c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007630:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007634:	2b03      	cmp	r3, #3
 8007636:	d81c      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007638:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	0800767b 	.word	0x0800767b
 8007644:	08007651 	.word	0x08007651
 8007648:	0800765f 	.word	0x0800765f
 800764c:	0800767b 	.word	0x0800767b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007650:	4b6f      	ldr	r3, [pc, #444]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007654:	4a6e      	ldr	r2, [pc, #440]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800765a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800765c:	e00e      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800765e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007662:	3308      	adds	r3, #8
 8007664:	4618      	mov	r0, r3
 8007666:	f003 f873 	bl	800a750 <RCCEx_PLL2_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007670:	e004      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007678:	e000      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800767a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10d      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007684:	4b62      	ldr	r3, [pc, #392]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007686:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800768a:	f023 0203 	bic.w	r2, r3, #3
 800768e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007692:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007696:	495e      	ldr	r1, [pc, #376]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800769e:	e003      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	2100      	movs	r1, #0
 80076b2:	6139      	str	r1, [r7, #16]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80076be:	460b      	mov	r3, r1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	d03a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80076c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80076cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076d0:	d00e      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80076d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076d6:	d815      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d017      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80076dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e0:	d110      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80076ee:	e00e      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f4:	3308      	adds	r3, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f003 f82a 	bl	800a750 <RCCEx_PLL2_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007702:	e004      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800770c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10d      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007716:	4b3e      	ldr	r3, [pc, #248]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800771c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007724:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007728:	4939      	ldr	r1, [pc, #228]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007730:	e003      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007736:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800773a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	2100      	movs	r1, #0
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d038      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800775a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800775e:	2b30      	cmp	r3, #48	@ 0x30
 8007760:	d01b      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007762:	2b30      	cmp	r3, #48	@ 0x30
 8007764:	d815      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007766:	2b10      	cmp	r3, #16
 8007768:	d002      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800776a:	2b20      	cmp	r3, #32
 800776c:	d007      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800776e:	e010      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007770:	4b27      	ldr	r3, [pc, #156]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	4a26      	ldr	r2, [pc, #152]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800777c:	e00e      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800777e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007782:	3330      	adds	r3, #48	@ 0x30
 8007784:	4618      	mov	r0, r3
 8007786:	f003 f87b 	bl	800a880 <RCCEx_PLL3_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007790:	e004      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800779a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80077a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80077b6:	4916      	ldr	r1, [pc, #88]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80077be:	e003      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	2100      	movs	r1, #0
 80077d2:	6039      	str	r1, [r7, #0]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	607b      	str	r3, [r7, #4]
 80077da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077de:	460b      	mov	r3, r1
 80077e0:	4313      	orrs	r3, r2
 80077e2:	d00c      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80077e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80077f6:	4906      	ldr	r1, [pc, #24]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80077fe:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007802:	4618      	mov	r0, r3
 8007804:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007808:	46bd      	mov	sp, r7
 800780a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800780e:	bf00      	nop
 8007810:	44020c00 	.word	0x44020c00

08007814 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007814:	b480      	push	{r7}
 8007816:	b08b      	sub	sp, #44	@ 0x2c
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800781c:	4bae      	ldr	r3, [pc, #696]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800781e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007824:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007826:	4bac      	ldr	r3, [pc, #688]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007830:	4ba9      	ldr	r3, [pc, #676]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	0a1b      	lsrs	r3, r3, #8
 8007836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800783a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800783c:	4ba6      	ldr	r3, [pc, #664]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	091b      	lsrs	r3, r3, #4
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007848:	4ba3      	ldr	r3, [pc, #652]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	08db      	lsrs	r3, r3, #3
 800784e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	fb02 f303 	mul.w	r3, r2, r3
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007860:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 8126 	beq.w	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b03      	cmp	r3, #3
 8007870:	d053      	beq.n	800791a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d86f      	bhi.n	8007958 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d003      	beq.n	8007886 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d02b      	beq.n	80078dc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007884:	e068      	b.n	8007958 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007886:	4b94      	ldr	r3, [pc, #592]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	4a92      	ldr	r2, [pc, #584]	@ (8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	ee07 3a90 	vmov	s15, r3
 80078a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80078be:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80078da:	e068      	b.n	80079ae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	ee07 3a90 	vmov	s15, r3
 80078f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80078fc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800790c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007914:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007918:	e049      	b.n	80079ae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007924:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a04 	vldr	s12, [r7, #16]
 800793a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007956:	e02a      	b.n	80079ae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007958:	4b5f      	ldr	r3, [pc, #380]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	08db      	lsrs	r3, r3, #3
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	4a5e      	ldr	r2, [pc, #376]	@ (8007adc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007964:	fa22 f303 	lsr.w	r3, r2, r3
 8007968:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007990:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80079ac:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079ae:	4b4a      	ldr	r3, [pc, #296]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079ba:	d121      	bne.n	8007a00 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80079bc:	4b46      	ldr	r3, [pc, #280]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d017      	beq.n	80079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079c8:	4b43      	ldr	r3, [pc, #268]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079cc:	0a5b      	lsrs	r3, r3, #9
 80079ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80079da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80079e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80079e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e006      	b.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e002      	b.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a06:	4b34      	ldr	r3, [pc, #208]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a12:	d121      	bne.n	8007a58 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007a14:	4b30      	ldr	r3, [pc, #192]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d017      	beq.n	8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a20:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a24:	0c1b      	lsrs	r3, r3, #16
 8007a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a36:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a3a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a46:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	e006      	b.n	8007a5e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	605a      	str	r2, [r3, #4]
 8007a56:	e002      	b.n	8007a5e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a6a:	d121      	bne.n	8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d017      	beq.n	8007aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a78:	4b17      	ldr	r3, [pc, #92]	@ (8007ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7c:	0e1b      	lsrs	r3, r3, #24
 8007a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007aa6:	e010      	b.n	8007aca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
}
 8007aae:	e00c      	b.n	8007aca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]
}
 8007ab6:	e008      	b.n	8007aca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	609a      	str	r2, [r3, #8]
}
 8007aca:	bf00      	nop
 8007acc:	372c      	adds	r7, #44	@ 0x2c
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	44020c00 	.word	0x44020c00
 8007adc:	03d09000 	.word	0x03d09000
 8007ae0:	46000000 	.word	0x46000000
 8007ae4:	4a742400 	.word	0x4a742400
 8007ae8:	4af42400 	.word	0x4af42400

08007aec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b08b      	sub	sp, #44	@ 0x2c
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007af4:	4bae      	ldr	r3, [pc, #696]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007afe:	4bac      	ldr	r3, [pc, #688]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007b08:	4ba9      	ldr	r3, [pc, #676]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0c:	0a1b      	lsrs	r3, r3, #8
 8007b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b12:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007b14:	4ba6      	ldr	r3, [pc, #664]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	091b      	lsrs	r3, r3, #4
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007b20:	4ba3      	ldr	r3, [pc, #652]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	08db      	lsrs	r3, r3, #3
 8007b26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	fb02 f303 	mul.w	r3, r2, r3
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b38:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 8126 	beq.w	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d053      	beq.n	8007bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d86f      	bhi.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d003      	beq.n	8007b5e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d02b      	beq.n	8007bb4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007b5c:	e068      	b.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b5e:	4b94      	ldr	r3, [pc, #592]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	08db      	lsrs	r3, r3, #3
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	4a92      	ldr	r2, [pc, #584]	@ (8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b96:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007bb2:	e068      	b.n	8007c86 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007bd4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007bf0:	e049      	b.n	8007c86 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c12:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007c2e:	e02a      	b.n	8007c86 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c30:	4b5f      	ldr	r3, [pc, #380]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	08db      	lsrs	r3, r3, #3
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c40:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	ee07 3a90 	vmov	s15, r3
 8007c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c64:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c68:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c84:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c86:	4b4a      	ldr	r3, [pc, #296]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c92:	d121      	bne.n	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007c94:	4b46      	ldr	r3, [pc, #280]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d017      	beq.n	8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ca0:	4b43      	ldr	r3, [pc, #268]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca4:	0a5b      	lsrs	r3, r3, #9
 8007ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cb6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007cba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e006      	b.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cde:	4b34      	ldr	r3, [pc, #208]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cea:	d121      	bne.n	8007d30 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007cec:	4b30      	ldr	r3, [pc, #192]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d017      	beq.n	8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d12:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	e006      	b.n	8007d36 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	e002      	b.n	8007d36 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d36:	4b1e      	ldr	r3, [pc, #120]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d42:	d121      	bne.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007d44:	4b1a      	ldr	r3, [pc, #104]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007d50:	4b17      	ldr	r3, [pc, #92]	@ (8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d54:	0e1b      	lsrs	r3, r3, #24
 8007d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d76:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d7e:	e010      	b.n	8007da2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	609a      	str	r2, [r3, #8]
}
 8007d86:	e00c      	b.n	8007da2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	609a      	str	r2, [r3, #8]
}
 8007d8e:	e008      	b.n	8007da2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	609a      	str	r2, [r3, #8]
}
 8007da2:	bf00      	nop
 8007da4:	372c      	adds	r7, #44	@ 0x2c
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	44020c00 	.word	0x44020c00
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	46000000 	.word	0x46000000
 8007dbc:	4a742400 	.word	0x4a742400
 8007dc0:	4af42400 	.word	0x4af42400

08007dc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b08b      	sub	sp, #44	@ 0x2c
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007dcc:	4bae      	ldr	r3, [pc, #696]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007dd6:	4bac      	ldr	r3, [pc, #688]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007de0:	4ba9      	ldr	r3, [pc, #676]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de4:	0a1b      	lsrs	r3, r3, #8
 8007de6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dea:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007dec:	4ba6      	ldr	r3, [pc, #664]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df0:	091b      	lsrs	r3, r3, #4
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007df8:	4ba3      	ldr	r3, [pc, #652]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dfc:	08db      	lsrs	r3, r3, #3
 8007dfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	fb02 f303 	mul.w	r3, r2, r3
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e10:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 8126 	beq.w	8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d053      	beq.n	8007eca <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d86f      	bhi.n	8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d003      	beq.n	8007e36 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d02b      	beq.n	8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007e34:	e068      	b.n	8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e36:	4b94      	ldr	r3, [pc, #592]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	08db      	lsrs	r3, r3, #3
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	4a92      	ldr	r2, [pc, #584]	@ (800808c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007e42:	fa22 f303 	lsr.w	r3, r2, r3
 8007e46:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e6e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008090 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007e8a:	e068      	b.n	8007f5e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea8:	ed97 6a04 	vldr	s12, [r7, #16]
 8007eac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008090 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007ec8:	e049      	b.n	8007f5e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007eea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008090 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007f06:	e02a      	b.n	8007f5e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f08:	4b5f      	ldr	r3, [pc, #380]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	08db      	lsrs	r3, r3, #3
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	4a5e      	ldr	r2, [pc, #376]	@ (800808c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
 8007f18:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	ee07 3a90 	vmov	s15, r3
 8007f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f40:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008090 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007f5c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f6a:	d121      	bne.n	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007f6c:	4b46      	ldr	r3, [pc, #280]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d017      	beq.n	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f78:	4b43      	ldr	r3, [pc, #268]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7c:	0a5b      	lsrs	r3, r3, #9
 8007f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e006      	b.n	8007fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e002      	b.n	8007fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fb6:	4b34      	ldr	r3, [pc, #208]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc2:	d121      	bne.n	8008008 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007fc4:	4b30      	ldr	r3, [pc, #192]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d017      	beq.n	8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007fe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007fea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	e006      	b.n	800800e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	e002      	b.n	800800e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800800e:	4b1e      	ldr	r3, [pc, #120]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800801a:	d121      	bne.n	8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800801c:	4b1a      	ldr	r3, [pc, #104]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d017      	beq.n	8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008028:	4b17      	ldr	r3, [pc, #92]	@ (8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800802a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802c:	0e1b      	lsrs	r3, r3, #24
 800802e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800803a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800803e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008042:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800804e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008056:	e010      	b.n	800807a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	609a      	str	r2, [r3, #8]
}
 800805e:	e00c      	b.n	800807a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	609a      	str	r2, [r3, #8]
}
 8008066:	e008      	b.n	800807a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
}
 800807a:	bf00      	nop
 800807c:	372c      	adds	r7, #44	@ 0x2c
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	44020c00 	.word	0x44020c00
 800808c:	03d09000 	.word	0x03d09000
 8008090:	46000000 	.word	0x46000000
 8008094:	4a742400 	.word	0x4a742400
 8008098:	4af42400 	.word	0x4af42400

0800809c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b08f      	sub	sp, #60	@ 0x3c
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80080a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080aa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80080ae:	4321      	orrs	r1, r4
 80080b0:	d150      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80080b2:	4b26      	ldr	r3, [pc, #152]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080bc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80080be:	4b23      	ldr	r3, [pc, #140]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d108      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d2:	d104      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80080d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080da:	f002 bb2a 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80080de:	4b1b      	ldr	r3, [pc, #108]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ec:	d108      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f4:	d104      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80080f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80080fc:	f002 bb19 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008100:	4b12      	ldr	r3, [pc, #72]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800810c:	d119      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008114:	d115      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800811e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008122:	d30a      	bcc.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008124:	4b09      	ldr	r3, [pc, #36]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	0a1b      	lsrs	r3, r3, #8
 800812a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800812e:	4a08      	ldr	r2, [pc, #32]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008136:	f002 bafc 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800813e:	f002 baf8 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
 8008146:	f002 baf4 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800814a:	bf00      	nop
 800814c:	44020c00 	.word	0x44020c00
 8008150:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008158:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800815c:	ea50 0104 	orrs.w	r1, r0, r4
 8008160:	f001 8275 	beq.w	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8008164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008168:	2801      	cmp	r0, #1
 800816a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800816e:	f082 82dd 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008176:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800817a:	ea50 0104 	orrs.w	r1, r0, r4
 800817e:	f001 816c 	beq.w	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8008182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008186:	2801      	cmp	r0, #1
 8008188:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800818c:	f082 82ce 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008194:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008198:	ea50 0104 	orrs.w	r1, r0, r4
 800819c:	f001 8602 	beq.w	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80081a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a4:	2801      	cmp	r0, #1
 80081a6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80081aa:	f082 82bf 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081b2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80081b6:	ea50 0104 	orrs.w	r1, r0, r4
 80081ba:	f001 854c 	beq.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80081be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c2:	2801      	cmp	r0, #1
 80081c4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80081c8:	f082 82b0 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80081d4:	ea50 0104 	orrs.w	r1, r0, r4
 80081d8:	f001 849e 	beq.w	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80081dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e0:	2801      	cmp	r0, #1
 80081e2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80081e6:	f082 82a1 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ee:	f1a1 0420 	sub.w	r4, r1, #32
 80081f2:	ea50 0104 	orrs.w	r1, r0, r4
 80081f6:	f001 83e8 	beq.w	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80081fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081fe:	2801      	cmp	r0, #1
 8008200:	f171 0120 	sbcs.w	r1, r1, #32
 8008204:	f082 8292 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800820c:	f1a1 0410 	sub.w	r4, r1, #16
 8008210:	ea50 0104 	orrs.w	r1, r0, r4
 8008214:	f002 8256 	beq.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800821c:	2801      	cmp	r0, #1
 800821e:	f171 0110 	sbcs.w	r1, r1, #16
 8008222:	f082 8283 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800822a:	f1a1 0408 	sub.w	r4, r1, #8
 800822e:	ea50 0104 	orrs.w	r1, r0, r4
 8008232:	f002 81cc 	beq.w	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008236:	e9d7 0100 	ldrd	r0, r1, [r7]
 800823a:	2801      	cmp	r0, #1
 800823c:	f171 0108 	sbcs.w	r1, r1, #8
 8008240:	f082 8274 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008248:	1f0c      	subs	r4, r1, #4
 800824a:	ea50 0104 	orrs.w	r1, r0, r4
 800824e:	f001 8648 	beq.w	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8008252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008256:	2801      	cmp	r0, #1
 8008258:	f171 0104 	sbcs.w	r1, r1, #4
 800825c:	f082 8266 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008264:	1e8c      	subs	r4, r1, #2
 8008266:	ea50 0104 	orrs.w	r1, r0, r4
 800826a:	f002 8143 	beq.w	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800826e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008272:	2801      	cmp	r0, #1
 8008274:	f171 0102 	sbcs.w	r1, r1, #2
 8008278:	f082 8258 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800827c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008280:	1e4c      	subs	r4, r1, #1
 8008282:	ea50 0104 	orrs.w	r1, r0, r4
 8008286:	f002 80ce 	beq.w	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800828a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800828e:	2801      	cmp	r0, #1
 8008290:	f171 0101 	sbcs.w	r1, r1, #1
 8008294:	f082 824a 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80082a0:	4321      	orrs	r1, r4
 80082a2:	f002 8059 	beq.w	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80082a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082aa:	4cd9      	ldr	r4, [pc, #868]	@ (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80082ac:	42a0      	cmp	r0, r4
 80082ae:	f171 0100 	sbcs.w	r1, r1, #0
 80082b2:	f082 823b 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ba:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80082be:	4321      	orrs	r1, r4
 80082c0:	f001 87d9 	beq.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80082c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082c8:	4cd2      	ldr	r4, [pc, #840]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80082ca:	42a0      	cmp	r0, r4
 80082cc:	f171 0100 	sbcs.w	r1, r1, #0
 80082d0:	f082 822c 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082d8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80082dc:	4321      	orrs	r1, r4
 80082de:	f001 8751 	beq.w	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80082e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082e6:	4ccc      	ldr	r4, [pc, #816]	@ (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	f171 0100 	sbcs.w	r1, r1, #0
 80082ee:	f082 821d 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082f6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80082fa:	4321      	orrs	r1, r4
 80082fc:	f001 869a 	beq.w	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008304:	4cc5      	ldr	r4, [pc, #788]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008306:	42a0      	cmp	r0, r4
 8008308:	f171 0100 	sbcs.w	r1, r1, #0
 800830c:	f082 820e 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008314:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008318:	4321      	orrs	r1, r4
 800831a:	f001 8612 	beq.w	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800831e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008322:	4cbf      	ldr	r4, [pc, #764]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008324:	42a0      	cmp	r0, r4
 8008326:	f171 0100 	sbcs.w	r1, r1, #0
 800832a:	f082 81ff 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800832e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008332:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008336:	4321      	orrs	r1, r4
 8008338:	f002 817e 	beq.w	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800833c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008340:	4cb8      	ldr	r4, [pc, #736]	@ (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008342:	42a0      	cmp	r0, r4
 8008344:	f171 0100 	sbcs.w	r1, r1, #0
 8008348:	f082 81f0 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800834c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008350:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8008354:	4321      	orrs	r1, r4
 8008356:	f000 829e 	beq.w	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800835a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800835e:	4cb2      	ldr	r4, [pc, #712]	@ (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008360:	42a0      	cmp	r0, r4
 8008362:	f171 0100 	sbcs.w	r1, r1, #0
 8008366:	f082 81e1 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800836a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800836e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008372:	4321      	orrs	r1, r4
 8008374:	f000 826d 	beq.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800837c:	4cab      	ldr	r4, [pc, #684]	@ (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800837e:	42a0      	cmp	r0, r4
 8008380:	f171 0100 	sbcs.w	r1, r1, #0
 8008384:	f082 81d2 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800838c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008390:	4321      	orrs	r1, r4
 8008392:	f001 800d 	beq.w	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800839a:	4ca5      	ldr	r4, [pc, #660]	@ (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800839c:	42a0      	cmp	r0, r4
 800839e:	f171 0100 	sbcs.w	r1, r1, #0
 80083a2:	f082 81c3 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083aa:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80083ae:	4321      	orrs	r1, r4
 80083b0:	f000 81d0 	beq.w	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80083b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083b8:	4c9e      	ldr	r4, [pc, #632]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80083ba:	42a0      	cmp	r0, r4
 80083bc:	f171 0100 	sbcs.w	r1, r1, #0
 80083c0:	f082 81b4 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083c8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80083cc:	4321      	orrs	r1, r4
 80083ce:	f000 8142 	beq.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80083d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083d6:	4c98      	ldr	r4, [pc, #608]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80083d8:	42a0      	cmp	r0, r4
 80083da:	f171 0100 	sbcs.w	r1, r1, #0
 80083de:	f082 81a5 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083e6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80083ea:	4321      	orrs	r1, r4
 80083ec:	f001 824e 	beq.w	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80083f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f4:	4c91      	ldr	r4, [pc, #580]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80083f6:	42a0      	cmp	r0, r4
 80083f8:	f171 0100 	sbcs.w	r1, r1, #0
 80083fc:	f082 8196 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008404:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008408:	4321      	orrs	r1, r4
 800840a:	f001 8197 	beq.w	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800840e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008412:	4c8b      	ldr	r4, [pc, #556]	@ (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008414:	42a0      	cmp	r0, r4
 8008416:	f171 0100 	sbcs.w	r1, r1, #0
 800841a:	f082 8187 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800841e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008422:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008426:	4321      	orrs	r1, r4
 8008428:	f001 8154 	beq.w	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800842c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008430:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008434:	f171 0100 	sbcs.w	r1, r1, #0
 8008438:	f082 8178 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800843c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008440:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008444:	4321      	orrs	r1, r4
 8008446:	f001 80b7 	beq.w	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800844a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800844e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008452:	42a0      	cmp	r0, r4
 8008454:	f171 0100 	sbcs.w	r1, r1, #0
 8008458:	f082 8168 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800845c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008460:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008464:	4321      	orrs	r1, r4
 8008466:	f001 8064 	beq.w	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800846a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800846e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008472:	42a0      	cmp	r0, r4
 8008474:	f171 0100 	sbcs.w	r1, r1, #0
 8008478:	f082 8158 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800847c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008480:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008484:	4321      	orrs	r1, r4
 8008486:	f001 8011 	beq.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800848a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800848e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008492:	42a0      	cmp	r0, r4
 8008494:	f171 0100 	sbcs.w	r1, r1, #0
 8008498:	f082 8148 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800849c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084a0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80084a4:	4321      	orrs	r1, r4
 80084a6:	f000 871e 	beq.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80084aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ae:	f241 0401 	movw	r4, #4097	@ 0x1001
 80084b2:	42a0      	cmp	r0, r4
 80084b4:	f171 0100 	sbcs.w	r1, r1, #0
 80084b8:	f082 8138 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084c0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80084c4:	4321      	orrs	r1, r4
 80084c6:	f000 86a8 	beq.w	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80084ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ce:	f640 0401 	movw	r4, #2049	@ 0x801
 80084d2:	42a0      	cmp	r0, r4
 80084d4:	f171 0100 	sbcs.w	r1, r1, #0
 80084d8:	f082 8128 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084e0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80084e4:	4321      	orrs	r1, r4
 80084e6:	f000 8632 	beq.w	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80084ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ee:	f240 4401 	movw	r4, #1025	@ 0x401
 80084f2:	42a0      	cmp	r0, r4
 80084f4:	f171 0100 	sbcs.w	r1, r1, #0
 80084f8:	f082 8118 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008500:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008504:	4321      	orrs	r1, r4
 8008506:	f000 85b0 	beq.w	800906a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800850a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800850e:	f240 2401 	movw	r4, #513	@ 0x201
 8008512:	42a0      	cmp	r0, r4
 8008514:	f171 0100 	sbcs.w	r1, r1, #0
 8008518:	f082 8108 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800851c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008520:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008524:	4321      	orrs	r1, r4
 8008526:	f000 8535 	beq.w	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800852a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800852e:	f240 1401 	movw	r4, #257	@ 0x101
 8008532:	42a0      	cmp	r0, r4
 8008534:	f171 0100 	sbcs.w	r1, r1, #0
 8008538:	f082 80f8 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800853c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008540:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008544:	4321      	orrs	r1, r4
 8008546:	f000 84ba 	beq.w	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800854a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800854e:	2881      	cmp	r0, #129	@ 0x81
 8008550:	f171 0100 	sbcs.w	r1, r1, #0
 8008554:	f082 80ea 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800855c:	2821      	cmp	r0, #33	@ 0x21
 800855e:	f171 0100 	sbcs.w	r1, r1, #0
 8008562:	d26f      	bcs.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008568:	4301      	orrs	r1, r0
 800856a:	f002 80df 	beq.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800856e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008572:	1e42      	subs	r2, r0, #1
 8008574:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008578:	2a20      	cmp	r2, #32
 800857a:	f173 0100 	sbcs.w	r1, r3, #0
 800857e:	f082 80d5 	bcs.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008582:	2a1f      	cmp	r2, #31
 8008584:	f202 80d2 	bhi.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008588:	a101      	add	r1, pc, #4	@ (adr r1, 8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800858a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800858e:	bf00      	nop
 8008590:	080088f1 	.word	0x080088f1
 8008594:	080089bd 	.word	0x080089bd
 8008598:	0800a72d 	.word	0x0800a72d
 800859c:	08008a7d 	.word	0x08008a7d
 80085a0:	0800a72d 	.word	0x0800a72d
 80085a4:	0800a72d 	.word	0x0800a72d
 80085a8:	0800a72d 	.word	0x0800a72d
 80085ac:	08008b4d 	.word	0x08008b4d
 80085b0:	0800a72d 	.word	0x0800a72d
 80085b4:	0800a72d 	.word	0x0800a72d
 80085b8:	0800a72d 	.word	0x0800a72d
 80085bc:	0800a72d 	.word	0x0800a72d
 80085c0:	0800a72d 	.word	0x0800a72d
 80085c4:	0800a72d 	.word	0x0800a72d
 80085c8:	0800a72d 	.word	0x0800a72d
 80085cc:	08008c2f 	.word	0x08008c2f
 80085d0:	0800a72d 	.word	0x0800a72d
 80085d4:	0800a72d 	.word	0x0800a72d
 80085d8:	0800a72d 	.word	0x0800a72d
 80085dc:	0800a72d 	.word	0x0800a72d
 80085e0:	0800a72d 	.word	0x0800a72d
 80085e4:	0800a72d 	.word	0x0800a72d
 80085e8:	0800a72d 	.word	0x0800a72d
 80085ec:	0800a72d 	.word	0x0800a72d
 80085f0:	0800a72d 	.word	0x0800a72d
 80085f4:	0800a72d 	.word	0x0800a72d
 80085f8:	0800a72d 	.word	0x0800a72d
 80085fc:	0800a72d 	.word	0x0800a72d
 8008600:	0800a72d 	.word	0x0800a72d
 8008604:	0800a72d 	.word	0x0800a72d
 8008608:	0800a72d 	.word	0x0800a72d
 800860c:	08008d05 	.word	0x08008d05
 8008610:	80000001 	.word	0x80000001
 8008614:	40000001 	.word	0x40000001
 8008618:	20000001 	.word	0x20000001
 800861c:	10000001 	.word	0x10000001
 8008620:	08000001 	.word	0x08000001
 8008624:	04000001 	.word	0x04000001
 8008628:	00800001 	.word	0x00800001
 800862c:	00400001 	.word	0x00400001
 8008630:	00200001 	.word	0x00200001
 8008634:	00100001 	.word	0x00100001
 8008638:	00080001 	.word	0x00080001
 800863c:	00040001 	.word	0x00040001
 8008640:	00020001 	.word	0x00020001
 8008644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008648:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800864c:	430b      	orrs	r3, r1
 800864e:	f000 83c4 	beq.w	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008652:	f002 b86b 	b.w	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008656:	4ba1      	ldr	r3, [pc, #644]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800865c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008660:	633b      	str	r3, [r7, #48]	@ 0x30
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008668:	d036      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008670:	d86b      	bhi.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008678:	d02b      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008680:	d863      	bhi.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008688:	d01b      	beq.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008690:	d85b      	bhi.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800869e:	d008      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80086a0:	e053      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086a2:	f107 0320 	add.w	r3, r7, #32
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff f8b4 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086b0:	e04e      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fa18 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086c0:	e046      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fb7c 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086d0:	e03e      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80086d2:	4b83      	ldr	r3, [pc, #524]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80086d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086d6:	e03b      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086d8:	4b80      	ldr	r3, [pc, #512]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086de:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086e4:	4b7d      	ldr	r3, [pc, #500]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d10c      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086f6:	4b79      	ldr	r3, [pc, #484]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	08db      	lsrs	r3, r3, #3
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	4a78      	ldr	r2, [pc, #480]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008702:	fa22 f303 	lsr.w	r3, r2, r3
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
 8008708:	e01e      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800870a:	4b74      	ldr	r3, [pc, #464]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008716:	d106      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800871e:	d102      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008720:	4b71      	ldr	r3, [pc, #452]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008722:	637b      	str	r3, [r7, #52]	@ 0x34
 8008724:	e010      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008726:	4b6d      	ldr	r3, [pc, #436]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800872e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008732:	d106      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800873a:	d102      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800873c:	4b6b      	ldr	r3, [pc, #428]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008740:	e002      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008746:	e003      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008748:	e002      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800874e:	bf00      	nop
          }
        }
        break;
 8008750:	f001 bfef 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008754:	4b61      	ldr	r3, [pc, #388]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800875a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800875e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008766:	d036      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800876e:	d86b      	bhi.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008776:	d02b      	beq.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800877e:	d863      	bhi.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008786:	d01b      	beq.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800878e:	d85b      	bhi.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008798:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800879c:	d008      	beq.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800879e:	e053      	b.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087a0:	f107 0320 	add.w	r3, r7, #32
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff f835 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087ae:	e04e      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff f999 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087be:	e046      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fafd 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087ce:	e03e      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80087d0:	4b43      	ldr	r3, [pc, #268]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087d4:	e03b      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087d6:	4b41      	ldr	r3, [pc, #260]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80087e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087e2:	4b3e      	ldr	r3, [pc, #248]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d10c      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d109      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087f4:	4b39      	ldr	r3, [pc, #228]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	4a39      	ldr	r2, [pc, #228]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	637b      	str	r3, [r7, #52]	@ 0x34
 8008806:	e01e      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008808:	4b34      	ldr	r3, [pc, #208]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008814:	d106      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881c:	d102      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800881e:	4b32      	ldr	r3, [pc, #200]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008820:	637b      	str	r3, [r7, #52]	@ 0x34
 8008822:	e010      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008824:	4b2d      	ldr	r3, [pc, #180]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800882c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008830:	d106      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008838:	d102      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800883a:	4b2c      	ldr	r3, [pc, #176]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800883c:	637b      	str	r3, [r7, #52]	@ 0x34
 800883e:	e002      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008844:	e003      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008846:	e002      	b.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800884c:	bf00      	nop
          }
        }
        break;
 800884e:	f001 bf70 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008852:	4b22      	ldr	r3, [pc, #136]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008854:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008864:	f107 0320 	add.w	r3, r7, #32
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe ffd3 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800886e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008870:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008872:	f001 bf5e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d108      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff f933 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800888a:	f001 bf52 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008892:	f001 bf4e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008896:	4b11      	ldr	r3, [pc, #68]	@ (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008898:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800889c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d108      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088a8:	f107 0320 	add.w	r3, r7, #32
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe ffb1 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088b6:	f001 bf3c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	2b80      	cmp	r3, #128	@ 0x80
 80088be:	d108      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff f911 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ce:	f001 bf30 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088d6:	f001 bf2c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088da:	bf00      	nop
 80088dc:	44020c00 	.word	0x44020c00
 80088e0:	00bb8000 	.word	0x00bb8000
 80088e4:	03d09000 	.word	0x03d09000
 80088e8:	003d0900 	.word	0x003d0900
 80088ec:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80088f0:	4b9d      	ldr	r3, [pc, #628]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d104      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008902:	f7fc ffd1 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 8008906:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008908:	f001 bf13 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800890c:	4b96      	ldr	r3, [pc, #600]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008918:	d10a      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	2b01      	cmp	r3, #1
 800891e:	d107      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008920:	f107 0314 	add.w	r3, r7, #20
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff f8e1 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
 800892e:	e043      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008930:	4b8d      	ldr	r3, [pc, #564]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800893c:	d10a      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	2b02      	cmp	r3, #2
 8008942:	d107      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008944:	f107 0308 	add.w	r3, r7, #8
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fa3b 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
 8008952:	e031      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008954:	4b84      	ldr	r3, [pc, #528]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b02      	cmp	r3, #2
 800895e:	d10c      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	2b03      	cmp	r3, #3
 8008964:	d109      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008966:	4b80      	ldr	r3, [pc, #512]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	4a7e      	ldr	r2, [pc, #504]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008972:	fa22 f303 	lsr.w	r3, r2, r3
 8008976:	637b      	str	r3, [r7, #52]	@ 0x34
 8008978:	e01e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800897a:	4b7b      	ldr	r3, [pc, #492]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008986:	d105      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	2b04      	cmp	r3, #4
 800898c:	d102      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800898e:	4b78      	ldr	r3, [pc, #480]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e011      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008994:	4b74      	ldr	r3, [pc, #464]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d106      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d103      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80089a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ae:	e003      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b4:	f001 bebd 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089b8:	f001 bebb 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80089bc:	4b6a      	ldr	r3, [pc, #424]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80089c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80089ce:	f7fc ff55 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 80089d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80089d4:	f001 bead 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80089d8:	4b63      	ldr	r3, [pc, #396]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e4:	d10a      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d107      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff f87b 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fa:	e03d      	b.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d108      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a02:	f107 0308 	add.w	r3, r7, #8
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff f9dc 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a10:	f001 be8f 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008a14:	4b54      	ldr	r3, [pc, #336]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d10c      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	2b18      	cmp	r3, #24
 8008a24:	d109      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a26:	4b50      	ldr	r3, [pc, #320]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	08db      	lsrs	r3, r3, #3
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	4a4e      	ldr	r2, [pc, #312]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008a32:	fa22 f303 	lsr.w	r3, r2, r3
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a38:	e01e      	b.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a46:	d105      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d102      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008a4e:	4b48      	ldr	r3, [pc, #288]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a52:	e011      	b.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008a54:	4b44      	ldr	r3, [pc, #272]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d106      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	2b28      	cmp	r3, #40	@ 0x28
 8008a66:	d103      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6e:	e003      	b.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a74:	f001 be5d 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a78:	f001 be5b 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a82:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a8e:	f7fc fef5 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008a92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a94:	f001 be4d 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008a98:	4b33      	ldr	r3, [pc, #204]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa4:	d10a      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	2b40      	cmp	r3, #64	@ 0x40
 8008aaa:	d107      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aac:	f107 0314 	add.w	r3, r7, #20
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff f81b 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aba:	e045      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008abc:	4b2a      	ldr	r3, [pc, #168]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ac8:	d10a      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	2b80      	cmp	r3, #128	@ 0x80
 8008ace:	d107      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad0:	f107 0308 	add.w	r3, r7, #8
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff f975 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ade:	e033      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008ae0:	4b21      	ldr	r3, [pc, #132]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d10c      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8008af0:	d109      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008af2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	08db      	lsrs	r3, r3, #3
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008afe:	fa22 f303 	lsr.w	r3, r2, r3
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b04:	e020      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008b06:	4b18      	ldr	r3, [pc, #96]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b12:	d106      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008b1c:	4b14      	ldr	r3, [pc, #80]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b20:	e012      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008b22:	4b11      	ldr	r3, [pc, #68]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008b36:	d103      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b3e:	e003      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b44:	f001 bdf5 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b48:	f001 bdf3 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b52:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008b56:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b5e:	f7fc fe8d 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008b62:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b64:	f001 bde5 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b68:	44020c00 	.word	0x44020c00
 8008b6c:	03d09000 	.word	0x03d09000
 8008b70:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008b74:	4ba0      	ldr	r3, [pc, #640]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b80:	d10b      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b88:	d107      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8a:	f107 0314 	add.w	r3, r7, #20
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe ffac 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b98:	e047      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008b9a:	4b97      	ldr	r3, [pc, #604]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ba6:	d10b      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb0:	f107 0308 	add.w	r3, r7, #8
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff f905 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bbe:	e034      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d10d      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008bd2:	d109      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bd4:	4b88      	ldr	r3, [pc, #544]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	4a87      	ldr	r2, [pc, #540]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
 8008be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be6:	e020      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008be8:	4b83      	ldr	r3, [pc, #524]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bf4:	d106      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bfc:	d102      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008bfe:	4b80      	ldr	r3, [pc, #512]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c02:	e012      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008c04:	4b7c      	ldr	r3, [pc, #496]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d107      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008c18:	d103      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c20:	e003      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c26:	f001 bd84 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c2a:	f001 bd82 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008c2e:	4b72      	ldr	r3, [pc, #456]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c34:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008c38:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d104      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c40:	f7fc fe1c 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008c44:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c46:	f001 bd74 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c56:	d10b      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c5e:	d107      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c60:	f107 0314 	add.w	r3, r7, #20
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe ff41 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6e:	e047      	b.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008c70:	4b61      	ldr	r3, [pc, #388]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7c:	d10b      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c84:	d107      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff f89a 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c94:	e034      	b.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c96:	4b58      	ldr	r3, [pc, #352]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d10d      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ca8:	d109      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008caa:	4b53      	ldr	r3, [pc, #332]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	08db      	lsrs	r3, r3, #3
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	4a51      	ldr	r2, [pc, #324]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e020      	b.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cca:	d106      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cd2:	d102      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd8:	e012      	b.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008cda:	4b47      	ldr	r3, [pc, #284]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d107      	bne.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008cee:	d103      	bne.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf6:	e003      	b.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cfc:	f001 bd19 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d00:	f001 bd17 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008d04:	4b3c      	ldr	r3, [pc, #240]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008d0a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008d0e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d104      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d16:	f7fc fdb1 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008d1a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d1c:	f001 bd09 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008d20:	4b35      	ldr	r3, [pc, #212]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d2c:	d10b      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d34:	d107      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d36:	f107 0314 	add.w	r3, r7, #20
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fed6 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d44:	e047      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008d46:	4b2c      	ldr	r3, [pc, #176]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d52:	d10b      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5a:	d107      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d5c:	f107 0308 	add.w	r3, r7, #8
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff f82f 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d6a:	e034      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008d6c:	4b22      	ldr	r3, [pc, #136]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d10d      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008d7e:	d109      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d80:	4b1d      	ldr	r3, [pc, #116]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	08db      	lsrs	r3, r3, #3
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d92:	e020      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008d94:	4b18      	ldr	r3, [pc, #96]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008da0:	d106      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da8:	d102      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008daa:	4b15      	ldr	r3, [pc, #84]	@ (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dae:	e012      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008db0:	4b11      	ldr	r3, [pc, #68]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d107      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008dc4:	d103      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dcc:	e003      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dd2:	f001 bcae 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008dd6:	f001 bcac 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008dda:	4b07      	ldr	r3, [pc, #28]	@ (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008de0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008de4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10b      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dec:	f7fc fd46 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008df0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008df2:	f001 bc9e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008df6:	bf00      	nop
 8008df8:	44020c00 	.word	0x44020c00
 8008dfc:	03d09000 	.word	0x03d09000
 8008e00:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008e04:	4ba0      	ldr	r3, [pc, #640]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e10:	d10b      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e18:	d107      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1a:	f107 0314 	add.w	r3, r7, #20
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fe64 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e28:	e047      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008e2a:	4b97      	ldr	r3, [pc, #604]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e36:	d10b      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008e3e:	d107      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe ffbd 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4e:	e034      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008e50:	4b8d      	ldr	r3, [pc, #564]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d10d      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008e62:	d109      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e64:	4b88      	ldr	r3, [pc, #544]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	08db      	lsrs	r3, r3, #3
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	4a87      	ldr	r2, [pc, #540]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e76:	e020      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008e78:	4b83      	ldr	r3, [pc, #524]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e84:	d106      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e8c:	d102      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008e8e:	4b80      	ldr	r3, [pc, #512]	@ (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e92:	e012      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008e94:	4b7c      	ldr	r3, [pc, #496]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008ea8:	d103      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eb0:	e003      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eb6:	f001 bc3c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008eba:	f001 bc3a 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008ebe:	4b72      	ldr	r3, [pc, #456]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ec4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008ec8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ed0:	f7fc fcd4 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008ed4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ed6:	f001 bc2c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008eda:	4b6b      	ldr	r3, [pc, #428]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ee2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ee6:	d10b      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eee:	d107      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef0:	f107 0314 	add.w	r3, r7, #20
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fdf9 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efe:	e047      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008f00:	4b61      	ldr	r3, [pc, #388]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f0c:	d10b      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f14:	d107      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe ff52 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f24:	e034      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008f26:	4b58      	ldr	r3, [pc, #352]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d10d      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f38:	d109      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f3a:	4b53      	ldr	r3, [pc, #332]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	08db      	lsrs	r3, r3, #3
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	4a51      	ldr	r2, [pc, #324]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008f46:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4c:	e020      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008f4e:	4b4e      	ldr	r3, [pc, #312]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f5a:	d106      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f62:	d102      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008f64:	4b4a      	ldr	r3, [pc, #296]	@ (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f68:	e012      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008f6a:	4b47      	ldr	r3, [pc, #284]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d107      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008f7e:	d103      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f86:	e003      	b.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f8c:	f001 bbd1 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f90:	f001 bbcf 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008f94:	4b3c      	ldr	r3, [pc, #240]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f9a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008f9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fa6:	f7fc fc69 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8008faa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fac:	f001 bbc1 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008fb0:	4b35      	ldr	r3, [pc, #212]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fbc:	d10b      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fc4:	d107      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc6:	f107 0314 	add.w	r3, r7, #20
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fd8e 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd4:	e047      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fe2:	d10b      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fea:	d107      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fec:	f107 0308 	add.w	r3, r7, #8
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe fee7 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffa:	e034      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008ffc:	4b22      	ldr	r3, [pc, #136]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b02      	cmp	r3, #2
 8009006:	d10d      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800900e:	d109      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009010:	4b1d      	ldr	r3, [pc, #116]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	08db      	lsrs	r3, r3, #3
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	4a1c      	ldr	r2, [pc, #112]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800901c:	fa22 f303 	lsr.w	r3, r2, r3
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
 8009022:	e020      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8009024:	4b18      	ldr	r3, [pc, #96]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800902c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009030:	d106      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009038:	d102      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800903a:	4b15      	ldr	r3, [pc, #84]	@ (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
 800903e:	e012      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8009040:	4b11      	ldr	r3, [pc, #68]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b02      	cmp	r3, #2
 800904c:	d107      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009054:	d103      	bne.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8009056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800905a:	637b      	str	r3, [r7, #52]	@ 0x34
 800905c:	e003      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009062:	f001 bb66 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009066:	f001 bb64 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800906a:	4b07      	ldr	r3, [pc, #28]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800906c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009070:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8009074:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10b      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800907c:	f7fc fbfe 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8009080:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8009082:	f001 bb56 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009086:	bf00      	nop
 8009088:	44020c00 	.word	0x44020c00
 800908c:	03d09000 	.word	0x03d09000
 8009090:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009094:	4ba1      	ldr	r3, [pc, #644]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800909c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090a0:	d10b      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090a8:	d107      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090aa:	f107 0314 	add.w	r3, r7, #20
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fd1c 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b8:	e047      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80090ba:	4b98      	ldr	r3, [pc, #608]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c6:	d10b      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ce:	d107      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d0:	f107 0308 	add.w	r3, r7, #8
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fe fe75 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090de:	e034      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80090e0:	4b8e      	ldr	r3, [pc, #568]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d10d      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80090f2:	d109      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090f4:	4b89      	ldr	r3, [pc, #548]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	08db      	lsrs	r3, r3, #3
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	4a88      	ldr	r2, [pc, #544]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
 8009104:	637b      	str	r3, [r7, #52]	@ 0x34
 8009106:	e020      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009108:	4b84      	ldr	r3, [pc, #528]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009114:	d106      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911c:	d102      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800911e:	4b81      	ldr	r3, [pc, #516]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009120:	637b      	str	r3, [r7, #52]	@ 0x34
 8009122:	e012      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8009124:	4b7d      	ldr	r3, [pc, #500]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b02      	cmp	r3, #2
 8009130:	d107      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8009138:	d103      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800913a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009140:	e003      	b.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009146:	f001 baf4 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800914a:	f001 baf2 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800914e:	4b73      	ldr	r3, [pc, #460]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009150:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009160:	f7fc fb8c 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8009164:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8009166:	f001 bae4 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800916a:	4b6c      	ldr	r3, [pc, #432]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009176:	d10a      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	2b01      	cmp	r3, #1
 800917c:	d107      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fcb2 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
 800918c:	e043      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800918e:	4b63      	ldr	r3, [pc, #396]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800919a:	d10a      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d107      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a2:	f107 0308 	add.w	r3, r7, #8
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fe0c 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b0:	e031      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80091b2:	4b5a      	ldr	r3, [pc, #360]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d10c      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d109      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091c4:	4b55      	ldr	r3, [pc, #340]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	08db      	lsrs	r3, r3, #3
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	4a54      	ldr	r2, [pc, #336]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80091d0:	fa22 f303 	lsr.w	r3, r2, r3
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d6:	e01e      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80091d8:	4b50      	ldr	r3, [pc, #320]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e4:	d105      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80091e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d102      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80091ec:	4b4d      	ldr	r3, [pc, #308]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f0:	e011      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80091f2:	4b4a      	ldr	r3, [pc, #296]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091f8:	f003 0302 	and.w	r3, r3, #2
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d106      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	2b05      	cmp	r3, #5
 8009204:	d103      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8009206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
 800920c:	e003      	b.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009212:	f001 ba8e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009216:	f001 ba8c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800921a:	4b40      	ldr	r3, [pc, #256]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800921c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009220:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800922c:	f7fc fb26 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8009230:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8009232:	f001 ba7e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009236:	4b39      	ldr	r3, [pc, #228]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800923e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009242:	d10a      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	2b10      	cmp	r3, #16
 8009248:	d107      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924a:	f107 0314 	add.w	r3, r7, #20
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fc4c 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34
 8009258:	e043      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800925a:	4b30      	ldr	r3, [pc, #192]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009266:	d10a      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	2b20      	cmp	r3, #32
 800926c:	d107      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fda6 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
 800927c:	e031      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800927e:	4b27      	ldr	r3, [pc, #156]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b02      	cmp	r3, #2
 8009288:	d10c      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	2b30      	cmp	r3, #48	@ 0x30
 800928e:	d109      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009290:	4b22      	ldr	r3, [pc, #136]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	08db      	lsrs	r3, r3, #3
 8009296:	f003 0303 	and.w	r3, r3, #3
 800929a:	4a21      	ldr	r2, [pc, #132]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a2:	e01e      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80092a4:	4b1d      	ldr	r3, [pc, #116]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b0:	d105      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	2b40      	cmp	r3, #64	@ 0x40
 80092b6:	d102      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80092b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80092ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80092bc:	e011      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80092be:	4b17      	ldr	r3, [pc, #92]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80092c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d106      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	2b50      	cmp	r3, #80	@ 0x50
 80092d0:	d103      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80092d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d8:	e003      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092de:	f001 ba28 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092e2:	f001 ba26 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80092e6:	4b0d      	ldr	r3, [pc, #52]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80092e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80092f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80092f8:	f7fc faec 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 80092fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80092fe:	f001 ba18 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009308:	d10e      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930a:	f107 0314 	add.w	r3, r7, #20
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fbec 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009318:	f001 ba0b 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800931c:	44020c00 	.word	0x44020c00
 8009320:	03d09000 	.word	0x03d09000
 8009324:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800932e:	d108      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fd45 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800933e:	f001 b9f8 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009342:	4ba4      	ldr	r3, [pc, #656]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b02      	cmp	r3, #2
 800934c:	d10d      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009354:	d109      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009356:	4b9f      	ldr	r3, [pc, #636]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	08db      	lsrs	r3, r3, #3
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	4a9d      	ldr	r2, [pc, #628]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009362:	fa22 f303 	lsr.w	r3, r2, r3
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
 8009368:	e020      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800936a:	4b9a      	ldr	r3, [pc, #616]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009376:	d106      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800937e:	d102      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009380:	4b96      	ldr	r3, [pc, #600]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009382:	637b      	str	r3, [r7, #52]	@ 0x34
 8009384:	e012      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009386:	4b93      	ldr	r3, [pc, #588]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b02      	cmp	r3, #2
 8009392:	d107      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800939a:	d103      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800939c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a2:	e003      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093a8:	f001 b9c3 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093ac:	f001 b9c1 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80093b0:	4b88      	ldr	r3, [pc, #544]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d104      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80093c2:	f7fc fa3f 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 80093c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80093c8:	f001 b9b3 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d104      	bne.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80093d2:	f7fc f90b 	bl	80055ec <HAL_RCC_GetSysClockFreq>
 80093d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80093d8:	f001 b9ab 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d108      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e2:	f107 0314 	add.w	r3, r7, #20
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fb80 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093f0:	f001 b99f 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80093f4:	4b77      	ldr	r3, [pc, #476]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009400:	d105      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	2b03      	cmp	r3, #3
 8009406:	d102      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009408:	4b75      	ldr	r3, [pc, #468]	@ (80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34
 800940c:	e023      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800940e:	4b71      	ldr	r3, [pc, #452]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b02      	cmp	r3, #2
 8009418:	d10c      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	2b04      	cmp	r3, #4
 800941e:	d109      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009420:	4b6c      	ldr	r3, [pc, #432]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	08db      	lsrs	r3, r3, #3
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	4a6b      	ldr	r2, [pc, #428]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800942c:	fa22 f303 	lsr.w	r3, r2, r3
 8009430:	637b      	str	r3, [r7, #52]	@ 0x34
 8009432:	e010      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009434:	4b67      	ldr	r3, [pc, #412]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800943c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009440:	d105      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	2b05      	cmp	r3, #5
 8009446:	d102      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009448:	4b64      	ldr	r3, [pc, #400]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34
 800944c:	e003      	b.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009452:	f001 b96e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009456:	f001 b96c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800945a:	4b5e      	ldr	r3, [pc, #376]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800945c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009466:	4b5b      	ldr	r3, [pc, #364]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b02      	cmp	r3, #2
 8009472:	d106      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800947a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009480:	e012      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009482:	4b54      	ldr	r3, [pc, #336]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800948c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009490:	d106      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	2b08      	cmp	r3, #8
 8009496:	d103      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009498:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80094a4:	f001 b945 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094a8:	f001 b943 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80094ac:	4b49      	ldr	r3, [pc, #292]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d104      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094be:	f7fc f9dd 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 80094c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80094c4:	f001 b935 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80094c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ce:	d108      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d0:	f107 0308 	add.w	r3, r7, #8
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fc75 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094de:	f001 b928 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80094e2:	4b3c      	ldr	r3, [pc, #240]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d10d      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f4:	d109      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094f6:	4b37      	ldr	r3, [pc, #220]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	08db      	lsrs	r3, r3, #3
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	4a35      	ldr	r2, [pc, #212]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009502:	fa22 f303 	lsr.w	r3, r2, r3
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
 8009508:	e011      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800950a:	4b32      	ldr	r3, [pc, #200]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009516:	d106      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800951e:	d102      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009520:	4b2e      	ldr	r3, [pc, #184]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009522:	637b      	str	r3, [r7, #52]	@ 0x34
 8009524:	e003      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800952a:	f001 b902 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800952e:	f001 b900 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009532:	4b28      	ldr	r3, [pc, #160]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009534:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009538:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800953c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009544:	f7fc f99a 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8009548:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800954a:	f001 b8f2 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009554:	d108      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fc32 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009564:	f001 b8e5 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009568:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b02      	cmp	r3, #2
 8009572:	d10d      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800957a:	d109      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800957c:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	08db      	lsrs	r3, r3, #3
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	4a14      	ldr	r2, [pc, #80]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
 800958e:	e011      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009590:	4b10      	ldr	r3, [pc, #64]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800959c:	d106      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80095a4:	d102      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80095a6:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095aa:	e003      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095b0:	f001 b8bf 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095b4:	f001 b8bd 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80095b8:	4b06      	ldr	r3, [pc, #24]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80095ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80095c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10c      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095ca:	f7fc f983 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 80095ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80095d0:	f001 b8af 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095d4:	44020c00 	.word	0x44020c00
 80095d8:	03d09000 	.word	0x03d09000
 80095dc:	003d0900 	.word	0x003d0900
 80095e0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80095e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ea:	d108      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fbe7 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095fa:	f001 b89a 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80095fe:	4b9f      	ldr	r3, [pc, #636]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b02      	cmp	r3, #2
 8009608:	d10d      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009610:	d109      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009612:	4b9a      	ldr	r3, [pc, #616]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	08db      	lsrs	r3, r3, #3
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	4a98      	ldr	r2, [pc, #608]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800961e:	fa22 f303 	lsr.w	r3, r2, r3
 8009622:	637b      	str	r3, [r7, #52]	@ 0x34
 8009624:	e011      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009626:	4b95      	ldr	r3, [pc, #596]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800962e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009632:	d106      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800963a:	d102      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800963c:	4b91      	ldr	r3, [pc, #580]	@ (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800963e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009640:	e003      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009646:	f001 b874 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800964a:	f001 b872 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800964e:	4b8b      	ldr	r3, [pc, #556]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009654:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009658:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800965a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009660:	f7fc f938 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 8009664:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009666:	f001 b864 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009670:	d108      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009672:	f107 0308 	add.w	r3, r7, #8
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fba4 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009680:	f001 b857 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009684:	4b7d      	ldr	r3, [pc, #500]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b02      	cmp	r3, #2
 800968e:	d10d      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009696:	d109      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009698:	4b78      	ldr	r3, [pc, #480]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	08db      	lsrs	r3, r3, #3
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	4a77      	ldr	r2, [pc, #476]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80096a4:	fa22 f303 	lsr.w	r3, r2, r3
 80096a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096aa:	e011      	b.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80096ac:	4b73      	ldr	r3, [pc, #460]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096b8:	d106      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80096c0:	d102      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80096c2:	4b70      	ldr	r3, [pc, #448]	@ (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80096c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c6:	e003      	b.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096cc:	f001 b831 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096d0:	f001 b82f 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80096d4:	4b69      	ldr	r3, [pc, #420]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80096da:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80096de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80096e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d104      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80096e6:	f7fc f8c9 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 80096ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80096ec:	f001 b821 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80096f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096f6:	d108      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f8:	f107 0308 	add.w	r3, r7, #8
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fb61 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009706:	f001 b814 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800970a:	4b5c      	ldr	r3, [pc, #368]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d10e      	bne.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800971c:	d10a      	bne.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800971e:	4b57      	ldr	r3, [pc, #348]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	08db      	lsrs	r3, r3, #3
 8009724:	f003 0303 	and.w	r3, r3, #3
 8009728:	4a55      	ldr	r2, [pc, #340]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800972a:	fa22 f303 	lsr.w	r3, r2, r3
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009730:	f000 bfff 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009738:	f000 bffb 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800973c:	4b4f      	ldr	r3, [pc, #316]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800973e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009742:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009746:	633b      	str	r3, [r7, #48]	@ 0x30
 8009748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800974e:	d056      	beq.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009756:	f200 808b 	bhi.w	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009760:	d03e      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009768:	f200 8082 	bhi.w	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009772:	d027      	beq.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800977a:	d879      	bhi.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009782:	d017      	beq.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800978a:	d871      	bhi.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009798:	d004      	beq.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800979a:	e069      	b.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800979c:	f7fc f89a 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 80097a0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80097a2:	e068      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097a4:	f107 0314 	add.w	r3, r7, #20
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe f99f 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097b2:	e060      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fb03 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097c2:	e058      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80097c4:	4b2d      	ldr	r3, [pc, #180]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d103      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80097d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097d8:	e04d      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097de:	e04a      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80097e0:	4b26      	ldr	r3, [pc, #152]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097ee:	d103      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80097f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097f6:	e03e      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097fc:	e03b      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097fe:	4b1f      	ldr	r3, [pc, #124]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009804:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009808:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800980a:	4b1c      	ldr	r3, [pc, #112]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b02      	cmp	r3, #2
 8009814:	d10c      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800981c:	4b17      	ldr	r3, [pc, #92]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	08db      	lsrs	r3, r3, #3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	4a16      	ldr	r2, [pc, #88]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
 800982e:	e01e      	b.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009830:	4b12      	ldr	r3, [pc, #72]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800983c:	d106      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009844:	d102      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009846:	4b0f      	ldr	r3, [pc, #60]	@ (8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
 800984a:	e010      	b.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800984c:	4b0b      	ldr	r3, [pc, #44]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009858:	d106      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800985a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009860:	d102      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009862:	4b09      	ldr	r3, [pc, #36]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009864:	637b      	str	r3, [r7, #52]	@ 0x34
 8009866:	e002      	b.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800986c:	e003      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800986e:	e002      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009874:	bf00      	nop
          }
        }
        break;
 8009876:	f000 bf5c 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800987a:	bf00      	nop
 800987c:	44020c00 	.word	0x44020c00
 8009880:	03d09000 	.word	0x03d09000
 8009884:	003d0900 	.word	0x003d0900
 8009888:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800988c:	4b9e      	ldr	r3, [pc, #632]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800988e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009892:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009896:	633b      	str	r3, [r7, #48]	@ 0x30
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800989e:	d056      	beq.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80098a6:	f200 808b 	bhi.w	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b0:	d03e      	beq.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b8:	f200 8082 	bhi.w	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098c2:	d027      	beq.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098ca:	d879      	bhi.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d2:	d017      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80098d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098da:	d871      	bhi.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80098dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e8:	d004      	beq.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80098ea:	e069      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80098ec:	f7fb ffc6 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 80098f0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80098f2:	e068      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f4:	f107 0314 	add.w	r3, r7, #20
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe f8f7 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009902:	e060      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009904:	f107 0308 	add.w	r3, r7, #8
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe fa5b 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009912:	e058      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009914:	4b7c      	ldr	r3, [pc, #496]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b02      	cmp	r3, #2
 8009920:	d103      	bne.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009926:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009928:	e04d      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800992e:	e04a      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009930:	4b75      	ldr	r3, [pc, #468]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800993a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800993e:	d103      	bne.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009940:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009944:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009946:	e03e      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800994c:	e03b      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800994e:	4b6e      	ldr	r3, [pc, #440]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009954:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800995a:	4b6b      	ldr	r3, [pc, #428]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0302 	and.w	r3, r3, #2
 8009962:	2b02      	cmp	r3, #2
 8009964:	d10c      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d109      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800996c:	4b66      	ldr	r3, [pc, #408]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	08db      	lsrs	r3, r3, #3
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	4a65      	ldr	r2, [pc, #404]	@ (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
 800997c:	637b      	str	r3, [r7, #52]	@ 0x34
 800997e:	e01e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009980:	4b61      	ldr	r3, [pc, #388]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800998c:	d106      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009994:	d102      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009996:	4b5e      	ldr	r3, [pc, #376]	@ (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
 800999a:	e010      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800999c:	4b5a      	ldr	r3, [pc, #360]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a8:	d106      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80099aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099b0:	d102      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099b2:	4b58      	ldr	r3, [pc, #352]	@ (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b6:	e002      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099bc:	e003      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80099be:	e002      	b.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099c4:	bf00      	nop
          }
        }
        break;
 80099c6:	f000 beb4 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80099ca:	4b4f      	ldr	r3, [pc, #316]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80099d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80099d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80099dc:	d056      	beq.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80099e4:	f200 808b 	bhi.w	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099ee:	d03e      	beq.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099f6:	f200 8082 	bhi.w	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a00:	d027      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a08:	d879      	bhi.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a10:	d017      	beq.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a18:	d871      	bhi.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a26:	d004      	beq.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009a28:	e069      	b.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009a2a:	f7fb ff53 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 8009a2e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009a30:	e068      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a32:	f107 0314 	add.w	r3, r7, #20
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe f858 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a40:	e060      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe f9bc 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a50:	e058      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009a52:	4b2d      	ldr	r3, [pc, #180]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d103      	bne.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009a60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a64:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a66:	e04d      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a6c:	e04a      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009a6e:	4b26      	ldr	r3, [pc, #152]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a7c:	d103      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009a7e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a84:	e03e      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a8a:	e03b      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a98:	4b1b      	ldr	r3, [pc, #108]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d10c      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d109      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aaa:	4b17      	ldr	r3, [pc, #92]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	08db      	lsrs	r3, r3, #3
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	4a15      	ldr	r2, [pc, #84]	@ (8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009abc:	e01e      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009abe:	4b12      	ldr	r3, [pc, #72]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aca:	d106      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad2:	d102      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad8:	e010      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ada:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ae6:	d106      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aee:	d102      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009af0:	4b08      	ldr	r3, [pc, #32]	@ (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af4:	e002      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009afa:	e003      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009afc:	e002      	b.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b02:	bf00      	nop
          }
        }
        break;
 8009b04:	f000 be15 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b08:	44020c00 	.word	0x44020c00
 8009b0c:	03d09000 	.word	0x03d09000
 8009b10:	003d0900 	.word	0x003d0900
 8009b14:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009b18:	4b9e      	ldr	r3, [pc, #632]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009b1e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b26:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009b2a:	d056      	beq.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009b32:	f200 808b 	bhi.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b3c:	d03e      	beq.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b44:	f200 8082 	bhi.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b4e:	d027      	beq.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b56:	d879      	bhi.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b5e:	d017      	beq.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b66:	d871      	bhi.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b74:	d004      	beq.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009b76:	e069      	b.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009b78:	f7fb feac 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 8009b7c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009b7e:	e068      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b80:	f107 0314 	add.w	r3, r7, #20
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd ffb1 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b8e:	e060      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b90:	f107 0308 	add.w	r3, r7, #8
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fe f915 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b9e:	e058      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009ba0:	4b7c      	ldr	r3, [pc, #496]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d103      	bne.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009bb4:	e04d      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bba:	e04a      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009bbc:	4b75      	ldr	r3, [pc, #468]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bca:	d103      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009bcc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009bd0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009bd2:	e03e      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bd8:	e03b      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bda:	4b6e      	ldr	r3, [pc, #440]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009be0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009be4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009be6:	4b6b      	ldr	r3, [pc, #428]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d10c      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bf8:	4b66      	ldr	r3, [pc, #408]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	08db      	lsrs	r3, r3, #3
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	4a65      	ldr	r2, [pc, #404]	@ (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
 8009c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c0a:	e01e      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c0c:	4b61      	ldr	r3, [pc, #388]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c18:	d106      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c20:	d102      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c22:	4b5e      	ldr	r3, [pc, #376]	@ (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c26:	e010      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c28:	4b5a      	ldr	r3, [pc, #360]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c34:	d106      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c3c:	d102      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c3e:	4b58      	ldr	r3, [pc, #352]	@ (8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c42:	e002      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c48:	e003      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009c4a:	e002      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c50:	bf00      	nop
          }
        }
        break;
 8009c52:	f000 bd6e 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009c56:	4b4f      	ldr	r3, [pc, #316]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009c5c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009c68:	d056      	beq.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009c70:	f200 808b 	bhi.w	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c7a:	d03e      	beq.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c82:	f200 8082 	bhi.w	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009c8c:	d027      	beq.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009c94:	d879      	bhi.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c9c:	d017      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ca4:	d871      	bhi.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d004      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cb2:	d004      	beq.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009cb4:	e069      	b.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009cb6:	f7fb fe0d 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 8009cba:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009cbc:	e068      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cbe:	f107 0314 	add.w	r3, r7, #20
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd ff12 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ccc:	e060      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe f876 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cdc:	e058      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009cde:	4b2d      	ldr	r3, [pc, #180]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ce4:	f003 0302 	and.w	r3, r3, #2
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d103      	bne.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009cf2:	e04d      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cf8:	e04a      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009cfa:	4b26      	ldr	r3, [pc, #152]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d08:	d103      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009d0a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009d10:	e03e      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d16:	e03b      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d18:	4b1e      	ldr	r3, [pc, #120]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d1e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d24:	4b1b      	ldr	r3, [pc, #108]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d10c      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d109      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d36:	4b17      	ldr	r3, [pc, #92]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	08db      	lsrs	r3, r3, #3
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	4a15      	ldr	r2, [pc, #84]	@ (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009d42:	fa22 f303 	lsr.w	r3, r2, r3
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d48:	e01e      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d4a:	4b12      	ldr	r3, [pc, #72]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d56:	d106      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d5e:	d102      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d60:	4b0e      	ldr	r3, [pc, #56]	@ (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d64:	e010      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d72:	d106      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d7a:	d102      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d7c:	4b08      	ldr	r3, [pc, #32]	@ (8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d80:	e002      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d86:	e003      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009d88:	e002      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d8e:	bf00      	nop
          }
        }
        break;
 8009d90:	f000 bccf 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d94:	44020c00 	.word	0x44020c00
 8009d98:	03d09000 	.word	0x03d09000
 8009d9c:	003d0900 	.word	0x003d0900
 8009da0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009da4:	4b9e      	ldr	r3, [pc, #632]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009da6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009daa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009db6:	d056      	beq.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dbe:	f200 808b 	bhi.w	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dc8:	d03e      	beq.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd0:	f200 8082 	bhi.w	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009dda:	d027      	beq.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009de2:	d879      	bhi.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dea:	d017      	beq.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df2:	d871      	bhi.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d004      	beq.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e00:	d004      	beq.n	8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009e02:	e069      	b.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009e04:	f7fb fd66 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 8009e08:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009e0a:	e068      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e0c:	f107 0314 	add.w	r3, r7, #20
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fd fe6b 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e1a:	e060      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e1c:	f107 0308 	add.w	r3, r7, #8
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fd ffcf 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e2a:	e058      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009e2c:	4b7c      	ldr	r3, [pc, #496]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d103      	bne.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e3e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009e40:	e04d      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e46:	e04a      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009e48:	4b75      	ldr	r3, [pc, #468]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e56:	d103      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009e58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009e5e:	e03e      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e64:	e03b      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e66:	4b6e      	ldr	r3, [pc, #440]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e6c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e70:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e72:	4b6b      	ldr	r3, [pc, #428]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d10c      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d109      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e84:	4b66      	ldr	r3, [pc, #408]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	08db      	lsrs	r3, r3, #3
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	4a65      	ldr	r2, [pc, #404]	@ (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009e90:	fa22 f303 	lsr.w	r3, r2, r3
 8009e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e96:	e01e      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e98:	4b61      	ldr	r3, [pc, #388]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ea4:	d106      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eac:	d102      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009eae:	4b5e      	ldr	r3, [pc, #376]	@ (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb2:	e010      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eb4:	4b5a      	ldr	r3, [pc, #360]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ec0:	d106      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ec8:	d102      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009eca:	4b58      	ldr	r3, [pc, #352]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ece:	e002      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009ed4:	e003      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009ed6:	e002      	b.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009edc:	bf00      	nop
          }
        }
        break;
 8009ede:	f000 bc28 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ee2:	4b4f      	ldr	r3, [pc, #316]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eec:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009eee:	4b4c      	ldr	r3, [pc, #304]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009efa:	d106      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009f02:	4b4a      	ldr	r3, [pc, #296]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009f04:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009f06:	f000 bc14 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f10:	d108      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f12:	f107 0320 	add.w	r3, r7, #32
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fd fc7c 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f20:	f000 bc07 	b.w	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f2a:	d107      	bne.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2c:	f107 0314 	add.w	r3, r7, #20
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fd fddb 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f3a:	e3fa      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f40:	e3f7      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009f42:	4b37      	ldr	r3, [pc, #220]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f48:	f003 0307 	and.w	r3, r3, #7
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	d861      	bhi.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009f54:	a201      	add	r2, pc, #4	@ (adr r2, 8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5a:	bf00      	nop
 8009f5c:	08009f71 	.word	0x08009f71
 8009f60:	08009f81 	.word	0x08009f81
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	08009fa1 	.word	0x08009fa1
 8009f6c:	08009fa7 	.word	0x08009fa7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f70:	f107 0320 	add.w	r3, r7, #32
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fd fc4d 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f7e:	e04e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f80:	f107 0314 	add.w	r3, r7, #20
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd fdb1 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f8e:	e046      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fd ff15 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f9e:	e03e      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009fa0:	4b23      	ldr	r3, [pc, #140]	@ (800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009fa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fa4:	e03b      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fa6:	4b1e      	ldr	r3, [pc, #120]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fb2:	4b1b      	ldr	r3, [pc, #108]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fc4:	4b16      	ldr	r3, [pc, #88]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	08db      	lsrs	r3, r3, #3
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	4a15      	ldr	r2, [pc, #84]	@ (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd6:	e01e      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fd8:	4b11      	ldr	r3, [pc, #68]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fe4:	d106      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fec:	d102      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009fee:	4b0e      	ldr	r3, [pc, #56]	@ (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff2:	e010      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	@ (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a000:	d106      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a008:	d102      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a00a:	4b08      	ldr	r3, [pc, #32]	@ (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00e:	e002      	b.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a014:	e003      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800a016:	e002      	b.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a01c:	bf00      	nop
          }
        }
        break;
 800a01e:	e388      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a020:	44020c00 	.word	0x44020c00
 800a024:	03d09000 	.word	0x03d09000
 800a028:	003d0900 	.word	0x003d0900
 800a02c:	007a1200 	.word	0x007a1200
 800a030:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a034:	4ba9      	ldr	r3, [pc, #676]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a03a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a03e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	2b20      	cmp	r3, #32
 800a044:	f200 809a 	bhi.w	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800a048:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a0d5 	.word	0x0800a0d5
 800a054:	0800a17d 	.word	0x0800a17d
 800a058:	0800a17d 	.word	0x0800a17d
 800a05c:	0800a17d 	.word	0x0800a17d
 800a060:	0800a17d 	.word	0x0800a17d
 800a064:	0800a17d 	.word	0x0800a17d
 800a068:	0800a17d 	.word	0x0800a17d
 800a06c:	0800a17d 	.word	0x0800a17d
 800a070:	0800a0e5 	.word	0x0800a0e5
 800a074:	0800a17d 	.word	0x0800a17d
 800a078:	0800a17d 	.word	0x0800a17d
 800a07c:	0800a17d 	.word	0x0800a17d
 800a080:	0800a17d 	.word	0x0800a17d
 800a084:	0800a17d 	.word	0x0800a17d
 800a088:	0800a17d 	.word	0x0800a17d
 800a08c:	0800a17d 	.word	0x0800a17d
 800a090:	0800a0f5 	.word	0x0800a0f5
 800a094:	0800a17d 	.word	0x0800a17d
 800a098:	0800a17d 	.word	0x0800a17d
 800a09c:	0800a17d 	.word	0x0800a17d
 800a0a0:	0800a17d 	.word	0x0800a17d
 800a0a4:	0800a17d 	.word	0x0800a17d
 800a0a8:	0800a17d 	.word	0x0800a17d
 800a0ac:	0800a17d 	.word	0x0800a17d
 800a0b0:	0800a105 	.word	0x0800a105
 800a0b4:	0800a17d 	.word	0x0800a17d
 800a0b8:	0800a17d 	.word	0x0800a17d
 800a0bc:	0800a17d 	.word	0x0800a17d
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a17d 	.word	0x0800a17d
 800a0c8:	0800a17d 	.word	0x0800a17d
 800a0cc:	0800a17d 	.word	0x0800a17d
 800a0d0:	0800a10b 	.word	0x0800a10b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0d4:	f107 0320 	add.w	r3, r7, #32
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fd fb9b 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0e2:	e04e      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e4:	f107 0314 	add.w	r3, r7, #20
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fd fcff 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0f2:	e046      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0f4:	f107 0308 	add.w	r3, r7, #8
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fd fe63 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a102:	e03e      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a104:	4b76      	ldr	r3, [pc, #472]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a106:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a108:	e03b      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a10a:	4b74      	ldr	r3, [pc, #464]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a10c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a110:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a114:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a116:	4b71      	ldr	r3, [pc, #452]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d10c      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a128:	4b6c      	ldr	r3, [pc, #432]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	08db      	lsrs	r3, r3, #3
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	4a6c      	ldr	r2, [pc, #432]	@ (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a134:	fa22 f303 	lsr.w	r3, r2, r3
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
 800a13a:	e01e      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a13c:	4b67      	ldr	r3, [pc, #412]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a148:	d106      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a150:	d102      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a152:	4b65      	ldr	r3, [pc, #404]	@ (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
 800a156:	e010      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a158:	4b60      	ldr	r3, [pc, #384]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a164:	d106      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a16c:	d102      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a16e:	4b5f      	ldr	r3, [pc, #380]	@ (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
 800a172:	e002      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a178:	e003      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a17a:	e002      	b.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a180:	bf00      	nop
          }
        }
        break;
 800a182:	e2d6      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a184:	4b55      	ldr	r3, [pc, #340]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a18a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a18e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a196:	d031      	beq.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19e:	d866      	bhi.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1a4:	d027      	beq.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1aa:	d860      	bhi.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ae:	2b80      	cmp	r3, #128	@ 0x80
 800a1b0:	d019      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	2b80      	cmp	r3, #128	@ 0x80
 800a1b6:	d85a      	bhi.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	2b40      	cmp	r3, #64	@ 0x40
 800a1c2:	d008      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a1c4:	e053      	b.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c6:	f107 0320 	add.w	r3, r7, #32
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fd fb22 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1d4:	e04e      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1d6:	f107 0314 	add.w	r3, r7, #20
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fd fc86 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1e4:	e046      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1e6:	f107 0308 	add.w	r3, r7, #8
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fd fdea 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1f4:	e03e      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a1f6:	4b3a      	ldr	r3, [pc, #232]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a1f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1fa:	e03b      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1fc:	4b37      	ldr	r3, [pc, #220]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a202:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a206:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a208:	4b34      	ldr	r3, [pc, #208]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b02      	cmp	r3, #2
 800a212:	d10c      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d109      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a21a:	4b30      	ldr	r3, [pc, #192]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	4a2f      	ldr	r2, [pc, #188]	@ (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a226:	fa22 f303 	lsr.w	r3, r2, r3
 800a22a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a22c:	e01e      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a22e:	4b2b      	ldr	r3, [pc, #172]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a23a:	d106      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a242:	d102      	bne.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a244:	4b28      	ldr	r3, [pc, #160]	@ (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a246:	637b      	str	r3, [r7, #52]	@ 0x34
 800a248:	e010      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a24a:	4b24      	ldr	r3, [pc, #144]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a256:	d106      	bne.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a25e:	d102      	bne.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a260:	4b22      	ldr	r3, [pc, #136]	@ (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a262:	637b      	str	r3, [r7, #52]	@ 0x34
 800a264:	e002      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a26a:	e003      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a26c:	e002      	b.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a272:	bf00      	nop
          }
        }
        break;
 800a274:	e25d      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a276:	4b19      	ldr	r3, [pc, #100]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a27c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a280:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	2b00      	cmp	r3, #0
 800a286:	d103      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a288:	f7fb fb0e 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 800a28c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a28e:	e250      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a290:	4b12      	ldr	r3, [pc, #72]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a29c:	d10b      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a4:	d107      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a6:	f107 0314 	add.w	r3, r7, #20
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fd fc1e 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b4:	e04f      	b.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a2b6:	4b09      	ldr	r3, [pc, #36]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c2:	d115      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2ca:	d111      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2cc:	f107 0308 	add.w	r3, r7, #8
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fd fd77 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2da:	e03c      	b.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a2dc:	44020c00 	.word	0x44020c00
 800a2e0:	00bb8000 	.word	0x00bb8000
 800a2e4:	03d09000 	.word	0x03d09000
 800a2e8:	003d0900 	.word	0x003d0900
 800a2ec:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a2f0:	4b94      	ldr	r3, [pc, #592]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d10d      	bne.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a302:	d109      	bne.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a304:	4b8f      	ldr	r3, [pc, #572]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	08db      	lsrs	r3, r3, #3
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	4a8e      	ldr	r2, [pc, #568]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a310:	fa22 f303 	lsr.w	r3, r2, r3
 800a314:	637b      	str	r3, [r7, #52]	@ 0x34
 800a316:	e01e      	b.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a318:	4b8a      	ldr	r3, [pc, #552]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a324:	d106      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a32c:	d102      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a32e:	4b87      	ldr	r3, [pc, #540]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a330:	637b      	str	r3, [r7, #52]	@ 0x34
 800a332:	e010      	b.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a334:	4b83      	ldr	r3, [pc, #524]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a33c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a340:	d106      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a348:	d102      	bne.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a34a:	4b81      	ldr	r3, [pc, #516]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34e:	e002      	b.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a354:	e1ed      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a356:	e1ec      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a358:	4b7a      	ldr	r3, [pc, #488]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a35a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a35e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	2b00      	cmp	r3, #0
 800a368:	d103      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a36a:	f7fb fab3 	bl	80058d4 <HAL_RCC_GetPCLK3Freq>
 800a36e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a370:	e1df      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a372:	4b74      	ldr	r3, [pc, #464]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a37a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a37e:	d10b      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a386:	d107      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a388:	f107 0314 	add.w	r3, r7, #20
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fd fbad 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34
 800a396:	e045      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a398:	4b6a      	ldr	r3, [pc, #424]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a4:	d10b      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ac:	d107      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3ae:	f107 0308 	add.w	r3, r7, #8
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fd fd06 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3bc:	e032      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a3be:	4b61      	ldr	r3, [pc, #388]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d10d      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3d0:	d109      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a3d2:	4b5c      	ldr	r3, [pc, #368]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f003 0303 	and.w	r3, r3, #3
 800a3dc:	4a5a      	ldr	r2, [pc, #360]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a3de:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e4:	e01e      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a3e6:	4b57      	ldr	r3, [pc, #348]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3f2:	d106      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3fa:	d102      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a3fc:	4b53      	ldr	r3, [pc, #332]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a3fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a400:	e010      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a402:	4b50      	ldr	r3, [pc, #320]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a40a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a40e:	d106      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a416:	d102      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a418:	4b4d      	ldr	r3, [pc, #308]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a41a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41c:	e002      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a422:	e186      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a424:	e185      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a426:	4b47      	ldr	r3, [pc, #284]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a42c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a430:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	2b00      	cmp	r3, #0
 800a436:	d103      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a438:	f7fb fa36 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 800a43c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a43e:	e178      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a440:	4b40      	ldr	r3, [pc, #256]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a44c:	d10b      	bne.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a454:	d107      	bne.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a456:	f107 0314 	add.w	r3, r7, #20
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fd fb46 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	637b      	str	r3, [r7, #52]	@ 0x34
 800a464:	e045      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a466:	4b37      	ldr	r3, [pc, #220]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a46e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a472:	d10b      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a47a:	d107      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4618      	mov	r0, r3
 800a482:	f7fd fc9f 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48a:	e032      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a48c:	4b2d      	ldr	r3, [pc, #180]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0302 	and.w	r3, r3, #2
 800a494:	2b02      	cmp	r3, #2
 800a496:	d10d      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a49e:	d109      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4a0:	4b28      	ldr	r3, [pc, #160]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	08db      	lsrs	r3, r3, #3
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	4a27      	ldr	r2, [pc, #156]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b2:	e01e      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a4b4:	4b23      	ldr	r3, [pc, #140]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4c8:	d102      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a4ca:	4b20      	ldr	r3, [pc, #128]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ce:	e010      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a4d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4dc:	d106      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a4e4:	d102      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ea:	e002      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4f0:	e11f      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4f2:	e11e      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a4f4:	4b13      	ldr	r3, [pc, #76]	@ (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a4f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a4fa:	f003 0303 	and.w	r3, r3, #3
 800a4fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	2b03      	cmp	r3, #3
 800a504:	d85f      	bhi.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a506:	a201      	add	r2, pc, #4	@ (adr r2, 800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a51d 	.word	0x0800a51d
 800a510:	0800a525 	.word	0x0800a525
 800a514:	0800a535 	.word	0x0800a535
 800a518:	0800a555 	.word	0x0800a555

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a51c:	f7fb f992 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 800a520:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a522:	e053      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a524:	f107 0320 	add.w	r3, r7, #32
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd f973 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a530:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a532:	e04b      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fd fad7 	bl	8007aec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a542:	e043      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a544:	44020c00 	.word	0x44020c00
 800a548:	03d09000 	.word	0x03d09000
 800a54c:	003d0900 	.word	0x003d0900
 800a550:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a554:	4b79      	ldr	r3, [pc, #484]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a55a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a55e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a560:	4b76      	ldr	r3, [pc, #472]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d10c      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d109      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a572:	4b72      	ldr	r3, [pc, #456]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	08db      	lsrs	r3, r3, #3
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	4a70      	ldr	r2, [pc, #448]	@ (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a57e:	fa22 f303 	lsr.w	r3, r2, r3
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
 800a584:	e01e      	b.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a586:	4b6d      	ldr	r3, [pc, #436]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a58e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a592:	d106      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a59a:	d102      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a59c:	4b69      	ldr	r3, [pc, #420]	@ (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a59e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5a0:	e010      	b.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5a2:	4b66      	ldr	r3, [pc, #408]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5ae:	d106      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5b6:	d102      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a5b8:	4b63      	ldr	r3, [pc, #396]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a5ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5bc:	e002      	b.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a5c2:	e003      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a5c4:	e002      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5ca:	bf00      	nop
          }
        }
        break;
 800a5cc:	e0b1      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a5ce:	4b5b      	ldr	r3, [pc, #364]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a5d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a5d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a5da:	4b58      	ldr	r3, [pc, #352]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d106      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d103      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a5ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f4:	e01f      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a5f6:	4b51      	ldr	r3, [pc, #324]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a604:	d106      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	2b40      	cmp	r3, #64	@ 0x40
 800a60a:	d103      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a60c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a610:	637b      	str	r3, [r7, #52]	@ 0x34
 800a612:	e010      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a614:	4b49      	ldr	r3, [pc, #292]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a620:	d106      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	2b80      	cmp	r3, #128	@ 0x80
 800a626:	d103      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a628:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a62e:	e002      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a634:	e07d      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a636:	e07c      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a638:	4b40      	ldr	r3, [pc, #256]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a63a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a63e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a642:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a644:	4b3d      	ldr	r3, [pc, #244]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a64c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a650:	d105      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a658:	4b3c      	ldr	r3, [pc, #240]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a65c:	e031      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a65e:	4b37      	ldr	r3, [pc, #220]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a66a:	d10a      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	2b10      	cmp	r3, #16
 800a670:	d107      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a672:	f107 0320 	add.w	r3, r7, #32
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd f8cc 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a680:	e01f      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a682:	4b2e      	ldr	r3, [pc, #184]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a688:	f003 0302 	and.w	r3, r3, #2
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d106      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	2b20      	cmp	r3, #32
 800a694:	d103      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a69a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69c:	e011      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a69e:	4b27      	ldr	r3, [pc, #156]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6ac:	d106      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b0:	2b30      	cmp	r3, #48	@ 0x30
 800a6b2:	d103      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a6b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ba:	e002      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a6c0:	e037      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6c2:	e036      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a6c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a6ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d2:	2b10      	cmp	r3, #16
 800a6d4:	d107      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6d6:	f107 0320 	add.w	r3, r7, #32
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fd f89a 	bl	8007814 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a6e4:	e025      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a6e6:	4b15      	ldr	r3, [pc, #84]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f2:	d10a      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d107      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fa:	f107 0308 	add.w	r3, r7, #8
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fd fb60 	bl	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	637b      	str	r3, [r7, #52]	@ 0x34
 800a708:	e00f      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a70a:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a716:	d105      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71a:	2b30      	cmp	r3, #48	@ 0x30
 800a71c:	d102      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a71e:	4b0b      	ldr	r3, [pc, #44]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
 800a722:	e002      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a724:	2300      	movs	r3, #0
 800a726:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a728:	e003      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a72a:	e002      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a730:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a734:	4618      	mov	r0, r3
 800a736:	373c      	adds	r7, #60	@ 0x3c
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd90      	pop	{r4, r7, pc}
 800a73c:	44020c00 	.word	0x44020c00
 800a740:	03d09000 	.word	0x03d09000
 800a744:	003d0900 	.word	0x003d0900
 800a748:	007a1200 	.word	0x007a1200
 800a74c:	02dc6c00 	.word	0x02dc6c00

0800a750 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a758:	4b48      	ldr	r3, [pc, #288]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a47      	ldr	r2, [pc, #284]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a75e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a762:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a764:	f7f7 ff18 	bl	8002598 <HAL_GetTick>
 800a768:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a76a:	e008      	b.n	800a77e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a76c:	f7f7 ff14 	bl	8002598 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b02      	cmp	r3, #2
 800a778:	d901      	bls.n	800a77e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e07a      	b.n	800a874 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a77e:	4b3f      	ldr	r3, [pc, #252]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1f0      	bne.n	800a76c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a78a:	4b3c      	ldr	r3, [pc, #240]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6811      	ldr	r1, [r2, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6852      	ldr	r2, [r2, #4]
 800a79e:	0212      	lsls	r2, r2, #8
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	4936      	ldr	r1, [pc, #216]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	025b      	lsls	r3, r3, #9
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	041b      	lsls	r3, r3, #16
 800a7c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	061b      	lsls	r3, r3, #24
 800a7d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a7d8:	4928      	ldr	r1, [pc, #160]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a7de:	4b27      	ldr	r3, [pc, #156]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e2:	f023 020c 	bic.w	r2, r3, #12
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	4924      	ldr	r1, [pc, #144]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a7f0:	4b22      	ldr	r3, [pc, #136]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f4:	f023 0220 	bic.w	r2, r3, #32
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	491f      	ldr	r1, [pc, #124]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a7fe:	4313      	orrs	r3, r2
 800a800:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a802:	4b1e      	ldr	r3, [pc, #120]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80a:	491c      	ldr	r1, [pc, #112]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a810:	4b1a      	ldr	r3, [pc, #104]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a814:	4a19      	ldr	r2, [pc, #100]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a816:	f023 0310 	bic.w	r3, r3, #16
 800a81a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a81c:	4b17      	ldr	r3, [pc, #92]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a820:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a824:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6a12      	ldr	r2, [r2, #32]
 800a82c:	00d2      	lsls	r2, r2, #3
 800a82e:	4913      	ldr	r1, [pc, #76]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a830:	4313      	orrs	r3, r2
 800a832:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a834:	4b11      	ldr	r3, [pc, #68]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a838:	4a10      	ldr	r2, [pc, #64]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a83a:	f043 0310 	orr.w	r3, r3, #16
 800a83e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a840:	4b0e      	ldr	r3, [pc, #56]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a0d      	ldr	r2, [pc, #52]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a846:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a84a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a84c:	f7f7 fea4 	bl	8002598 <HAL_GetTick>
 800a850:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a852:	e008      	b.n	800a866 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a854:	f7f7 fea0 	bl	8002598 <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d901      	bls.n	800a866 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e006      	b.n	800a874 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a866:	4b05      	ldr	r3, [pc, #20]	@ (800a87c <RCCEx_PLL2_Config+0x12c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0f0      	beq.n	800a854 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a872:	2300      	movs	r3, #0

}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	44020c00 	.word	0x44020c00

0800a880 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a888:	4b48      	ldr	r3, [pc, #288]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a47      	ldr	r2, [pc, #284]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a88e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a892:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a894:	f7f7 fe80 	bl	8002598 <HAL_GetTick>
 800a898:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a89a:	e008      	b.n	800a8ae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a89c:	f7f7 fe7c 	bl	8002598 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d901      	bls.n	800a8ae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e07a      	b.n	800a9a4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1f0      	bne.n	800a89c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a8ba:	4b3c      	ldr	r3, [pc, #240]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	6811      	ldr	r1, [r2, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6852      	ldr	r2, [r2, #4]
 800a8ce:	0212      	lsls	r2, r2, #8
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	4936      	ldr	r1, [pc, #216]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	630b      	str	r3, [r1, #48]	@ 0x30
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	025b      	lsls	r3, r3, #9
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	041b      	lsls	r3, r3, #16
 800a8f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	3b01      	subs	r3, #1
 800a902:	061b      	lsls	r3, r3, #24
 800a904:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a908:	4928      	ldr	r1, [pc, #160]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a90e:	4b27      	ldr	r3, [pc, #156]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a912:	f023 020c 	bic.w	r2, r3, #12
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	4924      	ldr	r1, [pc, #144]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a920:	4b22      	ldr	r3, [pc, #136]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a924:	f023 0220 	bic.w	r2, r3, #32
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	69db      	ldr	r3, [r3, #28]
 800a92c:	491f      	ldr	r1, [pc, #124]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a92e:	4313      	orrs	r3, r2
 800a930:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a932:	4b1e      	ldr	r3, [pc, #120]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93a:	491c      	ldr	r1, [pc, #112]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a940:	4b1a      	ldr	r3, [pc, #104]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a944:	4a19      	ldr	r2, [pc, #100]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a946:	f023 0310 	bic.w	r3, r3, #16
 800a94a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a94c:	4b17      	ldr	r3, [pc, #92]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a94e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a950:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a954:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6a12      	ldr	r2, [r2, #32]
 800a95c:	00d2      	lsls	r2, r2, #3
 800a95e:	4913      	ldr	r1, [pc, #76]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a960:	4313      	orrs	r3, r2
 800a962:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a964:	4b11      	ldr	r3, [pc, #68]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a968:	4a10      	ldr	r2, [pc, #64]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a96a:	f043 0310 	orr.w	r3, r3, #16
 800a96e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a970:	4b0e      	ldr	r3, [pc, #56]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a0d      	ldr	r2, [pc, #52]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a97a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a97c:	f7f7 fe0c 	bl	8002598 <HAL_GetTick>
 800a980:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a982:	e008      	b.n	800a996 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a984:	f7f7 fe08 	bl	8002598 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e006      	b.n	800a9a4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a996:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <RCCEx_PLL3_Config+0x12c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f0      	beq.n	800a984 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	44020c00 	.word	0x44020c00

0800a9b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e08c      	b.n	800aadc <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7a5b      	ldrb	r3, [r3, #9]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7f6 fdf4 	bl	80015c0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0204 	bic.w	r2, r2, #4
 800a9ec:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6859      	ldr	r1, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4b3b      	ldr	r3, [pc, #236]	@ (800aae4 <HAL_RNG_Init+0x134>)
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800aa04:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a37      	ldr	r2, [pc, #220]	@ (800aae8 <HAL_RNG_Init+0x138>)
 800aa0c:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800aa1c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa1e:	f7f7 fdbb 	bl	8002598 <HAL_GetTick>
 800aa22:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800aa24:	e016      	b.n	800aa54 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800aa26:	f7f7 fdb7 	bl	8002598 <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b04      	cmp	r3, #4
 800aa32:	d90f      	bls.n	800aa54 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa42:	d107      	bne.n	800aa54 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e043      	b.n	800aadc <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa62:	d0e0      	beq.n	800aa26 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0204 	orr.w	r2, r2, #4
 800aa72:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa7e:	2b40      	cmp	r3, #64	@ 0x40
 800aa80:	d104      	bne.n	800aa8c <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2204      	movs	r2, #4
 800aa86:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e027      	b.n	800aadc <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800aa8c:	f7f7 fd84 	bl	8002598 <HAL_GetTick>
 800aa90:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aa92:	e015      	b.n	800aac0 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800aa94:	f7f7 fd80 	bl	8002598 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d90e      	bls.n	800aac0 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d007      	beq.n	800aac0 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2204      	movs	r2, #4
 800aab4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e00d      	b.n	800aadc <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d1e2      	bne.n	800aa94 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	40f00e00 	.word	0x40f00e00
 800aae8:	0003af66 	.word	0x0003af66

0800aaec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d071      	beq.n	800abe2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f6 fdac 	bl	8001670 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ab20:	4b32      	ldr	r3, [pc, #200]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0310 	and.w	r3, r3, #16
 800ab28:	2b10      	cmp	r3, #16
 800ab2a:	d051      	beq.n	800abd0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab2c:	4b2f      	ldr	r3, [pc, #188]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab2e:	22ca      	movs	r2, #202	@ 0xca
 800ab30:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab32:	4b2e      	ldr	r3, [pc, #184]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab34:	2253      	movs	r2, #83	@ 0x53
 800ab36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f9a3 	bl	800ae84 <RTC_EnterInitMode>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d13f      	bne.n	800abc8 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800ab48:	4b28      	ldr	r3, [pc, #160]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	4a27      	ldr	r2, [pc, #156]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab4e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800ab52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab56:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800ab58:	4b24      	ldr	r3, [pc, #144]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab5a:	699a      	ldr	r2, [r3, #24]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6859      	ldr	r1, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	4319      	orrs	r1, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	430b      	orrs	r3, r1
 800ab6c:	491f      	ldr	r1, [pc, #124]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	041b      	lsls	r3, r3, #16
 800ab7c:	491b      	ldr	r1, [pc, #108]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800ab82:	4b1a      	ldr	r3, [pc, #104]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab92:	430b      	orrs	r3, r1
 800ab94:	4915      	ldr	r1, [pc, #84]	@ (800abec <HAL_RTC_Init+0x100>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f9ae 	bl	800aefc <RTC_ExitInitMode>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10e      	bne.n	800abc8 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800abaa:	4b10      	ldr	r3, [pc, #64]	@ (800abec <HAL_RTC_Init+0x100>)
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a19      	ldr	r1, [r3, #32]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	4319      	orrs	r1, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	430b      	orrs	r3, r1
 800abc2:	490a      	ldr	r1, [pc, #40]	@ (800abec <HAL_RTC_Init+0x100>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abc8:	4b08      	ldr	r3, [pc, #32]	@ (800abec <HAL_RTC_Init+0x100>)
 800abca:	22ff      	movs	r2, #255	@ 0xff
 800abcc:	625a      	str	r2, [r3, #36]	@ 0x24
 800abce:	e001      	b.n	800abd4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d103      	bne.n	800abe2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	44007800 	.word	0x44007800

0800abf0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d101      	bne.n	800ac0a <HAL_RTC_SetTime+0x1a>
 800ac06:	2302      	movs	r3, #2
 800ac08:	e07e      	b.n	800ad08 <HAL_RTC_SetTime+0x118>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2202      	movs	r2, #2
 800ac16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac1a:	4b3d      	ldr	r3, [pc, #244]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800ac1c:	22ca      	movs	r2, #202	@ 0xca
 800ac1e:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac20:	4b3b      	ldr	r3, [pc, #236]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800ac22:	2253      	movs	r2, #83	@ 0x53
 800ac24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 f92c 	bl	800ae84 <RTC_EnterInitMode>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ac30:	7cfb      	ldrb	r3, [r7, #19]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d159      	bne.n	800acea <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800ac36:	4b36      	ldr	r3, [pc, #216]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac42:	d04d      	beq.n	800ace0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d125      	bne.n	800ac96 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ac4a:	4b31      	ldr	r3, [pc, #196]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d102      	bne.n	800ac5c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f989 	bl	800af78 <RTC_ByteToBcd2>
 800ac66:	4603      	mov	r3, r0
 800ac68:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 f982 	bl	800af78 <RTC_ByteToBcd2>
 800ac74:	4603      	mov	r3, r0
 800ac76:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac78:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	789b      	ldrb	r3, [r3, #2]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 f97a 	bl	800af78 <RTC_ByteToBcd2>
 800ac84:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac86:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	78db      	ldrb	r3, [r3, #3]
 800ac8e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac90:	4313      	orrs	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	e017      	b.n	800acc6 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ac96:	4b1e      	ldr	r3, [pc, #120]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2200      	movs	r2, #0
 800aca6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800acb4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800acba:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	78db      	ldrb	r3, [r3, #3]
 800acc0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800acc6:	4a12      	ldr	r2, [pc, #72]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800acce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800acd2:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800acd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	4a0d      	ldr	r2, [pc, #52]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800acda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acde:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f90b 	bl	800aefc <RTC_ExitInitMode>
 800ace6:	4603      	mov	r3, r0
 800ace8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acea:	4b09      	ldr	r3, [pc, #36]	@ (800ad10 <HAL_RTC_SetTime+0x120>)
 800acec:	22ff      	movs	r2, #255	@ 0xff
 800acee:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800acf0:	7cfb      	ldrb	r3, [r7, #19]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d103      	bne.n	800acfe <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ad06:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd90      	pop	{r4, r7, pc}
 800ad10:	44007800 	.word	0x44007800

0800ad14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <HAL_RTC_SetDate+0x1a>
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e071      	b.n	800ae12 <HAL_RTC_SetDate+0xfe>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2202      	movs	r2, #2
 800ad3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10e      	bne.n	800ad62 <HAL_RTC_SetDate+0x4e>
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d008      	beq.n	800ad62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	f023 0310 	bic.w	r3, r3, #16
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	330a      	adds	r3, #10
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d11c      	bne.n	800ada2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	78db      	ldrb	r3, [r3, #3]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 f903 	bl	800af78 <RTC_ByteToBcd2>
 800ad72:	4603      	mov	r3, r0
 800ad74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f8fc 	bl	800af78 <RTC_ByteToBcd2>
 800ad80:	4603      	mov	r3, r0
 800ad82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	789b      	ldrb	r3, [r3, #2]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f8f4 	bl	800af78 <RTC_ByteToBcd2>
 800ad90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	e00e      	b.n	800adc0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	78db      	ldrb	r3, [r3, #3]
 800ada6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800adae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800adb4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800adbc:	4313      	orrs	r3, r2
 800adbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adc0:	4b16      	ldr	r3, [pc, #88]	@ (800ae1c <HAL_RTC_SetDate+0x108>)
 800adc2:	22ca      	movs	r2, #202	@ 0xca
 800adc4:	625a      	str	r2, [r3, #36]	@ 0x24
 800adc6:	4b15      	ldr	r3, [pc, #84]	@ (800ae1c <HAL_RTC_SetDate+0x108>)
 800adc8:	2253      	movs	r2, #83	@ 0x53
 800adca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 f859 	bl	800ae84 <RTC_EnterInitMode>
 800add2:	4603      	mov	r3, r0
 800add4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800add6:	7cfb      	ldrb	r3, [r7, #19]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800addc:	4a0f      	ldr	r2, [pc, #60]	@ (800ae1c <HAL_RTC_SetDate+0x108>)
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ade4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ade8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 f886 	bl	800aefc <RTC_ExitInitMode>
 800adf0:	4603      	mov	r3, r0
 800adf2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adf4:	4b09      	ldr	r3, [pc, #36]	@ (800ae1c <HAL_RTC_SetDate+0x108>)
 800adf6:	22ff      	movs	r2, #255	@ 0xff
 800adf8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800adfa:	7cfb      	ldrb	r3, [r7, #19]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d103      	bne.n	800ae08 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ae10:	7cfb      	ldrb	r3, [r7, #19]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd90      	pop	{r4, r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	44007800 	.word	0x44007800

0800ae20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ae28:	4b15      	ldr	r3, [pc, #84]	@ (800ae80 <HAL_RTC_WaitForSynchro+0x60>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	4a14      	ldr	r2, [pc, #80]	@ (800ae80 <HAL_RTC_WaitForSynchro+0x60>)
 800ae2e:	f023 0320 	bic.w	r3, r3, #32
 800ae32:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ae34:	f7f7 fbb0 	bl	8002598 <HAL_GetTick>
 800ae38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ae3a:	e013      	b.n	800ae64 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae3c:	f7f7 fbac 	bl	8002598 <HAL_GetTick>
 800ae40:	4602      	mov	r2, r0
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae4a:	d90b      	bls.n	800ae64 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ae4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae80 <HAL_RTC_WaitForSynchro+0x60>)
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10c      	bne.n	800ae72 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e008      	b.n	800ae76 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ae64:	4b06      	ldr	r3, [pc, #24]	@ (800ae80 <HAL_RTC_WaitForSynchro+0x60>)
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	f003 0320 	and.w	r3, r3, #32
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d0e5      	beq.n	800ae3c <HAL_RTC_WaitForSynchro+0x1c>
 800ae70:	e000      	b.n	800ae74 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ae72:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	44007800 	.word	0x44007800

0800ae84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ae90:	4b19      	ldr	r3, [pc, #100]	@ (800aef8 <RTC_EnterInitMode+0x74>)
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d128      	bne.n	800aeee <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ae9c:	4b16      	ldr	r3, [pc, #88]	@ (800aef8 <RTC_EnterInitMode+0x74>)
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	4a15      	ldr	r2, [pc, #84]	@ (800aef8 <RTC_EnterInitMode+0x74>)
 800aea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aea6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800aea8:	f7f7 fb76 	bl	8002598 <HAL_GetTick>
 800aeac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aeae:	e013      	b.n	800aed8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aeb0:	f7f7 fb72 	bl	8002598 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aebe:	d90b      	bls.n	800aed8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aec0:	4b0d      	ldr	r3, [pc, #52]	@ (800aef8 <RTC_EnterInitMode+0x74>)
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10f      	bne.n	800aeec <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2203      	movs	r2, #3
 800aed4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aed8:	4b07      	ldr	r3, [pc, #28]	@ (800aef8 <RTC_EnterInitMode+0x74>)
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d104      	bne.n	800aeee <RTC_EnterInitMode+0x6a>
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d1e2      	bne.n	800aeb0 <RTC_EnterInitMode+0x2c>
 800aeea:	e000      	b.n	800aeee <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800aeec:	bf00      	nop
        }
      }
    }
  }

  return status;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	44007800 	.word	0x44007800

0800aefc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800af08:	4b1a      	ldr	r3, [pc, #104]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4a19      	ldr	r2, [pc, #100]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af12:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800af14:	4b17      	ldr	r3, [pc, #92]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	f003 0320 	and.w	r3, r3, #32
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10c      	bne.n	800af3a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff ff7d 	bl	800ae20 <HAL_RTC_WaitForSynchro>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01e      	beq.n	800af6a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2203      	movs	r2, #3
 800af30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	73fb      	strb	r3, [r7, #15]
 800af38:	e017      	b.n	800af6a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800af3a:	4b0e      	ldr	r3, [pc, #56]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	4a0d      	ldr	r2, [pc, #52]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af40:	f023 0320 	bic.w	r3, r3, #32
 800af44:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff ff6a 	bl	800ae20 <HAL_RTC_WaitForSynchro>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d005      	beq.n	800af5e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2203      	movs	r2, #3
 800af56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800af5e:	4b05      	ldr	r3, [pc, #20]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	4a04      	ldr	r2, [pc, #16]	@ (800af74 <RTC_ExitInitMode+0x78>)
 800af64:	f043 0320 	orr.w	r3, r3, #32
 800af68:	6193      	str	r3, [r2, #24]
  }
  return status;
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	44007800 	.word	0x44007800

0800af78 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800af8a:	e005      	b.n	800af98 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	3b0a      	subs	r3, #10
 800af96:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800af98:	7afb      	ldrb	r3, [r7, #11]
 800af9a:	2b09      	cmp	r3, #9
 800af9c:	d8f6      	bhi.n	800af8c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	011b      	lsls	r3, r3, #4
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	7afb      	ldrb	r3, [r7, #11]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	b2db      	uxtb	r3, r3
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4910      	ldr	r1, [pc, #64]	@ (800b00c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	431a      	orrs	r2, r3
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	490c      	ldr	r1, [pc, #48]	@ (800b010 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800afe4:	4b0a      	ldr	r3, [pc, #40]	@ (800b010 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6919      	ldr	r1, [r3, #16]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	041b      	lsls	r3, r3, #16
 800aff6:	430b      	orrs	r3, r1
 800aff8:	4905      	ldr	r1, [pc, #20]	@ (800b010 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800affa:	4313      	orrs	r3, r2
 800affc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	44007800 	.word	0x44007800
 800b010:	44007c00 	.word	0x44007c00

0800b014 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e162      	b.n	800b2ec <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a70      	ldr	r2, [pc, #448]	@ (800b1ec <HAL_SPI_Init+0x1d8>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d018      	beq.n	800b062 <HAL_SPI_Init+0x4e>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a6e      	ldr	r2, [pc, #440]	@ (800b1f0 <HAL_SPI_Init+0x1dc>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d013      	beq.n	800b062 <HAL_SPI_Init+0x4e>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a6d      	ldr	r2, [pc, #436]	@ (800b1f4 <HAL_SPI_Init+0x1e0>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d00e      	beq.n	800b062 <HAL_SPI_Init+0x4e>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a6b      	ldr	r2, [pc, #428]	@ (800b1f8 <HAL_SPI_Init+0x1e4>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d009      	beq.n	800b062 <HAL_SPI_Init+0x4e>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a6a      	ldr	r2, [pc, #424]	@ (800b1fc <HAL_SPI_Init+0x1e8>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d004      	beq.n	800b062 <HAL_SPI_Init+0x4e>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a68      	ldr	r2, [pc, #416]	@ (800b200 <HAL_SPI_Init+0x1ec>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	e000      	b.n	800b064 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b062:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a5f      	ldr	r2, [pc, #380]	@ (800b1ec <HAL_SPI_Init+0x1d8>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d018      	beq.n	800b0a6 <HAL_SPI_Init+0x92>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a5d      	ldr	r2, [pc, #372]	@ (800b1f0 <HAL_SPI_Init+0x1dc>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d013      	beq.n	800b0a6 <HAL_SPI_Init+0x92>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a5c      	ldr	r2, [pc, #368]	@ (800b1f4 <HAL_SPI_Init+0x1e0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d00e      	beq.n	800b0a6 <HAL_SPI_Init+0x92>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a5a      	ldr	r2, [pc, #360]	@ (800b1f8 <HAL_SPI_Init+0x1e4>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d009      	beq.n	800b0a6 <HAL_SPI_Init+0x92>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a59      	ldr	r2, [pc, #356]	@ (800b1fc <HAL_SPI_Init+0x1e8>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d004      	beq.n	800b0a6 <HAL_SPI_Init+0x92>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a57      	ldr	r2, [pc, #348]	@ (800b200 <HAL_SPI_Init+0x1ec>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d105      	bne.n	800b0b2 <HAL_SPI_Init+0x9e>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d901      	bls.n	800b0b2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e11c      	b.n	800b2ec <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f91e 	bl	800b2f4 <SPI_GetPacketSize>
 800b0b8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a4b      	ldr	r2, [pc, #300]	@ (800b1ec <HAL_SPI_Init+0x1d8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d018      	beq.n	800b0f6 <HAL_SPI_Init+0xe2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a49      	ldr	r2, [pc, #292]	@ (800b1f0 <HAL_SPI_Init+0x1dc>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d013      	beq.n	800b0f6 <HAL_SPI_Init+0xe2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a48      	ldr	r2, [pc, #288]	@ (800b1f4 <HAL_SPI_Init+0x1e0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d00e      	beq.n	800b0f6 <HAL_SPI_Init+0xe2>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a46      	ldr	r2, [pc, #280]	@ (800b1f8 <HAL_SPI_Init+0x1e4>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d009      	beq.n	800b0f6 <HAL_SPI_Init+0xe2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a45      	ldr	r2, [pc, #276]	@ (800b1fc <HAL_SPI_Init+0x1e8>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d004      	beq.n	800b0f6 <HAL_SPI_Init+0xe2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a43      	ldr	r2, [pc, #268]	@ (800b200 <HAL_SPI_Init+0x1ec>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d102      	bne.n	800b0fc <HAL_SPI_Init+0xe8>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d820      	bhi.n	800b13e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b100:	4a40      	ldr	r2, [pc, #256]	@ (800b204 <HAL_SPI_Init+0x1f0>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d018      	beq.n	800b138 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a3f      	ldr	r2, [pc, #252]	@ (800b208 <HAL_SPI_Init+0x1f4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d013      	beq.n	800b138 <HAL_SPI_Init+0x124>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a3d      	ldr	r2, [pc, #244]	@ (800b20c <HAL_SPI_Init+0x1f8>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d00e      	beq.n	800b138 <HAL_SPI_Init+0x124>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a3c      	ldr	r2, [pc, #240]	@ (800b210 <HAL_SPI_Init+0x1fc>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d009      	beq.n	800b138 <HAL_SPI_Init+0x124>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a3a      	ldr	r2, [pc, #232]	@ (800b214 <HAL_SPI_Init+0x200>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d004      	beq.n	800b138 <HAL_SPI_Init+0x124>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a39      	ldr	r2, [pc, #228]	@ (800b218 <HAL_SPI_Init+0x204>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d104      	bne.n	800b142 <HAL_SPI_Init+0x12e>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b10      	cmp	r3, #16
 800b13c:	d901      	bls.n	800b142 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e0d4      	b.n	800b2ec <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7f6 faea 	bl	8001730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 0201 	bic.w	r2, r2, #1
 800b172:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b17e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b188:	d119      	bne.n	800b1be <HAL_SPI_Init+0x1aa>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b192:	d103      	bne.n	800b19c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d008      	beq.n	800b1ae <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10c      	bne.n	800b1be <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b1a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1ac:	d107      	bne.n	800b1be <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b1bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d028      	beq.n	800b21c <HAL_SPI_Init+0x208>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d924      	bls.n	800b21c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	e020      	b.n	800b22c <HAL_SPI_Init+0x218>
 800b1ea:	bf00      	nop
 800b1ec:	40014c00 	.word	0x40014c00
 800b1f0:	50014c00 	.word	0x50014c00
 800b1f4:	44002000 	.word	0x44002000
 800b1f8:	54002000 	.word	0x54002000
 800b1fc:	40015000 	.word	0x40015000
 800b200:	50015000 	.word	0x50015000
 800b204:	40013000 	.word	0x40013000
 800b208:	50013000 	.word	0x50013000
 800b20c:	40003800 	.word	0x40003800
 800b210:	50003800 	.word	0x50003800
 800b214:	40003c00 	.word	0x40003c00
 800b218:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b22a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b234:	431a      	orrs	r2, r3
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	431a      	orrs	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b23e:	ea42 0103 	orr.w	r1, r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68da      	ldr	r2, [r3, #12]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b256:	431a      	orrs	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25c:	431a      	orrs	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	431a      	orrs	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	431a      	orrs	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b280:	431a      	orrs	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	431a      	orrs	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b28c:	431a      	orrs	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b298:	ea42 0103 	orr.w	r1, r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f022 0201 	bic.w	r2, r2, #1
 800b2b6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00a      	beq.n	800b2da <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b300:	095b      	lsrs	r3, r3, #5
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	3307      	adds	r3, #7
 800b312:	08db      	lsrs	r3, r3, #3
 800b314:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e042      	b.n	800b3c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7f6 faaa 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2224      	movs	r2, #36	@ 0x24
 800b358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fab5 	bl	800b8e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f8c4 	bl	800b508 <UART_SetConfig>
 800b380:	4603      	mov	r3, r0
 800b382:	2b01      	cmp	r3, #1
 800b384:	d101      	bne.n	800b38a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e01b      	b.n	800b3c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b398:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	689a      	ldr	r2, [r3, #8]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b3a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f042 0201 	orr.w	r2, r2, #1
 800b3b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fb34 	bl	800ba28 <UART_CheckIdleState>
 800b3c0:	4603      	mov	r3, r0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b08a      	sub	sp, #40	@ 0x28
 800b3ce:	af02      	add	r7, sp, #8
 800b3d0:	60f8      	str	r0, [r7, #12]
 800b3d2:	60b9      	str	r1, [r7, #8]
 800b3d4:	603b      	str	r3, [r7, #0]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	f040 808b 	bne.w	800b4fc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <HAL_UART_Transmit+0x28>
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e083      	b.n	800b4fe <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b400:	2b80      	cmp	r3, #128	@ 0x80
 800b402:	d107      	bne.n	800b414 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b412:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2221      	movs	r2, #33	@ 0x21
 800b420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b424:	f7f7 f8b8 	bl	8002598 <HAL_GetTick>
 800b428:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	88fa      	ldrh	r2, [r7, #6]
 800b42e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	88fa      	ldrh	r2, [r7, #6]
 800b436:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b442:	d108      	bne.n	800b456 <HAL_UART_Transmit+0x8c>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b44c:	2300      	movs	r3, #0
 800b44e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	61bb      	str	r3, [r7, #24]
 800b454:	e003      	b.n	800b45e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b45e:	e030      	b.n	800b4c2 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2200      	movs	r2, #0
 800b468:	2180      	movs	r1, #128	@ 0x80
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f000 fb86 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d005      	beq.n	800b482 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2220      	movs	r2, #32
 800b47a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b47e:	2303      	movs	r3, #3
 800b480:	e03d      	b.n	800b4fe <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10b      	bne.n	800b4a0 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	461a      	mov	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b496:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	3302      	adds	r3, #2
 800b49c:	61bb      	str	r3, [r7, #24]
 800b49e:	e007      	b.n	800b4b0 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1c8      	bne.n	800b460 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2140      	movs	r1, #64	@ 0x40
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 fb4f 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e006      	b.n	800b4fe <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2220      	movs	r2, #32
 800b4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	e000      	b.n	800b4fe <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b4fc:	2302      	movs	r3, #2
  }
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b50c:	b094      	sub	sp, #80	@ 0x50
 800b50e:	af00      	add	r7, sp, #0
 800b510:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	4b78      	ldr	r3, [pc, #480]	@ (800b700 <UART_SetConfig+0x1f8>)
 800b51e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	431a      	orrs	r2, r3
 800b52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	431a      	orrs	r2, r3
 800b530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	4313      	orrs	r3, r2
 800b536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4971      	ldr	r1, [pc, #452]	@ (800b704 <UART_SetConfig+0x1fc>)
 800b540:	4019      	ands	r1, r3
 800b542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b548:	430b      	orrs	r3, r1
 800b54a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b558:	68d9      	ldr	r1, [r3, #12]
 800b55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	ea40 0301 	orr.w	r3, r0, r1
 800b562:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	4b64      	ldr	r3, [pc, #400]	@ (800b700 <UART_SetConfig+0x1f8>)
 800b570:	429a      	cmp	r2, r3
 800b572:	d009      	beq.n	800b588 <UART_SetConfig+0x80>
 800b574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	4b63      	ldr	r3, [pc, #396]	@ (800b708 <UART_SetConfig+0x200>)
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d004      	beq.n	800b588 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b580:	6a1a      	ldr	r2, [r3, #32]
 800b582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b584:	4313      	orrs	r3, r2
 800b586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b592:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b59c:	430b      	orrs	r3, r1
 800b59e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a6:	f023 000f 	bic.w	r0, r3, #15
 800b5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	ea40 0301 	orr.w	r3, r0, r1
 800b5b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	4b53      	ldr	r3, [pc, #332]	@ (800b70c <UART_SetConfig+0x204>)
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d102      	bne.n	800b5c8 <UART_SetConfig+0xc0>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5c6:	e066      	b.n	800b696 <UART_SetConfig+0x18e>
 800b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	4b50      	ldr	r3, [pc, #320]	@ (800b710 <UART_SetConfig+0x208>)
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d102      	bne.n	800b5d8 <UART_SetConfig+0xd0>
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d6:	e05e      	b.n	800b696 <UART_SetConfig+0x18e>
 800b5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	4b4d      	ldr	r3, [pc, #308]	@ (800b714 <UART_SetConfig+0x20c>)
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d102      	bne.n	800b5e8 <UART_SetConfig+0xe0>
 800b5e2:	2304      	movs	r3, #4
 800b5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5e6:	e056      	b.n	800b696 <UART_SetConfig+0x18e>
 800b5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	4b4a      	ldr	r3, [pc, #296]	@ (800b718 <UART_SetConfig+0x210>)
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d102      	bne.n	800b5f8 <UART_SetConfig+0xf0>
 800b5f2:	2308      	movs	r3, #8
 800b5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f6:	e04e      	b.n	800b696 <UART_SetConfig+0x18e>
 800b5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	4b47      	ldr	r3, [pc, #284]	@ (800b71c <UART_SetConfig+0x214>)
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d102      	bne.n	800b608 <UART_SetConfig+0x100>
 800b602:	2310      	movs	r3, #16
 800b604:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b606:	e046      	b.n	800b696 <UART_SetConfig+0x18e>
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	4b44      	ldr	r3, [pc, #272]	@ (800b720 <UART_SetConfig+0x218>)
 800b60e:	429a      	cmp	r2, r3
 800b610:	d102      	bne.n	800b618 <UART_SetConfig+0x110>
 800b612:	2320      	movs	r3, #32
 800b614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b616:	e03e      	b.n	800b696 <UART_SetConfig+0x18e>
 800b618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	4b41      	ldr	r3, [pc, #260]	@ (800b724 <UART_SetConfig+0x21c>)
 800b61e:	429a      	cmp	r2, r3
 800b620:	d102      	bne.n	800b628 <UART_SetConfig+0x120>
 800b622:	2340      	movs	r3, #64	@ 0x40
 800b624:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b626:	e036      	b.n	800b696 <UART_SetConfig+0x18e>
 800b628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	4b3e      	ldr	r3, [pc, #248]	@ (800b728 <UART_SetConfig+0x220>)
 800b62e:	429a      	cmp	r2, r3
 800b630:	d102      	bne.n	800b638 <UART_SetConfig+0x130>
 800b632:	2380      	movs	r3, #128	@ 0x80
 800b634:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b636:	e02e      	b.n	800b696 <UART_SetConfig+0x18e>
 800b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	4b3b      	ldr	r3, [pc, #236]	@ (800b72c <UART_SetConfig+0x224>)
 800b63e:	429a      	cmp	r2, r3
 800b640:	d103      	bne.n	800b64a <UART_SetConfig+0x142>
 800b642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b646:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b648:	e025      	b.n	800b696 <UART_SetConfig+0x18e>
 800b64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	4b38      	ldr	r3, [pc, #224]	@ (800b730 <UART_SetConfig+0x228>)
 800b650:	429a      	cmp	r2, r3
 800b652:	d103      	bne.n	800b65c <UART_SetConfig+0x154>
 800b654:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b65a:	e01c      	b.n	800b696 <UART_SetConfig+0x18e>
 800b65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	4b34      	ldr	r3, [pc, #208]	@ (800b734 <UART_SetConfig+0x22c>)
 800b662:	429a      	cmp	r2, r3
 800b664:	d103      	bne.n	800b66e <UART_SetConfig+0x166>
 800b666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b66a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b66c:	e013      	b.n	800b696 <UART_SetConfig+0x18e>
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b31      	ldr	r3, [pc, #196]	@ (800b738 <UART_SetConfig+0x230>)
 800b674:	429a      	cmp	r2, r3
 800b676:	d103      	bne.n	800b680 <UART_SetConfig+0x178>
 800b678:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b67c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b67e:	e00a      	b.n	800b696 <UART_SetConfig+0x18e>
 800b680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	4b1e      	ldr	r3, [pc, #120]	@ (800b700 <UART_SetConfig+0x1f8>)
 800b686:	429a      	cmp	r2, r3
 800b688:	d103      	bne.n	800b692 <UART_SetConfig+0x18a>
 800b68a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b68e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b690:	e001      	b.n	800b696 <UART_SetConfig+0x18e>
 800b692:	2300      	movs	r3, #0
 800b694:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	4b19      	ldr	r3, [pc, #100]	@ (800b700 <UART_SetConfig+0x1f8>)
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d005      	beq.n	800b6ac <UART_SetConfig+0x1a4>
 800b6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	4b18      	ldr	r3, [pc, #96]	@ (800b708 <UART_SetConfig+0x200>)
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	f040 8094 	bne.w	800b7d4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b6ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	623b      	str	r3, [r7, #32]
 800b6b2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b6b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b6b8:	f7fc fcf0 	bl	800809c <HAL_RCCEx_GetPeriphCLKFreq>
 800b6bc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 80f7 	beq.w	800b8b4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b73c <UART_SetConfig+0x234>)
 800b6cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d305      	bcc.n	800b6f6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d924      	bls.n	800b740 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b6fc:	e069      	b.n	800b7d2 <UART_SetConfig+0x2ca>
 800b6fe:	bf00      	nop
 800b700:	44002400 	.word	0x44002400
 800b704:	cfff69f3 	.word	0xcfff69f3
 800b708:	54002400 	.word	0x54002400
 800b70c:	40013800 	.word	0x40013800
 800b710:	40004400 	.word	0x40004400
 800b714:	40004800 	.word	0x40004800
 800b718:	40004c00 	.word	0x40004c00
 800b71c:	40005000 	.word	0x40005000
 800b720:	40006400 	.word	0x40006400
 800b724:	40007800 	.word	0x40007800
 800b728:	40007c00 	.word	0x40007c00
 800b72c:	40008000 	.word	0x40008000
 800b730:	40006800 	.word	0x40006800
 800b734:	40006c00 	.word	0x40006c00
 800b738:	40008400 	.word	0x40008400
 800b73c:	08011ae0 	.word	0x08011ae0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b742:	2200      	movs	r2, #0
 800b744:	61bb      	str	r3, [r7, #24]
 800b746:	61fa      	str	r2, [r7, #28]
 800b748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b74c:	4a64      	ldr	r2, [pc, #400]	@ (800b8e0 <UART_SetConfig+0x3d8>)
 800b74e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b752:	b29b      	uxth	r3, r3
 800b754:	2200      	movs	r2, #0
 800b756:	613b      	str	r3, [r7, #16]
 800b758:	617a      	str	r2, [r7, #20]
 800b75a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b75e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b762:	f7f4 fd93 	bl	800028c <__aeabi_uldivmod>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4610      	mov	r0, r2
 800b76c:	4619      	mov	r1, r3
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	f04f 0300 	mov.w	r3, #0
 800b776:	020b      	lsls	r3, r1, #8
 800b778:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b77c:	0202      	lsls	r2, r0, #8
 800b77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b780:	6849      	ldr	r1, [r1, #4]
 800b782:	0849      	lsrs	r1, r1, #1
 800b784:	2000      	movs	r0, #0
 800b786:	460c      	mov	r4, r1
 800b788:	4605      	mov	r5, r0
 800b78a:	eb12 0804 	adds.w	r8, r2, r4
 800b78e:	eb43 0905 	adc.w	r9, r3, r5
 800b792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	60bb      	str	r3, [r7, #8]
 800b79a:	60fa      	str	r2, [r7, #12]
 800b79c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7a0:	4640      	mov	r0, r8
 800b7a2:	4649      	mov	r1, r9
 800b7a4:	f7f4 fd72 	bl	800028c <__aeabi_uldivmod>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7b6:	d308      	bcc.n	800b7ca <UART_SetConfig+0x2c2>
 800b7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7be:	d204      	bcs.n	800b7ca <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7c6:	60da      	str	r2, [r3, #12]
 800b7c8:	e003      	b.n	800b7d2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b7d0:	e070      	b.n	800b8b4 <UART_SetConfig+0x3ac>
 800b7d2:	e06f      	b.n	800b8b4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7dc:	d13c      	bne.n	800b858 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b7de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7ea:	f7fc fc57 	bl	800809c <HAL_RCCEx_GetPeriphCLKFreq>
 800b7ee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d05e      	beq.n	800b8b4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7fa:	4a39      	ldr	r2, [pc, #228]	@ (800b8e0 <UART_SetConfig+0x3d8>)
 800b7fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b800:	461a      	mov	r2, r3
 800b802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b804:	fbb3 f3f2 	udiv	r3, r3, r2
 800b808:	005a      	lsls	r2, r3, #1
 800b80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	085b      	lsrs	r3, r3, #1
 800b810:	441a      	add	r2, r3
 800b812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b81c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b81e:	2b0f      	cmp	r3, #15
 800b820:	d916      	bls.n	800b850 <UART_SetConfig+0x348>
 800b822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b828:	d212      	bcs.n	800b850 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b82a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	f023 030f 	bic.w	r3, r3, #15
 800b832:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b836:	085b      	lsrs	r3, r3, #1
 800b838:	b29b      	uxth	r3, r3
 800b83a:	f003 0307 	and.w	r3, r3, #7
 800b83e:	b29a      	uxth	r2, r3
 800b840:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b842:	4313      	orrs	r3, r2
 800b844:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b84c:	60da      	str	r2, [r3, #12]
 800b84e:	e031      	b.n	800b8b4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b856:	e02d      	b.n	800b8b4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b85a:	2200      	movs	r2, #0
 800b85c:	469a      	mov	sl, r3
 800b85e:	4693      	mov	fp, r2
 800b860:	4650      	mov	r0, sl
 800b862:	4659      	mov	r1, fp
 800b864:	f7fc fc1a 	bl	800809c <HAL_RCCEx_GetPeriphCLKFreq>
 800b868:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b86a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d021      	beq.n	800b8b4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b874:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e0 <UART_SetConfig+0x3d8>)
 800b876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b87a:	461a      	mov	r2, r3
 800b87c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b87e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	085b      	lsrs	r3, r3, #1
 800b888:	441a      	add	r2, r3
 800b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b896:	2b0f      	cmp	r3, #15
 800b898:	d909      	bls.n	800b8ae <UART_SetConfig+0x3a6>
 800b89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b89c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a0:	d205      	bcs.n	800b8ae <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	60da      	str	r2, [r3, #12]
 800b8ac:	e002      	b.n	800b8b4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b8d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3750      	adds	r7, #80	@ 0x50
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8de:	bf00      	nop
 800b8e0:	08011ae0 	.word	0x08011ae0

0800b8e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f0:	f003 0308 	and.w	r3, r3, #8
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00a      	beq.n	800b90e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	430a      	orrs	r2, r1
 800b92e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b934:	f003 0302 	and.w	r3, r3, #2
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00a      	beq.n	800b952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b956:	f003 0304 	and.w	r3, r3, #4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	430a      	orrs	r2, r1
 800b972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b978:	f003 0310 	and.w	r3, r3, #16
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	f003 0320 	and.w	r3, r3, #32
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00a      	beq.n	800b9b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01a      	beq.n	800b9fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9e2:	d10a      	bne.n	800b9fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	605a      	str	r2, [r3, #4]
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b098      	sub	sp, #96	@ 0x60
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba38:	f7f6 fdae 	bl	8002598 <HAL_GetTick>
 800ba3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	2b08      	cmp	r3, #8
 800ba4a:	d12f      	bne.n	800baac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba54:	2200      	movs	r2, #0
 800ba56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f88e 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d022      	beq.n	800baac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba8c:	e841 2300 	strex	r3, r2, [r1]
 800ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e6      	bne.n	800ba66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e063      	b.n	800bb74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d149      	bne.n	800bb4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bac2:	2200      	movs	r2, #0
 800bac4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f857 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d03c      	beq.n	800bb4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	623b      	str	r3, [r7, #32]
   return(result);
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800baf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e6      	bne.n	800bad4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3308      	adds	r3, #8
 800bb24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb26:	61fa      	str	r2, [r7, #28]
 800bb28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	69b9      	ldr	r1, [r7, #24]
 800bb2c:	69fa      	ldr	r2, [r7, #28]
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	617b      	str	r3, [r7, #20]
   return(result);
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e5      	bne.n	800bb06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	e012      	b.n	800bb74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3758      	adds	r7, #88	@ 0x58
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8c:	e04f      	b.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d04b      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb96:	f7f6 fcff 	bl	8002598 <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d302      	bcc.n	800bbac <UART_WaitOnFlagUntilTimeout+0x30>
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e04e      	b.n	800bc4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0304 	and.w	r3, r3, #4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d037      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b80      	cmp	r3, #128	@ 0x80
 800bbc2:	d034      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b40      	cmp	r3, #64	@ 0x40
 800bbc8:	d031      	beq.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b08      	cmp	r3, #8
 800bbd6:	d110      	bne.n	800bbfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2208      	movs	r2, #8
 800bbde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 f838 	bl	800bc56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2208      	movs	r2, #8
 800bbea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e029      	b.n	800bc4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc08:	d111      	bne.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f81e 	bl	800bc56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e00f      	b.n	800bc4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69da      	ldr	r2, [r3, #28]
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	4013      	ands	r3, r2
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	bf0c      	ite	eq
 800bc3e:	2301      	moveq	r3, #1
 800bc40:	2300      	movne	r3, #0
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	461a      	mov	r2, r3
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d0a0      	beq.n	800bb8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b095      	sub	sp, #84	@ 0x54
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc66:	e853 3f00 	ldrex	r3, [r3]
 800bc6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc84:	e841 2300 	strex	r3, r2, [r1]
 800bc88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e6      	bne.n	800bc5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3308      	adds	r3, #8
 800bc96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	e853 3f00 	ldrex	r3, [r3]
 800bc9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bca6:	f023 0301 	bic.w	r3, r3, #1
 800bcaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e3      	bne.n	800bc90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d118      	bne.n	800bd02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f023 0310 	bic.w	r3, r3, #16
 800bce4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcee:	61bb      	str	r3, [r7, #24]
 800bcf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf2:	6979      	ldr	r1, [r7, #20]
 800bcf4:	69ba      	ldr	r2, [r7, #24]
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	613b      	str	r3, [r7, #16]
   return(result);
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e6      	bne.n	800bcd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bd16:	bf00      	nop
 800bd18:	3754      	adds	r7, #84	@ 0x54
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b085      	sub	sp, #20
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d101      	bne.n	800bd38 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd34:	2302      	movs	r3, #2
 800bd36:	e027      	b.n	800bd88 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2224      	movs	r2, #36	@ 0x24
 800bd44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0201 	bic.w	r2, r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bd66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2220      	movs	r2, #32
 800bd7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d101      	bne.n	800bdac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bda8:	2302      	movs	r3, #2
 800bdaa:	e02d      	b.n	800be08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2224      	movs	r2, #36	@ 0x24
 800bdb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0201 	bic.w	r2, r2, #1
 800bdd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f84f 	bl	800be8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2220      	movs	r2, #32
 800bdfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be20:	2b01      	cmp	r3, #1
 800be22:	d101      	bne.n	800be28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be24:	2302      	movs	r3, #2
 800be26:	e02d      	b.n	800be84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2224      	movs	r2, #36	@ 0x24
 800be34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0201 	bic.w	r2, r2, #1
 800be4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	430a      	orrs	r2, r1
 800be62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f811 	bl	800be8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2220      	movs	r2, #32
 800be76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d108      	bne.n	800beae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800beac:	e031      	b.n	800bf12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800beae:	2308      	movs	r3, #8
 800beb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800beb2:	2308      	movs	r3, #8
 800beb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	0e5b      	lsrs	r3, r3, #25
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0307 	and.w	r3, r3, #7
 800bec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	0f5b      	lsrs	r3, r3, #29
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f003 0307 	and.w	r3, r3, #7
 800bed4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	7b3a      	ldrb	r2, [r7, #12]
 800beda:	4911      	ldr	r1, [pc, #68]	@ (800bf20 <UARTEx_SetNbDataToProcess+0x94>)
 800bedc:	5c8a      	ldrb	r2, [r1, r2]
 800bede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bee2:	7b3a      	ldrb	r2, [r7, #12]
 800bee4:	490f      	ldr	r1, [pc, #60]	@ (800bf24 <UARTEx_SetNbDataToProcess+0x98>)
 800bee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800beec:	b29a      	uxth	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
 800bef6:	7b7a      	ldrb	r2, [r7, #13]
 800bef8:	4909      	ldr	r1, [pc, #36]	@ (800bf20 <UARTEx_SetNbDataToProcess+0x94>)
 800befa:	5c8a      	ldrb	r2, [r1, r2]
 800befc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf00:	7b7a      	ldrb	r2, [r7, #13]
 800bf02:	4908      	ldr	r1, [pc, #32]	@ (800bf24 <UARTEx_SetNbDataToProcess+0x98>)
 800bf04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf06:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bf12:	bf00      	nop
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	08011af8 	.word	0x08011af8
 800bf24:	08011b00 	.word	0x08011b00

0800bf28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf40:	f043 0201 	orr.w	r2, r3, #1
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bf56:	b084      	sub	sp, #16
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	f107 001c 	add.w	r0, r7, #28
 800bf64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e008      	b.n	800bf84 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff ffd8 	bl	800bf28 <USB_CoreReset>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf8e:	b004      	add	sp, #16
 800bf90:	4770      	bx	lr

0800bf92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b085      	sub	sp, #20
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bfa0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bfa4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b085      	sub	sp, #20
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bfc2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bfc6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	43db      	mvns	r3, r3
 800bfd0:	401a      	ands	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	641a      	str	r2, [r3, #64]	@ 0x40
 800c002:	e00b      	b.n	800c01c <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800c004:	78fb      	ldrb	r3, [r7, #3]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d106      	bne.n	800c018 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c00e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	641a      	str	r2, [r3, #64]	@ 0x40
 800c016:	e001      	b.n	800c01c <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e000      	b.n	800c01e <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c02a:	b084      	sub	sp, #16
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	f107 001c 	add.w	r0, r7, #28
 800c038:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c046:	f023 0201 	bic.w	r2, r3, #1
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c04e:	2100      	movs	r1, #0
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ffc7 	bl	800bfe4 <USB_SetCurrentMode>
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c06c:	b004      	add	sp, #16
 800c06e:	4770      	bx	lr

0800c070 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c070:	b480      	push	{r7}
 800c072:	b09f      	sub	sp, #124	@ 0x7c
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	4ba0      	ldr	r3, [pc, #640]	@ (800c310 <USB_ActivateEndpoint+0x2a0>)
 800c08e:	4013      	ands	r3, r2
 800c090:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	78db      	ldrb	r3, [r3, #3]
 800c096:	2b03      	cmp	r3, #3
 800c098:	d819      	bhi.n	800c0ce <USB_ActivateEndpoint+0x5e>
 800c09a:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a0 <USB_ActivateEndpoint+0x30>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c0b1 	.word	0x0800c0b1
 800c0a4:	0800c0c5 	.word	0x0800c0c5
 800c0a8:	0800c0d7 	.word	0x0800c0d7
 800c0ac:	0800c0bb 	.word	0x0800c0bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c0b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c0b6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c0b8:	e00e      	b.n	800c0d8 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c0ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0bc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c0c0:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c0c2:	e009      	b.n	800c0d8 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c0c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c0ca:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c0cc:	e004      	b.n	800c0d8 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800c0d4:	e000      	b.n	800c0d8 <USB_ActivateEndpoint+0x68>
      break;
 800c0d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	441a      	add	r2, r3
 800c0e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ec:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	4b86      	ldr	r3, [pc, #536]	@ (800c314 <USB_ActivateEndpoint+0x2a4>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	7812      	ldrb	r2, [r2, #0]
 800c102:	4313      	orrs	r3, r2
 800c104:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	441a      	add	r2, r3
 800c110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c11a:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	7b1b      	ldrb	r3, [r3, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	f040 8177 	bne.w	800c414 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	785b      	ldrb	r3, [r3, #1]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d079      	beq.n	800c222 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c138:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c148:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c14c:	0c12      	lsrs	r2, r2, #16
 800c14e:	0412      	lsls	r2, r2, #16
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c15c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c160:	6819      	ldr	r1, [r3, #0]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	88db      	ldrh	r3, [r3, #6]
 800c166:	089b      	lsrs	r3, r3, #2
 800c168:	b29b      	uxth	r3, r3
 800c16a:	009a      	lsls	r2, r3, #2
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c17a:	430a      	orrs	r2, r1
 800c17c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	61bb      	str	r3, [r7, #24]
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	d013      	beq.n	800c1be <USB_ActivateEndpoint+0x14e>
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b5c      	ldr	r3, [pc, #368]	@ (800c314 <USB_ActivateEndpoint+0x2a4>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	441a      	add	r2, r3
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	78db      	ldrb	r3, [r3, #3]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d018      	beq.n	800c1f8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b51      	ldr	r3, [pc, #324]	@ (800c318 <USB_ActivateEndpoint+0x2a8>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f083 0320 	eor.w	r3, r3, #32
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	441a      	add	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	e28c      	b.n	800c712 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	4b44      	ldr	r3, [pc, #272]	@ (800c318 <USB_ActivateEndpoint+0x2a8>)
 800c206:	4013      	ands	r3, r2
 800c208:	613b      	str	r3, [r7, #16]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	441a      	add	r2, r3
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	e277      	b.n	800c712 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c22c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c23c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c240:	0c12      	lsrs	r2, r2, #16
 800c242:	0412      	lsls	r2, r2, #16
 800c244:	605a      	str	r2, [r3, #4]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c254:	6859      	ldr	r1, [r3, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	88db      	ldrh	r3, [r3, #6]
 800c25a:	089b      	lsrs	r3, r3, #2
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	009a      	lsls	r2, r3, #2
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c26a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c26e:	430a      	orrs	r2, r1
 800c270:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c27c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c28c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c290:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d112      	bne.n	800c2c4 <USB_ActivateEndpoint+0x254>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c2c0:	605a      	str	r2, [r3, #4]
 800c2c2:	e04d      	b.n	800c360 <USB_ActivateEndpoint+0x2f0>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2ca:	d827      	bhi.n	800c31c <USB_ActivateEndpoint+0x2ac>
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	085b      	lsrs	r3, r3, #1
 800c2d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <USB_ActivateEndpoint+0x276>
 800c2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2f4:	6859      	ldr	r1, [r3, #4]
 800c2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f8:	069a      	lsls	r2, r3, #26
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c304:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c308:	430a      	orrs	r2, r1
 800c30a:	605a      	str	r2, [r3, #4]
 800c30c:	e028      	b.n	800c360 <USB_ActivateEndpoint+0x2f0>
 800c30e:	bf00      	nop
 800c310:	07ff898f 	.word	0x07ff898f
 800c314:	07ff8f8f 	.word	0x07ff8f8f
 800c318:	07ff8fbf 	.word	0x07ff8fbf
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	095b      	lsrs	r3, r3, #5
 800c322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d102      	bne.n	800c336 <USB_ActivateEndpoint+0x2c6>
 800c330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c332:	3b01      	subs	r3, #1
 800c334:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c340:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c348:	069b      	lsls	r3, r3, #26
 800c34a:	431a      	orrs	r2, r3
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c356:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c35a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c35e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d013      	beq.n	800c3a0 <USB_ActivateEndpoint+0x330>
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	4b9c      	ldr	r3, [pc, #624]	@ (800c5f8 <USB_ActivateEndpoint+0x588>)
 800c386:	4013      	ands	r3, r2
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	441a      	add	r2, r3
 800c394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c396:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c39e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d11c      	bne.n	800c3e2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	4b91      	ldr	r3, [pc, #580]	@ (800c5fc <USB_ActivateEndpoint+0x58c>)
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c3c8:	61fb      	str	r3, [r7, #28]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	441a      	add	r2, r3
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3de:	6013      	str	r3, [r2, #0]
 800c3e0:	e197      	b.n	800c712 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	4b83      	ldr	r3, [pc, #524]	@ (800c5fc <USB_ActivateEndpoint+0x58c>)
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	623b      	str	r3, [r7, #32]
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c3fa:	623b      	str	r3, [r7, #32]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	441a      	add	r2, r3
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c40c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	e17e      	b.n	800c712 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	78db      	ldrb	r3, [r3, #3]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d114      	bne.n	800c446 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	4b73      	ldr	r3, [pc, #460]	@ (800c5f8 <USB_ActivateEndpoint+0x588>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	441a      	add	r2, r3
 800c438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c43a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c43e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c442:	6013      	str	r3, [r2, #0]
 800c444:	e013      	b.n	800c46e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	4b6b      	ldr	r3, [pc, #428]	@ (800c600 <USB_ActivateEndpoint+0x590>)
 800c454:	4013      	ands	r3, r2
 800c456:	667b      	str	r3, [r7, #100]	@ 0x64
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	441a      	add	r2, r3
 800c462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c46c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c478:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c488:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c48c:	0c12      	lsrs	r2, r2, #16
 800c48e:	0412      	lsls	r2, r2, #16
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c49c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4a0:	6819      	ldr	r1, [r3, #0]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	891b      	ldrh	r3, [r3, #8]
 800c4a6:	089b      	lsrs	r3, r3, #2
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	009a      	lsls	r2, r3, #2
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4dc:	0c12      	lsrs	r2, r2, #16
 800c4de:	0412      	lsls	r2, r2, #16
 800c4e0:	605a      	str	r2, [r3, #4]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4f0:	6859      	ldr	r1, [r3, #4]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	895b      	ldrh	r3, [r3, #10]
 800c4f6:	089b      	lsrs	r3, r3, #2
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	009a      	lsls	r2, r3, #2
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c506:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c50a:	430a      	orrs	r2, r1
 800c50c:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	785b      	ldrb	r3, [r3, #1]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d178      	bne.n	800c608 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	643b      	str	r3, [r7, #64]	@ 0x40
 800c524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d013      	beq.n	800c556 <USB_ActivateEndpoint+0x4e6>
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b2f      	ldr	r3, [pc, #188]	@ (800c5f8 <USB_ActivateEndpoint+0x588>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	441a      	add	r2, r3
 800c54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c54c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c554:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d013      	beq.n	800c596 <USB_ActivateEndpoint+0x526>
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b1f      	ldr	r3, [pc, #124]	@ (800c5f8 <USB_ActivateEndpoint+0x588>)
 800c57c:	4013      	ands	r3, r2
 800c57e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	441a      	add	r2, r3
 800c58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c58c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c590:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c594:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b16      	ldr	r3, [pc, #88]	@ (800c5fc <USB_ActivateEndpoint+0x58c>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c5ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c5b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	441a      	add	r2, r3
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5cc:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	4b0a      	ldr	r3, [pc, #40]	@ (800c604 <USB_ActivateEndpoint+0x594>)
 800c5dc:	4013      	ands	r3, r2
 800c5de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	441a      	add	r2, r3
 800c5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	e08c      	b.n	800c712 <USB_ActivateEndpoint+0x6a2>
 800c5f8:	07ff8f8f 	.word	0x07ff8f8f
 800c5fc:	07ffbf8f 	.word	0x07ffbf8f
 800c600:	07ff8e8f 	.word	0x07ff8e8f
 800c604:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d013      	beq.n	800c648 <USB_ActivateEndpoint+0x5d8>
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	4b3d      	ldr	r3, [pc, #244]	@ (800c724 <USB_ActivateEndpoint+0x6b4>)
 800c62e:	4013      	ands	r3, r2
 800c630:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	441a      	add	r2, r3
 800c63c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c63e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c646:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	657b      	str	r3, [r7, #84]	@ 0x54
 800c656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d013      	beq.n	800c688 <USB_ActivateEndpoint+0x618>
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4413      	add	r3, r2
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	4b2d      	ldr	r3, [pc, #180]	@ (800c724 <USB_ActivateEndpoint+0x6b4>)
 800c66e:	4013      	ands	r3, r2
 800c670:	653b      	str	r3, [r7, #80]	@ 0x50
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	441a      	add	r2, r3
 800c67c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c67e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c686:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	78db      	ldrb	r3, [r3, #3]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d018      	beq.n	800c6c2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	4b22      	ldr	r3, [pc, #136]	@ (800c728 <USB_ActivateEndpoint+0x6b8>)
 800c69e:	4013      	ands	r3, r2
 800c6a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6a4:	f083 0320 	eor.w	r3, r3, #32
 800c6a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	441a      	add	r2, r3
 800c6b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	e013      	b.n	800c6ea <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	4b16      	ldr	r3, [pc, #88]	@ (800c728 <USB_ActivateEndpoint+0x6b8>)
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	441a      	add	r2, r3
 800c6de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6e8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	4413      	add	r3, r2
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c72c <USB_ActivateEndpoint+0x6bc>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	441a      	add	r2, r3
 800c706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c70c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c710:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c712:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c716:	4618      	mov	r0, r3
 800c718:	377c      	adds	r7, #124	@ 0x7c
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	07ff8f8f 	.word	0x07ff8f8f
 800c728:	07ff8fbf 	.word	0x07ff8fbf
 800c72c:	07ffbf8f 	.word	0x07ffbf8f

0800c730 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c730:	b480      	push	{r7}
 800c732:	b097      	sub	sp, #92	@ 0x5c
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	7b1b      	ldrb	r3, [r3, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d16d      	bne.n	800c81e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d034      	beq.n	800c7b4 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	613b      	str	r3, [r7, #16]
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d013      	beq.n	800c78a <USB_DeactivateEndpoint+0x5a>
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	4b6d      	ldr	r3, [pc, #436]	@ (800c924 <USB_DeactivateEndpoint+0x1f4>)
 800c770:	4013      	ands	r3, r2
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	441a      	add	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c784:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c788:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4b64      	ldr	r3, [pc, #400]	@ (800c928 <USB_DeactivateEndpoint+0x1f8>)
 800c798:	4013      	ands	r3, r2
 800c79a:	60bb      	str	r3, [r7, #8]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	441a      	add	r2, r3
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	e139      	b.n	800ca28 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	61fb      	str	r3, [r7, #28]
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d013      	beq.n	800c7f4 <USB_DeactivateEndpoint+0xc4>
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	4b52      	ldr	r3, [pc, #328]	@ (800c924 <USB_DeactivateEndpoint+0x1f4>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	441a      	add	r2, r3
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7f2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	4b4a      	ldr	r3, [pc, #296]	@ (800c92c <USB_DeactivateEndpoint+0x1fc>)
 800c802:	4013      	ands	r3, r2
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	441a      	add	r2, r3
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	e104      	b.n	800ca28 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	785b      	ldrb	r3, [r3, #1]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f040 8084 	bne.w	800c930 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d013      	beq.n	800c868 <USB_DeactivateEndpoint+0x138>
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	4413      	add	r3, r2
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	4b35      	ldr	r3, [pc, #212]	@ (800c924 <USB_DeactivateEndpoint+0x1f4>)
 800c84e:	4013      	ands	r3, r2
 800c850:	637b      	str	r3, [r7, #52]	@ 0x34
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	441a      	add	r2, r3
 800c85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c866:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4413      	add	r3, r2
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	633b      	str	r3, [r7, #48]	@ 0x30
 800c876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d013      	beq.n	800c8a8 <USB_DeactivateEndpoint+0x178>
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b25      	ldr	r3, [pc, #148]	@ (800c924 <USB_DeactivateEndpoint+0x1f4>)
 800c88e:	4013      	ands	r3, r2
 800c890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	441a      	add	r2, r3
 800c89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8a6:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	4b1b      	ldr	r3, [pc, #108]	@ (800c924 <USB_DeactivateEndpoint+0x1f4>)
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	441a      	add	r2, r3
 800c8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8ce:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	4b13      	ldr	r3, [pc, #76]	@ (800c92c <USB_DeactivateEndpoint+0x1fc>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	441a      	add	r2, r3
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	4b08      	ldr	r3, [pc, #32]	@ (800c928 <USB_DeactivateEndpoint+0x1f8>)
 800c906:	4013      	ands	r3, r2
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	441a      	add	r2, r3
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	e082      	b.n	800ca28 <USB_DeactivateEndpoint+0x2f8>
 800c922:	bf00      	nop
 800c924:	07ff8f8f 	.word	0x07ff8f8f
 800c928:	07ff8fbf 	.word	0x07ff8fbf
 800c92c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c93e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d013      	beq.n	800c970 <USB_DeactivateEndpoint+0x240>
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	4b38      	ldr	r3, [pc, #224]	@ (800ca38 <USB_DeactivateEndpoint+0x308>)
 800c956:	4013      	ands	r3, r2
 800c958:	653b      	str	r3, [r7, #80]	@ 0x50
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	441a      	add	r2, r3
 800c964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c96e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c97e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c984:	2b00      	cmp	r3, #0
 800c986:	d013      	beq.n	800c9b0 <USB_DeactivateEndpoint+0x280>
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	4b28      	ldr	r3, [pc, #160]	@ (800ca38 <USB_DeactivateEndpoint+0x308>)
 800c996:	4013      	ands	r3, r2
 800c998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	441a      	add	r2, r3
 800c9a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9ae:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	4b1e      	ldr	r3, [pc, #120]	@ (800ca38 <USB_DeactivateEndpoint+0x308>)
 800c9be:	4013      	ands	r3, r2
 800c9c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	441a      	add	r2, r3
 800c9cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9d6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	4b15      	ldr	r3, [pc, #84]	@ (800ca3c <USB_DeactivateEndpoint+0x30c>)
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	441a      	add	r2, r3
 800c9f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9fe:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca40 <USB_DeactivateEndpoint+0x310>)
 800ca0e:	4013      	ands	r3, r2
 800ca10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	441a      	add	r2, r3
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca26:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	375c      	adds	r7, #92	@ 0x5c
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	07ff8f8f 	.word	0x07ff8f8f
 800ca3c:	07ff8fbf 	.word	0x07ff8fbf
 800ca40:	07ffbf8f 	.word	0x07ffbf8f

0800ca44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b096      	sub	sp, #88	@ 0x58
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	785b      	ldrb	r3, [r3, #1]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	f040 84ed 	bne.w	800d432 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	699a      	ldr	r2, [r3, #24]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d903      	bls.n	800ca6c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca6a:	e002      	b.n	800ca72 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	7b1b      	ldrb	r3, [r3, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d12e      	bne.n	800cad8 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	6959      	ldr	r1, [r3, #20]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	88da      	ldrh	r2, [r3, #6]
 800ca82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f001 f963 	bl	800dd52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caaa:	b292      	uxth	r2, r2
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cab8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cabc:	6819      	ldr	r1, [r3, #0]
 800cabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cac0:	041a      	lsls	r2, r3, #16
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cacc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cad0:	430a      	orrs	r2, r1
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	f000 bc90 	b.w	800d3f8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	78db      	ldrb	r3, [r3, #3]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	f040 8332 	bne.w	800d146 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	6a1a      	ldr	r2, [r3, #32]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	429a      	cmp	r2, r3
 800caec:	f240 82e4 	bls.w	800d0b8 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	4ba4      	ldr	r3, [pc, #656]	@ (800cd90 <USB_EPStartXfer+0x34c>)
 800cafe:	4013      	ands	r3, r2
 800cb00:	613b      	str	r3, [r7, #16]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	441a      	add	r2, r3
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cb12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb16:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	6a1a      	ldr	r2, [r3, #32]
 800cb1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb1e:	1ad2      	subs	r2, r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 8161 	beq.w	800cdfc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	785b      	ldrb	r3, [r3, #1]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d16a      	bne.n	800cc18 <USB_EPStartXfer+0x1d4>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb60:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb64:	605a      	str	r2, [r3, #4]
 800cb66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d112      	bne.n	800cb92 <USB_EPStartXfer+0x14e>
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	00db      	lsls	r3, r3, #3
 800cb82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb8e:	605a      	str	r2, [r3, #4]
 800cb90:	e06a      	b.n	800cc68 <USB_EPStartXfer+0x224>
 800cb92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb94:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb96:	d81e      	bhi.n	800cbd6 <USB_EPStartXfer+0x192>
 800cb98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb9a:	085b      	lsrs	r3, r3, #1
 800cb9c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <USB_EPStartXfer+0x16a>
 800cba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbaa:	3301      	adds	r3, #1
 800cbac:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbbc:	6859      	ldr	r1, [r3, #4]
 800cbbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbc0:	069a      	lsls	r2, r3, #26
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	605a      	str	r2, [r3, #4]
 800cbd4:	e048      	b.n	800cc68 <USB_EPStartXfer+0x224>
 800cbd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbd8:	095b      	lsrs	r3, r3, #5
 800cbda:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbde:	f003 031f 	and.w	r3, r3, #31
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d102      	bne.n	800cbec <USB_EPStartXfer+0x1a8>
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbfe:	069b      	lsls	r3, r3, #26
 800cc00:	431a      	orrs	r2, r3
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc14:	605a      	str	r2, [r3, #4]
 800cc16:	e027      	b.n	800cc68 <USB_EPStartXfer+0x224>
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	785b      	ldrb	r3, [r3, #1]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d123      	bne.n	800cc68 <USB_EPStartXfer+0x224>
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	00db      	lsls	r3, r3, #3
 800cc26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc2e:	685a      	ldr	r2, [r3, #4]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc3e:	b292      	uxth	r2, r2
 800cc40:	605a      	str	r2, [r3, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc50:	6859      	ldr	r1, [r3, #4]
 800cc52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc54:	041a      	lsls	r2, r3, #16
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc64:	430a      	orrs	r2, r1
 800cc66:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	895b      	ldrh	r3, [r3, #10]
 800cc6c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	6959      	ldr	r1, [r3, #20]
 800cc72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	8b7a      	ldrh	r2, [r7, #26]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 f86a 	bl	800dd52 <USB_WritePMA>
            ep->xfer_buff += len;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	695a      	ldr	r2, [r3, #20]
 800cc82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc84:	441a      	add	r2, r3
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	6a1a      	ldr	r2, [r3, #32]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d906      	bls.n	800cca4 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6a1a      	ldr	r2, [r3, #32]
 800cc9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc9c:	1ad2      	subs	r2, r2, r3
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	621a      	str	r2, [r3, #32]
 800cca2:	e005      	b.n	800ccb0 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2200      	movs	r2, #0
 800ccae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	785b      	ldrb	r3, [r3, #1]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d16d      	bne.n	800cd94 <USB_EPStartXfer+0x350>
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccd6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d112      	bne.n	800cd08 <USB_EPStartXfer+0x2c4>
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	e06d      	b.n	800cde4 <USB_EPStartXfer+0x3a0>
 800cd08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd0c:	d81e      	bhi.n	800cd4c <USB_EPStartXfer+0x308>
 800cd0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd10:	085b      	lsrs	r3, r3, #1
 800cd12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <USB_EPStartXfer+0x2e0>
 800cd1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd20:	3301      	adds	r3, #1
 800cd22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd32:	6819      	ldr	r1, [r3, #0]
 800cd34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd36:	069a      	lsls	r2, r3, #26
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd46:	430a      	orrs	r2, r1
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	e04b      	b.n	800cde4 <USB_EPStartXfer+0x3a0>
 800cd4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd4e:	095b      	lsrs	r3, r3, #5
 800cd50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd54:	f003 031f 	and.w	r3, r3, #31
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d102      	bne.n	800cd62 <USB_EPStartXfer+0x31e>
 800cd5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd74:	069b      	lsls	r3, r3, #26
 800cd76:	431a      	orrs	r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	e02a      	b.n	800cde4 <USB_EPStartXfer+0x3a0>
 800cd8e:	bf00      	nop
 800cd90:	07ff8f8f 	.word	0x07ff8f8f
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	785b      	ldrb	r3, [r3, #1]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d123      	bne.n	800cde4 <USB_EPStartXfer+0x3a0>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cda6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdba:	b292      	uxth	r2, r2
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdcc:	6819      	ldr	r1, [r3, #0]
 800cdce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdd0:	041a      	lsls	r2, r3, #16
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cde0:	430a      	orrs	r2, r1
 800cde2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	891b      	ldrh	r3, [r3, #8]
 800cde8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	6959      	ldr	r1, [r3, #20]
 800cdee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	8b7a      	ldrh	r2, [r7, #26]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 ffac 	bl	800dd52 <USB_WritePMA>
 800cdfa:	e2fd      	b.n	800d3f8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	785b      	ldrb	r3, [r3, #1]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d16a      	bne.n	800ceda <USB_EPStartXfer+0x496>
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce22:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce26:	601a      	str	r2, [r3, #0]
 800ce28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d112      	bne.n	800ce54 <USB_EPStartXfer+0x410>
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e06a      	b.n	800cf2a <USB_EPStartXfer+0x4e6>
 800ce54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce56:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce58:	d81e      	bhi.n	800ce98 <USB_EPStartXfer+0x454>
 800ce5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce5c:	085b      	lsrs	r3, r3, #1
 800ce5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <USB_EPStartXfer+0x42c>
 800ce6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce7e:	6819      	ldr	r1, [r3, #0]
 800ce80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce82:	069a      	lsls	r2, r3, #26
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce92:	430a      	orrs	r2, r1
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	e048      	b.n	800cf2a <USB_EPStartXfer+0x4e6>
 800ce98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce9a:	095b      	lsrs	r3, r3, #5
 800ce9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d102      	bne.n	800ceae <USB_EPStartXfer+0x46a>
 800cea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cec0:	069b      	lsls	r3, r3, #26
 800cec2:	431a      	orrs	r2, r3
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cece:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ced2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	e027      	b.n	800cf2a <USB_EPStartXfer+0x4e6>
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d123      	bne.n	800cf2a <USB_EPStartXfer+0x4e6>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cefc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf00:	b292      	uxth	r2, r2
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf16:	041a      	lsls	r2, r3, #16
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf26:	430a      	orrs	r2, r1
 800cf28:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	891b      	ldrh	r3, [r3, #8]
 800cf2e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	6959      	ldr	r1, [r3, #20]
 800cf34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	8b7a      	ldrh	r2, [r7, #26]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 ff09 	bl	800dd52 <USB_WritePMA>
            ep->xfer_buff += len;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	695a      	ldr	r2, [r3, #20]
 800cf44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf46:	441a      	add	r2, r3
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	6a1a      	ldr	r2, [r3, #32]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d906      	bls.n	800cf66 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	6a1a      	ldr	r2, [r3, #32]
 800cf5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf5e:	1ad2      	subs	r2, r2, r3
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	621a      	str	r2, [r3, #32]
 800cf64:	e005      	b.n	800cf72 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	6a1b      	ldr	r3, [r3, #32]
 800cf6a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	785b      	ldrb	r3, [r3, #1]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d16a      	bne.n	800d050 <USB_EPStartXfer+0x60c>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	00db      	lsls	r3, r3, #3
 800cf90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf98:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cf9c:	605a      	str	r2, [r3, #4]
 800cf9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d112      	bne.n	800cfca <USB_EPStartXfer+0x586>
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	00db      	lsls	r3, r3, #3
 800cfba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cfc6:	605a      	str	r2, [r3, #4]
 800cfc8:	e06a      	b.n	800d0a0 <USB_EPStartXfer+0x65c>
 800cfca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfcc:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfce:	d81e      	bhi.n	800d00e <USB_EPStartXfer+0x5ca>
 800cfd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd2:	085b      	lsrs	r3, r3, #1
 800cfd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <USB_EPStartXfer+0x5a2>
 800cfe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cff0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cff4:	6859      	ldr	r1, [r3, #4]
 800cff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cff8:	069a      	lsls	r2, r3, #26
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	00db      	lsls	r3, r3, #3
 800d000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d004:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d008:	430a      	orrs	r2, r1
 800d00a:	605a      	str	r2, [r3, #4]
 800d00c:	e048      	b.n	800d0a0 <USB_EPStartXfer+0x65c>
 800d00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d010:	095b      	lsrs	r3, r3, #5
 800d012:	647b      	str	r3, [r7, #68]	@ 0x44
 800d014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d016:	f003 031f 	and.w	r3, r3, #31
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d102      	bne.n	800d024 <USB_EPStartXfer+0x5e0>
 800d01e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d020:	3b01      	subs	r3, #1
 800d022:	647b      	str	r3, [r7, #68]	@ 0x44
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d02e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d036:	069b      	lsls	r3, r3, #26
 800d038:	431a      	orrs	r2, r3
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d044:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d048:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d04c:	605a      	str	r2, [r3, #4]
 800d04e:	e027      	b.n	800d0a0 <USB_EPStartXfer+0x65c>
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d123      	bne.n	800d0a0 <USB_EPStartXfer+0x65c>
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	00db      	lsls	r3, r3, #3
 800d05e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d062:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d072:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d076:	b292      	uxth	r2, r2
 800d078:	605a      	str	r2, [r3, #4]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	00db      	lsls	r3, r3, #3
 800d080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d084:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d088:	6859      	ldr	r1, [r3, #4]
 800d08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d08c:	041a      	lsls	r2, r3, #16
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d09c:	430a      	orrs	r2, r1
 800d09e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	6959      	ldr	r1, [r3, #20]
 800d0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	8b7a      	ldrh	r2, [r7, #26]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fe4e 	bl	800dd52 <USB_WritePMA>
 800d0b6:	e19f      	b.n	800d3f8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	6a1b      	ldr	r3, [r3, #32]
 800d0bc:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	4ba0      	ldr	r3, [pc, #640]	@ (800d34c <USB_EPStartXfer+0x908>)
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	441a      	add	r2, r3
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d100:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d104:	b292      	uxth	r2, r2
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d112:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d116:	6819      	ldr	r1, [r3, #0]
 800d118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d11a:	041a      	lsls	r2, r3, #16
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	00db      	lsls	r3, r3, #3
 800d122:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d126:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d12a:	430a      	orrs	r2, r1
 800d12c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	891b      	ldrh	r3, [r3, #8]
 800d132:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	6959      	ldr	r1, [r3, #20]
 800d138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	8b7a      	ldrh	r2, [r7, #26]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fe07 	bl	800dd52 <USB_WritePMA>
 800d144:	e158      	b.n	800d3f8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	6a1a      	ldr	r2, [r3, #32]
 800d14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d14c:	1ad2      	subs	r2, r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 80a3 	beq.w	800d2ae <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d16a      	bne.n	800d246 <USB_EPStartXfer+0x802>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d17a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d18a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d18e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d192:	605a      	str	r2, [r3, #4]
 800d194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d196:	2b00      	cmp	r3, #0
 800d198:	d112      	bne.n	800d1c0 <USB_EPStartXfer+0x77c>
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1a8:	685a      	ldr	r2, [r3, #4]
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1bc:	605a      	str	r2, [r3, #4]
 800d1be:	e06a      	b.n	800d296 <USB_EPStartXfer+0x852>
 800d1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1c4:	d81e      	bhi.n	800d204 <USB_EPStartXfer+0x7c0>
 800d1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1c8:	085b      	lsrs	r3, r3, #1
 800d1ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <USB_EPStartXfer+0x798>
 800d1d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d8:	3301      	adds	r3, #1
 800d1da:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1ea:	6859      	ldr	r1, [r3, #4]
 800d1ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ee:	069a      	lsls	r2, r3, #26
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1fe:	430a      	orrs	r2, r1
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	e048      	b.n	800d296 <USB_EPStartXfer+0x852>
 800d204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d206:	095b      	lsrs	r3, r3, #5
 800d208:	643b      	str	r3, [r7, #64]	@ 0x40
 800d20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d20c:	f003 031f 	and.w	r3, r3, #31
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <USB_EPStartXfer+0x7d6>
 800d214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d216:	3b01      	subs	r3, #1
 800d218:	643b      	str	r3, [r7, #64]	@ 0x40
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d224:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d22c:	069b      	lsls	r3, r3, #26
 800d22e:	431a      	orrs	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d23a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d23e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d242:	605a      	str	r2, [r3, #4]
 800d244:	e027      	b.n	800d296 <USB_EPStartXfer+0x852>
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	785b      	ldrb	r3, [r3, #1]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d123      	bne.n	800d296 <USB_EPStartXfer+0x852>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d258:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d268:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d26c:	b292      	uxth	r2, r2
 800d26e:	605a      	str	r2, [r3, #4]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d27a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d27e:	6859      	ldr	r1, [r3, #4]
 800d280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d282:	041a      	lsls	r2, r3, #16
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d28e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d292:	430a      	orrs	r2, r1
 800d294:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	895b      	ldrh	r3, [r3, #10]
 800d29a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	6959      	ldr	r1, [r3, #20]
 800d2a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	8b7a      	ldrh	r2, [r7, #26]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fd53 	bl	800dd52 <USB_WritePMA>
 800d2ac:	e0a4      	b.n	800d3f8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	785b      	ldrb	r3, [r3, #1]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d16d      	bne.n	800d392 <USB_EPStartXfer+0x94e>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	00db      	lsls	r3, r3, #3
 800d2bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d112      	bne.n	800d306 <USB_EPStartXfer+0x8c2>
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	e06d      	b.n	800d3e2 <USB_EPStartXfer+0x99e>
 800d306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d308:	2b3e      	cmp	r3, #62	@ 0x3e
 800d30a:	d821      	bhi.n	800d350 <USB_EPStartXfer+0x90c>
 800d30c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d30e:	085b      	lsrs	r3, r3, #1
 800d310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d314:	f003 0301 	and.w	r3, r3, #1
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <USB_EPStartXfer+0x8de>
 800d31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31e:	3301      	adds	r3, #1
 800d320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d32c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d330:	6819      	ldr	r1, [r3, #0]
 800d332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d334:	069a      	lsls	r2, r3, #26
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	00db      	lsls	r3, r3, #3
 800d33c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d340:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d344:	430a      	orrs	r2, r1
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	e04b      	b.n	800d3e2 <USB_EPStartXfer+0x99e>
 800d34a:	bf00      	nop
 800d34c:	07ff8e8f 	.word	0x07ff8e8f
 800d350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d352:	095b      	lsrs	r3, r3, #5
 800d354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d358:	f003 031f 	and.w	r3, r3, #31
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d102      	bne.n	800d366 <USB_EPStartXfer+0x922>
 800d360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d362:	3b01      	subs	r3, #1
 800d364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	00db      	lsls	r3, r3, #3
 800d36c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d370:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d378:	069b      	lsls	r3, r3, #26
 800d37a:	431a      	orrs	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	00db      	lsls	r3, r3, #3
 800d382:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d386:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d38a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	e027      	b.n	800d3e2 <USB_EPStartXfer+0x99e>
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	785b      	ldrb	r3, [r3, #1]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d123      	bne.n	800d3e2 <USB_EPStartXfer+0x99e>
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3b8:	b292      	uxth	r2, r2
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	00db      	lsls	r3, r3, #3
 800d3c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3ca:	6819      	ldr	r1, [r3, #0]
 800d3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ce:	041a      	lsls	r2, r3, #16
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	00db      	lsls	r3, r3, #3
 800d3d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	891b      	ldrh	r3, [r3, #8]
 800d3e6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	6959      	ldr	r1, [r3, #20]
 800d3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	8b7a      	ldrh	r2, [r7, #26]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fcad 	bl	800dd52 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	4b8b      	ldr	r3, [pc, #556]	@ (800d634 <USB_EPStartXfer+0xbf0>)
 800d406:	4013      	ands	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f083 0310 	eor.w	r3, r3, #16
 800d410:	60fb      	str	r3, [r7, #12]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f083 0320 	eor.w	r3, r3, #32
 800d418:	60fb      	str	r3, [r7, #12]
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	441a      	add	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42e:	6013      	str	r3, [r2, #0]
 800d430:	e36b      	b.n	800db0a <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	7b1b      	ldrb	r3, [r3, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	f040 8081 	bne.w	800d53e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	699a      	ldr	r2, [r3, #24]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	429a      	cmp	r2, r3
 800d446:	d909      	bls.n	800d45c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	691b      	ldr	r3, [r3, #16]
 800d44c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	699a      	ldr	r2, [r3, #24]
 800d452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d454:	1ad2      	subs	r2, r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	619a      	str	r2, [r3, #24]
 800d45a:	e005      	b.n	800d468 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2200      	movs	r2, #0
 800d466:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d472:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d476:	685a      	ldr	r2, [r3, #4]
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d486:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d48a:	605a      	str	r2, [r3, #4]
 800d48c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d112      	bne.n	800d4b8 <USB_EPStartXfer+0xa74>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	00db      	lsls	r3, r3, #3
 800d498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d49c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4b4:	605a      	str	r2, [r3, #4]
 800d4b6:	e30c      	b.n	800dad2 <USB_EPStartXfer+0x108e>
 800d4b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4bc:	d81e      	bhi.n	800d4fc <USB_EPStartXfer+0xab8>
 800d4be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c0:	085b      	lsrs	r3, r3, #1
 800d4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c6:	f003 0301 	and.w	r3, r3, #1
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <USB_EPStartXfer+0xa90>
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4e2:	6859      	ldr	r1, [r3, #4]
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e6:	069a      	lsls	r2, r3, #26
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	e2ea      	b.n	800dad2 <USB_EPStartXfer+0x108e>
 800d4fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4fe:	095b      	lsrs	r3, r3, #5
 800d500:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d504:	f003 031f 	and.w	r3, r3, #31
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d102      	bne.n	800d512 <USB_EPStartXfer+0xace>
 800d50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50e:	3b01      	subs	r3, #1
 800d510:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d51c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d524:	069b      	lsls	r3, r3, #26
 800d526:	431a      	orrs	r2, r3
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d536:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d53a:	605a      	str	r2, [r3, #4]
 800d53c:	e2c9      	b.n	800dad2 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	78db      	ldrb	r3, [r3, #3]
 800d542:	2b02      	cmp	r3, #2
 800d544:	f040 8176 	bne.w	800d834 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	785b      	ldrb	r3, [r3, #1]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d173      	bne.n	800d638 <USB_EPStartXfer+0xbf4>
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	00db      	lsls	r3, r3, #3
 800d556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d55a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	00db      	lsls	r3, r3, #3
 800d566:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d56a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d56e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d112      	bne.n	800d5a2 <USB_EPStartXfer+0xb5e>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	00db      	lsls	r3, r3, #3
 800d582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d586:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d596:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d59a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	e073      	b.n	800d68a <USB_EPStartXfer+0xc46>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5a8:	d820      	bhi.n	800d5ec <USB_EPStartXfer+0xba8>
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	085b      	lsrs	r3, r3, #1
 800d5b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d002      	beq.n	800d5c4 <USB_EPStartXfer+0xb80>
 800d5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	00db      	lsls	r3, r3, #3
 800d5ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5d2:	6819      	ldr	r1, [r3, #0]
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d6:	069a      	lsls	r2, r3, #26
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	00db      	lsls	r3, r3, #3
 800d5de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	e04e      	b.n	800d68a <USB_EPStartXfer+0xc46>
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	095b      	lsrs	r3, r3, #5
 800d5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	f003 031f 	and.w	r3, r3, #31
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d102      	bne.n	800d606 <USB_EPStartXfer+0xbc2>
 800d600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d602:	3b01      	subs	r3, #1
 800d604:	637b      	str	r3, [r7, #52]	@ 0x34
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d610:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d618:	069b      	lsls	r3, r3, #26
 800d61a:	431a      	orrs	r2, r3
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d626:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d62a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d62e:	601a      	str	r2, [r3, #0]
 800d630:	e02b      	b.n	800d68a <USB_EPStartXfer+0xc46>
 800d632:	bf00      	nop
 800d634:	07ff8fbf 	.word	0x07ff8fbf
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d124      	bne.n	800d68a <USB_EPStartXfer+0xc46>
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d64a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	00db      	lsls	r3, r3, #3
 800d656:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d65a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d65e:	b292      	uxth	r2, r2
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d66c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d670:	6819      	ldr	r1, [r3, #0]
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	041a      	lsls	r2, r3, #16
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d682:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d686:	430a      	orrs	r2, r1
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	785b      	ldrb	r3, [r3, #1]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d170      	bne.n	800d774 <USB_EPStartXfer+0xd30>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d69c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	00db      	lsls	r3, r3, #3
 800d6a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6b0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d6b4:	605a      	str	r2, [r3, #4]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d112      	bne.n	800d6e4 <USB_EPStartXfer+0xca0>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d6e0:	605a      	str	r2, [r3, #4]
 800d6e2:	e070      	b.n	800d7c6 <USB_EPStartXfer+0xd82>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6ea:	d820      	bhi.n	800d72e <USB_EPStartXfer+0xcea>
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	085b      	lsrs	r3, r3, #1
 800d6f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	f003 0301 	and.w	r3, r3, #1
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <USB_EPStartXfer+0xcc2>
 800d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d702:	3301      	adds	r3, #1
 800d704:	633b      	str	r3, [r7, #48]	@ 0x30
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d710:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d714:	6859      	ldr	r1, [r3, #4]
 800d716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d718:	069a      	lsls	r2, r3, #26
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d724:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d728:	430a      	orrs	r2, r1
 800d72a:	605a      	str	r2, [r3, #4]
 800d72c:	e04b      	b.n	800d7c6 <USB_EPStartXfer+0xd82>
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	095b      	lsrs	r3, r3, #5
 800d734:	633b      	str	r3, [r7, #48]	@ 0x30
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	f003 031f 	and.w	r3, r3, #31
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d102      	bne.n	800d748 <USB_EPStartXfer+0xd04>
 800d742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d744:	3b01      	subs	r3, #1
 800d746:	633b      	str	r3, [r7, #48]	@ 0x30
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75a:	069b      	lsls	r3, r3, #26
 800d75c:	431a      	orrs	r2, r3
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	00db      	lsls	r3, r3, #3
 800d764:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d768:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d76c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d770:	605a      	str	r2, [r3, #4]
 800d772:	e028      	b.n	800d7c6 <USB_EPStartXfer+0xd82>
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	785b      	ldrb	r3, [r3, #1]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d124      	bne.n	800d7c6 <USB_EPStartXfer+0xd82>
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	00db      	lsls	r3, r3, #3
 800d782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d796:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d79a:	b292      	uxth	r2, r2
 800d79c:	605a      	str	r2, [r3, #4]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7ac:	6859      	ldr	r1, [r3, #4]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	041a      	lsls	r2, r3, #16
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	00db      	lsls	r3, r3, #3
 800d7ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 8181 	beq.w	800dad2 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d7de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d004      	beq.n	800d7f2 <USB_EPStartXfer+0xdae>
 800d7e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10b      	bne.n	800d80a <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d7f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f040 816a 	bne.w	800dad2 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d7fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d804:	2b00      	cmp	r3, #0
 800d806:	f040 8164 	bne.w	800dad2 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4413      	add	r3, r2
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	4b98      	ldr	r3, [pc, #608]	@ (800da78 <USB_EPStartXfer+0x1034>)
 800d818:	4013      	ands	r3, r2
 800d81a:	623b      	str	r3, [r7, #32]
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	441a      	add	r2, r3
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d82c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d830:	6013      	str	r3, [r2, #0]
 800d832:	e14e      	b.n	800dad2 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	78db      	ldrb	r3, [r3, #3]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	f040 8148 	bne.w	800dace <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	699a      	ldr	r2, [r3, #24]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	429a      	cmp	r2, r3
 800d848:	d909      	bls.n	800d85e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	699a      	ldr	r2, [r3, #24]
 800d854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d856:	1ad2      	subs	r2, r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	619a      	str	r2, [r3, #24]
 800d85c:	e005      	b.n	800d86a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	2200      	movs	r2, #0
 800d868:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d16a      	bne.n	800d948 <USB_EPStartXfer+0xf04>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d87c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d88c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d890:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d112      	bne.n	800d8c2 <USB_EPStartXfer+0xe7e>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	00db      	lsls	r3, r3, #3
 800d8b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	e06a      	b.n	800d998 <USB_EPStartXfer+0xf54>
 800d8c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8c6:	d81e      	bhi.n	800d906 <USB_EPStartXfer+0xec2>
 800d8c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ca:	085b      	lsrs	r3, r3, #1
 800d8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8d0:	f003 0301 	and.w	r3, r3, #1
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <USB_EPStartXfer+0xe9a>
 800d8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8da:	3301      	adds	r3, #1
 800d8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ec:	6819      	ldr	r1, [r3, #0]
 800d8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f0:	069a      	lsls	r2, r3, #26
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d900:	430a      	orrs	r2, r1
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	e048      	b.n	800d998 <USB_EPStartXfer+0xf54>
 800d906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d908:	095b      	lsrs	r3, r3, #5
 800d90a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d90c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d90e:	f003 031f 	and.w	r3, r3, #31
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <USB_EPStartXfer+0xed8>
 800d916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d918:	3b01      	subs	r3, #1
 800d91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	00db      	lsls	r3, r3, #3
 800d922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d926:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92e:	069b      	lsls	r3, r3, #26
 800d930:	431a      	orrs	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d93c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d940:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	e027      	b.n	800d998 <USB_EPStartXfer+0xf54>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d123      	bne.n	800d998 <USB_EPStartXfer+0xf54>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d95a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	00db      	lsls	r3, r3, #3
 800d966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d96a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d96e:	b292      	uxth	r2, r2
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d97c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d980:	6819      	ldr	r1, [r3, #0]
 800d982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d984:	041a      	lsls	r2, r3, #16
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d994:	430a      	orrs	r2, r1
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	785b      	ldrb	r3, [r3, #1]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d16d      	bne.n	800da7c <USB_EPStartXfer+0x1038>
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9be:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d9c2:	605a      	str	r2, [r3, #4]
 800d9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d112      	bne.n	800d9f0 <USB_EPStartXfer+0xfac>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	00db      	lsls	r3, r3, #3
 800d9e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d9ec:	605a      	str	r2, [r3, #4]
 800d9ee:	e070      	b.n	800dad2 <USB_EPStartXfer+0x108e>
 800d9f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9f2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9f4:	d81e      	bhi.n	800da34 <USB_EPStartXfer+0xff0>
 800d9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9f8:	085b      	lsrs	r3, r3, #1
 800d9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	2b00      	cmp	r3, #0
 800da04:	d002      	beq.n	800da0c <USB_EPStartXfer+0xfc8>
 800da06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da08:	3301      	adds	r3, #1
 800da0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	00db      	lsls	r3, r3, #3
 800da12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da1a:	6859      	ldr	r1, [r3, #4]
 800da1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1e:	069a      	lsls	r2, r3, #26
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da2e:	430a      	orrs	r2, r1
 800da30:	605a      	str	r2, [r3, #4]
 800da32:	e04e      	b.n	800dad2 <USB_EPStartXfer+0x108e>
 800da34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da36:	095b      	lsrs	r3, r3, #5
 800da38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da3c:	f003 031f 	and.w	r3, r3, #31
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <USB_EPStartXfer+0x1006>
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	3b01      	subs	r3, #1
 800da48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	00db      	lsls	r3, r3, #3
 800da50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5c:	069b      	lsls	r3, r3, #26
 800da5e:	431a      	orrs	r2, r3
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da6e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800da72:	605a      	str	r2, [r3, #4]
 800da74:	e02d      	b.n	800dad2 <USB_EPStartXfer+0x108e>
 800da76:	bf00      	nop
 800da78:	07ff8f8f 	.word	0x07ff8f8f
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	785b      	ldrb	r3, [r3, #1]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d126      	bne.n	800dad2 <USB_EPStartXfer+0x108e>
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da92:	685a      	ldr	r2, [r3, #4]
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	00db      	lsls	r3, r3, #3
 800da9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800daa2:	b292      	uxth	r2, r2
 800daa4:	605a      	str	r2, [r3, #4]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dab4:	6859      	ldr	r1, [r3, #4]
 800dab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dab8:	041a      	lsls	r2, r3, #16
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dac4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dac8:	430a      	orrs	r2, r1
 800daca:	605a      	str	r2, [r3, #4]
 800dacc:	e001      	b.n	800dad2 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	e01c      	b.n	800db0c <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4413      	add	r3, r2
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	4b0d      	ldr	r3, [pc, #52]	@ (800db14 <USB_EPStartXfer+0x10d0>)
 800dae0:	4013      	ands	r3, r2
 800dae2:	61fb      	str	r3, [r7, #28]
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800daea:	61fb      	str	r3, [r7, #28]
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800daf2:	61fb      	str	r3, [r7, #28]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	441a      	add	r2, r3
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3758      	adds	r7, #88	@ 0x58
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	07ffbf8f 	.word	0x07ffbf8f

0800db18 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	785b      	ldrb	r3, [r3, #1]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d018      	beq.n	800db5c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	4b19      	ldr	r3, [pc, #100]	@ (800db9c <USB_EPSetStall+0x84>)
 800db38:	4013      	ands	r3, r2
 800db3a:	60bb      	str	r3, [r7, #8]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	f083 0310 	eor.w	r3, r3, #16
 800db42:	60bb      	str	r3, [r7, #8]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	441a      	add	r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db58:	6013      	str	r3, [r2, #0]
 800db5a:	e017      	b.n	800db8c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	4b0d      	ldr	r3, [pc, #52]	@ (800dba0 <USB_EPSetStall+0x88>)
 800db6a:	4013      	ands	r3, r2
 800db6c:	60fb      	str	r3, [r7, #12]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	441a      	add	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	07ff8fbf 	.word	0x07ff8fbf
 800dba0:	07ffbf8f 	.word	0x07ffbf8f

0800dba4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b089      	sub	sp, #36	@ 0x24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	7b1b      	ldrb	r3, [r3, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d17c      	bne.n	800dcb0 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	785b      	ldrb	r3, [r3, #1]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d03c      	beq.n	800dc38 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d013      	beq.n	800dbfe <USB_EPClearStall+0x5a>
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	4b37      	ldr	r3, [pc, #220]	@ (800dcc0 <USB_EPClearStall+0x11c>)
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	441a      	add	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dbfc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	78db      	ldrb	r3, [r3, #3]
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d054      	beq.n	800dcb0 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	4b2c      	ldr	r3, [pc, #176]	@ (800dcc4 <USB_EPClearStall+0x120>)
 800dc14:	4013      	ands	r3, r2
 800dc16:	60bb      	str	r3, [r7, #8]
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	f083 0320 	eor.w	r3, r3, #32
 800dc1e:	60bb      	str	r3, [r7, #8]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	441a      	add	r2, r3
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	e03b      	b.n	800dcb0 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	61fb      	str	r3, [r7, #28]
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d013      	beq.n	800dc78 <USB_EPClearStall+0xd4>
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	4b18      	ldr	r3, [pc, #96]	@ (800dcc0 <USB_EPClearStall+0x11c>)
 800dc5e:	4013      	ands	r3, r2
 800dc60:	61bb      	str	r3, [r7, #24]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	441a      	add	r2, r3
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc76:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	4b10      	ldr	r3, [pc, #64]	@ (800dcc8 <USB_EPClearStall+0x124>)
 800dc86:	4013      	ands	r3, r2
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dc90:	617b      	str	r3, [r7, #20]
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dc98:	617b      	str	r3, [r7, #20]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	441a      	add	r2, r3
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcae:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3724      	adds	r7, #36	@ 0x24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	07ff8f8f 	.word	0x07ff8f8f
 800dcc4:	07ff8fbf 	.word	0x07ff8fbf
 800dcc8:	07ffbf8f 	.word	0x07ffbf8f

0800dccc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dcd8:	78fb      	ldrb	r3, [r7, #3]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d102      	bne.n	800dce4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2280      	movs	r2, #128	@ 0x80
 800dce2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcfe:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd20:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800dd36:	b480      	push	{r7}
 800dd38:	b085      	sub	sp, #20
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dd44:	68fb      	ldr	r3, [r7, #12]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr

0800dd52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd52:	b480      	push	{r7}
 800dd54:	b08b      	sub	sp, #44	@ 0x2c
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	461a      	mov	r2, r3
 800dd60:	460b      	mov	r3, r1
 800dd62:	80fb      	strh	r3, [r7, #6]
 800dd64:	4613      	mov	r3, r2
 800dd66:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dd68:	88bb      	ldrh	r3, [r7, #4]
 800dd6a:	3303      	adds	r3, #3
 800dd6c:	089b      	lsrs	r3, r3, #2
 800dd6e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dd70:	88bb      	ldrh	r3, [r7, #4]
 800dd72:	f003 0303 	and.w	r3, r3, #3
 800dd76:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800dd7c:	8afb      	ldrh	r3, [r7, #22]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d002      	beq.n	800dd88 <USB_WritePMA+0x36>
  {
    NbWords--;
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	3b01      	subs	r3, #1
 800dd86:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dd88:	88fb      	ldrh	r3, [r7, #6]
 800dd8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd92:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	623b      	str	r3, [r7, #32]
 800dd98:	e015      	b.n	800ddc6 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	3304      	adds	r3, #4
 800dda6:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	623b      	str	r3, [r7, #32]
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1e6      	bne.n	800dd9a <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800ddcc:	8afb      	ldrh	r3, [r7, #22]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d01a      	beq.n	800de08 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	461a      	mov	r2, r3
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	fa02 f303 	lsl.w	r3, r2, r3
 800dde4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dde6:	4313      	orrs	r3, r2
 800dde8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800ddea:	6a3b      	ldr	r3, [r7, #32]
 800ddec:	3301      	adds	r3, #1
 800ddee:	623b      	str	r3, [r7, #32]
      pBuf++;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800ddf6:	8afb      	ldrh	r3, [r7, #22]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800ddfc:	8afb      	ldrh	r3, [r7, #22]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e9      	bne.n	800ddd6 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de06:	601a      	str	r2, [r3, #0]
  }
}
 800de08:	bf00      	nop
 800de0a:	372c      	adds	r7, #44	@ 0x2c
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800de14:	b480      	push	{r7}
 800de16:	b08b      	sub	sp, #44	@ 0x2c
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	4611      	mov	r1, r2
 800de20:	461a      	mov	r2, r3
 800de22:	460b      	mov	r3, r1
 800de24:	80fb      	strh	r3, [r7, #6]
 800de26:	4613      	mov	r3, r2
 800de28:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800de2a:	88bb      	ldrh	r3, [r7, #4]
 800de2c:	3303      	adds	r3, #3
 800de2e:	089b      	lsrs	r3, r3, #2
 800de30:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800de32:	88bb      	ldrh	r3, [r7, #4]
 800de34:	f003 0303 	and.w	r3, r3, #3
 800de38:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800de3e:	88fb      	ldrh	r3, [r7, #6]
 800de40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de48:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800de4a:	8b7b      	ldrh	r3, [r7, #26]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	3b01      	subs	r3, #1
 800de54:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	627b      	str	r3, [r7, #36]	@ 0x24
 800de5a:	e015      	b.n	800de88 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	3304      	adds	r3, #4
 800de68:	623b      	str	r3, [r7, #32]
    pBuf++;
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	3301      	adds	r3, #1
 800de6e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	3301      	adds	r3, #1
 800de74:	617b      	str	r3, [r7, #20]
    pBuf++;
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	3301      	adds	r3, #1
 800de7a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	3301      	adds	r3, #1
 800de80:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de84:	3b01      	subs	r3, #1
 800de86:	627b      	str	r3, [r7, #36]	@ 0x24
 800de88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1e6      	bne.n	800de5c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800de8e:	8b7b      	ldrh	r3, [r7, #26]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d017      	beq.n	800dec4 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800de9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	fa22 f303 	lsr.w	r3, r2, r3
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	701a      	strb	r2, [r3, #0]
      count++;
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	3301      	adds	r3, #1
 800deb0:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	3301      	adds	r3, #1
 800deb6:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800deb8:	8b7b      	ldrh	r3, [r7, #26]
 800deba:	3b01      	subs	r3, #1
 800debc:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800debe:	8b7b      	ldrh	r3, [r7, #26]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1ea      	bne.n	800de9a <USB_ReadPMA+0x86>
  }
}
 800dec4:	bf00      	nop
 800dec6:	372c      	adds	r7, #44	@ 0x2c
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dedc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dee0:	f000 ff5a 	bl	800ed98 <USBD_static_malloc>
 800dee4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d109      	bne.n	800df00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	32b0      	adds	r2, #176	@ 0xb0
 800def6:	2100      	movs	r1, #0
 800def8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800defc:	2302      	movs	r3, #2
 800defe:	e0d4      	b.n	800e0aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800df00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800df04:	2100      	movs	r1, #0
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f002 fc18 	bl	801073c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	32b0      	adds	r2, #176	@ 0xb0
 800df16:	68f9      	ldr	r1, [r7, #12]
 800df18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	32b0      	adds	r2, #176	@ 0xb0
 800df26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	7c1b      	ldrb	r3, [r3, #16]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d138      	bne.n	800dfaa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df38:	4b5e      	ldr	r3, [pc, #376]	@ (800e0b4 <USBD_CDC_Init+0x1e4>)
 800df3a:	7819      	ldrb	r1, [r3, #0]
 800df3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df40:	2202      	movs	r2, #2
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fe2f 	bl	800eba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df48:	4b5a      	ldr	r3, [pc, #360]	@ (800e0b4 <USBD_CDC_Init+0x1e4>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f003 020f 	and.w	r2, r3, #15
 800df50:	6879      	ldr	r1, [r7, #4]
 800df52:	4613      	mov	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	4413      	add	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	440b      	add	r3, r1
 800df5c:	3324      	adds	r3, #36	@ 0x24
 800df5e:	2201      	movs	r2, #1
 800df60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df62:	4b55      	ldr	r3, [pc, #340]	@ (800e0b8 <USBD_CDC_Init+0x1e8>)
 800df64:	7819      	ldrb	r1, [r3, #0]
 800df66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df6a:	2202      	movs	r2, #2
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fe1a 	bl	800eba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df72:	4b51      	ldr	r3, [pc, #324]	@ (800e0b8 <USBD_CDC_Init+0x1e8>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	f003 020f 	and.w	r2, r3, #15
 800df7a:	6879      	ldr	r1, [r7, #4]
 800df7c:	4613      	mov	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	440b      	add	r3, r1
 800df86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df8a:	2201      	movs	r2, #1
 800df8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df8e:	4b4b      	ldr	r3, [pc, #300]	@ (800e0bc <USBD_CDC_Init+0x1ec>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	f003 020f 	and.w	r2, r3, #15
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	4613      	mov	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	440b      	add	r3, r1
 800dfa2:	3326      	adds	r3, #38	@ 0x26
 800dfa4:	2210      	movs	r2, #16
 800dfa6:	801a      	strh	r2, [r3, #0]
 800dfa8:	e035      	b.n	800e016 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dfaa:	4b42      	ldr	r3, [pc, #264]	@ (800e0b4 <USBD_CDC_Init+0x1e4>)
 800dfac:	7819      	ldrb	r1, [r3, #0]
 800dfae:	2340      	movs	r3, #64	@ 0x40
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 fdf7 	bl	800eba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dfb8:	4b3e      	ldr	r3, [pc, #248]	@ (800e0b4 <USBD_CDC_Init+0x1e4>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 020f 	and.w	r2, r3, #15
 800dfc0:	6879      	ldr	r1, [r7, #4]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4413      	add	r3, r2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	440b      	add	r3, r1
 800dfcc:	3324      	adds	r3, #36	@ 0x24
 800dfce:	2201      	movs	r2, #1
 800dfd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dfd2:	4b39      	ldr	r3, [pc, #228]	@ (800e0b8 <USBD_CDC_Init+0x1e8>)
 800dfd4:	7819      	ldrb	r1, [r3, #0]
 800dfd6:	2340      	movs	r3, #64	@ 0x40
 800dfd8:	2202      	movs	r2, #2
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 fde3 	bl	800eba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dfe0:	4b35      	ldr	r3, [pc, #212]	@ (800e0b8 <USBD_CDC_Init+0x1e8>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	f003 020f 	and.w	r2, r3, #15
 800dfe8:	6879      	ldr	r1, [r7, #4]
 800dfea:	4613      	mov	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	440b      	add	r3, r1
 800dff4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dff8:	2201      	movs	r2, #1
 800dffa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dffc:	4b2f      	ldr	r3, [pc, #188]	@ (800e0bc <USBD_CDC_Init+0x1ec>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 020f 	and.w	r2, r3, #15
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	3326      	adds	r3, #38	@ 0x26
 800e012:	2210      	movs	r2, #16
 800e014:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e016:	4b29      	ldr	r3, [pc, #164]	@ (800e0bc <USBD_CDC_Init+0x1ec>)
 800e018:	7819      	ldrb	r1, [r3, #0]
 800e01a:	2308      	movs	r3, #8
 800e01c:	2203      	movs	r2, #3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fdc1 	bl	800eba6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e024:	4b25      	ldr	r3, [pc, #148]	@ (800e0bc <USBD_CDC_Init+0x1ec>)
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	f003 020f 	and.w	r2, r3, #15
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	4613      	mov	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4413      	add	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	440b      	add	r3, r1
 800e038:	3324      	adds	r3, #36	@ 0x24
 800e03a:	2201      	movs	r2, #1
 800e03c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	33b0      	adds	r3, #176	@ 0xb0
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4413      	add	r3, r2
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e070:	2b00      	cmp	r3, #0
 800e072:	d101      	bne.n	800e078 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e074:	2302      	movs	r3, #2
 800e076:	e018      	b.n	800e0aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7c1b      	ldrb	r3, [r3, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10a      	bne.n	800e096 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e080:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b8 <USBD_CDC_Init+0x1e8>)
 800e082:	7819      	ldrb	r1, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e08a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 fe54 	bl	800ed3c <USBD_LL_PrepareReceive>
 800e094:	e008      	b.n	800e0a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e096:	4b08      	ldr	r3, [pc, #32]	@ (800e0b8 <USBD_CDC_Init+0x1e8>)
 800e098:	7819      	ldrb	r1, [r3, #0]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e0a0:	2340      	movs	r3, #64	@ 0x40
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fe4a 	bl	800ed3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	200000b3 	.word	0x200000b3
 800e0b8:	200000b4 	.word	0x200000b4
 800e0bc:	200000b5 	.word	0x200000b5

0800e0c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e0cc:	4b3a      	ldr	r3, [pc, #232]	@ (800e1b8 <USBD_CDC_DeInit+0xf8>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fd87 	bl	800ebe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e0d8:	4b37      	ldr	r3, [pc, #220]	@ (800e1b8 <USBD_CDC_DeInit+0xf8>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f003 020f 	and.w	r2, r3, #15
 800e0e0:	6879      	ldr	r1, [r7, #4]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3324      	adds	r3, #36	@ 0x24
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e0f2:	4b32      	ldr	r3, [pc, #200]	@ (800e1bc <USBD_CDC_DeInit+0xfc>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fd74 	bl	800ebe6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e1bc <USBD_CDC_DeInit+0xfc>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	f003 020f 	and.w	r2, r3, #15
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	440b      	add	r3, r1
 800e112:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e116:	2200      	movs	r2, #0
 800e118:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e11a:	4b29      	ldr	r3, [pc, #164]	@ (800e1c0 <USBD_CDC_DeInit+0x100>)
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	4619      	mov	r1, r3
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 fd60 	bl	800ebe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e126:	4b26      	ldr	r3, [pc, #152]	@ (800e1c0 <USBD_CDC_DeInit+0x100>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	f003 020f 	and.w	r2, r3, #15
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	440b      	add	r3, r1
 800e13a:	3324      	adds	r3, #36	@ 0x24
 800e13c:	2200      	movs	r2, #0
 800e13e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e140:	4b1f      	ldr	r3, [pc, #124]	@ (800e1c0 <USBD_CDC_DeInit+0x100>)
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	f003 020f 	and.w	r2, r3, #15
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	4613      	mov	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	440b      	add	r3, r1
 800e154:	3326      	adds	r3, #38	@ 0x26
 800e156:	2200      	movs	r2, #0
 800e158:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	32b0      	adds	r2, #176	@ 0xb0
 800e164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01f      	beq.n	800e1ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	33b0      	adds	r3, #176	@ 0xb0
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	32b0      	adds	r2, #176	@ 0xb0
 800e18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 fe10 	bl	800edb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	32b0      	adds	r2, #176	@ 0xb0
 800e19e:	2100      	movs	r1, #0
 800e1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	200000b3 	.word	0x200000b3
 800e1bc:	200000b4 	.word	0x200000b4
 800e1c0:	200000b5 	.word	0x200000b5

0800e1c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	32b0      	adds	r2, #176	@ 0xb0
 800e1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d101      	bne.n	800e1f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	e0bf      	b.n	800e374 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d050      	beq.n	800e2a2 <USBD_CDC_Setup+0xde>
 800e200:	2b20      	cmp	r3, #32
 800e202:	f040 80af 	bne.w	800e364 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	88db      	ldrh	r3, [r3, #6]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d03a      	beq.n	800e284 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	b25b      	sxtb	r3, r3
 800e214:	2b00      	cmp	r3, #0
 800e216:	da1b      	bge.n	800e250 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	33b0      	adds	r3, #176	@ 0xb0
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4413      	add	r3, r2
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e22e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	88d2      	ldrh	r2, [r2, #6]
 800e234:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	88db      	ldrh	r3, [r3, #6]
 800e23a:	2b07      	cmp	r3, #7
 800e23c:	bf28      	it	cs
 800e23e:	2307      	movcs	r3, #7
 800e240:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	89fa      	ldrh	r2, [r7, #14]
 800e246:	4619      	mov	r1, r3
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f002 f8a6 	bl	801039a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e24e:	e090      	b.n	800e372 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	785a      	ldrb	r2, [r3, #1]
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	88db      	ldrh	r3, [r3, #6]
 800e25e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e260:	d803      	bhi.n	800e26a <USBD_CDC_Setup+0xa6>
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	88db      	ldrh	r3, [r3, #6]
 800e266:	b2da      	uxtb	r2, r3
 800e268:	e000      	b.n	800e26c <USBD_CDC_Setup+0xa8>
 800e26a:	2240      	movs	r2, #64	@ 0x40
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e272:	6939      	ldr	r1, [r7, #16]
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e27a:	461a      	mov	r2, r3
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f002 f8b8 	bl	80103f2 <USBD_CtlPrepareRx>
      break;
 800e282:	e076      	b.n	800e372 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	33b0      	adds	r3, #176	@ 0xb0
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	683a      	ldr	r2, [r7, #0]
 800e298:	7850      	ldrb	r0, [r2, #1]
 800e29a:	2200      	movs	r2, #0
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	4798      	blx	r3
      break;
 800e2a0:	e067      	b.n	800e372 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	785b      	ldrb	r3, [r3, #1]
 800e2a6:	2b0b      	cmp	r3, #11
 800e2a8:	d851      	bhi.n	800e34e <USBD_CDC_Setup+0x18a>
 800e2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e2b0 <USBD_CDC_Setup+0xec>)
 800e2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b0:	0800e2e1 	.word	0x0800e2e1
 800e2b4:	0800e35d 	.word	0x0800e35d
 800e2b8:	0800e34f 	.word	0x0800e34f
 800e2bc:	0800e34f 	.word	0x0800e34f
 800e2c0:	0800e34f 	.word	0x0800e34f
 800e2c4:	0800e34f 	.word	0x0800e34f
 800e2c8:	0800e34f 	.word	0x0800e34f
 800e2cc:	0800e34f 	.word	0x0800e34f
 800e2d0:	0800e34f 	.word	0x0800e34f
 800e2d4:	0800e34f 	.word	0x0800e34f
 800e2d8:	0800e30b 	.word	0x0800e30b
 800e2dc:	0800e335 	.word	0x0800e335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d107      	bne.n	800e2fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2ec:	f107 030a 	add.w	r3, r7, #10
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f002 f850 	bl	801039a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2fa:	e032      	b.n	800e362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f001 fecd 	bl	801009e <USBD_CtlError>
            ret = USBD_FAIL;
 800e304:	2303      	movs	r3, #3
 800e306:	75fb      	strb	r3, [r7, #23]
          break;
 800e308:	e02b      	b.n	800e362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b03      	cmp	r3, #3
 800e314:	d107      	bne.n	800e326 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e316:	f107 030d 	add.w	r3, r7, #13
 800e31a:	2201      	movs	r2, #1
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f002 f83b 	bl	801039a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e324:	e01d      	b.n	800e362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 feb8 	bl	801009e <USBD_CtlError>
            ret = USBD_FAIL;
 800e32e:	2303      	movs	r3, #3
 800e330:	75fb      	strb	r3, [r7, #23]
          break;
 800e332:	e016      	b.n	800e362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b03      	cmp	r3, #3
 800e33e:	d00f      	beq.n	800e360 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f001 feab 	bl	801009e <USBD_CtlError>
            ret = USBD_FAIL;
 800e348:	2303      	movs	r3, #3
 800e34a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e34c:	e008      	b.n	800e360 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f001 fea4 	bl	801009e <USBD_CtlError>
          ret = USBD_FAIL;
 800e356:	2303      	movs	r3, #3
 800e358:	75fb      	strb	r3, [r7, #23]
          break;
 800e35a:	e002      	b.n	800e362 <USBD_CDC_Setup+0x19e>
          break;
 800e35c:	bf00      	nop
 800e35e:	e008      	b.n	800e372 <USBD_CDC_Setup+0x1ae>
          break;
 800e360:	bf00      	nop
      }
      break;
 800e362:	e006      	b.n	800e372 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f001 fe99 	bl	801009e <USBD_CtlError>
      ret = USBD_FAIL;
 800e36c:	2303      	movs	r3, #3
 800e36e:	75fb      	strb	r3, [r7, #23]
      break;
 800e370:	bf00      	nop
  }

  return (uint8_t)ret;
 800e372:	7dfb      	ldrb	r3, [r7, #23]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	460b      	mov	r3, r1
 800e386:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e38e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	32b0      	adds	r2, #176	@ 0xb0
 800e39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	e065      	b.n	800e472 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	32b0      	adds	r2, #176	@ 0xb0
 800e3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e3b6:	78fb      	ldrb	r3, [r7, #3]
 800e3b8:	f003 020f 	and.w	r2, r3, #15
 800e3bc:	6879      	ldr	r1, [r7, #4]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	440b      	add	r3, r1
 800e3c8:	3318      	adds	r3, #24
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d02f      	beq.n	800e430 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	f003 020f 	and.w	r2, r3, #15
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	440b      	add	r3, r1
 800e3e2:	3318      	adds	r3, #24
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	78fb      	ldrb	r3, [r7, #3]
 800e3e8:	f003 010f 	and.w	r1, r3, #15
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	440b      	add	r3, r1
 800e3f4:	00db      	lsls	r3, r3, #3
 800e3f6:	4403      	add	r3, r0
 800e3f8:	3324      	adds	r3, #36	@ 0x24
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e400:	fb01 f303 	mul.w	r3, r1, r3
 800e404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e406:	2b00      	cmp	r3, #0
 800e408:	d112      	bne.n	800e430 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e40a:	78fb      	ldrb	r3, [r7, #3]
 800e40c:	f003 020f 	and.w	r2, r3, #15
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	440b      	add	r3, r1
 800e41c:	3318      	adds	r3, #24
 800e41e:	2200      	movs	r2, #0
 800e420:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e422:	78f9      	ldrb	r1, [r7, #3]
 800e424:	2300      	movs	r3, #0
 800e426:	2200      	movs	r2, #0
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fc6c 	bl	800ed06 <USBD_LL_Transmit>
 800e42e:	e01f      	b.n	800e470 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	2200      	movs	r2, #0
 800e434:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	33b0      	adds	r3, #176	@ 0xb0
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d010      	beq.n	800e470 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	33b0      	adds	r3, #176	@ 0xb0
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e466:	68ba      	ldr	r2, [r7, #8]
 800e468:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e46c:	78fa      	ldrb	r2, [r7, #3]
 800e46e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b084      	sub	sp, #16
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	460b      	mov	r3, r1
 800e484:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	32b0      	adds	r2, #176	@ 0xb0
 800e490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e494:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	32b0      	adds	r2, #176	@ 0xb0
 800e4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d101      	bne.n	800e4ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e4a8:	2303      	movs	r3, #3
 800e4aa:	e01a      	b.n	800e4e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e4ac:	78fb      	ldrb	r3, [r7, #3]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fc5e 	bl	800ed72 <USBD_LL_GetRxDataSize>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	33b0      	adds	r3, #176	@ 0xb0
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	32b0      	adds	r2, #176	@ 0xb0
 800e4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e500:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d101      	bne.n	800e50c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e508:	2303      	movs	r3, #3
 800e50a:	e024      	b.n	800e556 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	33b0      	adds	r3, #176	@ 0xb0
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d019      	beq.n	800e554 <USBD_CDC_EP0_RxReady+0x6a>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e526:	2bff      	cmp	r3, #255	@ 0xff
 800e528:	d014      	beq.n	800e554 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	33b0      	adds	r3, #176	@ 0xb0
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e542:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e54a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	22ff      	movs	r2, #255	@ 0xff
 800e550:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
	...

0800e560 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e568:	2182      	movs	r1, #130	@ 0x82
 800e56a:	4818      	ldr	r0, [pc, #96]	@ (800e5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e56c:	f000 ff61 	bl	800f432 <USBD_GetEpDesc>
 800e570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e572:	2101      	movs	r1, #1
 800e574:	4815      	ldr	r0, [pc, #84]	@ (800e5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e576:	f000 ff5c 	bl	800f432 <USBD_GetEpDesc>
 800e57a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e57c:	2181      	movs	r1, #129	@ 0x81
 800e57e:	4813      	ldr	r0, [pc, #76]	@ (800e5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e580:	f000 ff57 	bl	800f432 <USBD_GetEpDesc>
 800e584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2210      	movs	r2, #16
 800e590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d006      	beq.n	800e5a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5a0:	711a      	strb	r2, [r3, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d006      	beq.n	800e5ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5b4:	711a      	strb	r2, [r3, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2243      	movs	r2, #67	@ 0x43
 800e5be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5c0:	4b02      	ldr	r3, [pc, #8]	@ (800e5cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3718      	adds	r7, #24
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20000070 	.word	0x20000070

0800e5d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5d8:	2182      	movs	r1, #130	@ 0x82
 800e5da:	4818      	ldr	r0, [pc, #96]	@ (800e63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5dc:	f000 ff29 	bl	800f432 <USBD_GetEpDesc>
 800e5e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	4815      	ldr	r0, [pc, #84]	@ (800e63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5e6:	f000 ff24 	bl	800f432 <USBD_GetEpDesc>
 800e5ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5ec:	2181      	movs	r1, #129	@ 0x81
 800e5ee:	4813      	ldr	r0, [pc, #76]	@ (800e63c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5f0:	f000 ff1f 	bl	800f432 <USBD_GetEpDesc>
 800e5f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	2210      	movs	r2, #16
 800e600:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d006      	beq.n	800e616 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	2200      	movs	r2, #0
 800e60c:	711a      	strb	r2, [r3, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	f042 0202 	orr.w	r2, r2, #2
 800e614:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d006      	beq.n	800e62a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	711a      	strb	r2, [r3, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f042 0202 	orr.w	r2, r2, #2
 800e628:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2243      	movs	r2, #67	@ 0x43
 800e62e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e630:	4b02      	ldr	r3, [pc, #8]	@ (800e63c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e632:	4618      	mov	r0, r3
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000070 	.word	0x20000070

0800e640 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e648:	2182      	movs	r1, #130	@ 0x82
 800e64a:	4818      	ldr	r0, [pc, #96]	@ (800e6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e64c:	f000 fef1 	bl	800f432 <USBD_GetEpDesc>
 800e650:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e652:	2101      	movs	r1, #1
 800e654:	4815      	ldr	r0, [pc, #84]	@ (800e6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e656:	f000 feec 	bl	800f432 <USBD_GetEpDesc>
 800e65a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e65c:	2181      	movs	r1, #129	@ 0x81
 800e65e:	4813      	ldr	r0, [pc, #76]	@ (800e6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e660:	f000 fee7 	bl	800f432 <USBD_GetEpDesc>
 800e664:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d002      	beq.n	800e672 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2210      	movs	r2, #16
 800e670:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d006      	beq.n	800e686 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e680:	711a      	strb	r2, [r3, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d006      	beq.n	800e69a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2200      	movs	r2, #0
 800e690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e694:	711a      	strb	r2, [r3, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2243      	movs	r2, #67	@ 0x43
 800e69e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e6a0:	4b02      	ldr	r3, [pc, #8]	@ (800e6ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3718      	adds	r7, #24
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	20000070 	.word	0x20000070

0800e6b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	220a      	movs	r2, #10
 800e6bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e6be:	4b03      	ldr	r3, [pc, #12]	@ (800e6cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr
 800e6cc:	2000002c 	.word	0x2000002c

0800e6d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e6e0:	2303      	movs	r3, #3
 800e6e2:	e009      	b.n	800e6f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	33b0      	adds	r3, #176	@ 0xb0
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e704:	b480      	push	{r7}
 800e706:	b087      	sub	sp, #28
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	32b0      	adds	r2, #176	@ 0xb0
 800e71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e71e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d101      	bne.n	800e72a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e726:	2303      	movs	r3, #3
 800e728:	e008      	b.n	800e73c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	371c      	adds	r7, #28
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	32b0      	adds	r2, #176	@ 0xb0
 800e75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e760:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	e004      	b.n	800e776 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3714      	adds	r7, #20
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
	...

0800e784 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	32b0      	adds	r2, #176	@ 0xb0
 800e796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	32b0      	adds	r2, #176	@ 0xb0
 800e7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e018      	b.n	800e7e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7c1b      	ldrb	r3, [r3, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10a      	bne.n	800e7d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e7ec <USBD_CDC_ReceivePacket+0x68>)
 800e7bc:	7819      	ldrb	r1, [r3, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fab7 	bl	800ed3c <USBD_LL_PrepareReceive>
 800e7ce:	e008      	b.n	800e7e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7d0:	4b06      	ldr	r3, [pc, #24]	@ (800e7ec <USBD_CDC_ReceivePacket+0x68>)
 800e7d2:	7819      	ldrb	r1, [r3, #0]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7da:	2340      	movs	r3, #64	@ 0x40
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 faad 	bl	800ed3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	200000b4 	.word	0x200000b4

0800e7f0 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4905      	ldr	r1, [pc, #20]	@ (800e80c <TEMPLATE_Init+0x1c>)
 800e7f8:	4805      	ldr	r0, [pc, #20]	@ (800e810 <TEMPLATE_Init+0x20>)
 800e7fa:	f7ff ff83 	bl	800e704 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e7fe:	4905      	ldr	r1, [pc, #20]	@ (800e814 <TEMPLATE_Init+0x24>)
 800e800:	4803      	ldr	r0, [pc, #12]	@ (800e810 <TEMPLATE_Init+0x20>)
 800e802:	f7ff ffa1 	bl	800e748 <USBD_CDC_SetRxBuffer>
      return (0);
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20000d3c 	.word	0x20000d3c
 800e810:	200007b4 	.word	0x200007b4
 800e814:	20000b3c 	.word	0x20000b3c

0800e818 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e818:	b480      	push	{r7}
 800e81a:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	4603      	mov	r3, r0
 800e830:	6039      	str	r1, [r7, #0]
 800e832:	71fb      	strb	r3, [r7, #7]
 800e834:	4613      	mov	r3, r2
 800e836:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	2b23      	cmp	r3, #35	@ 0x23
 800e83c:	f200 8098 	bhi.w	800e970 <TEMPLATE_Control+0x148>
 800e840:	a201      	add	r2, pc, #4	@ (adr r2, 800e848 <TEMPLATE_Control+0x20>)
 800e842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e846:	bf00      	nop
 800e848:	0800e971 	.word	0x0800e971
 800e84c:	0800e971 	.word	0x0800e971
 800e850:	0800e971 	.word	0x0800e971
 800e854:	0800e971 	.word	0x0800e971
 800e858:	0800e971 	.word	0x0800e971
 800e85c:	0800e971 	.word	0x0800e971
 800e860:	0800e971 	.word	0x0800e971
 800e864:	0800e971 	.word	0x0800e971
 800e868:	0800e971 	.word	0x0800e971
 800e86c:	0800e971 	.word	0x0800e971
 800e870:	0800e971 	.word	0x0800e971
 800e874:	0800e971 	.word	0x0800e971
 800e878:	0800e971 	.word	0x0800e971
 800e87c:	0800e971 	.word	0x0800e971
 800e880:	0800e971 	.word	0x0800e971
 800e884:	0800e971 	.word	0x0800e971
 800e888:	0800e971 	.word	0x0800e971
 800e88c:	0800e971 	.word	0x0800e971
 800e890:	0800e971 	.word	0x0800e971
 800e894:	0800e971 	.word	0x0800e971
 800e898:	0800e971 	.word	0x0800e971
 800e89c:	0800e971 	.word	0x0800e971
 800e8a0:	0800e971 	.word	0x0800e971
 800e8a4:	0800e971 	.word	0x0800e971
 800e8a8:	0800e971 	.word	0x0800e971
 800e8ac:	0800e971 	.word	0x0800e971
 800e8b0:	0800e971 	.word	0x0800e971
 800e8b4:	0800e971 	.word	0x0800e971
 800e8b8:	0800e971 	.word	0x0800e971
 800e8bc:	0800e971 	.word	0x0800e971
 800e8c0:	0800e971 	.word	0x0800e971
 800e8c4:	0800e971 	.word	0x0800e971
 800e8c8:	0800e8d9 	.word	0x0800e8d9
 800e8cc:	0800e91d 	.word	0x0800e91d
 800e8d0:	0800e971 	.word	0x0800e971
 800e8d4:	0800e971 	.word	0x0800e971
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	021b      	lsls	r3, r3, #8
 800e8e6:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	3302      	adds	r3, #2
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e8f0:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	3303      	adds	r3, #3
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	061b      	lsls	r3, r3, #24
 800e8fa:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	4b20      	ldr	r3, [pc, #128]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e900:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	791a      	ldrb	r2, [r3, #4]
 800e906:	4b1e      	ldr	r3, [pc, #120]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e908:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	795a      	ldrb	r2, [r3, #5]
 800e90e:	4b1c      	ldr	r3, [pc, #112]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e910:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	799a      	ldrb	r2, [r3, #6]
 800e916:	4b1a      	ldr	r3, [pc, #104]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e918:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e91a:	e02a      	b.n	800e972 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e91c:	4b18      	ldr	r3, [pc, #96]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b2da      	uxtb	r2, r3
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e926:	4b16      	ldr	r3, [pc, #88]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	0a1a      	lsrs	r2, r3, #8
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	3301      	adds	r3, #1
 800e930:	b2d2      	uxtb	r2, r2
 800e932:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e934:	4b12      	ldr	r3, [pc, #72]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	0c1a      	lsrs	r2, r3, #16
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	3302      	adds	r3, #2
 800e93e:	b2d2      	uxtb	r2, r2
 800e940:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e942:	4b0f      	ldr	r3, [pc, #60]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	0e1a      	lsrs	r2, r3, #24
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	3303      	adds	r3, #3
 800e94c:	b2d2      	uxtb	r2, r2
 800e94e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	3304      	adds	r3, #4
 800e954:	4a0a      	ldr	r2, [pc, #40]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e956:	7912      	ldrb	r2, [r2, #4]
 800e958:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	3305      	adds	r3, #5
 800e95e:	4a08      	ldr	r2, [pc, #32]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e960:	7952      	ldrb	r2, [r2, #5]
 800e962:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	3306      	adds	r3, #6
 800e968:	4a05      	ldr	r2, [pc, #20]	@ (800e980 <TEMPLATE_Control+0x158>)
 800e96a:	7992      	ldrb	r2, [r2, #6]
 800e96c:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e96e:	e000      	b.n	800e972 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e970:	bf00      	nop
  }

  return (0);
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr
 800e980:	200000cc 	.word	0x200000cc

0800e984 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
    // Don't overflow buffer
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	4b17      	ldr	r3, [pc, #92]	@ (800e9f0 <TEMPLATE_Receive+0x6c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4413      	add	r3, r2
 800e998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e99c:	d215      	bcs.n	800e9ca <TEMPLATE_Receive+0x46>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800e99e:	4b14      	ldr	r3, [pc, #80]	@ (800e9f0 <TEMPLATE_Receive+0x6c>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a14      	ldr	r2, [pc, #80]	@ (800e9f4 <TEMPLATE_Receive+0x70>)
 800e9a4:	1898      	adds	r0, r3, r2
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	6879      	ldr	r1, [r7, #4]
 800e9ae:	f001 ff40 	bl	8010832 <memcpy>
        usb_rx_index += *Len;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e9f0 <TEMPLATE_Receive+0x6c>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	4a0c      	ldr	r2, [pc, #48]	@ (800e9f0 <TEMPLATE_Receive+0x6c>)
 800e9be:	6013      	str	r3, [r2, #0]
        return USBD_FAIL;
    }

    // Optional: check for custom end-of-transmission pattern
    // For now, just simulate end if host sends less than 64 bytes
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b3f      	cmp	r3, #63	@ 0x3f
 800e9c6:	d80b      	bhi.n	800e9e0 <TEMPLATE_Receive+0x5c>
 800e9c8:	e007      	b.n	800e9da <TEMPLATE_Receive+0x56>
        usb_rx_index = 0;
 800e9ca:	4b09      	ldr	r3, [pc, #36]	@ (800e9f0 <TEMPLATE_Receive+0x6c>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800e9d0:	4809      	ldr	r0, [pc, #36]	@ (800e9f8 <TEMPLATE_Receive+0x74>)
 800e9d2:	f7f1 ff4f 	bl	8000874 <log_error>
        return USBD_FAIL;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	e006      	b.n	800e9e8 <TEMPLATE_Receive+0x64>
    {
        usb_rx_complete = true;
 800e9da:	4b08      	ldr	r3, [pc, #32]	@ (800e9fc <TEMPLATE_Receive+0x78>)
 800e9dc:	2201      	movs	r2, #1
 800e9de:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e9e0:	4807      	ldr	r0, [pc, #28]	@ (800ea00 <TEMPLATE_Receive+0x7c>)
 800e9e2:	f7ff fecf 	bl	800e784 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20010f3c 	.word	0x20010f3c
 800e9f4:	20000f3c 	.word	0x20000f3c
 800e9f8:	08011a60 	.word	0x08011a60
 800e9fc:	20010f40 	.word	0x20010f40
 800ea00:	200007b4 	.word	0x200007b4

0800ea04 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800ea12:	2300      	movs	r3, #0

}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800ea34:	4619      	mov	r1, r3
 800ea36:	4610      	mov	r0, r2
 800ea38:	f000 faa5 	bl	800ef86 <USBD_LL_SetupStage>
}
 800ea3c:	bf00      	nop
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800ea56:	78fa      	ldrb	r2, [r7, #3]
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	440b      	add	r3, r1
 800ea64:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	78fb      	ldrb	r3, [r7, #3]
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	f000 fadf 	bl	800f030 <USBD_LL_DataOutStage>
}
 800ea72:	bf00      	nop
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b082      	sub	sp, #8
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	460b      	mov	r3, r1
 800ea84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800ea8c:	78fa      	ldrb	r2, [r7, #3]
 800ea8e:	6879      	ldr	r1, [r7, #4]
 800ea90:	4613      	mov	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	00db      	lsls	r3, r3, #3
 800ea98:	440b      	add	r3, r1
 800ea9a:	3328      	adds	r3, #40	@ 0x28
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	78fb      	ldrb	r3, [r7, #3]
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	f000 fb78 	bl	800f196 <USBD_LL_DataInStage>
}
 800eaa6:	bf00      	nop
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b082      	sub	sp, #8
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eabc:	4618      	mov	r0, r3
 800eabe:	f000 fc7e 	bl	800f3be <USBD_LL_SOF>
}
 800eac2:	bf00      	nop
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ead2:	2301      	movs	r3, #1
 800ead4:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	79db      	ldrb	r3, [r3, #7]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d001      	beq.n	800eae2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eade:	f7f2 fcb7 	bl	8001450 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eae8:	7bfa      	ldrb	r2, [r7, #15]
 800eaea:	4611      	mov	r1, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 fc56 	bl	800f39e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 fbfe 	bl	800f2fa <USBD_LL_Reset>
}
 800eafe:	bf00      	nop
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
	...

0800eb08 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a19      	ldr	r2, [pc, #100]	@ (800eb78 <USBD_LL_Init+0x70>)
 800eb14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb1e:	2340      	movs	r3, #64	@ 0x40
 800eb20:	2200      	movs	r2, #0
 800eb22:	2100      	movs	r1, #0
 800eb24:	f7f5 feee 	bl	8004904 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb2e:	2380      	movs	r3, #128	@ 0x80
 800eb30:	2200      	movs	r2, #0
 800eb32:	2180      	movs	r1, #128	@ 0x80
 800eb34:	f7f5 fee6 	bl	8004904 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb3e:	23c0      	movs	r3, #192	@ 0xc0
 800eb40:	2200      	movs	r2, #0
 800eb42:	2181      	movs	r1, #129	@ 0x81
 800eb44:	f7f5 fede 	bl	8004904 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eb52:	2200      	movs	r2, #0
 800eb54:	2101      	movs	r1, #1
 800eb56:	f7f5 fed5 	bl	8004904 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb60:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800eb64:	2200      	movs	r2, #0
 800eb66:	2182      	movs	r1, #130	@ 0x82
 800eb68:	f7f5 fecc 	bl	8004904 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	200004d0 	.word	0x200004d0

0800eb7c <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7f4 fb9e 	bl	80032cc <HAL_PCD_Start>
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 f916 	bl	800edc8 <USBD_Get_USB_Status>
 800eb9c:	4603      	mov	r3, r0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	4608      	mov	r0, r1
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	70fb      	strb	r3, [r7, #3]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	70bb      	strb	r3, [r7, #2]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ebc6:	78bb      	ldrb	r3, [r7, #2]
 800ebc8:	883a      	ldrh	r2, [r7, #0]
 800ebca:	78f9      	ldrb	r1, [r7, #3]
 800ebcc:	f7f4 fccd 	bl	800356a <HAL_PCD_EP_Open>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 f8f6 	bl	800edc8 <USBD_Get_USB_Status>
 800ebdc:	4603      	mov	r3, r0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b084      	sub	sp, #16
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebf8:	78fa      	ldrb	r2, [r7, #3]
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7f4 fd15 	bl	800362c <HAL_PCD_EP_Close>
 800ec02:	4603      	mov	r3, r0
 800ec04:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 f8dd 	bl	800edc8 <USBD_Get_USB_Status>
 800ec0e:	4603      	mov	r3, r0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	460b      	mov	r3, r1
 800ec22:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec2a:	78fa      	ldrb	r2, [r7, #3]
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f4 fdc8 	bl	80037c4 <HAL_PCD_EP_SetStall>
 800ec34:	4603      	mov	r3, r0
 800ec36:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f8c4 	bl	800edc8 <USBD_Get_USB_Status>
 800ec40:	4603      	mov	r3, r0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b084      	sub	sp, #16
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	460b      	mov	r3, r1
 800ec54:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec5c:	78fa      	ldrb	r2, [r7, #3]
 800ec5e:	4611      	mov	r1, r2
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7f4 fe03 	bl	800386c <HAL_PCD_EP_ClrStall>
 800ec66:	4603      	mov	r3, r0
 800ec68:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f000 f8ab 	bl	800edc8 <USBD_Get_USB_Status>
 800ec72:	4603      	mov	r3, r0
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	460b      	mov	r3, r1
 800ec86:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec8e:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800ec90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	da0b      	bge.n	800ecb0 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec98:	78fb      	ldrb	r3, [r7, #3]
 800ec9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec9e:	68f9      	ldr	r1, [r7, #12]
 800eca0:	4613      	mov	r3, r2
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4413      	add	r3, r2
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	440b      	add	r3, r1
 800ecaa:	3316      	adds	r3, #22
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	e00b      	b.n	800ecc8 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ecb6:	68f9      	ldr	r1, [r7, #12]
 800ecb8:	4613      	mov	r3, r2
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	4413      	add	r3, r2
 800ecbe:	00db      	lsls	r3, r3, #3
 800ecc0:	440b      	add	r3, r1
 800ecc2:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800ecc6:	781b      	ldrb	r3, [r3, #0]
      }
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3714      	adds	r7, #20
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ece6:	78fa      	ldrb	r2, [r7, #3]
 800ece8:	4611      	mov	r1, r2
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7f4 fc19 	bl	8003522 <HAL_PCD_SetAddress>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 f866 	bl	800edc8 <USBD_Get_USB_Status>
 800ecfc:	4603      	mov	r3, r0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b086      	sub	sp, #24
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
 800ed12:	460b      	mov	r3, r1
 800ed14:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ed1c:	7af9      	ldrb	r1, [r7, #11]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	f7f4 fd17 	bl	8003754 <HAL_PCD_EP_Transmit>
 800ed26:	4603      	mov	r3, r0
 800ed28:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 f84b 	bl	800edc8 <USBD_Get_USB_Status>
 800ed32:	4603      	mov	r3, r0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	607a      	str	r2, [r7, #4]
 800ed46:	603b      	str	r3, [r7, #0]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ed52:	7af9      	ldrb	r1, [r7, #11]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	f7f4 fcb2 	bl	80036c0 <HAL_PCD_EP_Receive>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f000 f830 	bl	800edc8 <USBD_Get_USB_Status>
 800ed68:	4603      	mov	r3, r0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed84:	78fa      	ldrb	r2, [r7, #3]
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7f4 fccb 	bl	8003724 <HAL_PCD_EP_GetRxCount>
 800ed8e:	4603      	mov	r3, r0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800eda0:	4b03      	ldr	r3, [pc, #12]	@ (800edb0 <USBD_static_malloc+0x18>)
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	370c      	adds	r7, #12
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	20010f44 	.word	0x20010f44

0800edb4 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800edbc:	bf00      	nop
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	4603      	mov	r3, r0
 800edd0:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800edd2:	2300      	movs	r3, #0
 800edd4:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d817      	bhi.n	800ee0c <USBD_Get_USB_Status+0x44>
 800eddc:	a201      	add	r2, pc, #4	@ (adr r2, 800ede4 <USBD_Get_USB_Status+0x1c>)
 800edde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede2:	bf00      	nop
 800ede4:	0800edf5 	.word	0x0800edf5
 800ede8:	0800edfb 	.word	0x0800edfb
 800edec:	0800ee01 	.word	0x0800ee01
 800edf0:	0800ee07 	.word	0x0800ee07
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800edf4:	2300      	movs	r3, #0
 800edf6:	73fb      	strb	r3, [r7, #15]
             break;
 800edf8:	e00b      	b.n	800ee12 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800edfa:	2303      	movs	r3, #3
 800edfc:	73fb      	strb	r3, [r7, #15]
             break;
 800edfe:	e008      	b.n	800ee12 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800ee00:	2301      	movs	r3, #1
 800ee02:	73fb      	strb	r3, [r7, #15]
             break;
 800ee04:	e005      	b.n	800ee12 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800ee06:	2303      	movs	r3, #3
 800ee08:	73fb      	strb	r3, [r7, #15]
             break;
 800ee0a:	e002      	b.n	800ee12 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	73fb      	strb	r3, [r7, #15]
             break;
 800ee10:	bf00      	nop
      }
      return usb_status;
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3714      	adds	r7, #20
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e01f      	b.n	800ee78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d003      	beq.n	800ee5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2201      	movs	r2, #1
 800ee62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	79fa      	ldrb	r2, [r7, #7]
 800ee6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7ff fe4b 	bl	800eb08 <USBD_LL_Init>
 800ee72:	4603      	mov	r3, r0
 800ee74:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d101      	bne.n	800ee98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e025      	b.n	800eee4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	32ae      	adds	r2, #174	@ 0xae
 800eeaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00f      	beq.n	800eed4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	32ae      	adds	r2, #174	@ 0xae
 800eebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eec4:	f107 020e 	add.w	r2, r7, #14
 800eec8:	4610      	mov	r0, r2
 800eeca:	4798      	blx	r3
 800eecc:	4602      	mov	r2, r0
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800eee2:	2300      	movs	r3, #0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fe41 	bl	800eb7c <USBD_LL_Start>
 800eefa:	4603      	mov	r3, r0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	460b      	mov	r3, r1
 800ef24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef26:	2300      	movs	r3, #0
 800ef28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d009      	beq.n	800ef48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	78fa      	ldrb	r2, [r7, #3]
 800ef3e:	4611      	mov	r1, r2
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	4798      	blx	r3
 800ef44:	4603      	mov	r3, r0
 800ef46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	78fa      	ldrb	r2, [r7, #3]
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	4798      	blx	r3
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b084      	sub	sp, #16
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef96:	6839      	ldr	r1, [r7, #0]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f001 f846 	bl	801002a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800efac:	461a      	mov	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800efba:	f003 031f 	and.w	r3, r3, #31
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d01a      	beq.n	800eff8 <USBD_LL_SetupStage+0x72>
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	d822      	bhi.n	800f00c <USBD_LL_SetupStage+0x86>
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d002      	beq.n	800efd0 <USBD_LL_SetupStage+0x4a>
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d00a      	beq.n	800efe4 <USBD_LL_SetupStage+0x5e>
 800efce:	e01d      	b.n	800f00c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efd6:	4619      	mov	r1, r3
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fa9d 	bl	800f518 <USBD_StdDevReq>
 800efde:	4603      	mov	r3, r0
 800efe0:	73fb      	strb	r3, [r7, #15]
      break;
 800efe2:	e020      	b.n	800f026 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efea:	4619      	mov	r1, r3
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 fb05 	bl	800f5fc <USBD_StdItfReq>
 800eff2:	4603      	mov	r3, r0
 800eff4:	73fb      	strb	r3, [r7, #15]
      break;
 800eff6:	e016      	b.n	800f026 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fb67 	bl	800f6d4 <USBD_StdEPReq>
 800f006:	4603      	mov	r3, r0
 800f008:	73fb      	strb	r3, [r7, #15]
      break;
 800f00a:	e00c      	b.n	800f026 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f012:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f016:	b2db      	uxtb	r3, r3
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7ff fdfc 	bl	800ec18 <USBD_LL_StallEP>
 800f020:	4603      	mov	r3, r0
 800f022:	73fb      	strb	r3, [r7, #15]
      break;
 800f024:	bf00      	nop
  }

  return ret;
 800f026:	7bfb      	ldrb	r3, [r7, #15]
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	460b      	mov	r3, r1
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f042:	7afb      	ldrb	r3, [r7, #11]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d16e      	bne.n	800f126 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f04e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f056:	2b03      	cmp	r3, #3
 800f058:	f040 8098 	bne.w	800f18c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	689a      	ldr	r2, [r3, #8]
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	429a      	cmp	r2, r3
 800f066:	d913      	bls.n	800f090 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	689a      	ldr	r2, [r3, #8]
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	1ad2      	subs	r2, r2, r3
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	68da      	ldr	r2, [r3, #12]
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	4293      	cmp	r3, r2
 800f080:	bf28      	it	cs
 800f082:	4613      	movcs	r3, r2
 800f084:	461a      	mov	r2, r3
 800f086:	6879      	ldr	r1, [r7, #4]
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f001 f9cf 	bl	801042c <USBD_CtlContinueRx>
 800f08e:	e07d      	b.n	800f18c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f096:	f003 031f 	and.w	r3, r3, #31
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d014      	beq.n	800f0c8 <USBD_LL_DataOutStage+0x98>
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	d81d      	bhi.n	800f0de <USBD_LL_DataOutStage+0xae>
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <USBD_LL_DataOutStage+0x7c>
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d003      	beq.n	800f0b2 <USBD_LL_DataOutStage+0x82>
 800f0aa:	e018      	b.n	800f0de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	75bb      	strb	r3, [r7, #22]
            break;
 800f0b0:	e018      	b.n	800f0e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f000 f99e 	bl	800f3fe <USBD_CoreFindIF>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	75bb      	strb	r3, [r7, #22]
            break;
 800f0c6:	e00d      	b.n	800f0e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f000 f9a0 	bl	800f418 <USBD_CoreFindEP>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	75bb      	strb	r3, [r7, #22]
            break;
 800f0dc:	e002      	b.n	800f0e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	75bb      	strb	r3, [r7, #22]
            break;
 800f0e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f0e4:	7dbb      	ldrb	r3, [r7, #22]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d119      	bne.n	800f11e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	d113      	bne.n	800f11e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f0f6:	7dba      	ldrb	r2, [r7, #22]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	32ae      	adds	r2, #174	@ 0xae
 800f0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00b      	beq.n	800f11e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f106:	7dba      	ldrb	r2, [r7, #22]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f10e:	7dba      	ldrb	r2, [r7, #22]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	32ae      	adds	r2, #174	@ 0xae
 800f114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f001 f995 	bl	801044e <USBD_CtlSendStatus>
 800f124:	e032      	b.n	800f18c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f126:	7afb      	ldrb	r3, [r7, #11]
 800f128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	4619      	mov	r1, r3
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f000 f971 	bl	800f418 <USBD_CoreFindEP>
 800f136:	4603      	mov	r3, r0
 800f138:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f13a:	7dbb      	ldrb	r3, [r7, #22]
 800f13c:	2bff      	cmp	r3, #255	@ 0xff
 800f13e:	d025      	beq.n	800f18c <USBD_LL_DataOutStage+0x15c>
 800f140:	7dbb      	ldrb	r3, [r7, #22]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d122      	bne.n	800f18c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d117      	bne.n	800f182 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f152:	7dba      	ldrb	r2, [r7, #22]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	32ae      	adds	r2, #174	@ 0xae
 800f158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f15c:	699b      	ldr	r3, [r3, #24]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00f      	beq.n	800f182 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f162:	7dba      	ldrb	r2, [r7, #22]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f16a:	7dba      	ldrb	r2, [r7, #22]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	32ae      	adds	r2, #174	@ 0xae
 800f170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	7afa      	ldrb	r2, [r7, #11]
 800f178:	4611      	mov	r1, r2
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	4798      	blx	r3
 800f17e:	4603      	mov	r3, r0
 800f180:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f182:	7dfb      	ldrb	r3, [r7, #23]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f188:	7dfb      	ldrb	r3, [r7, #23]
 800f18a:	e000      	b.n	800f18e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3718      	adds	r7, #24
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b086      	sub	sp, #24
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f1a4:	7afb      	ldrb	r3, [r7, #11]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d16f      	bne.n	800f28a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	3314      	adds	r3, #20
 800f1ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d15a      	bne.n	800f270 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	689a      	ldr	r2, [r3, #8]
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d914      	bls.n	800f1f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	689a      	ldr	r2, [r3, #8]
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	1ad2      	subs	r2, r2, r3
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	461a      	mov	r2, r3
 800f1da:	6879      	ldr	r1, [r7, #4]
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f001 f8f7 	bl	80103d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f7ff fda7 	bl	800ed3c <USBD_LL_PrepareReceive>
 800f1ee:	e03f      	b.n	800f270 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	68da      	ldr	r2, [r3, #12]
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d11c      	bne.n	800f236 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f204:	429a      	cmp	r2, r3
 800f206:	d316      	bcc.n	800f236 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	685a      	ldr	r2, [r3, #4]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f212:	429a      	cmp	r2, r3
 800f214:	d20f      	bcs.n	800f236 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f216:	2200      	movs	r2, #0
 800f218:	2100      	movs	r1, #0
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f001 f8d8 	bl	80103d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2200      	movs	r2, #0
 800f224:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f228:	2300      	movs	r3, #0
 800f22a:	2200      	movs	r2, #0
 800f22c:	2100      	movs	r1, #0
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f7ff fd84 	bl	800ed3c <USBD_LL_PrepareReceive>
 800f234:	e01c      	b.n	800f270 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b03      	cmp	r3, #3
 800f240:	d10f      	bne.n	800f262 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d009      	beq.n	800f262 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f262:	2180      	movs	r1, #128	@ 0x80
 800f264:	68f8      	ldr	r0, [r7, #12]
 800f266:	f7ff fcd7 	bl	800ec18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f001 f902 	bl	8010474 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d03a      	beq.n	800f2f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f7ff fe42 	bl	800ef04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f288:	e032      	b.n	800f2f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f28a:	7afb      	ldrb	r3, [r7, #11]
 800f28c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f290:	b2db      	uxtb	r3, r3
 800f292:	4619      	mov	r1, r3
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f000 f8bf 	bl	800f418 <USBD_CoreFindEP>
 800f29a:	4603      	mov	r3, r0
 800f29c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f29e:	7dfb      	ldrb	r3, [r7, #23]
 800f2a0:	2bff      	cmp	r3, #255	@ 0xff
 800f2a2:	d025      	beq.n	800f2f0 <USBD_LL_DataInStage+0x15a>
 800f2a4:	7dfb      	ldrb	r3, [r7, #23]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d122      	bne.n	800f2f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d11c      	bne.n	800f2f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f2b6:	7dfa      	ldrb	r2, [r7, #23]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	32ae      	adds	r2, #174	@ 0xae
 800f2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d014      	beq.n	800f2f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f2c6:	7dfa      	ldrb	r2, [r7, #23]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f2ce:	7dfa      	ldrb	r2, [r7, #23]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	32ae      	adds	r2, #174	@ 0xae
 800f2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	7afa      	ldrb	r2, [r7, #11]
 800f2dc:	4611      	mov	r1, r2
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	4798      	blx	r3
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f2e6:	7dbb      	ldrb	r3, [r7, #22]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d001      	beq.n	800f2f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f2ec:	7dbb      	ldrb	r3, [r7, #22]
 800f2ee:	e000      	b.n	800f2f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3718      	adds	r7, #24
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b084      	sub	sp, #16
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2201      	movs	r2, #1
 800f30a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f332:	2b00      	cmp	r3, #0
 800f334:	d014      	beq.n	800f360 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00e      	beq.n	800f360 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	6852      	ldr	r2, [r2, #4]
 800f34e:	b2d2      	uxtb	r2, r2
 800f350:	4611      	mov	r1, r2
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	4798      	blx	r3
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f35c:	2303      	movs	r3, #3
 800f35e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f360:	2340      	movs	r3, #64	@ 0x40
 800f362:	2200      	movs	r2, #0
 800f364:	2100      	movs	r1, #0
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7ff fc1d 	bl	800eba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2240      	movs	r2, #64	@ 0x40
 800f378:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f37c:	2340      	movs	r3, #64	@ 0x40
 800f37e:	2200      	movs	r2, #0
 800f380:	2180      	movs	r1, #128	@ 0x80
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f7ff fc0f 	bl	800eba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2240      	movs	r2, #64	@ 0x40
 800f392:	621a      	str	r2, [r3, #32]

  return ret;
 800f394:	7bfb      	ldrb	r3, [r7, #15]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f39e:	b480      	push	{r7}
 800f3a0:	b083      	sub	sp, #12
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	78fa      	ldrb	r2, [r7, #3]
 800f3ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b082      	sub	sp, #8
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d110      	bne.n	800f3f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d005      	beq.n	800f3f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ee:	69db      	ldr	r3, [r3, #28]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f3fe:	b480      	push	{r7}
 800f400:	b083      	sub	sp, #12
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	460b      	mov	r3, r1
 800f408:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f40a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	460b      	mov	r3, r1
 800f422:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f424:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f426:	4618      	mov	r0, r3
 800f428:	370c      	adds	r7, #12
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr

0800f432 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b086      	sub	sp, #24
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	460b      	mov	r3, r1
 800f43c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f446:	2300      	movs	r3, #0
 800f448:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	885b      	ldrh	r3, [r3, #2]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	7812      	ldrb	r2, [r2, #0]
 800f454:	4293      	cmp	r3, r2
 800f456:	d91f      	bls.n	800f498 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f45e:	e013      	b.n	800f488 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f460:	f107 030a 	add.w	r3, r7, #10
 800f464:	4619      	mov	r1, r3
 800f466:	6978      	ldr	r0, [r7, #20]
 800f468:	f000 f81b 	bl	800f4a2 <USBD_GetNextDesc>
 800f46c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	785b      	ldrb	r3, [r3, #1]
 800f472:	2b05      	cmp	r3, #5
 800f474:	d108      	bne.n	800f488 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	789b      	ldrb	r3, [r3, #2]
 800f47e:	78fa      	ldrb	r2, [r7, #3]
 800f480:	429a      	cmp	r2, r3
 800f482:	d008      	beq.n	800f496 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f484:	2300      	movs	r3, #0
 800f486:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	885b      	ldrh	r3, [r3, #2]
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	897b      	ldrh	r3, [r7, #10]
 800f490:	429a      	cmp	r2, r3
 800f492:	d8e5      	bhi.n	800f460 <USBD_GetEpDesc+0x2e>
 800f494:	e000      	b.n	800f498 <USBD_GetEpDesc+0x66>
          break;
 800f496:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f498:	693b      	ldr	r3, [r7, #16]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3718      	adds	r7, #24
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	b085      	sub	sp, #20
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	7812      	ldrb	r2, [r2, #0]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b087      	sub	sp, #28
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f4f8:	8a3b      	ldrh	r3, [r7, #16]
 800f4fa:	021b      	lsls	r3, r3, #8
 800f4fc:	b21a      	sxth	r2, r3
 800f4fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f502:	4313      	orrs	r3, r2
 800f504:	b21b      	sxth	r3, r3
 800f506:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f508:	89fb      	ldrh	r3, [r7, #14]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	371c      	adds	r7, #28
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
	...

0800f518 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f52e:	2b40      	cmp	r3, #64	@ 0x40
 800f530:	d005      	beq.n	800f53e <USBD_StdDevReq+0x26>
 800f532:	2b40      	cmp	r3, #64	@ 0x40
 800f534:	d857      	bhi.n	800f5e6 <USBD_StdDevReq+0xce>
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00f      	beq.n	800f55a <USBD_StdDevReq+0x42>
 800f53a:	2b20      	cmp	r3, #32
 800f53c:	d153      	bne.n	800f5e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	32ae      	adds	r2, #174	@ 0xae
 800f548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	4798      	blx	r3
 800f554:	4603      	mov	r3, r0
 800f556:	73fb      	strb	r3, [r7, #15]
      break;
 800f558:	e04a      	b.n	800f5f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	2b09      	cmp	r3, #9
 800f560:	d83b      	bhi.n	800f5da <USBD_StdDevReq+0xc2>
 800f562:	a201      	add	r2, pc, #4	@ (adr r2, 800f568 <USBD_StdDevReq+0x50>)
 800f564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f568:	0800f5bd 	.word	0x0800f5bd
 800f56c:	0800f5d1 	.word	0x0800f5d1
 800f570:	0800f5db 	.word	0x0800f5db
 800f574:	0800f5c7 	.word	0x0800f5c7
 800f578:	0800f5db 	.word	0x0800f5db
 800f57c:	0800f59b 	.word	0x0800f59b
 800f580:	0800f591 	.word	0x0800f591
 800f584:	0800f5db 	.word	0x0800f5db
 800f588:	0800f5b3 	.word	0x0800f5b3
 800f58c:	0800f5a5 	.word	0x0800f5a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fa3c 	bl	800fa10 <USBD_GetDescriptor>
          break;
 800f598:	e024      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f59a:	6839      	ldr	r1, [r7, #0]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 fba1 	bl	800fce4 <USBD_SetAddress>
          break;
 800f5a2:	e01f      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f5a4:	6839      	ldr	r1, [r7, #0]
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 fbe0 	bl	800fd6c <USBD_SetConfig>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	73fb      	strb	r3, [r7, #15]
          break;
 800f5b0:	e018      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fc83 	bl	800fec0 <USBD_GetConfig>
          break;
 800f5ba:	e013      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 fcb4 	bl	800ff2c <USBD_GetStatus>
          break;
 800f5c4:	e00e      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 fce3 	bl	800ff94 <USBD_SetFeature>
          break;
 800f5ce:	e009      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 fd07 	bl	800ffe6 <USBD_ClrFeature>
          break;
 800f5d8:	e004      	b.n	800f5e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fd5e 	bl	801009e <USBD_CtlError>
          break;
 800f5e2:	bf00      	nop
      }
      break;
 800f5e4:	e004      	b.n	800f5f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fd58 	bl	801009e <USBD_CtlError>
      break;
 800f5ee:	bf00      	nop
  }

  return ret;
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop

0800f5fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f606:	2300      	movs	r3, #0
 800f608:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f612:	2b40      	cmp	r3, #64	@ 0x40
 800f614:	d005      	beq.n	800f622 <USBD_StdItfReq+0x26>
 800f616:	2b40      	cmp	r3, #64	@ 0x40
 800f618:	d852      	bhi.n	800f6c0 <USBD_StdItfReq+0xc4>
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <USBD_StdItfReq+0x26>
 800f61e:	2b20      	cmp	r3, #32
 800f620:	d14e      	bne.n	800f6c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	3b01      	subs	r3, #1
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d840      	bhi.n	800f6b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	889b      	ldrh	r3, [r3, #4]
 800f634:	b2db      	uxtb	r3, r3
 800f636:	2b01      	cmp	r3, #1
 800f638:	d836      	bhi.n	800f6a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	889b      	ldrh	r3, [r3, #4]
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff fedb 	bl	800f3fe <USBD_CoreFindIF>
 800f648:	4603      	mov	r3, r0
 800f64a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
 800f64e:	2bff      	cmp	r3, #255	@ 0xff
 800f650:	d01d      	beq.n	800f68e <USBD_StdItfReq+0x92>
 800f652:	7bbb      	ldrb	r3, [r7, #14]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11a      	bne.n	800f68e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f658:	7bba      	ldrb	r2, [r7, #14]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	32ae      	adds	r2, #174	@ 0xae
 800f65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00f      	beq.n	800f688 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f668:	7bba      	ldrb	r2, [r7, #14]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f670:	7bba      	ldrb	r2, [r7, #14]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	32ae      	adds	r2, #174	@ 0xae
 800f676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	4798      	blx	r3
 800f682:	4603      	mov	r3, r0
 800f684:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f686:	e004      	b.n	800f692 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f688:	2303      	movs	r3, #3
 800f68a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f68c:	e001      	b.n	800f692 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f68e:	2303      	movs	r3, #3
 800f690:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	88db      	ldrh	r3, [r3, #6]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d110      	bne.n	800f6bc <USBD_StdItfReq+0xc0>
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10d      	bne.n	800f6bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 fed4 	bl	801044e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f6a6:	e009      	b.n	800f6bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fcf7 	bl	801009e <USBD_CtlError>
          break;
 800f6b0:	e004      	b.n	800f6bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fcf2 	bl	801009e <USBD_CtlError>
          break;
 800f6ba:	e000      	b.n	800f6be <USBD_StdItfReq+0xc2>
          break;
 800f6bc:	bf00      	nop
      }
      break;
 800f6be:	e004      	b.n	800f6ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fceb 	bl	801009e <USBD_CtlError>
      break;
 800f6c8:	bf00      	nop
  }

  return ret;
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	889b      	ldrh	r3, [r3, #4]
 800f6e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6f0:	2b40      	cmp	r3, #64	@ 0x40
 800f6f2:	d007      	beq.n	800f704 <USBD_StdEPReq+0x30>
 800f6f4:	2b40      	cmp	r3, #64	@ 0x40
 800f6f6:	f200 817f 	bhi.w	800f9f8 <USBD_StdEPReq+0x324>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d02a      	beq.n	800f754 <USBD_StdEPReq+0x80>
 800f6fe:	2b20      	cmp	r3, #32
 800f700:	f040 817a 	bne.w	800f9f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f704:	7bbb      	ldrb	r3, [r7, #14]
 800f706:	4619      	mov	r1, r3
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff fe85 	bl	800f418 <USBD_CoreFindEP>
 800f70e:	4603      	mov	r3, r0
 800f710:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f712:	7b7b      	ldrb	r3, [r7, #13]
 800f714:	2bff      	cmp	r3, #255	@ 0xff
 800f716:	f000 8174 	beq.w	800fa02 <USBD_StdEPReq+0x32e>
 800f71a:	7b7b      	ldrb	r3, [r7, #13]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f040 8170 	bne.w	800fa02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f722:	7b7a      	ldrb	r2, [r7, #13]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f72a:	7b7a      	ldrb	r2, [r7, #13]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	32ae      	adds	r2, #174	@ 0xae
 800f730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 8163 	beq.w	800fa02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f73c:	7b7a      	ldrb	r2, [r7, #13]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	32ae      	adds	r2, #174	@ 0xae
 800f742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	4798      	blx	r3
 800f74e:	4603      	mov	r3, r0
 800f750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f752:	e156      	b.n	800fa02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	785b      	ldrb	r3, [r3, #1]
 800f758:	2b03      	cmp	r3, #3
 800f75a:	d008      	beq.n	800f76e <USBD_StdEPReq+0x9a>
 800f75c:	2b03      	cmp	r3, #3
 800f75e:	f300 8145 	bgt.w	800f9ec <USBD_StdEPReq+0x318>
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 809b 	beq.w	800f89e <USBD_StdEPReq+0x1ca>
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d03c      	beq.n	800f7e6 <USBD_StdEPReq+0x112>
 800f76c:	e13e      	b.n	800f9ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f774:	b2db      	uxtb	r3, r3
 800f776:	2b02      	cmp	r3, #2
 800f778:	d002      	beq.n	800f780 <USBD_StdEPReq+0xac>
 800f77a:	2b03      	cmp	r3, #3
 800f77c:	d016      	beq.n	800f7ac <USBD_StdEPReq+0xd8>
 800f77e:	e02c      	b.n	800f7da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f780:	7bbb      	ldrb	r3, [r7, #14]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00d      	beq.n	800f7a2 <USBD_StdEPReq+0xce>
 800f786:	7bbb      	ldrb	r3, [r7, #14]
 800f788:	2b80      	cmp	r3, #128	@ 0x80
 800f78a:	d00a      	beq.n	800f7a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f78c:	7bbb      	ldrb	r3, [r7, #14]
 800f78e:	4619      	mov	r1, r3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff fa41 	bl	800ec18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f796:	2180      	movs	r1, #128	@ 0x80
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff fa3d 	bl	800ec18 <USBD_LL_StallEP>
 800f79e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f7a0:	e020      	b.n	800f7e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fc7a 	bl	801009e <USBD_CtlError>
              break;
 800f7aa:	e01b      	b.n	800f7e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	885b      	ldrh	r3, [r3, #2]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10e      	bne.n	800f7d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f7b4:	7bbb      	ldrb	r3, [r7, #14]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00b      	beq.n	800f7d2 <USBD_StdEPReq+0xfe>
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	2b80      	cmp	r3, #128	@ 0x80
 800f7be:	d008      	beq.n	800f7d2 <USBD_StdEPReq+0xfe>
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	88db      	ldrh	r3, [r3, #6]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d104      	bne.n	800f7d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7c8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f7ff fa23 	bl	800ec18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fe3b 	bl	801044e <USBD_CtlSendStatus>

              break;
 800f7d8:	e004      	b.n	800f7e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fc5e 	bl	801009e <USBD_CtlError>
              break;
 800f7e2:	bf00      	nop
          }
          break;
 800f7e4:	e107      	b.n	800f9f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d002      	beq.n	800f7f8 <USBD_StdEPReq+0x124>
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d016      	beq.n	800f824 <USBD_StdEPReq+0x150>
 800f7f6:	e04b      	b.n	800f890 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00d      	beq.n	800f81a <USBD_StdEPReq+0x146>
 800f7fe:	7bbb      	ldrb	r3, [r7, #14]
 800f800:	2b80      	cmp	r3, #128	@ 0x80
 800f802:	d00a      	beq.n	800f81a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f804:	7bbb      	ldrb	r3, [r7, #14]
 800f806:	4619      	mov	r1, r3
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff fa05 	bl	800ec18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f80e:	2180      	movs	r1, #128	@ 0x80
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff fa01 	bl	800ec18 <USBD_LL_StallEP>
 800f816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f818:	e040      	b.n	800f89c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 fc3e 	bl	801009e <USBD_CtlError>
              break;
 800f822:	e03b      	b.n	800f89c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	885b      	ldrh	r3, [r3, #2]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d136      	bne.n	800f89a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f82c:	7bbb      	ldrb	r3, [r7, #14]
 800f82e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f832:	2b00      	cmp	r3, #0
 800f834:	d004      	beq.n	800f840 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f836:	7bbb      	ldrb	r3, [r7, #14]
 800f838:	4619      	mov	r1, r3
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f7ff fa05 	bl	800ec4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 fe04 	bl	801044e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f846:	7bbb      	ldrb	r3, [r7, #14]
 800f848:	4619      	mov	r1, r3
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7ff fde4 	bl	800f418 <USBD_CoreFindEP>
 800f850:	4603      	mov	r3, r0
 800f852:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f854:	7b7b      	ldrb	r3, [r7, #13]
 800f856:	2bff      	cmp	r3, #255	@ 0xff
 800f858:	d01f      	beq.n	800f89a <USBD_StdEPReq+0x1c6>
 800f85a:	7b7b      	ldrb	r3, [r7, #13]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d11c      	bne.n	800f89a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f860:	7b7a      	ldrb	r2, [r7, #13]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f868:	7b7a      	ldrb	r2, [r7, #13]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	32ae      	adds	r2, #174	@ 0xae
 800f86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d010      	beq.n	800f89a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f878:	7b7a      	ldrb	r2, [r7, #13]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	32ae      	adds	r2, #174	@ 0xae
 800f87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	4798      	blx	r3
 800f88a:	4603      	mov	r3, r0
 800f88c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f88e:	e004      	b.n	800f89a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f890:	6839      	ldr	r1, [r7, #0]
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 fc03 	bl	801009e <USBD_CtlError>
              break;
 800f898:	e000      	b.n	800f89c <USBD_StdEPReq+0x1c8>
              break;
 800f89a:	bf00      	nop
          }
          break;
 800f89c:	e0ab      	b.n	800f9f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d002      	beq.n	800f8b0 <USBD_StdEPReq+0x1dc>
 800f8aa:	2b03      	cmp	r3, #3
 800f8ac:	d032      	beq.n	800f914 <USBD_StdEPReq+0x240>
 800f8ae:	e097      	b.n	800f9e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8b0:	7bbb      	ldrb	r3, [r7, #14]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d007      	beq.n	800f8c6 <USBD_StdEPReq+0x1f2>
 800f8b6:	7bbb      	ldrb	r3, [r7, #14]
 800f8b8:	2b80      	cmp	r3, #128	@ 0x80
 800f8ba:	d004      	beq.n	800f8c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f8bc:	6839      	ldr	r1, [r7, #0]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fbed 	bl	801009e <USBD_CtlError>
                break;
 800f8c4:	e091      	b.n	800f9ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	da0b      	bge.n	800f8e6 <USBD_StdEPReq+0x212>
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	3310      	adds	r3, #16
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	e00b      	b.n	800f8fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8e6:	7bbb      	ldrb	r3, [r7, #14]
 800f8e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	3304      	adds	r3, #4
 800f8fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	2202      	movs	r2, #2
 800f90a:	4619      	mov	r1, r3
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fd44 	bl	801039a <USBD_CtlSendData>
              break;
 800f912:	e06a      	b.n	800f9ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	da11      	bge.n	800f940 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f91c:	7bbb      	ldrb	r3, [r7, #14]
 800f91e:	f003 020f 	and.w	r2, r3, #15
 800f922:	6879      	ldr	r1, [r7, #4]
 800f924:	4613      	mov	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	440b      	add	r3, r1
 800f92e:	3324      	adds	r3, #36	@ 0x24
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d117      	bne.n	800f966 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fbb0 	bl	801009e <USBD_CtlError>
                  break;
 800f93e:	e054      	b.n	800f9ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	f003 020f 	and.w	r2, r3, #15
 800f946:	6879      	ldr	r1, [r7, #4]
 800f948:	4613      	mov	r3, r2
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	4413      	add	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	440b      	add	r3, r1
 800f952:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d104      	bne.n	800f966 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fb9d 	bl	801009e <USBD_CtlError>
                  break;
 800f964:	e041      	b.n	800f9ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da0b      	bge.n	800f986 <USBD_StdEPReq+0x2b2>
 800f96e:	7bbb      	ldrb	r3, [r7, #14]
 800f970:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f974:	4613      	mov	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	4413      	add	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	3310      	adds	r3, #16
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	4413      	add	r3, r2
 800f982:	3304      	adds	r3, #4
 800f984:	e00b      	b.n	800f99e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f986:	7bbb      	ldrb	r3, [r7, #14]
 800f988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f98c:	4613      	mov	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	4413      	add	r3, r2
 800f99c:	3304      	adds	r3, #4
 800f99e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f9a0:	7bbb      	ldrb	r3, [r7, #14]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d002      	beq.n	800f9ac <USBD_StdEPReq+0x2d8>
 800f9a6:	7bbb      	ldrb	r3, [r7, #14]
 800f9a8:	2b80      	cmp	r3, #128	@ 0x80
 800f9aa:	d103      	bne.n	800f9b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]
 800f9b2:	e00e      	b.n	800f9d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff f95f 	bl	800ec7c <USBD_LL_IsStallEP>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d003      	beq.n	800f9cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	e002      	b.n	800f9d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 fcde 	bl	801039a <USBD_CtlSendData>
              break;
 800f9de:	e004      	b.n	800f9ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 fb5b 	bl	801009e <USBD_CtlError>
              break;
 800f9e8:	bf00      	nop
          }
          break;
 800f9ea:	e004      	b.n	800f9f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 fb55 	bl	801009e <USBD_CtlError>
          break;
 800f9f4:	bf00      	nop
      }
      break;
 800f9f6:	e005      	b.n	800fa04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fb4f 	bl	801009e <USBD_CtlError>
      break;
 800fa00:	e000      	b.n	800fa04 <USBD_StdEPReq+0x330>
      break;
 800fa02:	bf00      	nop
  }

  return ret;
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa22:	2300      	movs	r3, #0
 800fa24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	885b      	ldrh	r3, [r3, #2]
 800fa2a:	0a1b      	lsrs	r3, r3, #8
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	2b06      	cmp	r3, #6
 800fa32:	f200 8128 	bhi.w	800fc86 <USBD_GetDescriptor+0x276>
 800fa36:	a201      	add	r2, pc, #4	@ (adr r2, 800fa3c <USBD_GetDescriptor+0x2c>)
 800fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3c:	0800fa59 	.word	0x0800fa59
 800fa40:	0800fa71 	.word	0x0800fa71
 800fa44:	0800fab1 	.word	0x0800fab1
 800fa48:	0800fc87 	.word	0x0800fc87
 800fa4c:	0800fc87 	.word	0x0800fc87
 800fa50:	0800fc27 	.word	0x0800fc27
 800fa54:	0800fc53 	.word	0x0800fc53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	7c12      	ldrb	r2, [r2, #16]
 800fa64:	f107 0108 	add.w	r1, r7, #8
 800fa68:	4610      	mov	r0, r2
 800fa6a:	4798      	blx	r3
 800fa6c:	60f8      	str	r0, [r7, #12]
      break;
 800fa6e:	e112      	b.n	800fc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	7c1b      	ldrb	r3, [r3, #16]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d10d      	bne.n	800fa94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa80:	f107 0208 	add.w	r2, r7, #8
 800fa84:	4610      	mov	r0, r2
 800fa86:	4798      	blx	r3
 800fa88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	2202      	movs	r2, #2
 800fa90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa92:	e100      	b.n	800fc96 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa9c:	f107 0208 	add.w	r2, r7, #8
 800faa0:	4610      	mov	r0, r2
 800faa2:	4798      	blx	r3
 800faa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3301      	adds	r3, #1
 800faaa:	2202      	movs	r2, #2
 800faac:	701a      	strb	r2, [r3, #0]
      break;
 800faae:	e0f2      	b.n	800fc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	885b      	ldrh	r3, [r3, #2]
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b05      	cmp	r3, #5
 800fab8:	f200 80ac 	bhi.w	800fc14 <USBD_GetDescriptor+0x204>
 800fabc:	a201      	add	r2, pc, #4	@ (adr r2, 800fac4 <USBD_GetDescriptor+0xb4>)
 800fabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac2:	bf00      	nop
 800fac4:	0800fadd 	.word	0x0800fadd
 800fac8:	0800fb11 	.word	0x0800fb11
 800facc:	0800fb45 	.word	0x0800fb45
 800fad0:	0800fb79 	.word	0x0800fb79
 800fad4:	0800fbad 	.word	0x0800fbad
 800fad8:	0800fbe1 	.word	0x0800fbe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00b      	beq.n	800fb00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	7c12      	ldrb	r2, [r2, #16]
 800faf4:	f107 0108 	add.w	r1, r7, #8
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
 800fafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fafe:	e091      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 facb 	bl	801009e <USBD_CtlError>
            err++;
 800fb08:	7afb      	ldrb	r3, [r7, #11]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800fb0e:	e089      	b.n	800fc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00b      	beq.n	800fb34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb22:	689b      	ldr	r3, [r3, #8]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	7c12      	ldrb	r2, [r2, #16]
 800fb28:	f107 0108 	add.w	r1, r7, #8
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	4798      	blx	r3
 800fb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb32:	e077      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb34:	6839      	ldr	r1, [r7, #0]
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fab1 	bl	801009e <USBD_CtlError>
            err++;
 800fb3c:	7afb      	ldrb	r3, [r7, #11]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	72fb      	strb	r3, [r7, #11]
          break;
 800fb42:	e06f      	b.n	800fc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00b      	beq.n	800fb68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	7c12      	ldrb	r2, [r2, #16]
 800fb5c:	f107 0108 	add.w	r1, r7, #8
 800fb60:	4610      	mov	r0, r2
 800fb62:	4798      	blx	r3
 800fb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb66:	e05d      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fa97 	bl	801009e <USBD_CtlError>
            err++;
 800fb70:	7afb      	ldrb	r3, [r7, #11]
 800fb72:	3301      	adds	r3, #1
 800fb74:	72fb      	strb	r3, [r7, #11]
          break;
 800fb76:	e055      	b.n	800fc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00b      	beq.n	800fb9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb8a:	691b      	ldr	r3, [r3, #16]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	7c12      	ldrb	r2, [r2, #16]
 800fb90:	f107 0108 	add.w	r1, r7, #8
 800fb94:	4610      	mov	r0, r2
 800fb96:	4798      	blx	r3
 800fb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb9a:	e043      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fa7d 	bl	801009e <USBD_CtlError>
            err++;
 800fba4:	7afb      	ldrb	r3, [r7, #11]
 800fba6:	3301      	adds	r3, #1
 800fba8:	72fb      	strb	r3, [r7, #11]
          break;
 800fbaa:	e03b      	b.n	800fc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbb2:	695b      	ldr	r3, [r3, #20]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d00b      	beq.n	800fbd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbbe:	695b      	ldr	r3, [r3, #20]
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	7c12      	ldrb	r2, [r2, #16]
 800fbc4:	f107 0108 	add.w	r1, r7, #8
 800fbc8:	4610      	mov	r0, r2
 800fbca:	4798      	blx	r3
 800fbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbce:	e029      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbd0:	6839      	ldr	r1, [r7, #0]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 fa63 	bl	801009e <USBD_CtlError>
            err++;
 800fbd8:	7afb      	ldrb	r3, [r7, #11]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800fbde:	e021      	b.n	800fc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00b      	beq.n	800fc04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbf2:	699b      	ldr	r3, [r3, #24]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	7c12      	ldrb	r2, [r2, #16]
 800fbf8:	f107 0108 	add.w	r1, r7, #8
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4798      	blx	r3
 800fc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc02:	e00f      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc04:	6839      	ldr	r1, [r7, #0]
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fa49 	bl	801009e <USBD_CtlError>
            err++;
 800fc0c:	7afb      	ldrb	r3, [r7, #11]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	72fb      	strb	r3, [r7, #11]
          break;
 800fc12:	e007      	b.n	800fc24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fc14:	6839      	ldr	r1, [r7, #0]
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 fa41 	bl	801009e <USBD_CtlError>
          err++;
 800fc1c:	7afb      	ldrb	r3, [r7, #11]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fc22:	bf00      	nop
      }
      break;
 800fc24:	e037      	b.n	800fc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	7c1b      	ldrb	r3, [r3, #16]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d109      	bne.n	800fc42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc36:	f107 0208 	add.w	r2, r7, #8
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	4798      	blx	r3
 800fc3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc40:	e029      	b.n	800fc96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fa2a 	bl	801009e <USBD_CtlError>
        err++;
 800fc4a:	7afb      	ldrb	r3, [r7, #11]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	72fb      	strb	r3, [r7, #11]
      break;
 800fc50:	e021      	b.n	800fc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	7c1b      	ldrb	r3, [r3, #16]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10d      	bne.n	800fc76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc62:	f107 0208 	add.w	r2, r7, #8
 800fc66:	4610      	mov	r0, r2
 800fc68:	4798      	blx	r3
 800fc6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	2207      	movs	r2, #7
 800fc72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc74:	e00f      	b.n	800fc96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fc76:	6839      	ldr	r1, [r7, #0]
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fa10 	bl	801009e <USBD_CtlError>
        err++;
 800fc7e:	7afb      	ldrb	r3, [r7, #11]
 800fc80:	3301      	adds	r3, #1
 800fc82:	72fb      	strb	r3, [r7, #11]
      break;
 800fc84:	e007      	b.n	800fc96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fc86:	6839      	ldr	r1, [r7, #0]
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 fa08 	bl	801009e <USBD_CtlError>
      err++;
 800fc8e:	7afb      	ldrb	r3, [r7, #11]
 800fc90:	3301      	adds	r3, #1
 800fc92:	72fb      	strb	r3, [r7, #11]
      break;
 800fc94:	bf00      	nop
  }

  if (err != 0U)
 800fc96:	7afb      	ldrb	r3, [r7, #11]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d11e      	bne.n	800fcda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	88db      	ldrh	r3, [r3, #6]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d016      	beq.n	800fcd2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fca4:	893b      	ldrh	r3, [r7, #8]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00e      	beq.n	800fcc8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	88da      	ldrh	r2, [r3, #6]
 800fcae:	893b      	ldrh	r3, [r7, #8]
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	bf28      	it	cs
 800fcb4:	4613      	movcs	r3, r2
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fcba:	893b      	ldrh	r3, [r7, #8]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	68f9      	ldr	r1, [r7, #12]
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 fb6a 	bl	801039a <USBD_CtlSendData>
 800fcc6:	e009      	b.n	800fcdc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fcc8:	6839      	ldr	r1, [r7, #0]
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f9e7 	bl	801009e <USBD_CtlError>
 800fcd0:	e004      	b.n	800fcdc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fbbb 	bl	801044e <USBD_CtlSendStatus>
 800fcd8:	e000      	b.n	800fcdc <USBD_GetDescriptor+0x2cc>
    return;
 800fcda:	bf00      	nop
  }
}
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop

0800fce4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	889b      	ldrh	r3, [r3, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d131      	bne.n	800fd5a <USBD_SetAddress+0x76>
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	88db      	ldrh	r3, [r3, #6]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d12d      	bne.n	800fd5a <USBD_SetAddress+0x76>
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	885b      	ldrh	r3, [r3, #2]
 800fd02:	2b7f      	cmp	r3, #127	@ 0x7f
 800fd04:	d829      	bhi.n	800fd5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	885b      	ldrh	r3, [r3, #2]
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	2b03      	cmp	r3, #3
 800fd1c:	d104      	bne.n	800fd28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f9bc 	bl	801009e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd26:	e01d      	b.n	800fd64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	7bfa      	ldrb	r2, [r7, #15]
 800fd2c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd30:	7bfb      	ldrb	r3, [r7, #15]
 800fd32:	4619      	mov	r1, r3
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7fe ffcd 	bl	800ecd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 fb87 	bl	801044e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d004      	beq.n	800fd50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2202      	movs	r2, #2
 800fd4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd4e:	e009      	b.n	800fd64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd58:	e004      	b.n	800fd64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd5a:	6839      	ldr	r1, [r7, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f99e 	bl	801009e <USBD_CtlError>
  }
}
 800fd62:	bf00      	nop
 800fd64:	bf00      	nop
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd76:	2300      	movs	r3, #0
 800fd78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	885b      	ldrh	r3, [r3, #2]
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	4b4e      	ldr	r3, [pc, #312]	@ (800febc <USBD_SetConfig+0x150>)
 800fd82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd84:	4b4d      	ldr	r3, [pc, #308]	@ (800febc <USBD_SetConfig+0x150>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d905      	bls.n	800fd98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f985 	bl	801009e <USBD_CtlError>
    return USBD_FAIL;
 800fd94:	2303      	movs	r3, #3
 800fd96:	e08c      	b.n	800feb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b02      	cmp	r3, #2
 800fda2:	d002      	beq.n	800fdaa <USBD_SetConfig+0x3e>
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d029      	beq.n	800fdfc <USBD_SetConfig+0x90>
 800fda8:	e075      	b.n	800fe96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fdaa:	4b44      	ldr	r3, [pc, #272]	@ (800febc <USBD_SetConfig+0x150>)
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d020      	beq.n	800fdf4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fdb2:	4b42      	ldr	r3, [pc, #264]	@ (800febc <USBD_SetConfig+0x150>)
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdbc:	4b3f      	ldr	r3, [pc, #252]	@ (800febc <USBD_SetConfig+0x150>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7ff f8a9 	bl	800ef1a <USBD_SetClassConfig>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d008      	beq.n	800fde4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fdd2:	6839      	ldr	r1, [r7, #0]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f962 	bl	801009e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2202      	movs	r2, #2
 800fdde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fde2:	e065      	b.n	800feb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fb32 	bl	801044e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2203      	movs	r2, #3
 800fdee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fdf2:	e05d      	b.n	800feb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 fb2a 	bl	801044e <USBD_CtlSendStatus>
      break;
 800fdfa:	e059      	b.n	800feb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fdfc:	4b2f      	ldr	r3, [pc, #188]	@ (800febc <USBD_SetConfig+0x150>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d112      	bne.n	800fe2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2202      	movs	r2, #2
 800fe08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fe0c:	4b2b      	ldr	r3, [pc, #172]	@ (800febc <USBD_SetConfig+0x150>)
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	461a      	mov	r2, r3
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe16:	4b29      	ldr	r3, [pc, #164]	@ (800febc <USBD_SetConfig+0x150>)
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff f898 	bl	800ef52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fb13 	bl	801044e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe28:	e042      	b.n	800feb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fe2a:	4b24      	ldr	r3, [pc, #144]	@ (800febc <USBD_SetConfig+0x150>)
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d02a      	beq.n	800fe8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7ff f886 	bl	800ef52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fe46:	4b1d      	ldr	r3, [pc, #116]	@ (800febc <USBD_SetConfig+0x150>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe50:	4b1a      	ldr	r3, [pc, #104]	@ (800febc <USBD_SetConfig+0x150>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	4619      	mov	r1, r3
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff f85f 	bl	800ef1a <USBD_SetClassConfig>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00f      	beq.n	800fe86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f918 	bl	801009e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7ff f86b 	bl	800ef52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe84:	e014      	b.n	800feb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fae1 	bl	801044e <USBD_CtlSendStatus>
      break;
 800fe8c:	e010      	b.n	800feb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fadd 	bl	801044e <USBD_CtlSendStatus>
      break;
 800fe94:	e00c      	b.n	800feb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fe96:	6839      	ldr	r1, [r7, #0]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f900 	bl	801009e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe9e:	4b07      	ldr	r3, [pc, #28]	@ (800febc <USBD_SetConfig+0x150>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	4619      	mov	r1, r3
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7ff f854 	bl	800ef52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800feaa:	2303      	movs	r3, #3
 800feac:	73fb      	strb	r3, [r7, #15]
      break;
 800feae:	bf00      	nop
  }

  return ret;
 800feb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	20011164 	.word	0x20011164

0800fec0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	88db      	ldrh	r3, [r3, #6]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d004      	beq.n	800fedc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f8e2 	bl	801009e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800feda:	e023      	b.n	800ff24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	dc02      	bgt.n	800feee <USBD_GetConfig+0x2e>
 800fee8:	2b00      	cmp	r3, #0
 800feea:	dc03      	bgt.n	800fef4 <USBD_GetConfig+0x34>
 800feec:	e015      	b.n	800ff1a <USBD_GetConfig+0x5a>
 800feee:	2b03      	cmp	r3, #3
 800fef0:	d00b      	beq.n	800ff0a <USBD_GetConfig+0x4a>
 800fef2:	e012      	b.n	800ff1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	3308      	adds	r3, #8
 800fefe:	2201      	movs	r2, #1
 800ff00:	4619      	mov	r1, r3
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fa49 	bl	801039a <USBD_CtlSendData>
        break;
 800ff08:	e00c      	b.n	800ff24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	2201      	movs	r2, #1
 800ff10:	4619      	mov	r1, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 fa41 	bl	801039a <USBD_CtlSendData>
        break;
 800ff18:	e004      	b.n	800ff24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f8be 	bl	801009e <USBD_CtlError>
        break;
 800ff22:	bf00      	nop
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d81e      	bhi.n	800ff82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	88db      	ldrh	r3, [r3, #6]
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	d004      	beq.n	800ff56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f8a5 	bl	801009e <USBD_CtlError>
        break;
 800ff54:	e01a      	b.n	800ff8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d005      	beq.n	800ff72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	f043 0202 	orr.w	r2, r3, #2
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	330c      	adds	r3, #12
 800ff76:	2202      	movs	r2, #2
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 fa0d 	bl	801039a <USBD_CtlSendData>
      break;
 800ff80:	e004      	b.n	800ff8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff82:	6839      	ldr	r1, [r7, #0]
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f88a 	bl	801009e <USBD_CtlError>
      break;
 800ff8a:	bf00      	nop
  }
}
 800ff8c:	bf00      	nop
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	885b      	ldrh	r3, [r3, #2]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d107      	bne.n	800ffb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fa4d 	bl	801044e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ffb4:	e013      	b.n	800ffde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	885b      	ldrh	r3, [r3, #2]
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d10b      	bne.n	800ffd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	889b      	ldrh	r3, [r3, #4]
 800ffc2:	0a1b      	lsrs	r3, r3, #8
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	b2da      	uxtb	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fa3d 	bl	801044e <USBD_CtlSendStatus>
}
 800ffd4:	e003      	b.n	800ffde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ffd6:	6839      	ldr	r1, [r7, #0]
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 f860 	bl	801009e <USBD_CtlError>
}
 800ffde:	bf00      	nop
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b082      	sub	sp, #8
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	3b01      	subs	r3, #1
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	d80b      	bhi.n	8010016 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	885b      	ldrh	r3, [r3, #2]
 8010002:	2b01      	cmp	r3, #1
 8010004:	d10c      	bne.n	8010020 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fa1d 	bl	801044e <USBD_CtlSendStatus>
      }
      break;
 8010014:	e004      	b.n	8010020 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010016:	6839      	ldr	r1, [r7, #0]
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f840 	bl	801009e <USBD_CtlError>
      break;
 801001e:	e000      	b.n	8010022 <USBD_ClrFeature+0x3c>
      break;
 8010020:	bf00      	nop
  }
}
 8010022:	bf00      	nop
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b084      	sub	sp, #16
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
 8010032:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	781a      	ldrb	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	3301      	adds	r3, #1
 8010044:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	781a      	ldrb	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	3301      	adds	r3, #1
 8010052:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f7ff fa40 	bl	800f4da <SWAPBYTE>
 801005a:	4603      	mov	r3, r0
 801005c:	461a      	mov	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3301      	adds	r3, #1
 8010066:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3301      	adds	r3, #1
 801006c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7ff fa33 	bl	800f4da <SWAPBYTE>
 8010074:	4603      	mov	r3, r0
 8010076:	461a      	mov	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	3301      	adds	r3, #1
 8010080:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	3301      	adds	r3, #1
 8010086:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f7ff fa26 	bl	800f4da <SWAPBYTE>
 801008e:	4603      	mov	r3, r0
 8010090:	461a      	mov	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	80da      	strh	r2, [r3, #6]
}
 8010096:	bf00      	nop
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80100a8:	2180      	movs	r1, #128	@ 0x80
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7fe fdb4 	bl	800ec18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80100b0:	2100      	movs	r1, #0
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7fe fdb0 	bl	800ec18 <USBD_LL_StallEP>
}
 80100b8:	bf00      	nop
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80100cc:	2300      	movs	r3, #0
 80100ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d036      	beq.n	8010144 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80100da:	6938      	ldr	r0, [r7, #16]
 80100dc:	f000 f836 	bl	801014c <USBD_GetLen>
 80100e0:	4603      	mov	r3, r0
 80100e2:	3301      	adds	r3, #1
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80100ee:	7dfb      	ldrb	r3, [r7, #23]
 80100f0:	68ba      	ldr	r2, [r7, #8]
 80100f2:	4413      	add	r3, r2
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	7812      	ldrb	r2, [r2, #0]
 80100f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80100fa:	7dfb      	ldrb	r3, [r7, #23]
 80100fc:	3301      	adds	r3, #1
 80100fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010100:	7dfb      	ldrb	r3, [r7, #23]
 8010102:	68ba      	ldr	r2, [r7, #8]
 8010104:	4413      	add	r3, r2
 8010106:	2203      	movs	r2, #3
 8010108:	701a      	strb	r2, [r3, #0]
  idx++;
 801010a:	7dfb      	ldrb	r3, [r7, #23]
 801010c:	3301      	adds	r3, #1
 801010e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010110:	e013      	b.n	801013a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010112:	7dfb      	ldrb	r3, [r7, #23]
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	4413      	add	r3, r2
 8010118:	693a      	ldr	r2, [r7, #16]
 801011a:	7812      	ldrb	r2, [r2, #0]
 801011c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	3301      	adds	r3, #1
 8010122:	613b      	str	r3, [r7, #16]
    idx++;
 8010124:	7dfb      	ldrb	r3, [r7, #23]
 8010126:	3301      	adds	r3, #1
 8010128:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	68ba      	ldr	r2, [r7, #8]
 801012e:	4413      	add	r3, r2
 8010130:	2200      	movs	r2, #0
 8010132:	701a      	strb	r2, [r3, #0]
    idx++;
 8010134:	7dfb      	ldrb	r3, [r7, #23]
 8010136:	3301      	adds	r3, #1
 8010138:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1e7      	bne.n	8010112 <USBD_GetString+0x52>
 8010142:	e000      	b.n	8010146 <USBD_GetString+0x86>
    return;
 8010144:	bf00      	nop
  }
}
 8010146:	3718      	adds	r7, #24
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010154:	2300      	movs	r3, #0
 8010156:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801015c:	e005      	b.n	801016a <USBD_GetLen+0x1e>
  {
    len++;
 801015e:	7bfb      	ldrb	r3, [r7, #15]
 8010160:	3301      	adds	r3, #1
 8010162:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	3301      	adds	r3, #1
 8010168:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1f5      	bne.n	801015e <USBD_GetLen+0x12>
  }

  return len;
 8010172:	7bfb      	ldrb	r3, [r7, #15]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	6039      	str	r1, [r7, #0]
 801018a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	2212      	movs	r2, #18
 8010190:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8010192:	4b03      	ldr	r3, [pc, #12]	@ (80101a0 <USBD_Class_DeviceDescriptor+0x20>)
}
 8010194:	4618      	mov	r0, r3
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	200000f0 	.word	0x200000f0

080101a4 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	4603      	mov	r3, r0
 80101ac:	6039      	str	r1, [r7, #0]
 80101ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	2204      	movs	r2, #4
 80101b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80101b6:	4b03      	ldr	r3, [pc, #12]	@ (80101c4 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	20000104 	.word	0x20000104

080101c8 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	6039      	str	r1, [r7, #0]
 80101d2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d105      	bne.n	80101e6 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	4907      	ldr	r1, [pc, #28]	@ (80101fc <USBD_Class_ProductStrDescriptor+0x34>)
 80101de:	4808      	ldr	r0, [pc, #32]	@ (8010200 <USBD_Class_ProductStrDescriptor+0x38>)
 80101e0:	f7ff ff6e 	bl	80100c0 <USBD_GetString>
 80101e4:	e004      	b.n	80101f0 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	4904      	ldr	r1, [pc, #16]	@ (80101fc <USBD_Class_ProductStrDescriptor+0x34>)
 80101ea:	4805      	ldr	r0, [pc, #20]	@ (8010200 <USBD_Class_ProductStrDescriptor+0x38>)
 80101ec:	f7ff ff68 	bl	80100c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101f0:	4b02      	ldr	r3, [pc, #8]	@ (80101fc <USBD_Class_ProductStrDescriptor+0x34>)
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20011168 	.word	0x20011168
 8010200:	08011a74 	.word	0x08011a74

08010204 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	4603      	mov	r3, r0
 801020c:	6039      	str	r1, [r7, #0]
 801020e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010210:	683a      	ldr	r2, [r7, #0]
 8010212:	4904      	ldr	r1, [pc, #16]	@ (8010224 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8010214:	4804      	ldr	r0, [pc, #16]	@ (8010228 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8010216:	f7ff ff53 	bl	80100c0 <USBD_GetString>
  return USBD_StrDesc;
 801021a:	4b02      	ldr	r3, [pc, #8]	@ (8010224 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 801021c:	4618      	mov	r0, r3
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	20011168 	.word	0x20011168
 8010228:	08011a8c 	.word	0x08011a8c

0801022c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	6039      	str	r1, [r7, #0]
 8010236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	221a      	movs	r2, #26
 801023c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 801023e:	f000 f843 	bl	80102c8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8010242:	4b02      	ldr	r3, [pc, #8]	@ (801024c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8010244:	4618      	mov	r0, r3
 8010246:	3708      	adds	r7, #8
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	20000108 	.word	0x20000108

08010250 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	4603      	mov	r3, r0
 8010258:	6039      	str	r1, [r7, #0]
 801025a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801025c:	79fb      	ldrb	r3, [r7, #7]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d105      	bne.n	801026e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8010262:	683a      	ldr	r2, [r7, #0]
 8010264:	4907      	ldr	r1, [pc, #28]	@ (8010284 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010266:	4808      	ldr	r0, [pc, #32]	@ (8010288 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010268:	f7ff ff2a 	bl	80100c0 <USBD_GetString>
 801026c:	e004      	b.n	8010278 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 801026e:	683a      	ldr	r2, [r7, #0]
 8010270:	4904      	ldr	r1, [pc, #16]	@ (8010284 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010272:	4805      	ldr	r0, [pc, #20]	@ (8010288 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010274:	f7ff ff24 	bl	80100c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010278:	4b02      	ldr	r3, [pc, #8]	@ (8010284 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 801027a:	4618      	mov	r0, r3
 801027c:	3708      	adds	r7, #8
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20011168 	.word	0x20011168
 8010288:	08011aa0 	.word	0x08011aa0

0801028c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	6039      	str	r1, [r7, #0]
 8010296:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d105      	bne.n	80102aa <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801029e:	683a      	ldr	r2, [r7, #0]
 80102a0:	4907      	ldr	r1, [pc, #28]	@ (80102c0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80102a2:	4808      	ldr	r0, [pc, #32]	@ (80102c4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80102a4:	f7ff ff0c 	bl	80100c0 <USBD_GetString>
 80102a8:	e004      	b.n	80102b4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80102aa:	683a      	ldr	r2, [r7, #0]
 80102ac:	4904      	ldr	r1, [pc, #16]	@ (80102c0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80102ae:	4805      	ldr	r0, [pc, #20]	@ (80102c4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80102b0:	f7ff ff06 	bl	80100c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102b4:	4b02      	ldr	r3, [pc, #8]	@ (80102c0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	20011168 	.word	0x20011168
 80102c4:	08011aac 	.word	0x08011aac

080102c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80102ce:	4b0f      	ldr	r3, [pc, #60]	@ (801030c <Get_SerialNum+0x44>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80102d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010310 <Get_SerialNum+0x48>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80102da:	4b0e      	ldr	r3, [pc, #56]	@ (8010314 <Get_SerialNum+0x4c>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4413      	add	r3, r2
 80102e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d009      	beq.n	8010302 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80102ee:	2208      	movs	r2, #8
 80102f0:	4909      	ldr	r1, [pc, #36]	@ (8010318 <Get_SerialNum+0x50>)
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f000 f814 	bl	8010320 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80102f8:	2204      	movs	r2, #4
 80102fa:	4908      	ldr	r1, [pc, #32]	@ (801031c <Get_SerialNum+0x54>)
 80102fc:	68b8      	ldr	r0, [r7, #8]
 80102fe:	f000 f80f 	bl	8010320 <IntToUnicode>
  }
}
 8010302:	bf00      	nop
 8010304:	3710      	adds	r7, #16
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	08fff800 	.word	0x08fff800
 8010310:	08fff804 	.word	0x08fff804
 8010314:	08fff808 	.word	0x08fff808
 8010318:	2000010a 	.word	0x2000010a
 801031c:	2000011a 	.word	0x2000011a

08010320 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8010320:	b480      	push	{r7}
 8010322:	b087      	sub	sp, #28
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 801032e:	2300      	movs	r3, #0
 8010330:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8010332:	2300      	movs	r3, #0
 8010334:	75fb      	strb	r3, [r7, #23]
 8010336:	e025      	b.n	8010384 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	0f1b      	lsrs	r3, r3, #28
 801033c:	2b09      	cmp	r3, #9
 801033e:	d80a      	bhi.n	8010356 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	0f1b      	lsrs	r3, r3, #28
 8010344:	b2da      	uxtb	r2, r3
 8010346:	7dfb      	ldrb	r3, [r7, #23]
 8010348:	005b      	lsls	r3, r3, #1
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	440b      	add	r3, r1
 801034e:	3230      	adds	r2, #48	@ 0x30
 8010350:	b2d2      	uxtb	r2, r2
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	e009      	b.n	801036a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	0f1b      	lsrs	r3, r3, #28
 801035a:	b2da      	uxtb	r2, r3
 801035c:	7dfb      	ldrb	r3, [r7, #23]
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	68b9      	ldr	r1, [r7, #8]
 8010362:	440b      	add	r3, r1
 8010364:	3237      	adds	r2, #55	@ 0x37
 8010366:	b2d2      	uxtb	r2, r2
 8010368:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	011b      	lsls	r3, r3, #4
 801036e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8010370:	7dfb      	ldrb	r3, [r7, #23]
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	3301      	adds	r3, #1
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	4413      	add	r3, r2
 801037a:	2200      	movs	r2, #0
 801037c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 801037e:	7dfb      	ldrb	r3, [r7, #23]
 8010380:	3301      	adds	r3, #1
 8010382:	75fb      	strb	r3, [r7, #23]
 8010384:	7dfa      	ldrb	r2, [r7, #23]
 8010386:	79fb      	ldrb	r3, [r7, #7]
 8010388:	429a      	cmp	r2, r3
 801038a:	d3d5      	bcc.n	8010338 <IntToUnicode+0x18>
  }
}
 801038c:	bf00      	nop
 801038e:	bf00      	nop
 8010390:	371c      	adds	r7, #28
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801039a:	b580      	push	{r7, lr}
 801039c:	b084      	sub	sp, #16
 801039e:	af00      	add	r7, sp, #0
 80103a0:	60f8      	str	r0, [r7, #12]
 80103a2:	60b9      	str	r1, [r7, #8]
 80103a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2202      	movs	r2, #2
 80103aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	2100      	movs	r1, #0
 80103c0:	68f8      	ldr	r0, [r7, #12]
 80103c2:	f7fe fca0 	bl	800ed06 <USBD_LL_Transmit>

  return USBD_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	2100      	movs	r1, #0
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f7fe fc8f 	bl	800ed06 <USBD_LL_Transmit>

  return USBD_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b084      	sub	sp, #16
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	60f8      	str	r0, [r7, #12]
 80103fa:	60b9      	str	r1, [r7, #8]
 80103fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2203      	movs	r2, #3
 8010402:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68ba      	ldr	r2, [r7, #8]
 801041a:	2100      	movs	r1, #0
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f7fe fc8d 	bl	800ed3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	2100      	movs	r1, #0
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	f7fe fc7c 	bl	800ed3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010444:	2300      	movs	r3, #0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b082      	sub	sp, #8
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2204      	movs	r2, #4
 801045a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801045e:	2300      	movs	r3, #0
 8010460:	2200      	movs	r2, #0
 8010462:	2100      	movs	r1, #0
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7fe fc4e 	bl	800ed06 <USBD_LL_Transmit>

  return USBD_OK;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3708      	adds	r7, #8
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2205      	movs	r2, #5
 8010480:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010484:	2300      	movs	r3, #0
 8010486:	2200      	movs	r2, #0
 8010488:	2100      	movs	r1, #0
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7fe fc56 	bl	800ed3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
	...

0801049c <std>:
 801049c:	2300      	movs	r3, #0
 801049e:	b510      	push	{r4, lr}
 80104a0:	4604      	mov	r4, r0
 80104a2:	6083      	str	r3, [r0, #8]
 80104a4:	8181      	strh	r1, [r0, #12]
 80104a6:	4619      	mov	r1, r3
 80104a8:	6643      	str	r3, [r0, #100]	@ 0x64
 80104aa:	81c2      	strh	r2, [r0, #14]
 80104ac:	2208      	movs	r2, #8
 80104ae:	6183      	str	r3, [r0, #24]
 80104b0:	e9c0 3300 	strd	r3, r3, [r0]
 80104b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104b8:	305c      	adds	r0, #92	@ 0x5c
 80104ba:	f000 f93f 	bl	801073c <memset>
 80104be:	4b0d      	ldr	r3, [pc, #52]	@ (80104f4 <std+0x58>)
 80104c0:	6224      	str	r4, [r4, #32]
 80104c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80104c4:	4b0c      	ldr	r3, [pc, #48]	@ (80104f8 <std+0x5c>)
 80104c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104c8:	4b0c      	ldr	r3, [pc, #48]	@ (80104fc <std+0x60>)
 80104ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010500 <std+0x64>)
 80104ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80104d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010504 <std+0x68>)
 80104d2:	429c      	cmp	r4, r3
 80104d4:	d006      	beq.n	80104e4 <std+0x48>
 80104d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104da:	4294      	cmp	r4, r2
 80104dc:	d002      	beq.n	80104e4 <std+0x48>
 80104de:	33d0      	adds	r3, #208	@ 0xd0
 80104e0:	429c      	cmp	r4, r3
 80104e2:	d105      	bne.n	80104f0 <std+0x54>
 80104e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ec:	f000 b99e 	b.w	801082c <__retarget_lock_init_recursive>
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	bf00      	nop
 80104f4:	08010645 	.word	0x08010645
 80104f8:	08010667 	.word	0x08010667
 80104fc:	0801069f 	.word	0x0801069f
 8010500:	080106c3 	.word	0x080106c3
 8010504:	20011268 	.word	0x20011268

08010508 <stdio_exit_handler>:
 8010508:	4a02      	ldr	r2, [pc, #8]	@ (8010514 <stdio_exit_handler+0xc>)
 801050a:	4903      	ldr	r1, [pc, #12]	@ (8010518 <stdio_exit_handler+0x10>)
 801050c:	4803      	ldr	r0, [pc, #12]	@ (801051c <stdio_exit_handler+0x14>)
 801050e:	f000 b869 	b.w	80105e4 <_fwalk_sglue>
 8010512:	bf00      	nop
 8010514:	20000124 	.word	0x20000124
 8010518:	0801139d 	.word	0x0801139d
 801051c:	20000134 	.word	0x20000134

08010520 <cleanup_stdio>:
 8010520:	6841      	ldr	r1, [r0, #4]
 8010522:	4b0c      	ldr	r3, [pc, #48]	@ (8010554 <cleanup_stdio+0x34>)
 8010524:	4299      	cmp	r1, r3
 8010526:	b510      	push	{r4, lr}
 8010528:	4604      	mov	r4, r0
 801052a:	d001      	beq.n	8010530 <cleanup_stdio+0x10>
 801052c:	f000 ff36 	bl	801139c <_fflush_r>
 8010530:	68a1      	ldr	r1, [r4, #8]
 8010532:	4b09      	ldr	r3, [pc, #36]	@ (8010558 <cleanup_stdio+0x38>)
 8010534:	4299      	cmp	r1, r3
 8010536:	d002      	beq.n	801053e <cleanup_stdio+0x1e>
 8010538:	4620      	mov	r0, r4
 801053a:	f000 ff2f 	bl	801139c <_fflush_r>
 801053e:	68e1      	ldr	r1, [r4, #12]
 8010540:	4b06      	ldr	r3, [pc, #24]	@ (801055c <cleanup_stdio+0x3c>)
 8010542:	4299      	cmp	r1, r3
 8010544:	d004      	beq.n	8010550 <cleanup_stdio+0x30>
 8010546:	4620      	mov	r0, r4
 8010548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801054c:	f000 bf26 	b.w	801139c <_fflush_r>
 8010550:	bd10      	pop	{r4, pc}
 8010552:	bf00      	nop
 8010554:	20011268 	.word	0x20011268
 8010558:	200112d0 	.word	0x200112d0
 801055c:	20011338 	.word	0x20011338

08010560 <global_stdio_init.part.0>:
 8010560:	b510      	push	{r4, lr}
 8010562:	4b0b      	ldr	r3, [pc, #44]	@ (8010590 <global_stdio_init.part.0+0x30>)
 8010564:	2104      	movs	r1, #4
 8010566:	4c0b      	ldr	r4, [pc, #44]	@ (8010594 <global_stdio_init.part.0+0x34>)
 8010568:	4a0b      	ldr	r2, [pc, #44]	@ (8010598 <global_stdio_init.part.0+0x38>)
 801056a:	4620      	mov	r0, r4
 801056c:	601a      	str	r2, [r3, #0]
 801056e:	2200      	movs	r2, #0
 8010570:	f7ff ff94 	bl	801049c <std>
 8010574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010578:	2201      	movs	r2, #1
 801057a:	2109      	movs	r1, #9
 801057c:	f7ff ff8e 	bl	801049c <std>
 8010580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010584:	2202      	movs	r2, #2
 8010586:	2112      	movs	r1, #18
 8010588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801058c:	f7ff bf86 	b.w	801049c <std>
 8010590:	200113a0 	.word	0x200113a0
 8010594:	20011268 	.word	0x20011268
 8010598:	08010509 	.word	0x08010509

0801059c <__sfp_lock_acquire>:
 801059c:	4801      	ldr	r0, [pc, #4]	@ (80105a4 <__sfp_lock_acquire+0x8>)
 801059e:	f000 b946 	b.w	801082e <__retarget_lock_acquire_recursive>
 80105a2:	bf00      	nop
 80105a4:	200113a9 	.word	0x200113a9

080105a8 <__sfp_lock_release>:
 80105a8:	4801      	ldr	r0, [pc, #4]	@ (80105b0 <__sfp_lock_release+0x8>)
 80105aa:	f000 b941 	b.w	8010830 <__retarget_lock_release_recursive>
 80105ae:	bf00      	nop
 80105b0:	200113a9 	.word	0x200113a9

080105b4 <__sinit>:
 80105b4:	b510      	push	{r4, lr}
 80105b6:	4604      	mov	r4, r0
 80105b8:	f7ff fff0 	bl	801059c <__sfp_lock_acquire>
 80105bc:	6a23      	ldr	r3, [r4, #32]
 80105be:	b11b      	cbz	r3, 80105c8 <__sinit+0x14>
 80105c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105c4:	f7ff bff0 	b.w	80105a8 <__sfp_lock_release>
 80105c8:	4b04      	ldr	r3, [pc, #16]	@ (80105dc <__sinit+0x28>)
 80105ca:	6223      	str	r3, [r4, #32]
 80105cc:	4b04      	ldr	r3, [pc, #16]	@ (80105e0 <__sinit+0x2c>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d1f5      	bne.n	80105c0 <__sinit+0xc>
 80105d4:	f7ff ffc4 	bl	8010560 <global_stdio_init.part.0>
 80105d8:	e7f2      	b.n	80105c0 <__sinit+0xc>
 80105da:	bf00      	nop
 80105dc:	08010521 	.word	0x08010521
 80105e0:	200113a0 	.word	0x200113a0

080105e4 <_fwalk_sglue>:
 80105e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e8:	4607      	mov	r7, r0
 80105ea:	4688      	mov	r8, r1
 80105ec:	4614      	mov	r4, r2
 80105ee:	2600      	movs	r6, #0
 80105f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105f4:	f1b9 0901 	subs.w	r9, r9, #1
 80105f8:	d505      	bpl.n	8010606 <_fwalk_sglue+0x22>
 80105fa:	6824      	ldr	r4, [r4, #0]
 80105fc:	2c00      	cmp	r4, #0
 80105fe:	d1f7      	bne.n	80105f0 <_fwalk_sglue+0xc>
 8010600:	4630      	mov	r0, r6
 8010602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010606:	89ab      	ldrh	r3, [r5, #12]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d907      	bls.n	801061c <_fwalk_sglue+0x38>
 801060c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010610:	3301      	adds	r3, #1
 8010612:	d003      	beq.n	801061c <_fwalk_sglue+0x38>
 8010614:	4629      	mov	r1, r5
 8010616:	4638      	mov	r0, r7
 8010618:	47c0      	blx	r8
 801061a:	4306      	orrs	r6, r0
 801061c:	3568      	adds	r5, #104	@ 0x68
 801061e:	e7e9      	b.n	80105f4 <_fwalk_sglue+0x10>

08010620 <iprintf>:
 8010620:	b40f      	push	{r0, r1, r2, r3}
 8010622:	b507      	push	{r0, r1, r2, lr}
 8010624:	4906      	ldr	r1, [pc, #24]	@ (8010640 <iprintf+0x20>)
 8010626:	ab04      	add	r3, sp, #16
 8010628:	6808      	ldr	r0, [r1, #0]
 801062a:	f853 2b04 	ldr.w	r2, [r3], #4
 801062e:	6881      	ldr	r1, [r0, #8]
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	f000 fb85 	bl	8010d40 <_vfiprintf_r>
 8010636:	b003      	add	sp, #12
 8010638:	f85d eb04 	ldr.w	lr, [sp], #4
 801063c:	b004      	add	sp, #16
 801063e:	4770      	bx	lr
 8010640:	20000130 	.word	0x20000130

08010644 <__sread>:
 8010644:	b510      	push	{r4, lr}
 8010646:	460c      	mov	r4, r1
 8010648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801064c:	f000 f8a0 	bl	8010790 <_read_r>
 8010650:	2800      	cmp	r0, #0
 8010652:	bfab      	itete	ge
 8010654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010656:	89a3      	ldrhlt	r3, [r4, #12]
 8010658:	181b      	addge	r3, r3, r0
 801065a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801065e:	bfac      	ite	ge
 8010660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010662:	81a3      	strhlt	r3, [r4, #12]
 8010664:	bd10      	pop	{r4, pc}

08010666 <__swrite>:
 8010666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801066a:	461f      	mov	r7, r3
 801066c:	898b      	ldrh	r3, [r1, #12]
 801066e:	4605      	mov	r5, r0
 8010670:	460c      	mov	r4, r1
 8010672:	05db      	lsls	r3, r3, #23
 8010674:	4616      	mov	r6, r2
 8010676:	d505      	bpl.n	8010684 <__swrite+0x1e>
 8010678:	2302      	movs	r3, #2
 801067a:	2200      	movs	r2, #0
 801067c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010680:	f000 f874 	bl	801076c <_lseek_r>
 8010684:	89a3      	ldrh	r3, [r4, #12]
 8010686:	4632      	mov	r2, r6
 8010688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801068c:	4628      	mov	r0, r5
 801068e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010692:	81a3      	strh	r3, [r4, #12]
 8010694:	463b      	mov	r3, r7
 8010696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801069a:	f000 b88b 	b.w	80107b4 <_write_r>

0801069e <__sseek>:
 801069e:	b510      	push	{r4, lr}
 80106a0:	460c      	mov	r4, r1
 80106a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a6:	f000 f861 	bl	801076c <_lseek_r>
 80106aa:	1c43      	adds	r3, r0, #1
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	bf15      	itete	ne
 80106b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80106b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80106b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80106ba:	81a3      	strheq	r3, [r4, #12]
 80106bc:	bf18      	it	ne
 80106be:	81a3      	strhne	r3, [r4, #12]
 80106c0:	bd10      	pop	{r4, pc}

080106c2 <__sclose>:
 80106c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c6:	f000 b841 	b.w	801074c <_close_r>

080106ca <_vsniprintf_r>:
 80106ca:	b530      	push	{r4, r5, lr}
 80106cc:	4614      	mov	r4, r2
 80106ce:	b09b      	sub	sp, #108	@ 0x6c
 80106d0:	4605      	mov	r5, r0
 80106d2:	461a      	mov	r2, r3
 80106d4:	2c00      	cmp	r4, #0
 80106d6:	da05      	bge.n	80106e4 <_vsniprintf_r+0x1a>
 80106d8:	238b      	movs	r3, #139	@ 0x8b
 80106da:	6003      	str	r3, [r0, #0]
 80106dc:	f04f 30ff 	mov.w	r0, #4294967295
 80106e0:	b01b      	add	sp, #108	@ 0x6c
 80106e2:	bd30      	pop	{r4, r5, pc}
 80106e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80106e8:	9100      	str	r1, [sp, #0]
 80106ea:	9104      	str	r1, [sp, #16]
 80106ec:	4669      	mov	r1, sp
 80106ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106f2:	bf14      	ite	ne
 80106f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80106f8:	4623      	moveq	r3, r4
 80106fa:	9302      	str	r3, [sp, #8]
 80106fc:	9305      	str	r3, [sp, #20]
 80106fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010702:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010706:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010708:	f000 f9f4 	bl	8010af4 <_svfiprintf_r>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	bfbc      	itt	lt
 8010710:	238b      	movlt	r3, #139	@ 0x8b
 8010712:	602b      	strlt	r3, [r5, #0]
 8010714:	2c00      	cmp	r4, #0
 8010716:	d0e3      	beq.n	80106e0 <_vsniprintf_r+0x16>
 8010718:	9b00      	ldr	r3, [sp, #0]
 801071a:	2200      	movs	r2, #0
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	e7df      	b.n	80106e0 <_vsniprintf_r+0x16>

08010720 <vsniprintf>:
 8010720:	b507      	push	{r0, r1, r2, lr}
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	4613      	mov	r3, r2
 8010726:	460a      	mov	r2, r1
 8010728:	4601      	mov	r1, r0
 801072a:	4803      	ldr	r0, [pc, #12]	@ (8010738 <vsniprintf+0x18>)
 801072c:	6800      	ldr	r0, [r0, #0]
 801072e:	f7ff ffcc 	bl	80106ca <_vsniprintf_r>
 8010732:	b003      	add	sp, #12
 8010734:	f85d fb04 	ldr.w	pc, [sp], #4
 8010738:	20000130 	.word	0x20000130

0801073c <memset>:
 801073c:	4402      	add	r2, r0
 801073e:	4603      	mov	r3, r0
 8010740:	4293      	cmp	r3, r2
 8010742:	d100      	bne.n	8010746 <memset+0xa>
 8010744:	4770      	bx	lr
 8010746:	f803 1b01 	strb.w	r1, [r3], #1
 801074a:	e7f9      	b.n	8010740 <memset+0x4>

0801074c <_close_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	2300      	movs	r3, #0
 8010750:	4d05      	ldr	r5, [pc, #20]	@ (8010768 <_close_r+0x1c>)
 8010752:	4604      	mov	r4, r0
 8010754:	4608      	mov	r0, r1
 8010756:	602b      	str	r3, [r5, #0]
 8010758:	f7f1 fb41 	bl	8001dde <_close>
 801075c:	1c43      	adds	r3, r0, #1
 801075e:	d102      	bne.n	8010766 <_close_r+0x1a>
 8010760:	682b      	ldr	r3, [r5, #0]
 8010762:	b103      	cbz	r3, 8010766 <_close_r+0x1a>
 8010764:	6023      	str	r3, [r4, #0]
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	200113a4 	.word	0x200113a4

0801076c <_lseek_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4604      	mov	r4, r0
 8010770:	4d06      	ldr	r5, [pc, #24]	@ (801078c <_lseek_r+0x20>)
 8010772:	4608      	mov	r0, r1
 8010774:	4611      	mov	r1, r2
 8010776:	2200      	movs	r2, #0
 8010778:	602a      	str	r2, [r5, #0]
 801077a:	461a      	mov	r2, r3
 801077c:	f7f1 fb56 	bl	8001e2c <_lseek>
 8010780:	1c43      	adds	r3, r0, #1
 8010782:	d102      	bne.n	801078a <_lseek_r+0x1e>
 8010784:	682b      	ldr	r3, [r5, #0]
 8010786:	b103      	cbz	r3, 801078a <_lseek_r+0x1e>
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	200113a4 	.word	0x200113a4

08010790 <_read_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	4604      	mov	r4, r0
 8010794:	4d06      	ldr	r5, [pc, #24]	@ (80107b0 <_read_r+0x20>)
 8010796:	4608      	mov	r0, r1
 8010798:	4611      	mov	r1, r2
 801079a:	2200      	movs	r2, #0
 801079c:	602a      	str	r2, [r5, #0]
 801079e:	461a      	mov	r2, r3
 80107a0:	f7f1 fae4 	bl	8001d6c <_read>
 80107a4:	1c43      	adds	r3, r0, #1
 80107a6:	d102      	bne.n	80107ae <_read_r+0x1e>
 80107a8:	682b      	ldr	r3, [r5, #0]
 80107aa:	b103      	cbz	r3, 80107ae <_read_r+0x1e>
 80107ac:	6023      	str	r3, [r4, #0]
 80107ae:	bd38      	pop	{r3, r4, r5, pc}
 80107b0:	200113a4 	.word	0x200113a4

080107b4 <_write_r>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	4d06      	ldr	r5, [pc, #24]	@ (80107d4 <_write_r+0x20>)
 80107ba:	4608      	mov	r0, r1
 80107bc:	4611      	mov	r1, r2
 80107be:	2200      	movs	r2, #0
 80107c0:	602a      	str	r2, [r5, #0]
 80107c2:	461a      	mov	r2, r3
 80107c4:	f7f1 faef 	bl	8001da6 <_write>
 80107c8:	1c43      	adds	r3, r0, #1
 80107ca:	d102      	bne.n	80107d2 <_write_r+0x1e>
 80107cc:	682b      	ldr	r3, [r5, #0]
 80107ce:	b103      	cbz	r3, 80107d2 <_write_r+0x1e>
 80107d0:	6023      	str	r3, [r4, #0]
 80107d2:	bd38      	pop	{r3, r4, r5, pc}
 80107d4:	200113a4 	.word	0x200113a4

080107d8 <__errno>:
 80107d8:	4b01      	ldr	r3, [pc, #4]	@ (80107e0 <__errno+0x8>)
 80107da:	6818      	ldr	r0, [r3, #0]
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	20000130 	.word	0x20000130

080107e4 <__libc_init_array>:
 80107e4:	b570      	push	{r4, r5, r6, lr}
 80107e6:	4d0d      	ldr	r5, [pc, #52]	@ (801081c <__libc_init_array+0x38>)
 80107e8:	2600      	movs	r6, #0
 80107ea:	4c0d      	ldr	r4, [pc, #52]	@ (8010820 <__libc_init_array+0x3c>)
 80107ec:	1b64      	subs	r4, r4, r5
 80107ee:	10a4      	asrs	r4, r4, #2
 80107f0:	42a6      	cmp	r6, r4
 80107f2:	d109      	bne.n	8010808 <__libc_init_array+0x24>
 80107f4:	4d0b      	ldr	r5, [pc, #44]	@ (8010824 <__libc_init_array+0x40>)
 80107f6:	2600      	movs	r6, #0
 80107f8:	4c0b      	ldr	r4, [pc, #44]	@ (8010828 <__libc_init_array+0x44>)
 80107fa:	f000 ff7d 	bl	80116f8 <_init>
 80107fe:	1b64      	subs	r4, r4, r5
 8010800:	10a4      	asrs	r4, r4, #2
 8010802:	42a6      	cmp	r6, r4
 8010804:	d105      	bne.n	8010812 <__libc_init_array+0x2e>
 8010806:	bd70      	pop	{r4, r5, r6, pc}
 8010808:	f855 3b04 	ldr.w	r3, [r5], #4
 801080c:	3601      	adds	r6, #1
 801080e:	4798      	blx	r3
 8010810:	e7ee      	b.n	80107f0 <__libc_init_array+0xc>
 8010812:	f855 3b04 	ldr.w	r3, [r5], #4
 8010816:	3601      	adds	r6, #1
 8010818:	4798      	blx	r3
 801081a:	e7f2      	b.n	8010802 <__libc_init_array+0x1e>
 801081c:	08011b44 	.word	0x08011b44
 8010820:	08011b44 	.word	0x08011b44
 8010824:	08011b44 	.word	0x08011b44
 8010828:	08011b48 	.word	0x08011b48

0801082c <__retarget_lock_init_recursive>:
 801082c:	4770      	bx	lr

0801082e <__retarget_lock_acquire_recursive>:
 801082e:	4770      	bx	lr

08010830 <__retarget_lock_release_recursive>:
 8010830:	4770      	bx	lr

08010832 <memcpy>:
 8010832:	440a      	add	r2, r1
 8010834:	1e43      	subs	r3, r0, #1
 8010836:	4291      	cmp	r1, r2
 8010838:	d100      	bne.n	801083c <memcpy+0xa>
 801083a:	4770      	bx	lr
 801083c:	b510      	push	{r4, lr}
 801083e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010842:	4291      	cmp	r1, r2
 8010844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010848:	d1f9      	bne.n	801083e <memcpy+0xc>
 801084a:	bd10      	pop	{r4, pc}

0801084c <_free_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4605      	mov	r5, r0
 8010850:	2900      	cmp	r1, #0
 8010852:	d041      	beq.n	80108d8 <_free_r+0x8c>
 8010854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010858:	1f0c      	subs	r4, r1, #4
 801085a:	2b00      	cmp	r3, #0
 801085c:	bfb8      	it	lt
 801085e:	18e4      	addlt	r4, r4, r3
 8010860:	f000 f8e0 	bl	8010a24 <__malloc_lock>
 8010864:	4a1d      	ldr	r2, [pc, #116]	@ (80108dc <_free_r+0x90>)
 8010866:	6813      	ldr	r3, [r2, #0]
 8010868:	b933      	cbnz	r3, 8010878 <_free_r+0x2c>
 801086a:	6063      	str	r3, [r4, #4]
 801086c:	6014      	str	r4, [r2, #0]
 801086e:	4628      	mov	r0, r5
 8010870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010874:	f000 b8dc 	b.w	8010a30 <__malloc_unlock>
 8010878:	42a3      	cmp	r3, r4
 801087a:	d908      	bls.n	801088e <_free_r+0x42>
 801087c:	6820      	ldr	r0, [r4, #0]
 801087e:	1821      	adds	r1, r4, r0
 8010880:	428b      	cmp	r3, r1
 8010882:	bf01      	itttt	eq
 8010884:	6819      	ldreq	r1, [r3, #0]
 8010886:	685b      	ldreq	r3, [r3, #4]
 8010888:	1809      	addeq	r1, r1, r0
 801088a:	6021      	streq	r1, [r4, #0]
 801088c:	e7ed      	b.n	801086a <_free_r+0x1e>
 801088e:	461a      	mov	r2, r3
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	b10b      	cbz	r3, 8010898 <_free_r+0x4c>
 8010894:	42a3      	cmp	r3, r4
 8010896:	d9fa      	bls.n	801088e <_free_r+0x42>
 8010898:	6811      	ldr	r1, [r2, #0]
 801089a:	1850      	adds	r0, r2, r1
 801089c:	42a0      	cmp	r0, r4
 801089e:	d10b      	bne.n	80108b8 <_free_r+0x6c>
 80108a0:	6820      	ldr	r0, [r4, #0]
 80108a2:	4401      	add	r1, r0
 80108a4:	1850      	adds	r0, r2, r1
 80108a6:	6011      	str	r1, [r2, #0]
 80108a8:	4283      	cmp	r3, r0
 80108aa:	d1e0      	bne.n	801086e <_free_r+0x22>
 80108ac:	6818      	ldr	r0, [r3, #0]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	4408      	add	r0, r1
 80108b2:	6053      	str	r3, [r2, #4]
 80108b4:	6010      	str	r0, [r2, #0]
 80108b6:	e7da      	b.n	801086e <_free_r+0x22>
 80108b8:	d902      	bls.n	80108c0 <_free_r+0x74>
 80108ba:	230c      	movs	r3, #12
 80108bc:	602b      	str	r3, [r5, #0]
 80108be:	e7d6      	b.n	801086e <_free_r+0x22>
 80108c0:	6820      	ldr	r0, [r4, #0]
 80108c2:	1821      	adds	r1, r4, r0
 80108c4:	428b      	cmp	r3, r1
 80108c6:	bf02      	ittt	eq
 80108c8:	6819      	ldreq	r1, [r3, #0]
 80108ca:	685b      	ldreq	r3, [r3, #4]
 80108cc:	1809      	addeq	r1, r1, r0
 80108ce:	6063      	str	r3, [r4, #4]
 80108d0:	bf08      	it	eq
 80108d2:	6021      	streq	r1, [r4, #0]
 80108d4:	6054      	str	r4, [r2, #4]
 80108d6:	e7ca      	b.n	801086e <_free_r+0x22>
 80108d8:	bd38      	pop	{r3, r4, r5, pc}
 80108da:	bf00      	nop
 80108dc:	200113b0 	.word	0x200113b0

080108e0 <sbrk_aligned>:
 80108e0:	b570      	push	{r4, r5, r6, lr}
 80108e2:	4e0f      	ldr	r6, [pc, #60]	@ (8010920 <sbrk_aligned+0x40>)
 80108e4:	460c      	mov	r4, r1
 80108e6:	4605      	mov	r5, r0
 80108e8:	6831      	ldr	r1, [r6, #0]
 80108ea:	b911      	cbnz	r1, 80108f2 <sbrk_aligned+0x12>
 80108ec:	f000 fe2c 	bl	8011548 <_sbrk_r>
 80108f0:	6030      	str	r0, [r6, #0]
 80108f2:	4621      	mov	r1, r4
 80108f4:	4628      	mov	r0, r5
 80108f6:	f000 fe27 	bl	8011548 <_sbrk_r>
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	d103      	bne.n	8010906 <sbrk_aligned+0x26>
 80108fe:	f04f 34ff 	mov.w	r4, #4294967295
 8010902:	4620      	mov	r0, r4
 8010904:	bd70      	pop	{r4, r5, r6, pc}
 8010906:	1cc4      	adds	r4, r0, #3
 8010908:	f024 0403 	bic.w	r4, r4, #3
 801090c:	42a0      	cmp	r0, r4
 801090e:	d0f8      	beq.n	8010902 <sbrk_aligned+0x22>
 8010910:	1a21      	subs	r1, r4, r0
 8010912:	4628      	mov	r0, r5
 8010914:	f000 fe18 	bl	8011548 <_sbrk_r>
 8010918:	3001      	adds	r0, #1
 801091a:	d1f2      	bne.n	8010902 <sbrk_aligned+0x22>
 801091c:	e7ef      	b.n	80108fe <sbrk_aligned+0x1e>
 801091e:	bf00      	nop
 8010920:	200113ac 	.word	0x200113ac

08010924 <_malloc_r>:
 8010924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010928:	1ccd      	adds	r5, r1, #3
 801092a:	4606      	mov	r6, r0
 801092c:	f025 0503 	bic.w	r5, r5, #3
 8010930:	3508      	adds	r5, #8
 8010932:	2d0c      	cmp	r5, #12
 8010934:	bf38      	it	cc
 8010936:	250c      	movcc	r5, #12
 8010938:	2d00      	cmp	r5, #0
 801093a:	db01      	blt.n	8010940 <_malloc_r+0x1c>
 801093c:	42a9      	cmp	r1, r5
 801093e:	d904      	bls.n	801094a <_malloc_r+0x26>
 8010940:	230c      	movs	r3, #12
 8010942:	6033      	str	r3, [r6, #0]
 8010944:	2000      	movs	r0, #0
 8010946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801094a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a20 <_malloc_r+0xfc>
 801094e:	f000 f869 	bl	8010a24 <__malloc_lock>
 8010952:	f8d8 3000 	ldr.w	r3, [r8]
 8010956:	461c      	mov	r4, r3
 8010958:	bb44      	cbnz	r4, 80109ac <_malloc_r+0x88>
 801095a:	4629      	mov	r1, r5
 801095c:	4630      	mov	r0, r6
 801095e:	f7ff ffbf 	bl	80108e0 <sbrk_aligned>
 8010962:	1c43      	adds	r3, r0, #1
 8010964:	4604      	mov	r4, r0
 8010966:	d158      	bne.n	8010a1a <_malloc_r+0xf6>
 8010968:	f8d8 4000 	ldr.w	r4, [r8]
 801096c:	4627      	mov	r7, r4
 801096e:	2f00      	cmp	r7, #0
 8010970:	d143      	bne.n	80109fa <_malloc_r+0xd6>
 8010972:	2c00      	cmp	r4, #0
 8010974:	d04b      	beq.n	8010a0e <_malloc_r+0xea>
 8010976:	6823      	ldr	r3, [r4, #0]
 8010978:	4639      	mov	r1, r7
 801097a:	4630      	mov	r0, r6
 801097c:	eb04 0903 	add.w	r9, r4, r3
 8010980:	f000 fde2 	bl	8011548 <_sbrk_r>
 8010984:	4581      	cmp	r9, r0
 8010986:	d142      	bne.n	8010a0e <_malloc_r+0xea>
 8010988:	6821      	ldr	r1, [r4, #0]
 801098a:	4630      	mov	r0, r6
 801098c:	1a6d      	subs	r5, r5, r1
 801098e:	4629      	mov	r1, r5
 8010990:	f7ff ffa6 	bl	80108e0 <sbrk_aligned>
 8010994:	3001      	adds	r0, #1
 8010996:	d03a      	beq.n	8010a0e <_malloc_r+0xea>
 8010998:	6823      	ldr	r3, [r4, #0]
 801099a:	442b      	add	r3, r5
 801099c:	6023      	str	r3, [r4, #0]
 801099e:	f8d8 3000 	ldr.w	r3, [r8]
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	bb62      	cbnz	r2, 8010a00 <_malloc_r+0xdc>
 80109a6:	f8c8 7000 	str.w	r7, [r8]
 80109aa:	e00f      	b.n	80109cc <_malloc_r+0xa8>
 80109ac:	6822      	ldr	r2, [r4, #0]
 80109ae:	1b52      	subs	r2, r2, r5
 80109b0:	d420      	bmi.n	80109f4 <_malloc_r+0xd0>
 80109b2:	2a0b      	cmp	r2, #11
 80109b4:	d917      	bls.n	80109e6 <_malloc_r+0xc2>
 80109b6:	1961      	adds	r1, r4, r5
 80109b8:	42a3      	cmp	r3, r4
 80109ba:	6025      	str	r5, [r4, #0]
 80109bc:	bf18      	it	ne
 80109be:	6059      	strne	r1, [r3, #4]
 80109c0:	6863      	ldr	r3, [r4, #4]
 80109c2:	bf08      	it	eq
 80109c4:	f8c8 1000 	streq.w	r1, [r8]
 80109c8:	5162      	str	r2, [r4, r5]
 80109ca:	604b      	str	r3, [r1, #4]
 80109cc:	4630      	mov	r0, r6
 80109ce:	f000 f82f 	bl	8010a30 <__malloc_unlock>
 80109d2:	f104 000b 	add.w	r0, r4, #11
 80109d6:	1d23      	adds	r3, r4, #4
 80109d8:	f020 0007 	bic.w	r0, r0, #7
 80109dc:	1ac2      	subs	r2, r0, r3
 80109de:	bf1c      	itt	ne
 80109e0:	1a1b      	subne	r3, r3, r0
 80109e2:	50a3      	strne	r3, [r4, r2]
 80109e4:	e7af      	b.n	8010946 <_malloc_r+0x22>
 80109e6:	6862      	ldr	r2, [r4, #4]
 80109e8:	42a3      	cmp	r3, r4
 80109ea:	bf0c      	ite	eq
 80109ec:	f8c8 2000 	streq.w	r2, [r8]
 80109f0:	605a      	strne	r2, [r3, #4]
 80109f2:	e7eb      	b.n	80109cc <_malloc_r+0xa8>
 80109f4:	4623      	mov	r3, r4
 80109f6:	6864      	ldr	r4, [r4, #4]
 80109f8:	e7ae      	b.n	8010958 <_malloc_r+0x34>
 80109fa:	463c      	mov	r4, r7
 80109fc:	687f      	ldr	r7, [r7, #4]
 80109fe:	e7b6      	b.n	801096e <_malloc_r+0x4a>
 8010a00:	461a      	mov	r2, r3
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	42a3      	cmp	r3, r4
 8010a06:	d1fb      	bne.n	8010a00 <_malloc_r+0xdc>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	6053      	str	r3, [r2, #4]
 8010a0c:	e7de      	b.n	80109cc <_malloc_r+0xa8>
 8010a0e:	230c      	movs	r3, #12
 8010a10:	4630      	mov	r0, r6
 8010a12:	6033      	str	r3, [r6, #0]
 8010a14:	f000 f80c 	bl	8010a30 <__malloc_unlock>
 8010a18:	e794      	b.n	8010944 <_malloc_r+0x20>
 8010a1a:	6005      	str	r5, [r0, #0]
 8010a1c:	e7d6      	b.n	80109cc <_malloc_r+0xa8>
 8010a1e:	bf00      	nop
 8010a20:	200113b0 	.word	0x200113b0

08010a24 <__malloc_lock>:
 8010a24:	4801      	ldr	r0, [pc, #4]	@ (8010a2c <__malloc_lock+0x8>)
 8010a26:	f7ff bf02 	b.w	801082e <__retarget_lock_acquire_recursive>
 8010a2a:	bf00      	nop
 8010a2c:	200113a8 	.word	0x200113a8

08010a30 <__malloc_unlock>:
 8010a30:	4801      	ldr	r0, [pc, #4]	@ (8010a38 <__malloc_unlock+0x8>)
 8010a32:	f7ff befd 	b.w	8010830 <__retarget_lock_release_recursive>
 8010a36:	bf00      	nop
 8010a38:	200113a8 	.word	0x200113a8

08010a3c <__ssputs_r>:
 8010a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a40:	461f      	mov	r7, r3
 8010a42:	688e      	ldr	r6, [r1, #8]
 8010a44:	4682      	mov	sl, r0
 8010a46:	460c      	mov	r4, r1
 8010a48:	42be      	cmp	r6, r7
 8010a4a:	4690      	mov	r8, r2
 8010a4c:	680b      	ldr	r3, [r1, #0]
 8010a4e:	d82d      	bhi.n	8010aac <__ssputs_r+0x70>
 8010a50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a58:	d026      	beq.n	8010aa8 <__ssputs_r+0x6c>
 8010a5a:	6965      	ldr	r5, [r4, #20]
 8010a5c:	6909      	ldr	r1, [r1, #16]
 8010a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a62:	eba3 0901 	sub.w	r9, r3, r1
 8010a66:	1c7b      	adds	r3, r7, #1
 8010a68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a6c:	444b      	add	r3, r9
 8010a6e:	106d      	asrs	r5, r5, #1
 8010a70:	429d      	cmp	r5, r3
 8010a72:	bf38      	it	cc
 8010a74:	461d      	movcc	r5, r3
 8010a76:	0553      	lsls	r3, r2, #21
 8010a78:	d527      	bpl.n	8010aca <__ssputs_r+0x8e>
 8010a7a:	4629      	mov	r1, r5
 8010a7c:	f7ff ff52 	bl	8010924 <_malloc_r>
 8010a80:	4606      	mov	r6, r0
 8010a82:	b360      	cbz	r0, 8010ade <__ssputs_r+0xa2>
 8010a84:	464a      	mov	r2, r9
 8010a86:	6921      	ldr	r1, [r4, #16]
 8010a88:	f7ff fed3 	bl	8010832 <memcpy>
 8010a8c:	89a3      	ldrh	r3, [r4, #12]
 8010a8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a96:	81a3      	strh	r3, [r4, #12]
 8010a98:	6126      	str	r6, [r4, #16]
 8010a9a:	444e      	add	r6, r9
 8010a9c:	6165      	str	r5, [r4, #20]
 8010a9e:	eba5 0509 	sub.w	r5, r5, r9
 8010aa2:	6026      	str	r6, [r4, #0]
 8010aa4:	463e      	mov	r6, r7
 8010aa6:	60a5      	str	r5, [r4, #8]
 8010aa8:	42be      	cmp	r6, r7
 8010aaa:	d900      	bls.n	8010aae <__ssputs_r+0x72>
 8010aac:	463e      	mov	r6, r7
 8010aae:	4632      	mov	r2, r6
 8010ab0:	4641      	mov	r1, r8
 8010ab2:	6820      	ldr	r0, [r4, #0]
 8010ab4:	f000 fd2e 	bl	8011514 <memmove>
 8010ab8:	68a3      	ldr	r3, [r4, #8]
 8010aba:	2000      	movs	r0, #0
 8010abc:	1b9b      	subs	r3, r3, r6
 8010abe:	60a3      	str	r3, [r4, #8]
 8010ac0:	6823      	ldr	r3, [r4, #0]
 8010ac2:	4433      	add	r3, r6
 8010ac4:	6023      	str	r3, [r4, #0]
 8010ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aca:	462a      	mov	r2, r5
 8010acc:	f000 fd5a 	bl	8011584 <_realloc_r>
 8010ad0:	4606      	mov	r6, r0
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	d1e0      	bne.n	8010a98 <__ssputs_r+0x5c>
 8010ad6:	6921      	ldr	r1, [r4, #16]
 8010ad8:	4650      	mov	r0, sl
 8010ada:	f7ff feb7 	bl	801084c <_free_r>
 8010ade:	230c      	movs	r3, #12
 8010ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae4:	f8ca 3000 	str.w	r3, [sl]
 8010ae8:	89a3      	ldrh	r3, [r4, #12]
 8010aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aee:	81a3      	strh	r3, [r4, #12]
 8010af0:	e7e9      	b.n	8010ac6 <__ssputs_r+0x8a>
	...

08010af4 <_svfiprintf_r>:
 8010af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af8:	4698      	mov	r8, r3
 8010afa:	898b      	ldrh	r3, [r1, #12]
 8010afc:	b09d      	sub	sp, #116	@ 0x74
 8010afe:	4607      	mov	r7, r0
 8010b00:	061b      	lsls	r3, r3, #24
 8010b02:	460d      	mov	r5, r1
 8010b04:	4614      	mov	r4, r2
 8010b06:	d510      	bpl.n	8010b2a <_svfiprintf_r+0x36>
 8010b08:	690b      	ldr	r3, [r1, #16]
 8010b0a:	b973      	cbnz	r3, 8010b2a <_svfiprintf_r+0x36>
 8010b0c:	2140      	movs	r1, #64	@ 0x40
 8010b0e:	f7ff ff09 	bl	8010924 <_malloc_r>
 8010b12:	6028      	str	r0, [r5, #0]
 8010b14:	6128      	str	r0, [r5, #16]
 8010b16:	b930      	cbnz	r0, 8010b26 <_svfiprintf_r+0x32>
 8010b18:	230c      	movs	r3, #12
 8010b1a:	603b      	str	r3, [r7, #0]
 8010b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b20:	b01d      	add	sp, #116	@ 0x74
 8010b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b26:	2340      	movs	r3, #64	@ 0x40
 8010b28:	616b      	str	r3, [r5, #20]
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b30:	f04f 0901 	mov.w	r9, #1
 8010b34:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010cd8 <_svfiprintf_r+0x1e4>
 8010b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b3a:	2320      	movs	r3, #32
 8010b3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b40:	2330      	movs	r3, #48	@ 0x30
 8010b42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b46:	4623      	mov	r3, r4
 8010b48:	469a      	mov	sl, r3
 8010b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b4e:	b10a      	cbz	r2, 8010b54 <_svfiprintf_r+0x60>
 8010b50:	2a25      	cmp	r2, #37	@ 0x25
 8010b52:	d1f9      	bne.n	8010b48 <_svfiprintf_r+0x54>
 8010b54:	ebba 0b04 	subs.w	fp, sl, r4
 8010b58:	d00b      	beq.n	8010b72 <_svfiprintf_r+0x7e>
 8010b5a:	465b      	mov	r3, fp
 8010b5c:	4622      	mov	r2, r4
 8010b5e:	4629      	mov	r1, r5
 8010b60:	4638      	mov	r0, r7
 8010b62:	f7ff ff6b 	bl	8010a3c <__ssputs_r>
 8010b66:	3001      	adds	r0, #1
 8010b68:	f000 80a7 	beq.w	8010cba <_svfiprintf_r+0x1c6>
 8010b6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b6e:	445a      	add	r2, fp
 8010b70:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b72:	f89a 3000 	ldrb.w	r3, [sl]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	f000 809f 	beq.w	8010cba <_svfiprintf_r+0x1c6>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b82:	f10a 0a01 	add.w	sl, sl, #1
 8010b86:	9304      	str	r3, [sp, #16]
 8010b88:	9307      	str	r3, [sp, #28]
 8010b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b94:	4654      	mov	r4, sl
 8010b96:	2205      	movs	r2, #5
 8010b98:	484f      	ldr	r0, [pc, #316]	@ (8010cd8 <_svfiprintf_r+0x1e4>)
 8010b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b9e:	f000 fce3 	bl	8011568 <memchr>
 8010ba2:	9a04      	ldr	r2, [sp, #16]
 8010ba4:	b9d8      	cbnz	r0, 8010bde <_svfiprintf_r+0xea>
 8010ba6:	06d0      	lsls	r0, r2, #27
 8010ba8:	bf44      	itt	mi
 8010baa:	2320      	movmi	r3, #32
 8010bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010bb0:	0711      	lsls	r1, r2, #28
 8010bb2:	bf44      	itt	mi
 8010bb4:	232b      	movmi	r3, #43	@ 0x2b
 8010bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010bba:	f89a 3000 	ldrb.w	r3, [sl]
 8010bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bc0:	d015      	beq.n	8010bee <_svfiprintf_r+0xfa>
 8010bc2:	9a07      	ldr	r2, [sp, #28]
 8010bc4:	4654      	mov	r4, sl
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	f04f 0c0a 	mov.w	ip, #10
 8010bcc:	4621      	mov	r1, r4
 8010bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bd2:	3b30      	subs	r3, #48	@ 0x30
 8010bd4:	2b09      	cmp	r3, #9
 8010bd6:	d94b      	bls.n	8010c70 <_svfiprintf_r+0x17c>
 8010bd8:	b1b0      	cbz	r0, 8010c08 <_svfiprintf_r+0x114>
 8010bda:	9207      	str	r2, [sp, #28]
 8010bdc:	e014      	b.n	8010c08 <_svfiprintf_r+0x114>
 8010bde:	eba0 0308 	sub.w	r3, r0, r8
 8010be2:	46a2      	mov	sl, r4
 8010be4:	fa09 f303 	lsl.w	r3, r9, r3
 8010be8:	4313      	orrs	r3, r2
 8010bea:	9304      	str	r3, [sp, #16]
 8010bec:	e7d2      	b.n	8010b94 <_svfiprintf_r+0xa0>
 8010bee:	9b03      	ldr	r3, [sp, #12]
 8010bf0:	1d19      	adds	r1, r3, #4
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	9103      	str	r1, [sp, #12]
 8010bf8:	bfbb      	ittet	lt
 8010bfa:	425b      	neglt	r3, r3
 8010bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8010c00:	9307      	strge	r3, [sp, #28]
 8010c02:	9307      	strlt	r3, [sp, #28]
 8010c04:	bfb8      	it	lt
 8010c06:	9204      	strlt	r2, [sp, #16]
 8010c08:	7823      	ldrb	r3, [r4, #0]
 8010c0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c0c:	d10a      	bne.n	8010c24 <_svfiprintf_r+0x130>
 8010c0e:	7863      	ldrb	r3, [r4, #1]
 8010c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c12:	d132      	bne.n	8010c7a <_svfiprintf_r+0x186>
 8010c14:	9b03      	ldr	r3, [sp, #12]
 8010c16:	3402      	adds	r4, #2
 8010c18:	1d1a      	adds	r2, r3, #4
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c20:	9203      	str	r2, [sp, #12]
 8010c22:	9305      	str	r3, [sp, #20]
 8010c24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010ce8 <_svfiprintf_r+0x1f4>
 8010c28:	2203      	movs	r2, #3
 8010c2a:	7821      	ldrb	r1, [r4, #0]
 8010c2c:	4650      	mov	r0, sl
 8010c2e:	f000 fc9b 	bl	8011568 <memchr>
 8010c32:	b138      	cbz	r0, 8010c44 <_svfiprintf_r+0x150>
 8010c34:	eba0 000a 	sub.w	r0, r0, sl
 8010c38:	2240      	movs	r2, #64	@ 0x40
 8010c3a:	9b04      	ldr	r3, [sp, #16]
 8010c3c:	3401      	adds	r4, #1
 8010c3e:	4082      	lsls	r2, r0
 8010c40:	4313      	orrs	r3, r2
 8010c42:	9304      	str	r3, [sp, #16]
 8010c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c48:	2206      	movs	r2, #6
 8010c4a:	4824      	ldr	r0, [pc, #144]	@ (8010cdc <_svfiprintf_r+0x1e8>)
 8010c4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c50:	f000 fc8a 	bl	8011568 <memchr>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d036      	beq.n	8010cc6 <_svfiprintf_r+0x1d2>
 8010c58:	4b21      	ldr	r3, [pc, #132]	@ (8010ce0 <_svfiprintf_r+0x1ec>)
 8010c5a:	bb1b      	cbnz	r3, 8010ca4 <_svfiprintf_r+0x1b0>
 8010c5c:	9b03      	ldr	r3, [sp, #12]
 8010c5e:	3307      	adds	r3, #7
 8010c60:	f023 0307 	bic.w	r3, r3, #7
 8010c64:	3308      	adds	r3, #8
 8010c66:	9303      	str	r3, [sp, #12]
 8010c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c6a:	4433      	add	r3, r6
 8010c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c6e:	e76a      	b.n	8010b46 <_svfiprintf_r+0x52>
 8010c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c74:	460c      	mov	r4, r1
 8010c76:	2001      	movs	r0, #1
 8010c78:	e7a8      	b.n	8010bcc <_svfiprintf_r+0xd8>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	3401      	adds	r4, #1
 8010c7e:	f04f 0c0a 	mov.w	ip, #10
 8010c82:	4619      	mov	r1, r3
 8010c84:	9305      	str	r3, [sp, #20]
 8010c86:	4620      	mov	r0, r4
 8010c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c8c:	3a30      	subs	r2, #48	@ 0x30
 8010c8e:	2a09      	cmp	r2, #9
 8010c90:	d903      	bls.n	8010c9a <_svfiprintf_r+0x1a6>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d0c6      	beq.n	8010c24 <_svfiprintf_r+0x130>
 8010c96:	9105      	str	r1, [sp, #20]
 8010c98:	e7c4      	b.n	8010c24 <_svfiprintf_r+0x130>
 8010c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e7f0      	b.n	8010c86 <_svfiprintf_r+0x192>
 8010ca4:	ab03      	add	r3, sp, #12
 8010ca6:	462a      	mov	r2, r5
 8010ca8:	a904      	add	r1, sp, #16
 8010caa:	4638      	mov	r0, r7
 8010cac:	9300      	str	r3, [sp, #0]
 8010cae:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce4 <_svfiprintf_r+0x1f0>)
 8010cb0:	f3af 8000 	nop.w
 8010cb4:	1c42      	adds	r2, r0, #1
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	d1d6      	bne.n	8010c68 <_svfiprintf_r+0x174>
 8010cba:	89ab      	ldrh	r3, [r5, #12]
 8010cbc:	065b      	lsls	r3, r3, #25
 8010cbe:	f53f af2d 	bmi.w	8010b1c <_svfiprintf_r+0x28>
 8010cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010cc4:	e72c      	b.n	8010b20 <_svfiprintf_r+0x2c>
 8010cc6:	ab03      	add	r3, sp, #12
 8010cc8:	462a      	mov	r2, r5
 8010cca:	a904      	add	r1, sp, #16
 8010ccc:	4638      	mov	r0, r7
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	4b04      	ldr	r3, [pc, #16]	@ (8010ce4 <_svfiprintf_r+0x1f0>)
 8010cd2:	f000 f9bf 	bl	8011054 <_printf_i>
 8010cd6:	e7ed      	b.n	8010cb4 <_svfiprintf_r+0x1c0>
 8010cd8:	08011b08 	.word	0x08011b08
 8010cdc:	08011b12 	.word	0x08011b12
 8010ce0:	00000000 	.word	0x00000000
 8010ce4:	08010a3d 	.word	0x08010a3d
 8010ce8:	08011b0e 	.word	0x08011b0e

08010cec <__sfputc_r>:
 8010cec:	6893      	ldr	r3, [r2, #8]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	6093      	str	r3, [r2, #8]
 8010cf4:	b410      	push	{r4}
 8010cf6:	da08      	bge.n	8010d0a <__sfputc_r+0x1e>
 8010cf8:	6994      	ldr	r4, [r2, #24]
 8010cfa:	42a3      	cmp	r3, r4
 8010cfc:	db01      	blt.n	8010d02 <__sfputc_r+0x16>
 8010cfe:	290a      	cmp	r1, #10
 8010d00:	d103      	bne.n	8010d0a <__sfputc_r+0x1e>
 8010d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d06:	f000 bb71 	b.w	80113ec <__swbuf_r>
 8010d0a:	6813      	ldr	r3, [r2, #0]
 8010d0c:	1c58      	adds	r0, r3, #1
 8010d0e:	6010      	str	r0, [r2, #0]
 8010d10:	4608      	mov	r0, r1
 8010d12:	7019      	strb	r1, [r3, #0]
 8010d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d18:	4770      	bx	lr

08010d1a <__sfputs_r>:
 8010d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d1c:	4606      	mov	r6, r0
 8010d1e:	460f      	mov	r7, r1
 8010d20:	4614      	mov	r4, r2
 8010d22:	18d5      	adds	r5, r2, r3
 8010d24:	42ac      	cmp	r4, r5
 8010d26:	d101      	bne.n	8010d2c <__sfputs_r+0x12>
 8010d28:	2000      	movs	r0, #0
 8010d2a:	e007      	b.n	8010d3c <__sfputs_r+0x22>
 8010d2c:	463a      	mov	r2, r7
 8010d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ff ffda 	bl	8010cec <__sfputc_r>
 8010d38:	1c43      	adds	r3, r0, #1
 8010d3a:	d1f3      	bne.n	8010d24 <__sfputs_r+0xa>
 8010d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d40 <_vfiprintf_r>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	460d      	mov	r5, r1
 8010d46:	b09d      	sub	sp, #116	@ 0x74
 8010d48:	4614      	mov	r4, r2
 8010d4a:	4698      	mov	r8, r3
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	b118      	cbz	r0, 8010d58 <_vfiprintf_r+0x18>
 8010d50:	6a03      	ldr	r3, [r0, #32]
 8010d52:	b90b      	cbnz	r3, 8010d58 <_vfiprintf_r+0x18>
 8010d54:	f7ff fc2e 	bl	80105b4 <__sinit>
 8010d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d5a:	07d9      	lsls	r1, r3, #31
 8010d5c:	d405      	bmi.n	8010d6a <_vfiprintf_r+0x2a>
 8010d5e:	89ab      	ldrh	r3, [r5, #12]
 8010d60:	059a      	lsls	r2, r3, #22
 8010d62:	d402      	bmi.n	8010d6a <_vfiprintf_r+0x2a>
 8010d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d66:	f7ff fd62 	bl	801082e <__retarget_lock_acquire_recursive>
 8010d6a:	89ab      	ldrh	r3, [r5, #12]
 8010d6c:	071b      	lsls	r3, r3, #28
 8010d6e:	d501      	bpl.n	8010d74 <_vfiprintf_r+0x34>
 8010d70:	692b      	ldr	r3, [r5, #16]
 8010d72:	b99b      	cbnz	r3, 8010d9c <_vfiprintf_r+0x5c>
 8010d74:	4629      	mov	r1, r5
 8010d76:	4630      	mov	r0, r6
 8010d78:	f000 fb76 	bl	8011468 <__swsetup_r>
 8010d7c:	b170      	cbz	r0, 8010d9c <_vfiprintf_r+0x5c>
 8010d7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d80:	07dc      	lsls	r4, r3, #31
 8010d82:	d504      	bpl.n	8010d8e <_vfiprintf_r+0x4e>
 8010d84:	f04f 30ff 	mov.w	r0, #4294967295
 8010d88:	b01d      	add	sp, #116	@ 0x74
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8e:	89ab      	ldrh	r3, [r5, #12]
 8010d90:	0598      	lsls	r0, r3, #22
 8010d92:	d4f7      	bmi.n	8010d84 <_vfiprintf_r+0x44>
 8010d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d96:	f7ff fd4b 	bl	8010830 <__retarget_lock_release_recursive>
 8010d9a:	e7f3      	b.n	8010d84 <_vfiprintf_r+0x44>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010da2:	f04f 0901 	mov.w	r9, #1
 8010da6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010f5c <_vfiprintf_r+0x21c>
 8010daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dac:	2320      	movs	r3, #32
 8010dae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010db2:	2330      	movs	r3, #48	@ 0x30
 8010db4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010db8:	4623      	mov	r3, r4
 8010dba:	469a      	mov	sl, r3
 8010dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dc0:	b10a      	cbz	r2, 8010dc6 <_vfiprintf_r+0x86>
 8010dc2:	2a25      	cmp	r2, #37	@ 0x25
 8010dc4:	d1f9      	bne.n	8010dba <_vfiprintf_r+0x7a>
 8010dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8010dca:	d00b      	beq.n	8010de4 <_vfiprintf_r+0xa4>
 8010dcc:	465b      	mov	r3, fp
 8010dce:	4622      	mov	r2, r4
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f7ff ffa1 	bl	8010d1a <__sfputs_r>
 8010dd8:	3001      	adds	r0, #1
 8010dda:	f000 80a7 	beq.w	8010f2c <_vfiprintf_r+0x1ec>
 8010dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010de0:	445a      	add	r2, fp
 8010de2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010de4:	f89a 3000 	ldrb.w	r3, [sl]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f000 809f 	beq.w	8010f2c <_vfiprintf_r+0x1ec>
 8010dee:	2300      	movs	r3, #0
 8010df0:	f04f 32ff 	mov.w	r2, #4294967295
 8010df4:	f10a 0a01 	add.w	sl, sl, #1
 8010df8:	9304      	str	r3, [sp, #16]
 8010dfa:	9307      	str	r3, [sp, #28]
 8010dfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e00:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e06:	4654      	mov	r4, sl
 8010e08:	2205      	movs	r2, #5
 8010e0a:	4854      	ldr	r0, [pc, #336]	@ (8010f5c <_vfiprintf_r+0x21c>)
 8010e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e10:	f000 fbaa 	bl	8011568 <memchr>
 8010e14:	9a04      	ldr	r2, [sp, #16]
 8010e16:	b9d8      	cbnz	r0, 8010e50 <_vfiprintf_r+0x110>
 8010e18:	06d1      	lsls	r1, r2, #27
 8010e1a:	bf44      	itt	mi
 8010e1c:	2320      	movmi	r3, #32
 8010e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e22:	0713      	lsls	r3, r2, #28
 8010e24:	bf44      	itt	mi
 8010e26:	232b      	movmi	r3, #43	@ 0x2b
 8010e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e32:	d015      	beq.n	8010e60 <_vfiprintf_r+0x120>
 8010e34:	9a07      	ldr	r2, [sp, #28]
 8010e36:	4654      	mov	r4, sl
 8010e38:	2000      	movs	r0, #0
 8010e3a:	f04f 0c0a 	mov.w	ip, #10
 8010e3e:	4621      	mov	r1, r4
 8010e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e44:	3b30      	subs	r3, #48	@ 0x30
 8010e46:	2b09      	cmp	r3, #9
 8010e48:	d94b      	bls.n	8010ee2 <_vfiprintf_r+0x1a2>
 8010e4a:	b1b0      	cbz	r0, 8010e7a <_vfiprintf_r+0x13a>
 8010e4c:	9207      	str	r2, [sp, #28]
 8010e4e:	e014      	b.n	8010e7a <_vfiprintf_r+0x13a>
 8010e50:	eba0 0308 	sub.w	r3, r0, r8
 8010e54:	46a2      	mov	sl, r4
 8010e56:	fa09 f303 	lsl.w	r3, r9, r3
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	9304      	str	r3, [sp, #16]
 8010e5e:	e7d2      	b.n	8010e06 <_vfiprintf_r+0xc6>
 8010e60:	9b03      	ldr	r3, [sp, #12]
 8010e62:	1d19      	adds	r1, r3, #4
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	9103      	str	r1, [sp, #12]
 8010e6a:	bfbb      	ittet	lt
 8010e6c:	425b      	neglt	r3, r3
 8010e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8010e72:	9307      	strge	r3, [sp, #28]
 8010e74:	9307      	strlt	r3, [sp, #28]
 8010e76:	bfb8      	it	lt
 8010e78:	9204      	strlt	r2, [sp, #16]
 8010e7a:	7823      	ldrb	r3, [r4, #0]
 8010e7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e7e:	d10a      	bne.n	8010e96 <_vfiprintf_r+0x156>
 8010e80:	7863      	ldrb	r3, [r4, #1]
 8010e82:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e84:	d132      	bne.n	8010eec <_vfiprintf_r+0x1ac>
 8010e86:	9b03      	ldr	r3, [sp, #12]
 8010e88:	3402      	adds	r4, #2
 8010e8a:	1d1a      	adds	r2, r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e92:	9203      	str	r2, [sp, #12]
 8010e94:	9305      	str	r3, [sp, #20]
 8010e96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f6c <_vfiprintf_r+0x22c>
 8010e9a:	2203      	movs	r2, #3
 8010e9c:	7821      	ldrb	r1, [r4, #0]
 8010e9e:	4650      	mov	r0, sl
 8010ea0:	f000 fb62 	bl	8011568 <memchr>
 8010ea4:	b138      	cbz	r0, 8010eb6 <_vfiprintf_r+0x176>
 8010ea6:	eba0 000a 	sub.w	r0, r0, sl
 8010eaa:	2240      	movs	r2, #64	@ 0x40
 8010eac:	9b04      	ldr	r3, [sp, #16]
 8010eae:	3401      	adds	r4, #1
 8010eb0:	4082      	lsls	r2, r0
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	9304      	str	r3, [sp, #16]
 8010eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eba:	2206      	movs	r2, #6
 8010ebc:	4828      	ldr	r0, [pc, #160]	@ (8010f60 <_vfiprintf_r+0x220>)
 8010ebe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ec2:	f000 fb51 	bl	8011568 <memchr>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	d03f      	beq.n	8010f4a <_vfiprintf_r+0x20a>
 8010eca:	4b26      	ldr	r3, [pc, #152]	@ (8010f64 <_vfiprintf_r+0x224>)
 8010ecc:	bb1b      	cbnz	r3, 8010f16 <_vfiprintf_r+0x1d6>
 8010ece:	9b03      	ldr	r3, [sp, #12]
 8010ed0:	3307      	adds	r3, #7
 8010ed2:	f023 0307 	bic.w	r3, r3, #7
 8010ed6:	3308      	adds	r3, #8
 8010ed8:	9303      	str	r3, [sp, #12]
 8010eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010edc:	443b      	add	r3, r7
 8010ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ee0:	e76a      	b.n	8010db8 <_vfiprintf_r+0x78>
 8010ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	2001      	movs	r0, #1
 8010eea:	e7a8      	b.n	8010e3e <_vfiprintf_r+0xfe>
 8010eec:	2300      	movs	r3, #0
 8010eee:	3401      	adds	r4, #1
 8010ef0:	f04f 0c0a 	mov.w	ip, #10
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	9305      	str	r3, [sp, #20]
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010efe:	3a30      	subs	r2, #48	@ 0x30
 8010f00:	2a09      	cmp	r2, #9
 8010f02:	d903      	bls.n	8010f0c <_vfiprintf_r+0x1cc>
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d0c6      	beq.n	8010e96 <_vfiprintf_r+0x156>
 8010f08:	9105      	str	r1, [sp, #20]
 8010f0a:	e7c4      	b.n	8010e96 <_vfiprintf_r+0x156>
 8010f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f10:	4604      	mov	r4, r0
 8010f12:	2301      	movs	r3, #1
 8010f14:	e7f0      	b.n	8010ef8 <_vfiprintf_r+0x1b8>
 8010f16:	ab03      	add	r3, sp, #12
 8010f18:	462a      	mov	r2, r5
 8010f1a:	a904      	add	r1, sp, #16
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	4b11      	ldr	r3, [pc, #68]	@ (8010f68 <_vfiprintf_r+0x228>)
 8010f22:	f3af 8000 	nop.w
 8010f26:	4607      	mov	r7, r0
 8010f28:	1c78      	adds	r0, r7, #1
 8010f2a:	d1d6      	bne.n	8010eda <_vfiprintf_r+0x19a>
 8010f2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f2e:	07d9      	lsls	r1, r3, #31
 8010f30:	d405      	bmi.n	8010f3e <_vfiprintf_r+0x1fe>
 8010f32:	89ab      	ldrh	r3, [r5, #12]
 8010f34:	059a      	lsls	r2, r3, #22
 8010f36:	d402      	bmi.n	8010f3e <_vfiprintf_r+0x1fe>
 8010f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f3a:	f7ff fc79 	bl	8010830 <__retarget_lock_release_recursive>
 8010f3e:	89ab      	ldrh	r3, [r5, #12]
 8010f40:	065b      	lsls	r3, r3, #25
 8010f42:	f53f af1f 	bmi.w	8010d84 <_vfiprintf_r+0x44>
 8010f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f48:	e71e      	b.n	8010d88 <_vfiprintf_r+0x48>
 8010f4a:	ab03      	add	r3, sp, #12
 8010f4c:	462a      	mov	r2, r5
 8010f4e:	a904      	add	r1, sp, #16
 8010f50:	4630      	mov	r0, r6
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	4b04      	ldr	r3, [pc, #16]	@ (8010f68 <_vfiprintf_r+0x228>)
 8010f56:	f000 f87d 	bl	8011054 <_printf_i>
 8010f5a:	e7e4      	b.n	8010f26 <_vfiprintf_r+0x1e6>
 8010f5c:	08011b08 	.word	0x08011b08
 8010f60:	08011b12 	.word	0x08011b12
 8010f64:	00000000 	.word	0x00000000
 8010f68:	08010d1b 	.word	0x08010d1b
 8010f6c:	08011b0e 	.word	0x08011b0e

08010f70 <_printf_common>:
 8010f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f74:	4616      	mov	r6, r2
 8010f76:	4698      	mov	r8, r3
 8010f78:	688a      	ldr	r2, [r1, #8]
 8010f7a:	4607      	mov	r7, r0
 8010f7c:	690b      	ldr	r3, [r1, #16]
 8010f7e:	460c      	mov	r4, r1
 8010f80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f84:	4293      	cmp	r3, r2
 8010f86:	bfb8      	it	lt
 8010f88:	4613      	movlt	r3, r2
 8010f8a:	6033      	str	r3, [r6, #0]
 8010f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f90:	b10a      	cbz	r2, 8010f96 <_printf_common+0x26>
 8010f92:	3301      	adds	r3, #1
 8010f94:	6033      	str	r3, [r6, #0]
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	0699      	lsls	r1, r3, #26
 8010f9a:	bf42      	ittt	mi
 8010f9c:	6833      	ldrmi	r3, [r6, #0]
 8010f9e:	3302      	addmi	r3, #2
 8010fa0:	6033      	strmi	r3, [r6, #0]
 8010fa2:	6825      	ldr	r5, [r4, #0]
 8010fa4:	f015 0506 	ands.w	r5, r5, #6
 8010fa8:	d106      	bne.n	8010fb8 <_printf_common+0x48>
 8010faa:	f104 0a19 	add.w	sl, r4, #25
 8010fae:	68e3      	ldr	r3, [r4, #12]
 8010fb0:	6832      	ldr	r2, [r6, #0]
 8010fb2:	1a9b      	subs	r3, r3, r2
 8010fb4:	42ab      	cmp	r3, r5
 8010fb6:	dc2b      	bgt.n	8011010 <_printf_common+0xa0>
 8010fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010fbc:	6822      	ldr	r2, [r4, #0]
 8010fbe:	3b00      	subs	r3, #0
 8010fc0:	bf18      	it	ne
 8010fc2:	2301      	movne	r3, #1
 8010fc4:	0692      	lsls	r2, r2, #26
 8010fc6:	d430      	bmi.n	801102a <_printf_common+0xba>
 8010fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010fcc:	4641      	mov	r1, r8
 8010fce:	4638      	mov	r0, r7
 8010fd0:	47c8      	blx	r9
 8010fd2:	3001      	adds	r0, #1
 8010fd4:	d023      	beq.n	801101e <_printf_common+0xae>
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	341a      	adds	r4, #26
 8010fda:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010fde:	f003 0306 	and.w	r3, r3, #6
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	bf0a      	itet	eq
 8010fe6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010fea:	2500      	movne	r5, #0
 8010fec:	6833      	ldreq	r3, [r6, #0]
 8010fee:	f04f 0600 	mov.w	r6, #0
 8010ff2:	bf08      	it	eq
 8010ff4:	1aed      	subeq	r5, r5, r3
 8010ff6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010ffa:	bf08      	it	eq
 8010ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011000:	4293      	cmp	r3, r2
 8011002:	bfc4      	itt	gt
 8011004:	1a9b      	subgt	r3, r3, r2
 8011006:	18ed      	addgt	r5, r5, r3
 8011008:	42b5      	cmp	r5, r6
 801100a:	d11a      	bne.n	8011042 <_printf_common+0xd2>
 801100c:	2000      	movs	r0, #0
 801100e:	e008      	b.n	8011022 <_printf_common+0xb2>
 8011010:	2301      	movs	r3, #1
 8011012:	4652      	mov	r2, sl
 8011014:	4641      	mov	r1, r8
 8011016:	4638      	mov	r0, r7
 8011018:	47c8      	blx	r9
 801101a:	3001      	adds	r0, #1
 801101c:	d103      	bne.n	8011026 <_printf_common+0xb6>
 801101e:	f04f 30ff 	mov.w	r0, #4294967295
 8011022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011026:	3501      	adds	r5, #1
 8011028:	e7c1      	b.n	8010fae <_printf_common+0x3e>
 801102a:	18e1      	adds	r1, r4, r3
 801102c:	1c5a      	adds	r2, r3, #1
 801102e:	2030      	movs	r0, #48	@ 0x30
 8011030:	3302      	adds	r3, #2
 8011032:	4422      	add	r2, r4
 8011034:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801103c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011040:	e7c2      	b.n	8010fc8 <_printf_common+0x58>
 8011042:	2301      	movs	r3, #1
 8011044:	4622      	mov	r2, r4
 8011046:	4641      	mov	r1, r8
 8011048:	4638      	mov	r0, r7
 801104a:	47c8      	blx	r9
 801104c:	3001      	adds	r0, #1
 801104e:	d0e6      	beq.n	801101e <_printf_common+0xae>
 8011050:	3601      	adds	r6, #1
 8011052:	e7d9      	b.n	8011008 <_printf_common+0x98>

08011054 <_printf_i>:
 8011054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011058:	7e0f      	ldrb	r7, [r1, #24]
 801105a:	4691      	mov	r9, r2
 801105c:	4680      	mov	r8, r0
 801105e:	460c      	mov	r4, r1
 8011060:	2f78      	cmp	r7, #120	@ 0x78
 8011062:	469a      	mov	sl, r3
 8011064:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801106a:	d807      	bhi.n	801107c <_printf_i+0x28>
 801106c:	2f62      	cmp	r7, #98	@ 0x62
 801106e:	d80a      	bhi.n	8011086 <_printf_i+0x32>
 8011070:	2f00      	cmp	r7, #0
 8011072:	f000 80d2 	beq.w	801121a <_printf_i+0x1c6>
 8011076:	2f58      	cmp	r7, #88	@ 0x58
 8011078:	f000 80b9 	beq.w	80111ee <_printf_i+0x19a>
 801107c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011084:	e03a      	b.n	80110fc <_printf_i+0xa8>
 8011086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801108a:	2b15      	cmp	r3, #21
 801108c:	d8f6      	bhi.n	801107c <_printf_i+0x28>
 801108e:	a101      	add	r1, pc, #4	@ (adr r1, 8011094 <_printf_i+0x40>)
 8011090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011094:	080110ed 	.word	0x080110ed
 8011098:	08011101 	.word	0x08011101
 801109c:	0801107d 	.word	0x0801107d
 80110a0:	0801107d 	.word	0x0801107d
 80110a4:	0801107d 	.word	0x0801107d
 80110a8:	0801107d 	.word	0x0801107d
 80110ac:	08011101 	.word	0x08011101
 80110b0:	0801107d 	.word	0x0801107d
 80110b4:	0801107d 	.word	0x0801107d
 80110b8:	0801107d 	.word	0x0801107d
 80110bc:	0801107d 	.word	0x0801107d
 80110c0:	08011201 	.word	0x08011201
 80110c4:	0801112b 	.word	0x0801112b
 80110c8:	080111bb 	.word	0x080111bb
 80110cc:	0801107d 	.word	0x0801107d
 80110d0:	0801107d 	.word	0x0801107d
 80110d4:	08011223 	.word	0x08011223
 80110d8:	0801107d 	.word	0x0801107d
 80110dc:	0801112b 	.word	0x0801112b
 80110e0:	0801107d 	.word	0x0801107d
 80110e4:	0801107d 	.word	0x0801107d
 80110e8:	080111c3 	.word	0x080111c3
 80110ec:	6833      	ldr	r3, [r6, #0]
 80110ee:	1d1a      	adds	r2, r3, #4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	6032      	str	r2, [r6, #0]
 80110f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80110fc:	2301      	movs	r3, #1
 80110fe:	e09d      	b.n	801123c <_printf_i+0x1e8>
 8011100:	6833      	ldr	r3, [r6, #0]
 8011102:	6820      	ldr	r0, [r4, #0]
 8011104:	1d19      	adds	r1, r3, #4
 8011106:	6031      	str	r1, [r6, #0]
 8011108:	0606      	lsls	r6, r0, #24
 801110a:	d501      	bpl.n	8011110 <_printf_i+0xbc>
 801110c:	681d      	ldr	r5, [r3, #0]
 801110e:	e003      	b.n	8011118 <_printf_i+0xc4>
 8011110:	0645      	lsls	r5, r0, #25
 8011112:	d5fb      	bpl.n	801110c <_printf_i+0xb8>
 8011114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011118:	2d00      	cmp	r5, #0
 801111a:	da03      	bge.n	8011124 <_printf_i+0xd0>
 801111c:	232d      	movs	r3, #45	@ 0x2d
 801111e:	426d      	negs	r5, r5
 8011120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011124:	4859      	ldr	r0, [pc, #356]	@ (801128c <_printf_i+0x238>)
 8011126:	230a      	movs	r3, #10
 8011128:	e011      	b.n	801114e <_printf_i+0xfa>
 801112a:	6821      	ldr	r1, [r4, #0]
 801112c:	6833      	ldr	r3, [r6, #0]
 801112e:	0608      	lsls	r0, r1, #24
 8011130:	f853 5b04 	ldr.w	r5, [r3], #4
 8011134:	d402      	bmi.n	801113c <_printf_i+0xe8>
 8011136:	0649      	lsls	r1, r1, #25
 8011138:	bf48      	it	mi
 801113a:	b2ad      	uxthmi	r5, r5
 801113c:	2f6f      	cmp	r7, #111	@ 0x6f
 801113e:	6033      	str	r3, [r6, #0]
 8011140:	4852      	ldr	r0, [pc, #328]	@ (801128c <_printf_i+0x238>)
 8011142:	bf14      	ite	ne
 8011144:	230a      	movne	r3, #10
 8011146:	2308      	moveq	r3, #8
 8011148:	2100      	movs	r1, #0
 801114a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801114e:	6866      	ldr	r6, [r4, #4]
 8011150:	2e00      	cmp	r6, #0
 8011152:	60a6      	str	r6, [r4, #8]
 8011154:	bfa2      	ittt	ge
 8011156:	6821      	ldrge	r1, [r4, #0]
 8011158:	f021 0104 	bicge.w	r1, r1, #4
 801115c:	6021      	strge	r1, [r4, #0]
 801115e:	b90d      	cbnz	r5, 8011164 <_printf_i+0x110>
 8011160:	2e00      	cmp	r6, #0
 8011162:	d04b      	beq.n	80111fc <_printf_i+0x1a8>
 8011164:	4616      	mov	r6, r2
 8011166:	fbb5 f1f3 	udiv	r1, r5, r3
 801116a:	fb03 5711 	mls	r7, r3, r1, r5
 801116e:	5dc7      	ldrb	r7, [r0, r7]
 8011170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011174:	462f      	mov	r7, r5
 8011176:	460d      	mov	r5, r1
 8011178:	42bb      	cmp	r3, r7
 801117a:	d9f4      	bls.n	8011166 <_printf_i+0x112>
 801117c:	2b08      	cmp	r3, #8
 801117e:	d10b      	bne.n	8011198 <_printf_i+0x144>
 8011180:	6823      	ldr	r3, [r4, #0]
 8011182:	07df      	lsls	r7, r3, #31
 8011184:	d508      	bpl.n	8011198 <_printf_i+0x144>
 8011186:	6923      	ldr	r3, [r4, #16]
 8011188:	6861      	ldr	r1, [r4, #4]
 801118a:	4299      	cmp	r1, r3
 801118c:	bfde      	ittt	le
 801118e:	2330      	movle	r3, #48	@ 0x30
 8011190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011198:	1b92      	subs	r2, r2, r6
 801119a:	6122      	str	r2, [r4, #16]
 801119c:	464b      	mov	r3, r9
 801119e:	aa03      	add	r2, sp, #12
 80111a0:	4621      	mov	r1, r4
 80111a2:	4640      	mov	r0, r8
 80111a4:	f8cd a000 	str.w	sl, [sp]
 80111a8:	f7ff fee2 	bl	8010f70 <_printf_common>
 80111ac:	3001      	adds	r0, #1
 80111ae:	d14a      	bne.n	8011246 <_printf_i+0x1f2>
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295
 80111b4:	b004      	add	sp, #16
 80111b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ba:	6823      	ldr	r3, [r4, #0]
 80111bc:	f043 0320 	orr.w	r3, r3, #32
 80111c0:	6023      	str	r3, [r4, #0]
 80111c2:	2778      	movs	r7, #120	@ 0x78
 80111c4:	4832      	ldr	r0, [pc, #200]	@ (8011290 <_printf_i+0x23c>)
 80111c6:	6823      	ldr	r3, [r4, #0]
 80111c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80111cc:	061f      	lsls	r7, r3, #24
 80111ce:	6831      	ldr	r1, [r6, #0]
 80111d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80111d4:	d402      	bmi.n	80111dc <_printf_i+0x188>
 80111d6:	065f      	lsls	r7, r3, #25
 80111d8:	bf48      	it	mi
 80111da:	b2ad      	uxthmi	r5, r5
 80111dc:	6031      	str	r1, [r6, #0]
 80111de:	07d9      	lsls	r1, r3, #31
 80111e0:	bf44      	itt	mi
 80111e2:	f043 0320 	orrmi.w	r3, r3, #32
 80111e6:	6023      	strmi	r3, [r4, #0]
 80111e8:	b11d      	cbz	r5, 80111f2 <_printf_i+0x19e>
 80111ea:	2310      	movs	r3, #16
 80111ec:	e7ac      	b.n	8011148 <_printf_i+0xf4>
 80111ee:	4827      	ldr	r0, [pc, #156]	@ (801128c <_printf_i+0x238>)
 80111f0:	e7e9      	b.n	80111c6 <_printf_i+0x172>
 80111f2:	6823      	ldr	r3, [r4, #0]
 80111f4:	f023 0320 	bic.w	r3, r3, #32
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	e7f6      	b.n	80111ea <_printf_i+0x196>
 80111fc:	4616      	mov	r6, r2
 80111fe:	e7bd      	b.n	801117c <_printf_i+0x128>
 8011200:	6833      	ldr	r3, [r6, #0]
 8011202:	6825      	ldr	r5, [r4, #0]
 8011204:	1d18      	adds	r0, r3, #4
 8011206:	6961      	ldr	r1, [r4, #20]
 8011208:	6030      	str	r0, [r6, #0]
 801120a:	062e      	lsls	r6, r5, #24
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	d501      	bpl.n	8011214 <_printf_i+0x1c0>
 8011210:	6019      	str	r1, [r3, #0]
 8011212:	e002      	b.n	801121a <_printf_i+0x1c6>
 8011214:	0668      	lsls	r0, r5, #25
 8011216:	d5fb      	bpl.n	8011210 <_printf_i+0x1bc>
 8011218:	8019      	strh	r1, [r3, #0]
 801121a:	2300      	movs	r3, #0
 801121c:	4616      	mov	r6, r2
 801121e:	6123      	str	r3, [r4, #16]
 8011220:	e7bc      	b.n	801119c <_printf_i+0x148>
 8011222:	6833      	ldr	r3, [r6, #0]
 8011224:	2100      	movs	r1, #0
 8011226:	1d1a      	adds	r2, r3, #4
 8011228:	6032      	str	r2, [r6, #0]
 801122a:	681e      	ldr	r6, [r3, #0]
 801122c:	6862      	ldr	r2, [r4, #4]
 801122e:	4630      	mov	r0, r6
 8011230:	f000 f99a 	bl	8011568 <memchr>
 8011234:	b108      	cbz	r0, 801123a <_printf_i+0x1e6>
 8011236:	1b80      	subs	r0, r0, r6
 8011238:	6060      	str	r0, [r4, #4]
 801123a:	6863      	ldr	r3, [r4, #4]
 801123c:	6123      	str	r3, [r4, #16]
 801123e:	2300      	movs	r3, #0
 8011240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011244:	e7aa      	b.n	801119c <_printf_i+0x148>
 8011246:	6923      	ldr	r3, [r4, #16]
 8011248:	4632      	mov	r2, r6
 801124a:	4649      	mov	r1, r9
 801124c:	4640      	mov	r0, r8
 801124e:	47d0      	blx	sl
 8011250:	3001      	adds	r0, #1
 8011252:	d0ad      	beq.n	80111b0 <_printf_i+0x15c>
 8011254:	6823      	ldr	r3, [r4, #0]
 8011256:	079b      	lsls	r3, r3, #30
 8011258:	d413      	bmi.n	8011282 <_printf_i+0x22e>
 801125a:	68e0      	ldr	r0, [r4, #12]
 801125c:	9b03      	ldr	r3, [sp, #12]
 801125e:	4298      	cmp	r0, r3
 8011260:	bfb8      	it	lt
 8011262:	4618      	movlt	r0, r3
 8011264:	e7a6      	b.n	80111b4 <_printf_i+0x160>
 8011266:	2301      	movs	r3, #1
 8011268:	4632      	mov	r2, r6
 801126a:	4649      	mov	r1, r9
 801126c:	4640      	mov	r0, r8
 801126e:	47d0      	blx	sl
 8011270:	3001      	adds	r0, #1
 8011272:	d09d      	beq.n	80111b0 <_printf_i+0x15c>
 8011274:	3501      	adds	r5, #1
 8011276:	68e3      	ldr	r3, [r4, #12]
 8011278:	9903      	ldr	r1, [sp, #12]
 801127a:	1a5b      	subs	r3, r3, r1
 801127c:	42ab      	cmp	r3, r5
 801127e:	dcf2      	bgt.n	8011266 <_printf_i+0x212>
 8011280:	e7eb      	b.n	801125a <_printf_i+0x206>
 8011282:	2500      	movs	r5, #0
 8011284:	f104 0619 	add.w	r6, r4, #25
 8011288:	e7f5      	b.n	8011276 <_printf_i+0x222>
 801128a:	bf00      	nop
 801128c:	08011b19 	.word	0x08011b19
 8011290:	08011b2a 	.word	0x08011b2a

08011294 <__sflush_r>:
 8011294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801129c:	0716      	lsls	r6, r2, #28
 801129e:	4605      	mov	r5, r0
 80112a0:	460c      	mov	r4, r1
 80112a2:	d454      	bmi.n	801134e <__sflush_r+0xba>
 80112a4:	684b      	ldr	r3, [r1, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dc02      	bgt.n	80112b0 <__sflush_r+0x1c>
 80112aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	dd48      	ble.n	8011342 <__sflush_r+0xae>
 80112b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112b2:	2e00      	cmp	r6, #0
 80112b4:	d045      	beq.n	8011342 <__sflush_r+0xae>
 80112b6:	2300      	movs	r3, #0
 80112b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80112bc:	682f      	ldr	r7, [r5, #0]
 80112be:	6a21      	ldr	r1, [r4, #32]
 80112c0:	602b      	str	r3, [r5, #0]
 80112c2:	d030      	beq.n	8011326 <__sflush_r+0x92>
 80112c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	0759      	lsls	r1, r3, #29
 80112ca:	d505      	bpl.n	80112d8 <__sflush_r+0x44>
 80112cc:	6863      	ldr	r3, [r4, #4]
 80112ce:	1ad2      	subs	r2, r2, r3
 80112d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112d2:	b10b      	cbz	r3, 80112d8 <__sflush_r+0x44>
 80112d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112d6:	1ad2      	subs	r2, r2, r3
 80112d8:	2300      	movs	r3, #0
 80112da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112dc:	6a21      	ldr	r1, [r4, #32]
 80112de:	4628      	mov	r0, r5
 80112e0:	47b0      	blx	r6
 80112e2:	1c43      	adds	r3, r0, #1
 80112e4:	89a3      	ldrh	r3, [r4, #12]
 80112e6:	d106      	bne.n	80112f6 <__sflush_r+0x62>
 80112e8:	6829      	ldr	r1, [r5, #0]
 80112ea:	291d      	cmp	r1, #29
 80112ec:	d82b      	bhi.n	8011346 <__sflush_r+0xb2>
 80112ee:	4a2a      	ldr	r2, [pc, #168]	@ (8011398 <__sflush_r+0x104>)
 80112f0:	410a      	asrs	r2, r1
 80112f2:	07d6      	lsls	r6, r2, #31
 80112f4:	d427      	bmi.n	8011346 <__sflush_r+0xb2>
 80112f6:	2200      	movs	r2, #0
 80112f8:	04d9      	lsls	r1, r3, #19
 80112fa:	6062      	str	r2, [r4, #4]
 80112fc:	6922      	ldr	r2, [r4, #16]
 80112fe:	6022      	str	r2, [r4, #0]
 8011300:	d504      	bpl.n	801130c <__sflush_r+0x78>
 8011302:	1c42      	adds	r2, r0, #1
 8011304:	d101      	bne.n	801130a <__sflush_r+0x76>
 8011306:	682b      	ldr	r3, [r5, #0]
 8011308:	b903      	cbnz	r3, 801130c <__sflush_r+0x78>
 801130a:	6560      	str	r0, [r4, #84]	@ 0x54
 801130c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801130e:	602f      	str	r7, [r5, #0]
 8011310:	b1b9      	cbz	r1, 8011342 <__sflush_r+0xae>
 8011312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011316:	4299      	cmp	r1, r3
 8011318:	d002      	beq.n	8011320 <__sflush_r+0x8c>
 801131a:	4628      	mov	r0, r5
 801131c:	f7ff fa96 	bl	801084c <_free_r>
 8011320:	2300      	movs	r3, #0
 8011322:	6363      	str	r3, [r4, #52]	@ 0x34
 8011324:	e00d      	b.n	8011342 <__sflush_r+0xae>
 8011326:	2301      	movs	r3, #1
 8011328:	4628      	mov	r0, r5
 801132a:	47b0      	blx	r6
 801132c:	4602      	mov	r2, r0
 801132e:	1c50      	adds	r0, r2, #1
 8011330:	d1c9      	bne.n	80112c6 <__sflush_r+0x32>
 8011332:	682b      	ldr	r3, [r5, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d0c6      	beq.n	80112c6 <__sflush_r+0x32>
 8011338:	2b1d      	cmp	r3, #29
 801133a:	d001      	beq.n	8011340 <__sflush_r+0xac>
 801133c:	2b16      	cmp	r3, #22
 801133e:	d11d      	bne.n	801137c <__sflush_r+0xe8>
 8011340:	602f      	str	r7, [r5, #0]
 8011342:	2000      	movs	r0, #0
 8011344:	e021      	b.n	801138a <__sflush_r+0xf6>
 8011346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801134a:	b21b      	sxth	r3, r3
 801134c:	e01a      	b.n	8011384 <__sflush_r+0xf0>
 801134e:	690f      	ldr	r7, [r1, #16]
 8011350:	2f00      	cmp	r7, #0
 8011352:	d0f6      	beq.n	8011342 <__sflush_r+0xae>
 8011354:	0793      	lsls	r3, r2, #30
 8011356:	680e      	ldr	r6, [r1, #0]
 8011358:	600f      	str	r7, [r1, #0]
 801135a:	bf0c      	ite	eq
 801135c:	694b      	ldreq	r3, [r1, #20]
 801135e:	2300      	movne	r3, #0
 8011360:	eba6 0807 	sub.w	r8, r6, r7
 8011364:	608b      	str	r3, [r1, #8]
 8011366:	f1b8 0f00 	cmp.w	r8, #0
 801136a:	ddea      	ble.n	8011342 <__sflush_r+0xae>
 801136c:	4643      	mov	r3, r8
 801136e:	463a      	mov	r2, r7
 8011370:	6a21      	ldr	r1, [r4, #32]
 8011372:	4628      	mov	r0, r5
 8011374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011376:	47b0      	blx	r6
 8011378:	2800      	cmp	r0, #0
 801137a:	dc08      	bgt.n	801138e <__sflush_r+0xfa>
 801137c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	81a3      	strh	r3, [r4, #12]
 801138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801138e:	4407      	add	r7, r0
 8011390:	eba8 0800 	sub.w	r8, r8, r0
 8011394:	e7e7      	b.n	8011366 <__sflush_r+0xd2>
 8011396:	bf00      	nop
 8011398:	dfbffffe 	.word	0xdfbffffe

0801139c <_fflush_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	690b      	ldr	r3, [r1, #16]
 80113a0:	4605      	mov	r5, r0
 80113a2:	460c      	mov	r4, r1
 80113a4:	b913      	cbnz	r3, 80113ac <_fflush_r+0x10>
 80113a6:	2500      	movs	r5, #0
 80113a8:	4628      	mov	r0, r5
 80113aa:	bd38      	pop	{r3, r4, r5, pc}
 80113ac:	b118      	cbz	r0, 80113b6 <_fflush_r+0x1a>
 80113ae:	6a03      	ldr	r3, [r0, #32]
 80113b0:	b90b      	cbnz	r3, 80113b6 <_fflush_r+0x1a>
 80113b2:	f7ff f8ff 	bl	80105b4 <__sinit>
 80113b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d0f3      	beq.n	80113a6 <_fflush_r+0xa>
 80113be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113c0:	07d0      	lsls	r0, r2, #31
 80113c2:	d404      	bmi.n	80113ce <_fflush_r+0x32>
 80113c4:	0599      	lsls	r1, r3, #22
 80113c6:	d402      	bmi.n	80113ce <_fflush_r+0x32>
 80113c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113ca:	f7ff fa30 	bl	801082e <__retarget_lock_acquire_recursive>
 80113ce:	4628      	mov	r0, r5
 80113d0:	4621      	mov	r1, r4
 80113d2:	f7ff ff5f 	bl	8011294 <__sflush_r>
 80113d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113d8:	4605      	mov	r5, r0
 80113da:	07da      	lsls	r2, r3, #31
 80113dc:	d4e4      	bmi.n	80113a8 <_fflush_r+0xc>
 80113de:	89a3      	ldrh	r3, [r4, #12]
 80113e0:	059b      	lsls	r3, r3, #22
 80113e2:	d4e1      	bmi.n	80113a8 <_fflush_r+0xc>
 80113e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113e6:	f7ff fa23 	bl	8010830 <__retarget_lock_release_recursive>
 80113ea:	e7dd      	b.n	80113a8 <_fflush_r+0xc>

080113ec <__swbuf_r>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	460e      	mov	r6, r1
 80113f0:	4614      	mov	r4, r2
 80113f2:	4605      	mov	r5, r0
 80113f4:	b118      	cbz	r0, 80113fe <__swbuf_r+0x12>
 80113f6:	6a03      	ldr	r3, [r0, #32]
 80113f8:	b90b      	cbnz	r3, 80113fe <__swbuf_r+0x12>
 80113fa:	f7ff f8db 	bl	80105b4 <__sinit>
 80113fe:	69a3      	ldr	r3, [r4, #24]
 8011400:	60a3      	str	r3, [r4, #8]
 8011402:	89a3      	ldrh	r3, [r4, #12]
 8011404:	071a      	lsls	r2, r3, #28
 8011406:	d501      	bpl.n	801140c <__swbuf_r+0x20>
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	b943      	cbnz	r3, 801141e <__swbuf_r+0x32>
 801140c:	4621      	mov	r1, r4
 801140e:	4628      	mov	r0, r5
 8011410:	f000 f82a 	bl	8011468 <__swsetup_r>
 8011414:	b118      	cbz	r0, 801141e <__swbuf_r+0x32>
 8011416:	f04f 37ff 	mov.w	r7, #4294967295
 801141a:	4638      	mov	r0, r7
 801141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801141e:	6823      	ldr	r3, [r4, #0]
 8011420:	b2f6      	uxtb	r6, r6
 8011422:	6922      	ldr	r2, [r4, #16]
 8011424:	4637      	mov	r7, r6
 8011426:	1a98      	subs	r0, r3, r2
 8011428:	6963      	ldr	r3, [r4, #20]
 801142a:	4283      	cmp	r3, r0
 801142c:	dc05      	bgt.n	801143a <__swbuf_r+0x4e>
 801142e:	4621      	mov	r1, r4
 8011430:	4628      	mov	r0, r5
 8011432:	f7ff ffb3 	bl	801139c <_fflush_r>
 8011436:	2800      	cmp	r0, #0
 8011438:	d1ed      	bne.n	8011416 <__swbuf_r+0x2a>
 801143a:	68a3      	ldr	r3, [r4, #8]
 801143c:	3b01      	subs	r3, #1
 801143e:	60a3      	str	r3, [r4, #8]
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	6022      	str	r2, [r4, #0]
 8011446:	701e      	strb	r6, [r3, #0]
 8011448:	1c43      	adds	r3, r0, #1
 801144a:	6962      	ldr	r2, [r4, #20]
 801144c:	429a      	cmp	r2, r3
 801144e:	d004      	beq.n	801145a <__swbuf_r+0x6e>
 8011450:	89a3      	ldrh	r3, [r4, #12]
 8011452:	07db      	lsls	r3, r3, #31
 8011454:	d5e1      	bpl.n	801141a <__swbuf_r+0x2e>
 8011456:	2e0a      	cmp	r6, #10
 8011458:	d1df      	bne.n	801141a <__swbuf_r+0x2e>
 801145a:	4621      	mov	r1, r4
 801145c:	4628      	mov	r0, r5
 801145e:	f7ff ff9d 	bl	801139c <_fflush_r>
 8011462:	2800      	cmp	r0, #0
 8011464:	d0d9      	beq.n	801141a <__swbuf_r+0x2e>
 8011466:	e7d6      	b.n	8011416 <__swbuf_r+0x2a>

08011468 <__swsetup_r>:
 8011468:	b538      	push	{r3, r4, r5, lr}
 801146a:	4b29      	ldr	r3, [pc, #164]	@ (8011510 <__swsetup_r+0xa8>)
 801146c:	4605      	mov	r5, r0
 801146e:	460c      	mov	r4, r1
 8011470:	6818      	ldr	r0, [r3, #0]
 8011472:	b118      	cbz	r0, 801147c <__swsetup_r+0x14>
 8011474:	6a03      	ldr	r3, [r0, #32]
 8011476:	b90b      	cbnz	r3, 801147c <__swsetup_r+0x14>
 8011478:	f7ff f89c 	bl	80105b4 <__sinit>
 801147c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011480:	0719      	lsls	r1, r3, #28
 8011482:	d422      	bmi.n	80114ca <__swsetup_r+0x62>
 8011484:	06da      	lsls	r2, r3, #27
 8011486:	d407      	bmi.n	8011498 <__swsetup_r+0x30>
 8011488:	2209      	movs	r2, #9
 801148a:	602a      	str	r2, [r5, #0]
 801148c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011490:	f04f 30ff 	mov.w	r0, #4294967295
 8011494:	81a3      	strh	r3, [r4, #12]
 8011496:	e033      	b.n	8011500 <__swsetup_r+0x98>
 8011498:	0758      	lsls	r0, r3, #29
 801149a:	d512      	bpl.n	80114c2 <__swsetup_r+0x5a>
 801149c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801149e:	b141      	cbz	r1, 80114b2 <__swsetup_r+0x4a>
 80114a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114a4:	4299      	cmp	r1, r3
 80114a6:	d002      	beq.n	80114ae <__swsetup_r+0x46>
 80114a8:	4628      	mov	r0, r5
 80114aa:	f7ff f9cf 	bl	801084c <_free_r>
 80114ae:	2300      	movs	r3, #0
 80114b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80114b2:	89a3      	ldrh	r3, [r4, #12]
 80114b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80114b8:	81a3      	strh	r3, [r4, #12]
 80114ba:	2300      	movs	r3, #0
 80114bc:	6063      	str	r3, [r4, #4]
 80114be:	6923      	ldr	r3, [r4, #16]
 80114c0:	6023      	str	r3, [r4, #0]
 80114c2:	89a3      	ldrh	r3, [r4, #12]
 80114c4:	f043 0308 	orr.w	r3, r3, #8
 80114c8:	81a3      	strh	r3, [r4, #12]
 80114ca:	6923      	ldr	r3, [r4, #16]
 80114cc:	b94b      	cbnz	r3, 80114e2 <__swsetup_r+0x7a>
 80114ce:	89a3      	ldrh	r3, [r4, #12]
 80114d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80114d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114d8:	d003      	beq.n	80114e2 <__swsetup_r+0x7a>
 80114da:	4621      	mov	r1, r4
 80114dc:	4628      	mov	r0, r5
 80114de:	f000 f8a4 	bl	801162a <__smakebuf_r>
 80114e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114e6:	f013 0201 	ands.w	r2, r3, #1
 80114ea:	d00a      	beq.n	8011502 <__swsetup_r+0x9a>
 80114ec:	2200      	movs	r2, #0
 80114ee:	60a2      	str	r2, [r4, #8]
 80114f0:	6962      	ldr	r2, [r4, #20]
 80114f2:	4252      	negs	r2, r2
 80114f4:	61a2      	str	r2, [r4, #24]
 80114f6:	6922      	ldr	r2, [r4, #16]
 80114f8:	b942      	cbnz	r2, 801150c <__swsetup_r+0xa4>
 80114fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80114fe:	d1c5      	bne.n	801148c <__swsetup_r+0x24>
 8011500:	bd38      	pop	{r3, r4, r5, pc}
 8011502:	0799      	lsls	r1, r3, #30
 8011504:	bf58      	it	pl
 8011506:	6962      	ldrpl	r2, [r4, #20]
 8011508:	60a2      	str	r2, [r4, #8]
 801150a:	e7f4      	b.n	80114f6 <__swsetup_r+0x8e>
 801150c:	2000      	movs	r0, #0
 801150e:	e7f7      	b.n	8011500 <__swsetup_r+0x98>
 8011510:	20000130 	.word	0x20000130

08011514 <memmove>:
 8011514:	4288      	cmp	r0, r1
 8011516:	b510      	push	{r4, lr}
 8011518:	eb01 0402 	add.w	r4, r1, r2
 801151c:	d902      	bls.n	8011524 <memmove+0x10>
 801151e:	4284      	cmp	r4, r0
 8011520:	4623      	mov	r3, r4
 8011522:	d807      	bhi.n	8011534 <memmove+0x20>
 8011524:	1e43      	subs	r3, r0, #1
 8011526:	42a1      	cmp	r1, r4
 8011528:	d008      	beq.n	801153c <memmove+0x28>
 801152a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801152e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011532:	e7f8      	b.n	8011526 <memmove+0x12>
 8011534:	4402      	add	r2, r0
 8011536:	4601      	mov	r1, r0
 8011538:	428a      	cmp	r2, r1
 801153a:	d100      	bne.n	801153e <memmove+0x2a>
 801153c:	bd10      	pop	{r4, pc}
 801153e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011546:	e7f7      	b.n	8011538 <memmove+0x24>

08011548 <_sbrk_r>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	2300      	movs	r3, #0
 801154c:	4d05      	ldr	r5, [pc, #20]	@ (8011564 <_sbrk_r+0x1c>)
 801154e:	4604      	mov	r4, r0
 8011550:	4608      	mov	r0, r1
 8011552:	602b      	str	r3, [r5, #0]
 8011554:	f7f0 fc78 	bl	8001e48 <_sbrk>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d102      	bne.n	8011562 <_sbrk_r+0x1a>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	b103      	cbz	r3, 8011562 <_sbrk_r+0x1a>
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	200113a4 	.word	0x200113a4

08011568 <memchr>:
 8011568:	b2c9      	uxtb	r1, r1
 801156a:	4603      	mov	r3, r0
 801156c:	4402      	add	r2, r0
 801156e:	b510      	push	{r4, lr}
 8011570:	4293      	cmp	r3, r2
 8011572:	4618      	mov	r0, r3
 8011574:	d101      	bne.n	801157a <memchr+0x12>
 8011576:	2000      	movs	r0, #0
 8011578:	e003      	b.n	8011582 <memchr+0x1a>
 801157a:	7804      	ldrb	r4, [r0, #0]
 801157c:	3301      	adds	r3, #1
 801157e:	428c      	cmp	r4, r1
 8011580:	d1f6      	bne.n	8011570 <memchr+0x8>
 8011582:	bd10      	pop	{r4, pc}

08011584 <_realloc_r>:
 8011584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011588:	4680      	mov	r8, r0
 801158a:	4615      	mov	r5, r2
 801158c:	460c      	mov	r4, r1
 801158e:	b921      	cbnz	r1, 801159a <_realloc_r+0x16>
 8011590:	4611      	mov	r1, r2
 8011592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011596:	f7ff b9c5 	b.w	8010924 <_malloc_r>
 801159a:	b92a      	cbnz	r2, 80115a8 <_realloc_r+0x24>
 801159c:	f7ff f956 	bl	801084c <_free_r>
 80115a0:	2400      	movs	r4, #0
 80115a2:	4620      	mov	r0, r4
 80115a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a8:	f000 f89e 	bl	80116e8 <_malloc_usable_size_r>
 80115ac:	4285      	cmp	r5, r0
 80115ae:	4606      	mov	r6, r0
 80115b0:	d802      	bhi.n	80115b8 <_realloc_r+0x34>
 80115b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115b6:	d8f4      	bhi.n	80115a2 <_realloc_r+0x1e>
 80115b8:	4629      	mov	r1, r5
 80115ba:	4640      	mov	r0, r8
 80115bc:	f7ff f9b2 	bl	8010924 <_malloc_r>
 80115c0:	4607      	mov	r7, r0
 80115c2:	2800      	cmp	r0, #0
 80115c4:	d0ec      	beq.n	80115a0 <_realloc_r+0x1c>
 80115c6:	42b5      	cmp	r5, r6
 80115c8:	462a      	mov	r2, r5
 80115ca:	4621      	mov	r1, r4
 80115cc:	bf28      	it	cs
 80115ce:	4632      	movcs	r2, r6
 80115d0:	f7ff f92f 	bl	8010832 <memcpy>
 80115d4:	4621      	mov	r1, r4
 80115d6:	4640      	mov	r0, r8
 80115d8:	463c      	mov	r4, r7
 80115da:	f7ff f937 	bl	801084c <_free_r>
 80115de:	e7e0      	b.n	80115a2 <_realloc_r+0x1e>

080115e0 <__swhatbuf_r>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	460c      	mov	r4, r1
 80115e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e8:	b096      	sub	sp, #88	@ 0x58
 80115ea:	4615      	mov	r5, r2
 80115ec:	2900      	cmp	r1, #0
 80115ee:	461e      	mov	r6, r3
 80115f0:	da0c      	bge.n	801160c <__swhatbuf_r+0x2c>
 80115f2:	89a3      	ldrh	r3, [r4, #12]
 80115f4:	2100      	movs	r1, #0
 80115f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80115fa:	bf14      	ite	ne
 80115fc:	2340      	movne	r3, #64	@ 0x40
 80115fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011602:	2000      	movs	r0, #0
 8011604:	6031      	str	r1, [r6, #0]
 8011606:	602b      	str	r3, [r5, #0]
 8011608:	b016      	add	sp, #88	@ 0x58
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	466a      	mov	r2, sp
 801160e:	f000 f849 	bl	80116a4 <_fstat_r>
 8011612:	2800      	cmp	r0, #0
 8011614:	dbed      	blt.n	80115f2 <__swhatbuf_r+0x12>
 8011616:	9901      	ldr	r1, [sp, #4]
 8011618:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801161c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011620:	4259      	negs	r1, r3
 8011622:	4159      	adcs	r1, r3
 8011624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011628:	e7eb      	b.n	8011602 <__swhatbuf_r+0x22>

0801162a <__smakebuf_r>:
 801162a:	898b      	ldrh	r3, [r1, #12]
 801162c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801162e:	079d      	lsls	r5, r3, #30
 8011630:	4606      	mov	r6, r0
 8011632:	460c      	mov	r4, r1
 8011634:	d507      	bpl.n	8011646 <__smakebuf_r+0x1c>
 8011636:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801163a:	6023      	str	r3, [r4, #0]
 801163c:	6123      	str	r3, [r4, #16]
 801163e:	2301      	movs	r3, #1
 8011640:	6163      	str	r3, [r4, #20]
 8011642:	b003      	add	sp, #12
 8011644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011646:	ab01      	add	r3, sp, #4
 8011648:	466a      	mov	r2, sp
 801164a:	f7ff ffc9 	bl	80115e0 <__swhatbuf_r>
 801164e:	9f00      	ldr	r7, [sp, #0]
 8011650:	4605      	mov	r5, r0
 8011652:	4630      	mov	r0, r6
 8011654:	4639      	mov	r1, r7
 8011656:	f7ff f965 	bl	8010924 <_malloc_r>
 801165a:	b948      	cbnz	r0, 8011670 <__smakebuf_r+0x46>
 801165c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011660:	059a      	lsls	r2, r3, #22
 8011662:	d4ee      	bmi.n	8011642 <__smakebuf_r+0x18>
 8011664:	f023 0303 	bic.w	r3, r3, #3
 8011668:	f043 0302 	orr.w	r3, r3, #2
 801166c:	81a3      	strh	r3, [r4, #12]
 801166e:	e7e2      	b.n	8011636 <__smakebuf_r+0xc>
 8011670:	89a3      	ldrh	r3, [r4, #12]
 8011672:	6020      	str	r0, [r4, #0]
 8011674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011678:	81a3      	strh	r3, [r4, #12]
 801167a:	9b01      	ldr	r3, [sp, #4]
 801167c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011680:	b15b      	cbz	r3, 801169a <__smakebuf_r+0x70>
 8011682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011686:	4630      	mov	r0, r6
 8011688:	f000 f81e 	bl	80116c8 <_isatty_r>
 801168c:	b128      	cbz	r0, 801169a <__smakebuf_r+0x70>
 801168e:	89a3      	ldrh	r3, [r4, #12]
 8011690:	f023 0303 	bic.w	r3, r3, #3
 8011694:	f043 0301 	orr.w	r3, r3, #1
 8011698:	81a3      	strh	r3, [r4, #12]
 801169a:	89a3      	ldrh	r3, [r4, #12]
 801169c:	431d      	orrs	r5, r3
 801169e:	81a5      	strh	r5, [r4, #12]
 80116a0:	e7cf      	b.n	8011642 <__smakebuf_r+0x18>
	...

080116a4 <_fstat_r>:
 80116a4:	b538      	push	{r3, r4, r5, lr}
 80116a6:	2300      	movs	r3, #0
 80116a8:	4d06      	ldr	r5, [pc, #24]	@ (80116c4 <_fstat_r+0x20>)
 80116aa:	4604      	mov	r4, r0
 80116ac:	4608      	mov	r0, r1
 80116ae:	4611      	mov	r1, r2
 80116b0:	602b      	str	r3, [r5, #0]
 80116b2:	f7f0 fba0 	bl	8001df6 <_fstat>
 80116b6:	1c43      	adds	r3, r0, #1
 80116b8:	d102      	bne.n	80116c0 <_fstat_r+0x1c>
 80116ba:	682b      	ldr	r3, [r5, #0]
 80116bc:	b103      	cbz	r3, 80116c0 <_fstat_r+0x1c>
 80116be:	6023      	str	r3, [r4, #0]
 80116c0:	bd38      	pop	{r3, r4, r5, pc}
 80116c2:	bf00      	nop
 80116c4:	200113a4 	.word	0x200113a4

080116c8 <_isatty_r>:
 80116c8:	b538      	push	{r3, r4, r5, lr}
 80116ca:	2300      	movs	r3, #0
 80116cc:	4d05      	ldr	r5, [pc, #20]	@ (80116e4 <_isatty_r+0x1c>)
 80116ce:	4604      	mov	r4, r0
 80116d0:	4608      	mov	r0, r1
 80116d2:	602b      	str	r3, [r5, #0]
 80116d4:	f7f0 fb9f 	bl	8001e16 <_isatty>
 80116d8:	1c43      	adds	r3, r0, #1
 80116da:	d102      	bne.n	80116e2 <_isatty_r+0x1a>
 80116dc:	682b      	ldr	r3, [r5, #0]
 80116de:	b103      	cbz	r3, 80116e2 <_isatty_r+0x1a>
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	bd38      	pop	{r3, r4, r5, pc}
 80116e4:	200113a4 	.word	0x200113a4

080116e8 <_malloc_usable_size_r>:
 80116e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116ec:	1f18      	subs	r0, r3, #4
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	bfbc      	itt	lt
 80116f2:	580b      	ldrlt	r3, [r1, r0]
 80116f4:	18c0      	addlt	r0, r0, r3
 80116f6:	4770      	bx	lr

080116f8 <_init>:
 80116f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116fa:	bf00      	nop
 80116fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116fe:	bc08      	pop	{r3}
 8011700:	469e      	mov	lr, r3
 8011702:	4770      	bx	lr

08011704 <_fini>:
 8011704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011706:	bf00      	nop
 8011708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801170a:	bc08      	pop	{r3}
 801170c:	469e      	mov	lr, r3
 801170e:	4770      	bx	lr
