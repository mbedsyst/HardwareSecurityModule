
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff30  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0801017c  0801017c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010254  08010254  00012170  2**0
                  CONTENTS
  4 .ARM          00000008  08010254  08010254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801025c  0801025c  00012170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801025c  0801025c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010260  08010260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08010264  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  20000170  080103d4  00012170  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200012ac  080103d4  000122ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00012170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235a5  00000000  00000000  000121a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f4  00000000  00000000  0003574b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cd  00000000  00000000  0003b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000688a  00000000  00000000  0003cd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000250c7  00000000  00000000  000435bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014785a  00000000  00000000  00068686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001afee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d0  00000000  00000000  001aff24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001b77f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000170 	.word	0x20000170
 8000268:	00000000 	.word	0x00000000
 800026c:	08010164 	.word	0x08010164

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000174 	.word	0x20000174
 8000288:	08010164 	.word	0x08010164

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b092      	sub	sp, #72	@ 0x48
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 fa1d 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f867 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 faed 	bl	8000ba0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005c6:	f000 fa89 	bl	8000adc <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f9ef 	bl	80009ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8d5 	bl	800077c <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d2:	f000 f995 	bl	8000900 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80005d6:	f000 fa35 	bl	8000a44 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80005da:	f000 f90f 	bl	80007fc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80005de:	bf00      	nop
 80005e0:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <main+0xcc>)
 80005e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0fa      	beq.n	80005e0 <main+0x2c>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f001 f830 	bl	8001650 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f001 f82d 	bl	8001650 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f001 f82a 	bl	8001650 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005fc:	2101      	movs	r1, #1
 80005fe:	2000      	movs	r0, #0
 8000600:	f001 f89c 	bl	800173c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <main+0xd0>)
 8000606:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800060a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <main+0xd0>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <main+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <main+0xd0>)
 800061a:	2200      	movs	r2, #0
 800061c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <main+0xd0>)
 8000620:	2200      	movs	r2, #0
 8000622:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000624:	4917      	ldr	r1, [pc, #92]	@ (8000684 <main+0xd0>)
 8000626:	2000      	movs	r0, #0
 8000628:	f001 f922 	bl	8001870 <BSP_COM_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <main+0x82>
  {
    Error_Handler();
 8000632:	f000 fbb1 	bl	8000d98 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 8000636:	2300      	movs	r3, #0
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
      {
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 800063a:	1d38      	adds	r0, r7, #4
 800063c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <main+0xd4>)
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	f00f f8c9 	bl	800f7d8 <sniprintf>
          TEMPLATE_Transmit((uint8_t*)TxMessageBuffer, strlen(TxMessageBuffer));
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fe1f 	bl	800028c <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f00d fa7a 	bl	800db50 <TEMPLATE_Transmit>
          HAL_Delay(j%1000);
 800065c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <main+0xd8>)
 8000660:	fba3 1302 	umull	r1, r3, r3, r2
 8000664:	099b      	lsrs	r3, r3, #6
 8000666:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800066a:	fb01 f303 	mul.w	r3, r1, r3
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fa7f 	bl	8001b74 <HAL_Delay>
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 8000676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000678:	3301      	adds	r3, #1
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 800067c:	bf00      	nop
 800067e:	e7dc      	b.n	800063a <main+0x86>
 8000680:	200006bc 	.word	0x200006bc
 8000684:	2000018c 	.word	0x2000018c
 8000688:	0801017c 	.word	0x0801017c
 800068c:	10624dd3 	.word	0x10624dd3

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2250      	movs	r2, #80	@ 0x50
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00f f8ce 	bl	800f840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <SystemClock_Config+0xe4>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000774 <SystemClock_Config+0xe4>)
 80006bc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006c0:	6113      	str	r3, [r2, #16]
 80006c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <SystemClock_Config+0xe4>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ce:	bf00      	nop
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <SystemClock_Config+0xe4>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f003 0308 	and.w	r3, r3, #8
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d1f9      	bne.n	80006d0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80006dc:	2329      	movs	r3, #41	@ 0x29
 80006de:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006f6:	2303      	movs	r3, #3
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006fe:	23fa      	movs	r3, #250	@ 0xfa
 8000700:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800070e:	2304      	movs	r3, #4
 8000710:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000712:	2300      	movs	r3, #0
 8000714:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fc04 	bl	8003f2c <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072a:	f000 fb35 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	231f      	movs	r3, #31
 8000730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2105      	movs	r1, #5
 800074c:	4618      	mov	r0, r3
 800074e:	f004 f825 	bl	800479c <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000758:	f000 fb1e 	bl	8000d98 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <SystemClock_Config+0xe8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <SystemClock_Config+0xe8>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	3770      	adds	r7, #112	@ 0x70
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	44020800 	.word	0x44020800
 8000778:	40022000 	.word	0x40022000

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <MX_I2C1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <MX_I2C1_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007b8:	f001 fd82 	bl	80022c0 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 fae9 	bl	8000d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007ca:	f001 fe14 	bl	80023f6 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 fae0 	bl	8000d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007dc:	f001 fe56 	bl	800248c <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 fad7 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000019c 	.word	0x2000019c
 80007f4:	40005400 	.word	0x40005400
 80007f8:	10c043e5 	.word	0x10c043e5

080007fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800082a:	4b33      	ldr	r3, [pc, #204]	@ (80008f8 <MX_RTC_Init+0xfc>)
 800082c:	4a33      	ldr	r2, [pc, #204]	@ (80008fc <MX_RTC_Init+0x100>)
 800082e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000830:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000836:	4b30      	ldr	r3, [pc, #192]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000838:	227f      	movs	r2, #127	@ 0x7f
 800083a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800083c:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <MX_RTC_Init+0xfc>)
 800083e:	22ff      	movs	r2, #255	@ 0xff
 8000840:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000848:	4b2b      	ldr	r3, [pc, #172]	@ (80008f8 <MX_RTC_Init+0xfc>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000854:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800085c:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <MX_RTC_Init+0xfc>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000868:	4823      	ldr	r0, [pc, #140]	@ (80008f8 <MX_RTC_Init+0xfc>)
 800086a:	f009 fb31 	bl	8009ed0 <HAL_RTC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000874:	f000 fa90 	bl	8000d98 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481a      	ldr	r0, [pc, #104]	@ (80008f8 <MX_RTC_Init+0xfc>)
 8000890:	f009 fd84 	bl	800a39c <HAL_RTCEx_PrivilegeModeSet>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800089a:	f000 fa7d 	bl	8000d98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800089e:	2300      	movs	r3, #0
 80008a0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2201      	movs	r2, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <MX_RTC_Init+0xfc>)
 80008bc:	f009 fb8a 	bl	8009fd4 <HAL_RTC_SetTime>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80008c6:	f000 fa67 	bl	8000d98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008ca:	2301      	movs	r3, #1
 80008cc:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80008ce:	2301      	movs	r3, #1
 80008d0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2201      	movs	r2, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_RTC_Init+0xfc>)
 80008e2:	f009 fc09 	bl	800a0f8 <HAL_RTC_SetDate>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80008ec:	f000 fa54 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3738      	adds	r7, #56	@ 0x38
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200001f0 	.word	0x200001f0
 80008fc:	44007800 	.word	0x44007800

08000900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000906:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <MX_SPI1_Init+0xa8>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800090c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800091a:	2207      	movs	r2, #7
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800092c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000934:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000938:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800094e:	2207      	movs	r2, #7
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_SPI1_Init+0xa4>)
 8000992:	f009 fd31 	bl	800a3f8 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800099c:	f000 f9fc 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000220 	.word	0x20000220
 80009a8:	40013000 	.word	0x40013000

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009b2:	4a23      	ldr	r2, [pc, #140]	@ (8000a40 <MX_USART2_UART_Init+0x94>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f4:	4811      	ldr	r0, [pc, #68]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 80009f6:	f009 fe8a 	bl	800a70e <HAL_UART_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a00:	f000 f9ca 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 8000a08:	f00a fb18 	bl	800b03c <HAL_UARTEx_SetTxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a12:	f000 f9c1 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 8000a1a:	f00a fb4d 	bl	800b0b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a24:	f000 f9b8 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_USART2_UART_Init+0x90>)
 8000a2a:	f00a face 	bl	800afca <HAL_UARTEx_DisableFifoMode>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a34:	f000 f9b0 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200002b0 	.word	0x200002b0
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a48:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <MX_USART6_UART_Init+0x94>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a8c:	4811      	ldr	r0, [pc, #68]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000a8e:	f009 fe3e 	bl	800a70e <HAL_UART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000a98:	f000 f97e 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000aa0:	f00a facc 	bl	800b03c <HAL_UARTEx_SetTxFifoThreshold>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000aaa:	f000 f975 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000ab2:	f00a fb01 	bl	800b0b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f000 f96c 	bl	8000d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <MX_USART6_UART_Init+0x90>)
 8000ac2:	f00a fa82 	bl	800afca <HAL_UARTEx_DisableFifoMode>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f000 f964 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000344 	.word	0x20000344
 8000ad8:	40006400 	.word	0x40006400

08000adc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b8c <MX_USB_PCD_Init+0xb0>)
 8000ae4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000aea:	4a29      	ldr	r2, [pc, #164]	@ (8000b90 <MX_USB_PCD_Init+0xb4>)
 8000aec:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000af0:	2208      	movs	r2, #8
 8000af2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afa:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000b2a:	4817      	ldr	r0, [pc, #92]	@ (8000b88 <MX_USB_PCD_Init+0xac>)
 8000b2c:	f001 fd5d 	bl	80025ea <HAL_PCD_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000b36:	f000 f92f 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4915      	ldr	r1, [pc, #84]	@ (8000b94 <MX_USB_PCD_Init+0xb8>)
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <MX_USB_PCD_Init+0xb0>)
 8000b40:	f00d fb0c 	bl	800e15c <USBD_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000b4a:	f000 f925 	bl	8000d98 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000b4e:	4912      	ldr	r1, [pc, #72]	@ (8000b98 <MX_USB_PCD_Init+0xbc>)
 8000b50:	480e      	ldr	r0, [pc, #56]	@ (8000b8c <MX_USB_PCD_Init+0xb0>)
 8000b52:	f00d fb33 	bl	800e1bc <USBD_RegisterClass>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000b5c:	f000 f91c 	bl	8000d98 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000b60:	490e      	ldr	r1, [pc, #56]	@ (8000b9c <MX_USB_PCD_Init+0xc0>)
 8000b62:	480a      	ldr	r0, [pc, #40]	@ (8000b8c <MX_USB_PCD_Init+0xb0>)
 8000b64:	f00c ff08 	bl	800d978 <USBD_CDC_RegisterInterface>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000b6e:	f000 f913 	bl	8000d98 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000b72:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <MX_USB_PCD_Init+0xb0>)
 8000b74:	f00d fb58 	bl	800e228 <USBD_Start>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000b7e:	f000 f90b 	bl	8000d98 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200003d8 	.word	0x200003d8
 8000b8c:	200006bc 	.word	0x200006bc
 8000b90:	40016000 	.word	0x40016000
 8000b94:	200000d0 	.word	0x200000d0
 8000b98:	20000034 	.word	0x20000034
 8000b9c:	200000b4 	.word	0x200000b4

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	@ 0x30
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b72      	ldr	r3, [pc, #456]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bbc:	4a70      	ldr	r2, [pc, #448]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bda:	4a69      	ldr	r2, [pc, #420]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000be4:	4b66      	ldr	r3, [pc, #408]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	4b63      	ldr	r3, [pc, #396]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf8:	4a61      	ldr	r2, [pc, #388]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c02:	4b5f      	ldr	r3, [pc, #380]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b5b      	ldr	r3, [pc, #364]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c16:	4a5a      	ldr	r2, [pc, #360]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c20:	4b57      	ldr	r3, [pc, #348]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b54      	ldr	r3, [pc, #336]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c34:	4a52      	ldr	r2, [pc, #328]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c3e:	4b50      	ldr	r3, [pc, #320]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c52:	4a4b      	ldr	r2, [pc, #300]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c5c:	4b48      	ldr	r3, [pc, #288]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b45      	ldr	r3, [pc, #276]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	4a43      	ldr	r2, [pc, #268]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c7a:	4b41      	ldr	r3, [pc, #260]	@ (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c88:	2332      	movs	r3, #50	@ 0x32
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4838      	ldr	r0, [pc, #224]	@ (8000d84 <MX_GPIO_Init+0x1e4>)
 8000ca4:	f001 f9a2 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ca8:	2384      	movs	r3, #132	@ 0x84
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4831      	ldr	r0, [pc, #196]	@ (8000d88 <MX_GPIO_Init+0x1e8>)
 8000cc4:	f001 f992 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <MX_GPIO_Init+0x1e8>)
 8000cdc:	f001 f986 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000ce0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4825      	ldr	r0, [pc, #148]	@ (8000d8c <MX_GPIO_Init+0x1ec>)
 8000cf6:	f001 f979 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	481d      	ldr	r0, [pc, #116]	@ (8000d8c <MX_GPIO_Init+0x1ec>)
 8000d18:	f001 f968 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_GPIO_Init+0x1f0>)
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4819      	ldr	r0, [pc, #100]	@ (8000d94 <MX_GPIO_Init+0x1f4>)
 8000d30:	f001 f95c 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000d34:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4810      	ldr	r0, [pc, #64]	@ (8000d94 <MX_GPIO_Init+0x1f4>)
 8000d52:	f001 f94b 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000d56:	23c0      	movs	r3, #192	@ 0xc0
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d66:	2308      	movs	r3, #8
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <MX_GPIO_Init+0x1ec>)
 8000d72:	f001 f93b 	bl	8001fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	@ 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	44020c00 	.word	0x44020c00
 8000d84:	42020800 	.word	0x42020800
 8000d88:	42020000 	.word	0x42020000
 8000d8c:	42020400 	.word	0x42020400
 8000d90:	10110000 	.word	0x10110000
 8000d94:	42021800 	.word	0x42021800

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0cc      	sub	sp, #304	@ 0x130
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dc2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dd8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000de2:	461a      	mov	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f00e fd2b 	bl	800f840 <memset>
  if(hi2c->Instance==I2C1)
 8000dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a33      	ldr	r2, [pc, #204]	@ (8000ec4 <HAL_I2C_MspInit+0x110>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d15e      	bne.n	8000eba <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e00:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fffc 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000e2e:	f7ff ffb3 	bl	8000d98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <HAL_I2C_MspInit+0x114>)
 8000e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e38:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <HAL_I2C_MspInit+0x114>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_I2C_MspInit+0x114>)
 8000e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e48:	f003 0202 	and.w	r2, r3, #2
 8000e4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e5a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e5e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4811      	ldr	r0, [pc, #68]	@ (8000ecc <HAL_I2C_MspInit+0x118>)
 8000e88:	f001 f8b0 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_I2C_MspInit+0x114>)
 8000e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e92:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <HAL_I2C_MspInit+0x114>)
 8000e94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e98:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_I2C_MspInit+0x114>)
 8000e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ea2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000ea6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eaa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eb4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000eb8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eba:	bf00      	nop
 8000ebc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	44020c00 	.word	0x44020c00
 8000ecc:	42020400 	.word	0x42020400

08000ed0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0c6      	sub	sp, #280	@ 0x118
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ede:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f00e fca5 	bl	800f840 <memset>
  if(hrtc->Instance==RTC)
 8000ef6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000efa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <HAL_RTC_MspInit+0xb8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d13a      	bne.n	8000f7e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f0c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8000f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f28:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 ff75 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8000f3c:	f7ff ff2c 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_RTC_MspInit+0xbc>)
 8000f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f46:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <HAL_RTC_MspInit+0xbc>)
 8000f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_RTC_MspInit+0xbc>)
 8000f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000f56:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <HAL_RTC_MspInit+0xbc>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f5c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_RTC_MspInit+0xbc>)
 8000f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000f66:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000f6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f7c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	44007800 	.word	0x44007800
 8000f8c:	44020c00 	.word	0x44020c00

08000f90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ce      	sub	sp, #312	@ 0x138
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f9e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f00e fc3d 	bl	800f840 <memset>
  if(hspi->Instance==SPI1)
 8000fc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_SPI_MspInit+0x168>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f040 808a 	bne.w	80010ee <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fde:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000fe2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000fee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ff2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4618      	mov	r0, r3
 8001002:	f003 ff0d 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 800100c:	f7ff fec4 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001010:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001016:	4a39      	ldr	r2, [pc, #228]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800101c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001026:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800102a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800102e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001038:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800103c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001044:	4a2d      	ldr	r2, [pc, #180]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001054:	f003 0201 	and.w	r2, r3, #1
 8001058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800105c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001066:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800106a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106c:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 800106e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_SPI_MspInit+0x16c>)
 800107e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001082:	f003 0208 	and.w	r2, r3, #8
 8001086:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800108a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001094:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001098:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800109a:	2360      	movs	r3, #96	@ 0x60
 800109c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b2:	2305      	movs	r3, #5
 80010b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80010bc:	4619      	mov	r1, r3
 80010be:	4810      	ldr	r0, [pc, #64]	@ (8001100 <HAL_SPI_MspInit+0x170>)
 80010c0:	f000 ff94 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010dc:	2305      	movs	r3, #5
 80010de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80010e6:	4619      	mov	r1, r3
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <HAL_SPI_MspInit+0x174>)
 80010ea:	f000 ff7f 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013000 	.word	0x40013000
 80010fc:	44020c00 	.word	0x44020c00
 8001100:	42020000 	.word	0x42020000
 8001104:	42020c00 	.word	0x42020c00

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0d0      	sub	sp, #320	@ 0x140
 800110c:	af00      	add	r7, sp, #0
 800110e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001112:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001116:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800112c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001130:	4618      	mov	r0, r3
 8001132:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001136:	461a      	mov	r2, r3
 8001138:	2100      	movs	r1, #0
 800113a:	f00e fb81 	bl	800f840 <memset>
  if(huart->Instance==USART2)
 800113e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001142:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7c      	ldr	r2, [pc, #496]	@ (800133c <HAL_UART_MspInit+0x234>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f040 808a 	bne.w	8001266 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001152:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001156:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800115a:	f04f 0202 	mov.w	r2, #2
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001166:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800116a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800116e:	2200      	movs	r2, #0
 8001170:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fe52 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001182:	f7ff fe09 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001186:	4b6e      	ldr	r3, [pc, #440]	@ (8001340 <HAL_UART_MspInit+0x238>)
 8001188:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800118c:	4a6c      	ldr	r2, [pc, #432]	@ (8001340 <HAL_UART_MspInit+0x238>)
 800118e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001192:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001196:	4b6a      	ldr	r3, [pc, #424]	@ (8001340 <HAL_UART_MspInit+0x238>)
 8001198:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800119c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80011a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011b2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b62      	ldr	r3, [pc, #392]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80011b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ba:	4a61      	ldr	r2, [pc, #388]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80011c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011e0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b57      	ldr	r3, [pc, #348]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80011e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e8:	4a55      	ldr	r2, [pc, #340]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80011ea:	f043 0308 	orr.w	r3, r3, #8
 80011ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f2:	4b53      	ldr	r3, [pc, #332]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80011f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f8:	f003 0208 	and.w	r2, r3, #8
 80011fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001200:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800120a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800120e:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001210:	2308      	movs	r3, #8
 8001212:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001228:	2307      	movs	r3, #7
 800122a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001232:	4619      	mov	r1, r3
 8001234:	4843      	ldr	r0, [pc, #268]	@ (8001344 <HAL_UART_MspInit+0x23c>)
 8001236:	f000 fed9 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800123a:	2320      	movs	r3, #32
 800123c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001252:	2307      	movs	r3, #7
 8001254:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001258:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800125c:	4619      	mov	r1, r3
 800125e:	483a      	ldr	r0, [pc, #232]	@ (8001348 <HAL_UART_MspInit+0x240>)
 8001260:	f000 fec4 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001264:	e065      	b.n	8001332 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8001266:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800126a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a36      	ldr	r2, [pc, #216]	@ (800134c <HAL_UART_MspInit+0x244>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d15c      	bne.n	8001332 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800127c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001280:	f04f 0220 	mov.w	r2, #32
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 800128c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001290:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001294:	2200      	movs	r2, #0
 8001296:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f003 fdbf 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80012a8:	f7ff fd76 	bl	8000d98 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012ac:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80012ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80012b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80012be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012c2:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80012c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80012d8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80012dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e0:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_UART_MspInit+0x238>)
 80012ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f0:	f003 0204 	and.w	r2, r3, #4
 80012f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001302:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001306:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001308:	23c0      	movs	r3, #192	@ 0xc0
 800130a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001320:	2307      	movs	r3, #7
 8001322:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800132a:	4619      	mov	r1, r3
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <HAL_UART_MspInit+0x248>)
 800132e:	f000 fe5d 	bl	8001fec <HAL_GPIO_Init>
}
 8001332:	bf00      	nop
 8001334:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40004400 	.word	0x40004400
 8001340:	44020c00 	.word	0x44020c00
 8001344:	42020000 	.word	0x42020000
 8001348:	42020c00 	.word	0x42020c00
 800134c:	40006400 	.word	0x40006400
 8001350:	42020800 	.word	0x42020800

08001354 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0c6      	sub	sp, #280	@ 0x118
 8001358:	af00      	add	r7, sp, #0
 800135a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800135e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001362:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800136c:	4618      	mov	r0, r3
 800136e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001372:	461a      	mov	r2, r3
 8001374:	2100      	movs	r1, #0
 8001376:	f00e fa63 	bl	800f840 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800137a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800137e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a22      	ldr	r2, [pc, #136]	@ (8001410 <HAL_PCD_MspInit+0xbc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d13b      	bne.n	8001404 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800138c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001390:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0310 	mov.w	r3, #16
 800139c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80013a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013a8:	2230      	movs	r2, #48	@ 0x30
 80013aa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fd34 	bl	8004e20 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80013be:	f7ff fceb 	bl	8000d98 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80013c2:	f002 fda3 	bl	8003f0c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_PCD_MspInit+0xc0>)
 80013c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013cc:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_PCD_MspInit+0xc0>)
 80013ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013d2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_PCD_MspInit+0xc0>)
 80013d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013dc:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80013e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013f2:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	204a      	movs	r0, #74	@ 0x4a
 80013fa:	f000 fc97 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80013fe:	204a      	movs	r0, #74	@ 0x4a
 8001400:	f000 fcae 	bl	8001d60 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40016000 	.word	0x40016000
 8001414:	44020c00 	.word	0x44020c00

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 fb61 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}

08001476 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f9d6 	bl	800182c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <USB_DRD_FS_IRQHandler+0x10>)
 800148a:	f001 f9d1 	bl	8002830 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003d8 	.word	0x200003d8

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f00e f9c2 	bl	800f850 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200a0000 	.word	0x200a0000
 80014f8:	00000500 	.word	0x00000500
 80014fc:	20000998 	.word	0x20000998
 8001500:	200012b0 	.word	0x200012b0

08001504 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800150a:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <SystemInit+0xdc>)
 800150c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001510:	4a33      	ldr	r2, [pc, #204]	@ (80015e0 <SystemInit+0xdc>)
 8001512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001516:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800151a:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <SystemInit+0xe0>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <SystemInit+0xe0>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001526:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <SystemInit+0xe0>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <SystemInit+0xe0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	492c      	ldr	r1, [pc, #176]	@ (80015e4 <SystemInit+0xe0>)
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <SystemInit+0xe4>)
 8001534:	4013      	ands	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <SystemInit+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800153e:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <SystemInit+0xe0>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <SystemInit+0xe0>)
 8001546:	2200      	movs	r2, #0
 8001548:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <SystemInit+0xe0>)
 800154c:	4a27      	ldr	r2, [pc, #156]	@ (80015ec <SystemInit+0xe8>)
 800154e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <SystemInit+0xe0>)
 8001552:	2200      	movs	r2, #0
 8001554:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <SystemInit+0xe0>)
 8001558:	4a24      	ldr	r2, [pc, #144]	@ (80015ec <SystemInit+0xe8>)
 800155a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800155c:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <SystemInit+0xe0>)
 800155e:	2200      	movs	r2, #0
 8001560:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <SystemInit+0xe0>)
 8001564:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <SystemInit+0xe8>)
 8001566:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <SystemInit+0xe0>)
 800156a:	2200      	movs	r2, #0
 800156c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <SystemInit+0xe0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <SystemInit+0xe0>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001578:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <SystemInit+0xe0>)
 800157c:	2200      	movs	r2, #0
 800157e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <SystemInit+0xdc>)
 8001582:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001586:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <SystemInit+0xec>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001590:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001598:	d003      	beq.n	80015a2 <SystemInit+0x9e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80015a0:	d117      	bne.n	80015d2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <SystemInit+0xec>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <SystemInit+0xec>)
 80015b0:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <SystemInit+0xf0>)
 80015b2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <SystemInit+0xec>)
 80015b6:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <SystemInit+0xf4>)
 80015b8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <SystemInit+0xec>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <SystemInit+0xec>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <SystemInit+0xec>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <SystemInit+0xec>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	61d3      	str	r3, [r2, #28]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	44020c00 	.word	0x44020c00
 80015e8:	eae2eae3 	.word	0xeae2eae3
 80015ec:	01010280 	.word	0x01010280
 80015f0:	40022000 	.word	0x40022000
 80015f4:	08192a3b 	.word	0x08192a3b
 80015f8:	4c5d6e7f 	.word	0x4c5d6e7f

080015fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015fc:	480d      	ldr	r0, [pc, #52]	@ (8001634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f7ff ff80 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800162a:	f00e f917 	bl	800f85c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7fe ffc1 	bl	80005b4 <main>

08001632 <LoopForever>:

LoopForever:
    b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   r0, =_estack
 8001634:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001640:	08010264 	.word	0x08010264
  ldr r2, =_sbss
 8001644:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001648:	200012ac 	.word	0x200012ac

0800164c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_IRQHandler>
	...

08001650 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	@ 0x30
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d009      	beq.n	8001678 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <BSP_LED_Init+0x28>
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d003      	beq.n	8001678 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001670:	f06f 0301 	mvn.w	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001676:	e055      	b.n	8001724 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10f      	bne.n	800169e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800167e:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <BSP_LED_Init+0xe0>)
 8001680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001684:	4a2a      	ldr	r2, [pc, #168]	@ (8001730 <BSP_LED_Init+0xe0>)
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800168e:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <BSP_LED_Init+0xe0>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	e021      	b.n	80016e2 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10f      	bne.n	80016c4 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80016a4:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <BSP_LED_Init+0xe0>)
 80016a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <BSP_LED_Init+0xe0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <BSP_LED_Init+0xe0>)
 80016b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	e00e      	b.n	80016e2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <BSP_LED_Init+0xe0>)
 80016c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ca:	4a19      	ldr	r2, [pc, #100]	@ (8001730 <BSP_LED_Init+0xe0>)
 80016cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <BSP_LED_Init+0xe0>)
 80016d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <BSP_LED_Init+0xe4>)
 80016e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ea:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <BSP_LED_Init+0xe8>)
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	f107 0218 	add.w	r2, r7, #24
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fc70 	bl	8001fec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <BSP_LED_Init+0xe8>)
 8001710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <BSP_LED_Init+0xe4>)
 8001718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f000 fdb6 	bl	8002290 <HAL_GPIO_WritePin>
  }

  return ret;
 8001724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001726:	4618      	mov	r0, r3
 8001728:	3730      	adds	r7, #48	@ 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	44020c00 	.word	0x44020c00
 8001734:	080101ec 	.word	0x080101ec
 8001738:	20000008 	.word	0x20000008

0800173c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	460a      	mov	r2, r1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	4613      	mov	r3, r2
 800174a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800174c:	4b30      	ldr	r3, [pc, #192]	@ (8001810 <BSP_PB_Init+0xd4>)
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001752:	4a2f      	ldr	r2, [pc, #188]	@ (8001810 <BSP_PB_Init+0xd4>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175c:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <BSP_PB_Init+0xd4>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800176a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001770:	2302      	movs	r3, #2
 8001772:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4a23      	ldr	r2, [pc, #140]	@ (8001814 <BSP_PB_Init+0xd8>)
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	f107 020c 	add.w	r2, r7, #12
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fc2b 	bl	8001fec <HAL_GPIO_Init>
 8001796:	e036      	b.n	8001806 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <BSP_PB_Init+0xdc>)
 800179a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <BSP_PB_Init+0xd8>)
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	f107 020c 	add.w	r2, r7, #12
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fc1e 	bl	8001fec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4a18      	ldr	r2, [pc, #96]	@ (800181c <BSP_PB_Init+0xe0>)
 80017bc:	441a      	add	r2, r3
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4917      	ldr	r1, [pc, #92]	@ (8001820 <BSP_PB_Init+0xe4>)
 80017c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f000 fbb3 	bl	8001f34 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4a10      	ldr	r2, [pc, #64]	@ (800181c <BSP_PB_Init+0xe0>)
 80017da:	1898      	adds	r0, r3, r2
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <BSP_PB_Init+0xe8>)
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	461a      	mov	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f000 fb78 	bl	8001edc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80017ec:	2018      	movs	r0, #24
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <BSP_PB_Init+0xec>)
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	f000 fa97 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80017fe:	2318      	movs	r3, #24
 8001800:	4618      	mov	r0, r3
 8001802:	f000 faad 	bl	8001d60 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	44020c00 	.word	0x44020c00
 8001814:	20000014 	.word	0x20000014
 8001818:	10110000 	.word	0x10110000
 800181c:	2000099c 	.word	0x2000099c
 8001820:	080101f4 	.word	0x080101f4
 8001824:	20000018 	.word	0x20000018
 8001828:	2000001c 	.word	0x2000001c

0800182c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <BSP_PB_IRQHandler+0x28>)
 8001842:	4413      	add	r3, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fb89 	bl	8001f5c <HAL_EXTI_IRQHandler>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000099c 	.word	0x2000099c

08001858 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001886:	f06f 0301 	mvn.w	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e018      	b.n	80018c0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2294      	movs	r2, #148	@ 0x94
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <BSP_COM_Init+0x5c>)
 8001898:	4413      	add	r3, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f854 	bl	8001948 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2294      	movs	r2, #148	@ 0x94
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <BSP_COM_Init+0x5c>)
 80018aa:	4413      	add	r3, r2
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f80e 	bl	80018d0 <MX_USART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80018ba:	f06f 0303 	mvn.w	r3, #3
 80018be:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200009a8 	.word	0x200009a8

080018d0 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <MX_USART_Init+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	220c      	movs	r2, #12
 80018ee:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	895b      	ldrh	r3, [r3, #10]
 80018f4:	461a      	mov	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	891b      	ldrh	r3, [r3, #8]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	899b      	ldrh	r3, [r3, #12]
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800191c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f008 fef2 	bl	800a70e <HAL_UART_Init>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000004 	.word	0x20000004

08001938 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff ff8b 	bl	8001858 <BSP_PB_Callback>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001950:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001956:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001960:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800196e:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001974:	4a1e      	ldr	r2, [pc, #120]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <COM1_MspInit+0xa8>)
 800198e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <COM1_MspInit+0xa8>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <COM1_MspInit+0xa8>)
 800199e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80019aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80019bc:	2307      	movs	r3, #7
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <COM1_MspInit+0xac>)
 80019c8:	f000 fb10 	bl	8001fec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80019cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <COM1_MspInit+0xac>)
 80019e2:	f000 fb03 	bl	8001fec <HAL_GPIO_Init>
}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	@ 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	44020c00 	.word	0x44020c00
 80019f4:	42020c00 	.word	0x42020c00

080019f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f98a 	bl	8001d16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a02:	f003 f883 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_Init+0x44>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	490b      	ldr	r1, [pc, #44]	@ (8001a40 <HAL_Init+0x48>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <HAL_Init+0x4c>)
 8001a1a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f000 f9cf 	bl	8001dc0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f810 	bl	8001a48 <HAL_InitTick>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e002      	b.n	8001a38 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a32:	f7ff f9b7 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	44020c00 	.word	0x44020c00
 8001a40:	080101d4 	.word	0x080101d4
 8001a44:	20000000 	.word	0x20000000

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a54:	4b33      	ldr	r3, [pc, #204]	@ (8001b24 <HAL_InitTick+0xdc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e05c      	b.n	8001b1a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001a60:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_InitTick+0xe0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d10c      	bne.n	8001a86 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <HAL_InitTick+0xe4>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <HAL_InitTick+0xdc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e037      	b.n	8001af6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001a86:	f000 f9f3 	bl	8001e70 <HAL_SYSTICK_GetCLKSourceConfig>
 8001a8a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d023      	beq.n	8001ada <HAL_InitTick+0x92>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d82d      	bhi.n	8001af4 <HAL_InitTick+0xac>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_InitTick+0x5e>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001aa4:	e026      	b.n	8001af4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_InitTick+0xe4>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <HAL_InitTick+0xdc>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	60fb      	str	r3, [r7, #12]
        break;
 8001abe:	e01a      	b.n	8001af6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_InitTick+0xdc>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ace:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
        break;
 8001ad8:	e00d      	b.n	8001af6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0xdc>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	60fb      	str	r3, [r7, #12]
        break;
 8001af2:	e000      	b.n	8001af6 <HAL_InitTick+0xae>
        break;
 8001af4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f940 	bl	8001d7c <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e009      	b.n	8001b1a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b06:	2200      	movs	r2, #0
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	f000 f90d 	bl	8001d2c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001b12:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <HAL_InitTick+0xe8>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000024 	.word	0x20000024
 8001b28:	e000e010 	.word	0xe000e010
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000020 	.word	0x20000020

08001b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000024 	.word	0x20000024
 8001b58:	20000a3c 	.word	0x20000a3c

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000a3c 	.word	0x20000a3c

08001b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff ffee 	bl	8001b5c <HAL_GetTick>
 8001b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d005      	beq.n	8001b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_Delay+0x44>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8f7      	bhi.n	8001b9c <HAL_Delay+0x28>
  {
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000024 	.word	0x20000024

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	@ (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	@ (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff4c 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3a:	f7ff ff63 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	6978      	ldr	r0, [r7, #20]
 8001d46:	f7ff ffb3 	bl	8001cb0 <NVIC_EncodePriority>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff82 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff56 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00d      	b.n	8001dae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <HAL_SYSTICK_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_SYSTICK_Config+0x40>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_SYSTICK_Config+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <HAL_SYSTICK_Config+0x40>)
 8001da6:	f043 0303 	orr.w	r3, r3, #3
 8001daa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d844      	bhi.n	8001e58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001dce:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001df7 	.word	0x08001df7
 8001dd8:	08001e15 	.word	0x08001e15
 8001ddc:	08001e37 	.word	0x08001e37
 8001de0:	08001e59 	.word	0x08001e59
 8001de4:	08001de9 	.word	0x08001de9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6013      	str	r3, [r2, #0]
      break;
 8001df4:	e031      	b.n	8001e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001e02:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e08:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e0a:	f023 030c 	bic.w	r3, r3, #12
 8001e0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001e12:	e022      	b.n	8001e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a13      	ldr	r2, [pc, #76]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e1a:	f023 0304 	bic.w	r3, r3, #4
 8001e1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e26:	f023 030c 	bic.w	r3, r3, #12
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001e34:	e011      	b.n	8001e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e48:	f023 030c 	bic.w	r3, r3, #12
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e4e:	f043 0308 	orr.w	r3, r3, #8
 8001e52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001e56:	e000      	b.n	8001e5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001e58:	bf00      	nop
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010
 8001e6c:	44020c00 	.word	0x44020c00

08001e70 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001e82:	2304      	movs	r3, #4
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	e01e      	b.n	8001ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d00f      	beq.n	8001eba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d80f      	bhi.n	8001ec0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d003      	beq.n	8001eb4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001eac:	e008      	b.n	8001ec0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
        break;
 8001eb2:	e008      	b.n	8001ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
        break;
 8001eb8:	e005      	b.n	8001ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	607b      	str	r3, [r7, #4]
        break;
 8001ebe:	e002      	b.n	8001ec6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
        break;
 8001ec4:	bf00      	nop
    }
  }
  return systick_source;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e010 	.word	0xe000e010
 8001ed8:	44020c00 	.word	0x44020c00

08001edc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d011      	beq.n	8001f18 <HAL_EXTI_RegisterCallback+0x3c>
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	dc13      	bgt.n	8001f20 <HAL_EXTI_RegisterCallback+0x44>
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_EXTI_RegisterCallback+0x26>
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d007      	beq.n	8001f10 <HAL_EXTI_RegisterCallback+0x34>
 8001f00:	e00e      	b.n	8001f20 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
      break;
 8001f0e:	e00a      	b.n	8001f26 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
      break;
 8001f16:	e006      	b.n	8001f26 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	75fb      	strb	r3, [r7, #23]
      break;
 8001f24:	bf00      	nop
  }

  return status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e003      	b.n	8001f50 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
  }
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2201      	movs	r2, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <HAL_EXTI_IRQHandler+0x88>)
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <HAL_EXTI_IRQHandler+0x8c>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4798      	blx	r3
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	4402200c 	.word	0x4402200c
 8001fe8:	44022010 	.word	0x44022010

08001fec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ffa:	e136      	b.n	800226a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8128 	beq.w	8002264 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x38>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d125      	bne.n	8002070 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	6979      	ldr	r1, [r7, #20]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d00b      	beq.n	80020c4 <HAL_GPIO_Init+0xd8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b12      	cmp	r3, #18
 80020c2:	d130      	bne.n	8002126 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020fa:	2201      	movs	r2, #1
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4013      	ands	r3, r2
 8002108:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0201 	and.w	r2, r3, #1
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d017      	beq.n	800215e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4013      	ands	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d07c      	beq.n	8002264 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800216a:	4a47      	ldr	r2, [pc, #284]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3318      	adds	r3, #24
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4013      	ands	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0a9a      	lsrs	r2, r3, #10
 8002192:	4b3e      	ldr	r3, [pc, #248]	@ (800228c <HAL_GPIO_Init+0x2a0>)
 8002194:	4013      	ands	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	00d2      	lsls	r2, r2, #3
 800219e:	4093      	lsls	r3, r2
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80021a6:	4938      	ldr	r1, [pc, #224]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3318      	adds	r3, #24
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80021b4:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80021d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80021de:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4013      	ands	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002202:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 800220a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800220e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4013      	ands	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800222e:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002236:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 8002238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800223c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800225c:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_GPIO_Init+0x29c>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	3301      	adds	r3, #1
 8002268:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aec1 	bne.w	8001ffc <HAL_GPIO_Init+0x10>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	44022000 	.word	0x44022000
 800228c:	002f7f7f 	.word	0x002f7f7f

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e08d      	b.n	80023ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fd64 	bl	8000db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	@ 0x24
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e006      	b.n	8002348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d108      	bne.n	8002362 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	e007      	b.n	8002372 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	d138      	bne.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002416:	2302      	movs	r3, #2
 8002418:	e032      	b.n	8002480 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2224      	movs	r2, #36	@ 0x24
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002448:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d139      	bne.n	8002516 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e033      	b.n	8002518 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002530:	230a      	movs	r3, #10
 8002532:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002534:	e002      	b.n	800253c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3b01      	subs	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f9      	bne.n	8002536 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800254a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b29b      	uxth	r3, r3
 8002554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002558:	b29b      	uxth	r3, r3
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002572:	230a      	movs	r3, #10
 8002574:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002576:	e002      	b.n	800257e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800258c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	b29b      	uxth	r3, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80025b4:	230a      	movs	r3, #10
 80025b6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80025b8:	e002      	b.n	80025c0 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3b01      	subs	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f9      	bne.n	80025ba <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025dc:	b29b      	uxth	r3, r3
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af02      	add	r7, sp, #8
 80025f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0f3      	b.n	80027e4 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe fe9f 	bl	8001354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f008 fe1d 	bl	800b262 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7c1a      	ldrb	r2, [r3, #16]
 8002630:	f88d 2000 	strb.w	r2, [sp]
 8002634:	3304      	adds	r3, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	f008 fde1 	bl	800b1fe <USB_CoreInit>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0ca      	b.n	80027e4 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f008 fe19 	bl	800b28c <USB_SetCurrentMode>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0bb      	b.n	80027e4 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e03f      	b.n	80026f2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	3315      	adds	r3, #21
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3314      	adds	r3, #20
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3317      	adds	r3, #23
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	3324      	adds	r3, #36	@ 0x24
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	3328      	adds	r3, #40	@ 0x28
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	3304      	adds	r3, #4
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3301      	adds	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d3ba      	bcc.n	8002672 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e044      	b.n	800278c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3301      	adds	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	791b      	ldrb	r3, [r3, #4]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3b5      	bcc.n	8002702 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7c1a      	ldrb	r2, [r3, #16]
 800279e:	f88d 2000 	strb.w	r2, [sp]
 80027a2:	3304      	adds	r3, #4
 80027a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a6:	f008 fd94 	bl	800b2d2 <USB_DevInit>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e013      	b.n	80027e4 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7b1b      	ldrb	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f001 fb6b 	bl	8003eae <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f00a fbed 	bl	800cfbc <USB_DevDisconnect>

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_PCD_Start+0x16>
 80027fe:	2302      	movs	r3, #2
 8002800:	e012      	b.n	8002828 <HAL_PCD_Start+0x3c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f008 fd13 	bl	800b23a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f00a fbbe 	bl	800cf9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f00a fbce 	bl	800cfde <USB_ReadInterrupts>
 8002842:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 faf2 	bl	8002e38 <PCD_EP_ISR_Handler>

    return;
 8002854:	e0de      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800286e:	400b      	ands	r3, r1
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f00b fac7 	bl	800de06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002878:	2100      	movs	r1, #0
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8e1 	bl	8002a42 <HAL_PCD_SetAddress>

    return;
 8002880:	e0c8      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800289a:	400b      	ands	r3, r1
 800289c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800289e:	e0b9      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80028b8:	400b      	ands	r3, r1
 80028ba:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80028bc:	e0aa      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d029      	beq.n	800291c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0208 	bic.w	r2, r2, #8
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f001 faf8 	bl	8003ef2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f893 	bl	8002a2e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002916:	400b      	ands	r3, r1
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800291a:	e07b      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01c      	beq.n	8002960 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0208 	orr.w	r2, r2, #8
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002944:	400b      	ands	r3, r1
 8002946:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0204 	orr.w	r2, r2, #4
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f85e 	bl	8002a1a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800295e:	e059      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d033      	beq.n	80029d2 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002978:	400b      	ands	r3, r1
 800297a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002982:	2b00      	cmp	r3, #0
 8002984:	d121      	bne.n	80029ca <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0204 	orr.w	r2, r2, #4
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0208 	orr.w	r2, r2, #8
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029c0:	2101      	movs	r1, #1
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 fa95 	bl	8003ef2 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80029c8:	e024      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f825 	bl	8002a1a <HAL_PCD_SuspendCallback>
    return;
 80029d0:	e020      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80029ea:	400b      	ands	r3, r1
 80029ec:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f00b f9fb 	bl	800ddea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029f4:	e00e      	b.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002a12:	bf00      	nop
  }
}
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_PCD_SetAddress+0x1a>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e012      	b.n	8002a82 <HAL_PCD_SetAddress+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00a fa7e 	bl	800cf74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	4608      	mov	r0, r1
 8002a94:	4611      	mov	r1, r2
 8002a96:	461a      	mov	r2, r3
 8002a98:	4603      	mov	r3, r0
 8002a9a:	70fb      	strb	r3, [r7, #3]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	803b      	strh	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da0f      	bge.n	8002ad0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 0207 	and.w	r2, r3, #7
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	3310      	adds	r3, #16
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	705a      	strb	r2, [r3, #1]
 8002ace:	e00f      	b.n	8002af0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002afc:	883b      	ldrh	r3, [r7, #0]
 8002afe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	78ba      	ldrb	r2, [r7, #2]
 8002b0a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b0c:	78bb      	ldrb	r3, [r7, #2]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d102      	bne.n	8002b18 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_PCD_EP_Open+0x9c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e00e      	b.n	8002b44 <HAL_PCD_EP_Open+0xba>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f008 fbef 	bl	800b318 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002b42:	7afb      	ldrb	r3, [r7, #11]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da0f      	bge.n	8002b80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 0207 	and.w	r2, r3, #7
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	3310      	adds	r3, #16
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	705a      	strb	r2, [r3, #1]
 8002b7e:	e00f      	b.n	8002ba0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 0207 	and.w	r2, r3, #7
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_PCD_EP_Close+0x6e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e00e      	b.n	8002bd8 <HAL_PCD_EP_Close+0x8c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f008 ff05 	bl	800b9d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	460b      	mov	r3, r1
 8002bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4413      	add	r3, r2
 8002c06:	3304      	adds	r3, #4
 8002c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6979      	ldr	r1, [r7, #20]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f009 f859 	bl	800bcec <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	460b      	mov	r3, r1
 8002c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	7afb      	ldrb	r3, [r7, #11]
 8002c86:	f003 0207 	and.w	r2, r3, #7
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	3310      	adds	r3, #16
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6979      	ldr	r1, [r7, #20]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f009 f809 	bl	800bcec <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	7912      	ldrb	r2, [r2, #4]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e040      	b.n	8002d84 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da0f      	bge.n	8002d2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 0207 	and.w	r2, r3, #7
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3310      	adds	r3, #16
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	705a      	strb	r2, [r3, #1]
 8002d28:	e00d      	b.n	8002d46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_PCD_EP_SetStall+0x82>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e00e      	b.n	8002d84 <HAL_PCD_EP_SetStall+0xa0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f00a f823 	bl	800cdc0 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	7912      	ldrb	r2, [r2, #4]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e042      	b.n	8002e30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da0f      	bge.n	8002dd2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 0207 	and.w	r2, r3, #7
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	3310      	adds	r3, #16
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
 8002dd0:	e00f      	b.n	8002df2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0207 	and.w	r2, r3, #7
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_EP_ClrStall+0x86>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e00e      	b.n	8002e30 <HAL_PCD_EP_ClrStall+0xa4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f00a f813 	bl	800ce4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08e      	sub	sp, #56	@ 0x38
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e40:	e326      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002e4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002e56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 8124 	bne.w	80030a8 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d13e      	bne.n	8002ee8 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b89      	ldr	r3, [pc, #548]	@ (8003098 <PCD_EP_ISR_Handler+0x260>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e80:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3314      	adds	r3, #20
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	441a      	add	r2, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f00a ff7f 	bl	800ddb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7c5b      	ldrb	r3, [r3, #17]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 82e6 	beq.w	8003490 <PCD_EP_ISR_Handler+0x658>
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 82e1 	bne.w	8003490 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7c5b      	ldrb	r3, [r3, #17]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	745a      	strb	r2, [r3, #17]
 8002ee6:	e2d3      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002eee:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ef8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d027      	beq.n	8002f52 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f7ff fb09 	bl	8002524 <PCD_GET_EP_RX_CNT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f18:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f26:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f00a f8c5 	bl	800d0bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b58      	ldr	r3, [pc, #352]	@ (800309c <PCD_EP_ISR_Handler+0x264>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f48:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f00a ff06 	bl	800dd5c <HAL_PCD_SetupStageCallback>
 8002f50:	e29e      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002f52:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f280 829a 	bge.w	8003490 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b4e      	ldr	r3, [pc, #312]	@ (800309c <PCD_EP_ISR_Handler+0x264>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f72:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7ff fad0 	bl	8002524 <PCD_GET_EP_RX_CNT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <PCD_EP_ISR_Handler+0x190>
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	6959      	ldr	r1, [r3, #20]
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002faa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f00a f885 	bl	800d0bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	441a      	add	r2, r3
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f00a fedc 	bl	800dd80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fd0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 825a 	bne.w	8003490 <PCD_EP_ISR_Handler+0x658>
 8002fdc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002fe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fe6:	f000 8253 	beq.w	8003490 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002fea:	4b2d      	ldr	r3, [pc, #180]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a2c      	ldr	r2, [pc, #176]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8002ff0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002ff4:	6053      	str	r3, [r2, #4]
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <PCD_EP_ISR_Handler+0x1d4>
 8002ffe:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a27      	ldr	r2, [pc, #156]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8003004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003008:	6053      	str	r3, [r2, #4]
 800300a:	e02e      	b.n	800306a <PCD_EP_ISR_Handler+0x232>
 800300c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b3e      	cmp	r3, #62	@ 0x3e
 8003012:	d814      	bhi.n	800303e <PCD_EP_ISR_Handler+0x206>
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <PCD_EP_ISR_Handler+0x1f6>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	069b      	lsls	r3, r3, #26
 8003036:	491a      	ldr	r1, [pc, #104]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	e015      	b.n	800306a <PCD_EP_ISR_Handler+0x232>
 800303e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <PCD_EP_ISR_Handler+0x220>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3b01      	subs	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	4313      	orrs	r3, r2
 8003062:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <PCD_EP_ISR_Handler+0x268>)
 8003064:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003068:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <PCD_EP_ISR_Handler+0x26c>)
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e1fb      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
 8003098:	07ff8f0f 	.word	0x07ff8f0f
 800309c:	07ff0f8f 	.word	0x07ff0f8f
 80030a0:	40016400 	.word	0x40016400
 80030a4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80030ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f280 80bd 	bge.w	800323e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b9e      	ldr	r3, [pc, #632]	@ (8003350 <PCD_EP_ISR_Handler+0x518>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030ee:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030f0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	7b1b      	ldrb	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7ff fa02 	bl	8002524 <PCD_GET_EP_RX_CNT>
 8003120:	4603      	mov	r3, r0
 8003122:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003124:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	d067      	beq.n	80031fa <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	6959      	ldr	r1, [r3, #20]
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	88da      	ldrh	r2, [r3, #6]
 8003136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003138:	f009 ffc0 	bl	800d0bc <USB_ReadPMA>
 800313c:	e05d      	b.n	80031fa <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	78db      	ldrb	r3, [r3, #3]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d108      	bne.n	8003158 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003146:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003148:	461a      	mov	r2, r3
 800314a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f9ad 	bl	80034ac <HAL_PCD_EP_DB_Receive>
 8003152:	4603      	mov	r3, r0
 8003154:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003156:	e050      	b.n	80031fa <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b7a      	ldr	r3, [pc, #488]	@ (8003354 <PCD_EP_ISR_Handler+0x51c>)
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003182:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003186:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7ff f9db 	bl	8002566 <PCD_GET_EP_DBUF0_CNT>
 80031b0:	4603      	mov	r3, r0
 80031b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80031b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01f      	beq.n	80031fa <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c0:	6959      	ldr	r1, [r3, #20]
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	891a      	ldrh	r2, [r3, #8]
 80031c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031c8:	f009 ff78 	bl	800d0bc <USB_ReadPMA>
 80031cc:	e015      	b.n	80031fa <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f7ff f9e5 	bl	80025a8 <PCD_GET_EP_DBUF1_CNT>
 80031de:	4603      	mov	r3, r0
 80031e0:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80031e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ee:	6959      	ldr	r1, [r3, #20]
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	895a      	ldrh	r2, [r3, #10]
 80031f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031f6:	f009 ff61 	bl	800d0bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003200:	441a      	add	r2, r3
 8003202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003204:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800320c:	441a      	add	r2, r3
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <PCD_EP_ISR_Handler+0x3ec>
 800321a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800321c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	429a      	cmp	r2, r3
 8003222:	d206      	bcs.n	8003232 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f00a fda8 	bl	800dd80 <HAL_PCD_DataOutStageCallback>
 8003230:	e005      	b.n	800323e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003238:	4618      	mov	r0, r3
 800323a:	f008 fd57 	bl	800bcec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800323e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8123 	beq.w	8003490 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800324a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	3310      	adds	r3, #16
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b39      	ldr	r3, [pc, #228]	@ (8003358 <PCD_EP_ISR_Handler+0x520>)
 8003272:	4013      	ands	r3, r2
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800328a:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800328c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328e:	78db      	ldrb	r3, [r3, #3]
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 80b8 	bne.w	8003406 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800329c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329e:	7b1b      	ldrb	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a9 	beq.w	80033f8 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d055      	beq.n	800335c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d124      	bne.n	8003302 <PCD_EP_ISR_Handler+0x4ca>
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e07a      	b.n	80033f8 <PCD_EP_ISR_Handler+0x5c0>
 8003302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d176      	bne.n	80033f8 <PCD_EP_ISR_Handler+0x5c0>
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003314:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003324:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003328:	b292      	uxth	r2, r2
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003336:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800333a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003344:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e054      	b.n	80033f8 <PCD_EP_ISR_Handler+0x5c0>
 800334e:	bf00      	nop
 8003350:	07ff0f8f 	.word	0x07ff0f8f
 8003354:	07ff8f8f 	.word	0x07ff8f8f
 8003358:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800335c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d124      	bne.n	80033ae <PCD_EP_ISR_Handler+0x576>
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800336e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800337e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003382:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003392:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e024      	b.n	80033f8 <PCD_EP_ISR_Handler+0x5c0>
 80033ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d120      	bne.n	80033f8 <PCD_EP_ISR_Handler+0x5c0>
 80033b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033d4:	b292      	uxth	r2, r2
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80033e2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80033e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f00a fcd9 	bl	800ddb6 <HAL_PCD_DataInStageCallback>
 8003404:	e044      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003406:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d139      	bne.n	8003484 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800341a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	b29b      	uxth	r3, r3
 8003424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003428:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 800342a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003430:	429a      	cmp	r2, r3
 8003432:	d906      	bls.n	8003442 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	619a      	str	r2, [r3, #24]
 8003440:	e002      	b.n	8003448 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f00a fcad 	bl	800ddb6 <HAL_PCD_DataInStageCallback>
 800345c:	e018      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800345e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003464:	441a      	add	r2, r3
 8003466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003468:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800346a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003470:	441a      	add	r2, r3
 8003472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003474:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800347c:	4618      	mov	r0, r3
 800347e:	f008 fc35 	bl	800bcec <USB_EPStartXfer>
 8003482:	e005      	b.n	8003490 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003484:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003486:	461a      	mov	r2, r3
 8003488:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8e8 	bl	8003660 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800349a:	2b00      	cmp	r3, #0
 800349c:	f47f acd1 	bne.w	8002e42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3738      	adds	r7, #56	@ 0x38
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop

080034ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	@ 0x28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d062      	beq.n	800358a <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7ff f849 	bl	8002566 <PCD_GET_EP_DBUF0_CNT>
 80034d4:	4603      	mov	r3, r0
 80034d6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	8bfb      	ldrh	r3, [r7, #30]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d306      	bcc.n	80034f0 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	619a      	str	r2, [r3, #24]
 80034ee:	e002      	b.n	80034f6 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11b      	bne.n	8003536 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b52      	ldr	r3, [pc, #328]	@ (8003658 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003534:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b42      	ldr	r3, [pc, #264]	@ (800365c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003552:	4013      	ands	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800356e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003570:	8bfb      	ldrh	r3, [r7, #30]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d06b      	beq.n	800364e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6959      	ldr	r1, [r3, #20]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	891a      	ldrh	r2, [r3, #8]
 8003582:	8bfb      	ldrh	r3, [r7, #30]
 8003584:	f009 fd9a 	bl	800d0bc <USB_ReadPMA>
 8003588:	e061      	b.n	800364e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f7ff f807 	bl	80025a8 <PCD_GET_EP_DBUF1_CNT>
 800359a:	4603      	mov	r3, r0
 800359c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	8bfb      	ldrh	r3, [r7, #30]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d306      	bcc.n	80035b6 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	8bfb      	ldrh	r3, [r7, #30]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	619a      	str	r2, [r3, #24]
 80035b4:	e002      	b.n	80035bc <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11b      	bne.n	80035fc <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b20      	ldr	r3, [pc, #128]	@ (8003658 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fa:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d117      	bne.n	8003636 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003618:	4013      	ands	r3, r2
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003630:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003634:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003636:	8bfb      	ldrh	r3, [r7, #30]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6959      	ldr	r1, [r3, #20]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	895a      	ldrh	r2, [r3, #10]
 8003648:	8bfb      	ldrh	r3, [r7, #30]
 800364a:	f009 fd37 	bl	800d0bc <USB_ReadPMA>
    }
  }

  return count;
 800364e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	07ffbf8f 	.word	0x07ffbf8f
 800365c:	07ff8f8f 	.word	0x07ff8f8f

08003660 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	@ 0x38
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 81d5 	beq.w	8003a24 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe ff6e 	bl	8002566 <PCD_GET_EP_DBUF0_CNT>
 800368a:	4603      	mov	r3, r0
 800368c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	8bfb      	ldrh	r3, [r7, #30]
 8003694:	429a      	cmp	r2, r3
 8003696:	d906      	bls.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	699a      	ldr	r2, [r3, #24]
 800369c:	8bfb      	ldrh	r3, [r7, #30]
 800369e:	1ad2      	subs	r2, r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	e002      	b.n	80036ac <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 80c1 	bne.w	8003838 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d124      	bne.n	8003708 <HAL_PCD_EP_DB_Transmit+0xa8>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036dc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003700:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e024      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d120      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800371a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800372a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800372e:	b292      	uxth	r2, r2
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800373c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800374a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d124      	bne.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x144>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003764:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003774:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003778:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003788:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800379c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e024      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x18e>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d120      	bne.n	80037ee <HAL_PCD_EP_DB_Transmit+0x18e>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ca:	b292      	uxth	r2, r2
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80037d8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ea:	6852      	ldr	r2, [r2, #4]
 80037ec:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	4619      	mov	r1, r3
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f00a fade 	bl	800ddb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 82e5 	beq.w	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b8e      	ldr	r3, [pc, #568]	@ (8003a50 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003818:	4013      	ands	r3, r2
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e2cb      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003854:	4013      	ands	r3, r2
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800386c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003870:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 82a9 	bne.w	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	8bfb      	ldrh	r3, [r7, #30]
 8003884:	441a      	add	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	441a      	add	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6a1a      	ldr	r2, [r3, #32]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d309      	bcc.n	80038b6 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	1ad2      	subs	r2, r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	621a      	str	r2, [r3, #32]
 80038b4:	e014      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80038be:	8bfb      	ldrh	r3, [r7, #30]
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038ca:	e009      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d16a      	bne.n	80039be <HAL_PCD_EP_DB_Transmit+0x35e>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003902:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003906:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d112      	bne.n	8003938 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800391c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800392c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003930:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e06a      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	2b3e      	cmp	r3, #62	@ 0x3e
 800393c:	d81e      	bhi.n	800397c <HAL_PCD_EP_DB_Transmit+0x31c>
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003950:	3301      	adds	r3, #1
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003966:	069a      	lsls	r2, r3, #26
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003972:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e048      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x3ae>
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <HAL_PCD_EP_DB_Transmit+0x332>
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	3b01      	subs	r3, #1
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800399c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	069b      	lsls	r3, r3, #26
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e027      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d123      	bne.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e4:	b292      	uxth	r2, r2
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	041a      	lsls	r2, r3, #16
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6959      	ldr	r1, [r3, #20]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	891a      	ldrh	r2, [r3, #8]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f009 faec 	bl	800cffa <USB_WritePMA>
 8003a22:	e1d5      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f7fe fdba 	bl	80025a8 <PCD_GET_EP_DBUF1_CNT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	8bfb      	ldrh	r3, [r7, #30]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d308      	bcc.n	8003a54 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	8bfb      	ldrh	r3, [r7, #30]
 8003a48:	1ad2      	subs	r2, r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	619a      	str	r2, [r3, #24]
 8003a4e:	e004      	b.n	8003a5a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003a50:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 80c1 	bne.w	8003be6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d124      	bne.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x456>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a8a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003aae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e024      	b.n	8003b00 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	785b      	ldrb	r3, [r3, #1]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d120      	bne.n	8003b00 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ac8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003adc:	b292      	uxth	r2, r2
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003aea:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003af8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d124      	bne.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b26:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	e024      	b.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x53c>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d120      	bne.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x53c>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003b86:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b98:	6852      	ldr	r2, [r2, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f00a f907 	bl	800ddb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 810e 	bne.w	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b95      	ldr	r3, [pc, #596]	@ (8003e1c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e0f4      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d117      	bne.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b86      	ldr	r3, [pc, #536]	@ (8003e1c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1e:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 80d2 	bne.w	8003dd0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	8bfb      	ldrh	r3, [r7, #30]
 8003c32:	441a      	add	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	8bfb      	ldrh	r3, [r7, #30]
 8003c3e:	441a      	add	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d309      	bcc.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	621a      	str	r2, [r3, #32]
 8003c62:	e014      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003c6c:	8bfb      	ldrh	r3, [r7, #30]
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c78:	e009      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2200      	movs	r2, #0
 8003c84:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d16a      	bne.n	8003d6c <HAL_PCD_EP_DB_Transmit+0x70c>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ca0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cb4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d112      	bne.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x686>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	e06a      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x75c>
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cea:	d81e      	bhi.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	069a      	lsls	r2, r3, #26
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	e048      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x75c>
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	069b      	lsls	r3, r3, #26
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	e027      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x75c>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d123      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x75c>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d92:	b292      	uxth	r2, r2
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003da0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	041a      	lsls	r2, r3, #16
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6959      	ldr	r1, [r3, #20]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	895a      	ldrh	r2, [r3, #10]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f009 f915 	bl	800cffa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	f083 0310 	eor.w	r3, r3, #16
 8003dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	f083 0320 	eor.w	r3, r3, #32
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	441a      	add	r2, r3
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3738      	adds	r7, #56	@ 0x38
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	07ff8f8f 	.word	0x07ff8f8f
 8003e20:	07ff8fbf 	.word	0x07ff8fbf

08003e24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	4613      	mov	r3, r2
 8003e34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e36:	897b      	ldrh	r3, [r7, #10]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	f003 0207 	and.w	r2, r3, #7
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3310      	adds	r3, #16
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e00a      	b.n	8003e72 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e5c:	897a      	ldrh	r2, [r7, #10]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3304      	adds	r3, #4
 8003e70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e72:	893b      	ldrh	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	80da      	strh	r2, [r3, #6]
 8003e86:	e00b      	b.n	8003ea0 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003edc:	f043 0202 	orr.w	r2, r3, #2
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003f10:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	4a04      	ldr	r2, [pc, #16]	@ (8003f28 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	44020800 	.word	0x44020800

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f000 bc28 	b.w	8004790 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f40:	4b94      	ldr	r3, [pc, #592]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 0318 	and.w	r3, r3, #24
 8003f48:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003f4a:	4b92      	ldr	r3, [pc, #584]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d05b      	beq.n	8004018 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x46>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2b18      	cmp	r3, #24
 8003f6a:	d114      	bne.n	8003f96 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d111      	bne.n	8003f96 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f000 bc08 	b.w	8004790 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003f80:	4b84      	ldr	r3, [pc, #528]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4981      	ldr	r1, [pc, #516]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003f94:	e040      	b.n	8004018 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d023      	beq.n	8003fe6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fdd7 	bl	8001b5c <HAL_GetTick>
 8003fae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fdd3 	bl	8001b5c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e3e5      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003fc4:	4b73      	ldr	r3, [pc, #460]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003fd0:	4b70      	ldr	r3, [pc, #448]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	496d      	ldr	r1, [pc, #436]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	618b      	str	r3, [r1, #24]
 8003fe4:	e018      	b.n	8004018 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fe6:	4b6b      	ldr	r3, [pc, #428]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6a      	ldr	r2, [pc, #424]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8003fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff2:	f7fd fdb3 	bl	8001b5c <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003ffa:	f7fd fdaf 	bl	8001b5c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e3c1      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800400c:	4b61      	ldr	r3, [pc, #388]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a0 	beq.w	8004166 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b10      	cmp	r3, #16
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x10c>
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b18      	cmp	r3, #24
 8004030:	d109      	bne.n	8004046 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d106      	bne.n	8004046 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 8092 	bne.w	8004166 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e3a4      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x132>
 8004050:	4b50      	ldr	r3, [pc, #320]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a4f      	ldr	r2, [pc, #316]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e058      	b.n	8004110 <HAL_RCC_OscConfig+0x1e4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d112      	bne.n	800408c <HAL_RCC_OscConfig+0x160>
 8004066:	4b4b      	ldr	r3, [pc, #300]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a4a      	ldr	r2, [pc, #296]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b48      	ldr	r3, [pc, #288]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a47      	ldr	r2, [pc, #284]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004078:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a44      	ldr	r2, [pc, #272]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004084:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e041      	b.n	8004110 <HAL_RCC_OscConfig+0x1e4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004094:	d112      	bne.n	80040bc <HAL_RCC_OscConfig+0x190>
 8004096:	4b3f      	ldr	r3, [pc, #252]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3e      	ldr	r2, [pc, #248]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 800409c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b39      	ldr	r3, [pc, #228]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a38      	ldr	r2, [pc, #224]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e029      	b.n	8004110 <HAL_RCC_OscConfig+0x1e4>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80040c4:	d112      	bne.n	80040ec <HAL_RCC_OscConfig+0x1c0>
 80040c6:	4b33      	ldr	r3, [pc, #204]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a32      	ldr	r2, [pc, #200]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b30      	ldr	r3, [pc, #192]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e011      	b.n	8004110 <HAL_RCC_OscConfig+0x1e4>
 80040ec:	4b29      	ldr	r3, [pc, #164]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a28      	ldr	r2, [pc, #160]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a25      	ldr	r2, [pc, #148]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 80040fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b23      	ldr	r3, [pc, #140]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a22      	ldr	r2, [pc, #136]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 800410a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800410e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd fd20 	bl	8001b5c <HAL_GetTick>
 800411c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004120:	f7fd fd1c 	bl	8001b5c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	@ 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e32e      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004132:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x1f4>
 800413e:	e012      	b.n	8004166 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fd fd0c 	bl	8001b5c <HAL_GetTick>
 8004144:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004148:	f7fd fd08 	bl	8001b5c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e31a      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800415a:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <HAL_RCC_OscConfig+0x268>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 809a 	beq.w	80042a8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x25a>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b18      	cmp	r3, #24
 800417e:	d149      	bne.n	8004214 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d146      	bne.n	8004214 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d104      	bne.n	8004198 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e2fe      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
 8004192:	bf00      	nop
 8004194:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800419e:	4b9a      	ldr	r3, [pc, #616]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0218 	and.w	r2, r3, #24
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d014      	beq.n	80041d8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80041ae:	4b96      	ldr	r3, [pc, #600]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 0218 	bic.w	r2, r3, #24
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	4993      	ldr	r1, [pc, #588]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80041c0:	f000 fdd0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041c4:	4b91      	ldr	r3, [pc, #580]	@ (800440c <HAL_RCC_OscConfig+0x4e0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd fc3d 	bl	8001a48 <HAL_InitTick>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e2db      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fcc0 	bl	8001b5c <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80041e0:	f7fd fcbc 	bl	8001b5c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e2ce      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f2:	4b85      	ldr	r3, [pc, #532]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80041fe:	4b82      	ldr	r3, [pc, #520]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	497e      	ldr	r1, [pc, #504]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004212:	e049      	b.n	80042a8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02c      	beq.n	8004276 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800421c:	4b7a      	ldr	r3, [pc, #488]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 0218 	bic.w	r2, r3, #24
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	4977      	ldr	r1, [pc, #476]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800422e:	4b76      	ldr	r3, [pc, #472]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a75      	ldr	r2, [pc, #468]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fd fc8f 	bl	8001b5c <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004242:	f7fd fc8b 	bl	8001b5c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e29d      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004254:	4b6c      	ldr	r3, [pc, #432]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004260:	4b69      	ldr	r3, [pc, #420]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	4966      	ldr	r1, [pc, #408]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	610b      	str	r3, [r1, #16]
 8004274:	e018      	b.n	80042a8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004276:	4b64      	ldr	r3, [pc, #400]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a63      	ldr	r2, [pc, #396]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fd fc6b 	bl	8001b5c <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800428a:	f7fd fc67 	bl	8001b5c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e279      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429c:	4b5a      	ldr	r3, [pc, #360]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03c      	beq.n	800432e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01c      	beq.n	80042f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042bc:	4b52      	ldr	r3, [pc, #328]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80042be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042c2:	4a51      	ldr	r2, [pc, #324]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80042c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd fc46 	bl	8001b5c <HAL_GetTick>
 80042d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80042d4:	f7fd fc42 	bl	8001b5c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e254      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80042e6:	4b48      	ldr	r3, [pc, #288]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80042e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <HAL_RCC_OscConfig+0x3a8>
 80042f4:	e01b      	b.n	800432e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f6:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80042f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042fc:	4a42      	ldr	r2, [pc, #264]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80042fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004302:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fc29 	bl	8001b5c <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800430e:	f7fd fc25 	bl	8001b5c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e237      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004320:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ef      	bne.n	800430e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80d2 	beq.w	80044e0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800433c:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <HAL_RCC_OscConfig+0x4e4>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d118      	bne.n	800437a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004348:	4b31      	ldr	r3, [pc, #196]	@ (8004410 <HAL_RCC_OscConfig+0x4e4>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	4a30      	ldr	r2, [pc, #192]	@ (8004410 <HAL_RCC_OscConfig+0x4e4>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004354:	f7fd fc02 	bl	8001b5c <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fd fbfe 	bl	8001b5c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e210      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800436e:	4b28      	ldr	r3, [pc, #160]	@ (8004410 <HAL_RCC_OscConfig+0x4e4>)
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d108      	bne.n	8004394 <HAL_RCC_OscConfig+0x468>
 8004382:	4b21      	ldr	r3, [pc, #132]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 8004384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004388:	4a1f      	ldr	r2, [pc, #124]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004392:	e074      	b.n	800447e <HAL_RCC_OscConfig+0x552>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d118      	bne.n	80043ce <HAL_RCC_OscConfig+0x4a2>
 800439c:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 800439e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a2:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80043ac:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80043bc:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043c2:	4a11      	ldr	r2, [pc, #68]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80043cc:	e057      	b.n	800447e <HAL_RCC_OscConfig+0x552>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d11e      	bne.n	8004414 <HAL_RCC_OscConfig+0x4e8>
 80043d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ec:	4a06      	ldr	r2, [pc, #24]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80043f6:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043fc:	4a02      	ldr	r2, [pc, #8]	@ (8004408 <HAL_RCC_OscConfig+0x4dc>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004406:	e03a      	b.n	800447e <HAL_RCC_OscConfig+0x552>
 8004408:	44020c00 	.word	0x44020c00
 800440c:	20000020 	.word	0x20000020
 8004410:	44020800 	.word	0x44020800
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b85      	cmp	r3, #133	@ 0x85
 800441a:	d118      	bne.n	800444e <HAL_RCC_OscConfig+0x522>
 800441c:	4ba2      	ldr	r3, [pc, #648]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800441e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004422:	4aa1      	ldr	r2, [pc, #644]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800442c:	4b9e      	ldr	r3, [pc, #632]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800442e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004432:	4a9d      	ldr	r2, [pc, #628]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004438:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800443c:	4b9a      	ldr	r3, [pc, #616]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800443e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004442:	4a99      	ldr	r2, [pc, #612]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800444c:	e017      	b.n	800447e <HAL_RCC_OscConfig+0x552>
 800444e:	4b96      	ldr	r3, [pc, #600]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004454:	4a94      	ldr	r2, [pc, #592]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800445e:	4b92      	ldr	r3, [pc, #584]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004464:	4a90      	ldr	r2, [pc, #576]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004466:	f023 0304 	bic.w	r3, r3, #4
 800446a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800446e:	4b8e      	ldr	r3, [pc, #568]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004474:	4a8c      	ldr	r2, [pc, #560]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800447a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fd fb69 	bl	8001b5c <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd fb65 	bl	8001b5c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e175      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a4:	4b80      	ldr	r3, [pc, #512]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80044a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ed      	beq.n	800448e <HAL_RCC_OscConfig+0x562>
 80044b2:	e015      	b.n	80044e0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd fb52 	bl	8001b5c <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fd fb4e 	bl	8001b5c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e15e      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d2:	4b75      	ldr	r3, [pc, #468]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80044d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ed      	bne.n	80044bc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d036      	beq.n	800455a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044f4:	4b6c      	ldr	r3, [pc, #432]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a6b      	ldr	r2, [pc, #428]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80044fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd fb2c 	bl	8001b5c <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004508:	f7fd fb28 	bl	8001b5c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e13a      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800451a:	4b63      	ldr	r3, [pc, #396]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x5dc>
 8004526:	e018      	b.n	800455a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004528:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5e      	ldr	r2, [pc, #376]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800452e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fd fb12 	bl	8001b5c <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800453c:	f7fd fb0e 	bl	8001b5c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e120      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800454e:	4b56      	ldr	r3, [pc, #344]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8115 	beq.w	800478e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b18      	cmp	r3, #24
 8004568:	f000 80af 	beq.w	80046ca <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	2b02      	cmp	r3, #2
 8004572:	f040 8086 	bne.w	8004682 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004576:	4b4c      	ldr	r3, [pc, #304]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4b      	ldr	r2, [pc, #300]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800457c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd faeb 	bl	8001b5c <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800458a:	f7fd fae7 	bl	8001b5c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0f9      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800459c:	4b42      	ldr	r3, [pc, #264]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80045a8:	4b3f      	ldr	r3, [pc, #252]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045b0:	f023 0303 	bic.w	r3, r3, #3
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045bc:	0212      	lsls	r2, r2, #8
 80045be:	430a      	orrs	r2, r1
 80045c0:	4939      	ldr	r1, [pc, #228]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ca:	3b01      	subs	r3, #1
 80045cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	3b01      	subs	r3, #1
 80045d6:	025b      	lsls	r3, r3, #9
 80045d8:	b29b      	uxth	r3, r3
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	3b01      	subs	r3, #1
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	3b01      	subs	r3, #1
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045f6:	492c      	ldr	r1, [pc, #176]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80045fc:	4b2a      	ldr	r3, [pc, #168]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004602:	f023 0310 	bic.w	r3, r3, #16
 8004606:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460c:	4a26      	ldr	r2, [pc, #152]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004612:	4b25      	ldr	r3, [pc, #148]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004618:	f043 0310 	orr.w	r3, r3, #16
 800461c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800461e:	4b22      	ldr	r3, [pc, #136]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	f023 020c 	bic.w	r2, r3, #12
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	491f      	ldr	r1, [pc, #124]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004630:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	f023 0220 	bic.w	r2, r3, #32
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463c:	491a      	ldr	r1, [pc, #104]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 800463e:	4313      	orrs	r3, r2
 8004640:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004642:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800464e:	4b16      	ldr	r3, [pc, #88]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a15      	ldr	r2, [pc, #84]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004654:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fd fa7f 	bl	8001b5c <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004662:	f7fd fa7b 	bl	8001b5c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e08d      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x736>
 8004680:	e085      	b.n	800478e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004682:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a08      	ldr	r2, [pc, #32]	@ (80046a8 <HAL_RCC_OscConfig+0x77c>)
 8004688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800468c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fd fa65 	bl	8001b5c <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004696:	f7fd fa61 	bl	8001b5c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d903      	bls.n	80046ac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e073      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
 80046a8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80046ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ee      	bne.n	8004696 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80046b8:	4b37      	ldr	r3, [pc, #220]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	4a36      	ldr	r2, [pc, #216]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 80046be:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	6293      	str	r3, [r2, #40]	@ 0x28
 80046c8:	e061      	b.n	800478e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80046ca:	4b33      	ldr	r3, [pc, #204]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046d0:	4b31      	ldr	r3, [pc, #196]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 80046d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d031      	beq.n	8004742 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f003 0203 	and.w	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d12a      	bne.n	8004742 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d122      	bne.n	8004742 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004706:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d11a      	bne.n	8004742 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	0a5b      	lsrs	r3, r3, #9
 8004710:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d111      	bne.n	8004742 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d108      	bne.n	8004742 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0e1b      	lsrs	r3, r3, #24
 8004734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d001      	beq.n	8004746 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e024      	b.n	8004790 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004746:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004754:	429a      	cmp	r2, r3
 8004756:	d01a      	beq.n	800478e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd f9fa 	bl	8001b5c <HAL_GetTick>
 8004768:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800476a:	bf00      	nop
 800476c:	f7fd f9f6 	bl	8001b5c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4293      	cmp	r3, r2
 8004776:	d0f9      	beq.n	800476c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477c:	4a06      	ldr	r2, [pc, #24]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004782:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	4a04      	ldr	r2, [pc, #16]	@ (8004798 <HAL_RCC_OscConfig+0x86c>)
 8004788:	f043 0310 	orr.w	r3, r3, #16
 800478c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	44020c00 	.word	0x44020c00

0800479c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e19e      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b83      	ldr	r3, [pc, #524]	@ (80049c0 <HAL_RCC_ClockConfig+0x224>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b80      	ldr	r3, [pc, #512]	@ (80049c0 <HAL_RCC_ClockConfig+0x224>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 020f 	bic.w	r2, r3, #15
 80047c6:	497e      	ldr	r1, [pc, #504]	@ (80049c0 <HAL_RCC_ClockConfig+0x224>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b7c      	ldr	r3, [pc, #496]	@ (80049c0 <HAL_RCC_ClockConfig+0x224>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e186      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	4b74      	ldr	r3, [pc, #464]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d909      	bls.n	8004812 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80047fe:	4b71      	ldr	r3, [pc, #452]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	496d      	ldr	r1, [pc, #436]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 800480e:	4313      	orrs	r3, r2
 8004810:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d012      	beq.n	8004844 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	4b68      	ldr	r3, [pc, #416]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800482c:	429a      	cmp	r2, r3
 800482e:	d909      	bls.n	8004844 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004830:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	4961      	ldr	r1, [pc, #388]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004840:	4313      	orrs	r3, r2
 8004842:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d010      	beq.n	8004872 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	4b5b      	ldr	r3, [pc, #364]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800485c:	429a      	cmp	r2, r3
 800485e:	d908      	bls.n	8004872 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004860:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4955      	ldr	r1, [pc, #340]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 800486e:	4313      	orrs	r3, r2
 8004870:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d010      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	4b50      	ldr	r3, [pc, #320]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	429a      	cmp	r2, r3
 800488c:	d908      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800488e:	4b4d      	ldr	r3, [pc, #308]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 020f 	bic.w	r2, r3, #15
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	494a      	ldr	r1, [pc, #296]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 800489c:	4313      	orrs	r3, r2
 800489e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8093 	beq.w	80049d4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80048b6:	4b43      	ldr	r3, [pc, #268]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d121      	bne.n	8004906 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e113      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ce:	4b3d      	ldr	r3, [pc, #244]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d115      	bne.n	8004906 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e107      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80048e6:	4b37      	ldr	r3, [pc, #220]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0fb      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f6:	4b33      	ldr	r3, [pc, #204]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0f3      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004906:	4b2f      	ldr	r3, [pc, #188]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f023 0203 	bic.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	492c      	ldr	r1, [pc, #176]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004914:	4313      	orrs	r3, r2
 8004916:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fd f920 	bl	8001b5c <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d112      	bne.n	800494c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004926:	e00a      	b.n	800493e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004928:	f7fd f918 	bl	8001b5c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0d7      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800493e:	4b21      	ldr	r3, [pc, #132]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0318 	and.w	r3, r3, #24
 8004946:	2b18      	cmp	r3, #24
 8004948:	d1ee      	bne.n	8004928 <HAL_RCC_ClockConfig+0x18c>
 800494a:	e043      	b.n	80049d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d112      	bne.n	800497a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004954:	e00a      	b.n	800496c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004956:	f7fd f901 	bl	8001b5c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0c0      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800496c:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f003 0318 	and.w	r3, r3, #24
 8004974:	2b10      	cmp	r3, #16
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
 8004978:	e02c      	b.n	80049d4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d122      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fd f8ea 	bl	8001b5c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0a9      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800499a:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x228>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0318 	and.w	r3, r3, #24
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d1ee      	bne.n	8004984 <HAL_RCC_ClockConfig+0x1e8>
 80049a6:	e015      	b.n	80049d4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049a8:	f7fd f8d8 	bl	8001b5c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d906      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e097      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
 80049be:	bf00      	nop
 80049c0:	40022000 	.word	0x40022000
 80049c4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c8:	4b4b      	ldr	r3, [pc, #300]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f003 0318 	and.w	r3, r3, #24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e9      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	4b44      	ldr	r3, [pc, #272]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d208      	bcs.n	8004a02 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80049f0:	4b41      	ldr	r3, [pc, #260]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f023 020f 	bic.w	r2, r3, #15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	493e      	ldr	r1, [pc, #248]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a02:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_ClockConfig+0x360>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d210      	bcs.n	8004a32 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a10:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <HAL_RCC_ClockConfig+0x360>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 020f 	bic.w	r2, r3, #15
 8004a18:	4938      	ldr	r1, [pc, #224]	@ (8004afc <HAL_RCC_ClockConfig+0x360>)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a20:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <HAL_RCC_ClockConfig+0x360>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e05d      	b.n	8004aee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d010      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	4b2d      	ldr	r3, [pc, #180]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d208      	bcs.n	8004a60 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4927      	ldr	r1, [pc, #156]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d012      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	4b21      	ldr	r3, [pc, #132]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d209      	bcs.n	8004a92 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	491a      	ldr	r1, [pc, #104]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d209      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	490e      	ldr	r1, [pc, #56]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ac4:	f000 f822 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	490b      	ldr	r1, [pc, #44]	@ (8004b00 <HAL_RCC_ClockConfig+0x364>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <HAL_RCC_ClockConfig+0x368>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ade:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <HAL_RCC_ClockConfig+0x36c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc ffb0 	bl	8001a48 <HAL_InitTick>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004aec:	7afb      	ldrb	r3, [r7, #11]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	44020c00 	.word	0x44020c00
 8004afc:	40022000 	.word	0x40022000
 8004b00:	080101d4 	.word	0x080101d4
 8004b04:	20000000 	.word	0x20000000
 8004b08:	20000020 	.word	0x20000020

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	@ 0x24
 8004b10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b12:	4b8c      	ldr	r3, [pc, #560]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0318 	and.w	r3, r3, #24
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e107      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b24:	4b87      	ldr	r3, [pc, #540]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f003 0318 	and.w	r3, r3, #24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d112      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004b30:	4b84      	ldr	r3, [pc, #528]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b3c:	4b81      	ldr	r3, [pc, #516]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	08db      	lsrs	r3, r3, #3
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	4a81      	ldr	r2, [pc, #516]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x240>)
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	e0f1      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004b50:	4b7e      	ldr	r3, [pc, #504]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x240>)
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e0ee      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b56:	4b7b      	ldr	r3, [pc, #492]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0318 	and.w	r3, r3, #24
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d102      	bne.n	8004b68 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b62:	4b7b      	ldr	r3, [pc, #492]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x244>)
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e0e5      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b68:	4b76      	ldr	r3, [pc, #472]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f003 0318 	and.w	r3, r3, #24
 8004b70:	2b18      	cmp	r3, #24
 8004b72:	f040 80dd 	bne.w	8004d30 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b76:	4b73      	ldr	r3, [pc, #460]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004b80:	4b70      	ldr	r3, [pc, #448]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004b8c:	4b6d      	ldr	r3, [pc, #436]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004b98:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004b9c:	08db      	lsrs	r3, r3, #3
 8004b9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80b7 	beq.w	8004d2a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0xbe>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d056      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x16a>
 8004bc8:	e077      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004bca:	4b5e      	ldr	r3, [pc, #376]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d02d      	beq.n	8004c32 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x240>)
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c00:	4b50      	ldr	r3, [pc, #320]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c14:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x248>
 8004c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004c30:	e065      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004d58 <HAL_RCC_GetSysClockFreq+0x24c>
 8004c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c44:	4b3f      	ldr	r3, [pc, #252]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c58:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x248>
 8004c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004c74:	e043      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c80:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x250>
 8004c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c88:	4b2e      	ldr	r3, [pc, #184]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c98:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c9c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x248>
 8004ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004cb8:	e021      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d60 <HAL_RCC_GetSysClockFreq+0x254>
 8004cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004d54 <HAL_RCC_GetSysClockFreq+0x248>
 8004ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004cfc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004cfe:	4b11      	ldr	r3, [pc, #68]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d02:	0a5b      	lsrs	r3, r3, #9
 8004d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d08:	3301      	adds	r3, #1
 8004d0a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d16:	edd7 6a06 	vldr	s13, [r7, #24]
 8004d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d22:	ee17 3a90 	vmov	r3, s15
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e004      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	e001      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004d30:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x240>)
 8004d32:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004d34:	69fb      	ldr	r3, [r7, #28]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3724      	adds	r7, #36	@ 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	44020c00 	.word	0x44020c00
 8004d48:	003d0900 	.word	0x003d0900
 8004d4c:	03d09000 	.word	0x03d09000
 8004d50:	007a1200 	.word	0x007a1200
 8004d54:	46000000 	.word	0x46000000
 8004d58:	4c742400 	.word	0x4c742400
 8004d5c:	4af42400 	.word	0x4af42400
 8004d60:	4a742400 	.word	0x4a742400

08004d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004d68:	f7ff fed0 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004d72:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004d76:	4907      	ldr	r1, [pc, #28]	@ (8004d94 <HAL_RCC_GetHCLKFreq+0x30>)
 8004d78:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004d7a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <HAL_RCC_GetHCLKFreq+0x34>)
 8004d84:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <HAL_RCC_GetHCLKFreq+0x34>)
 8004d88:	681b      	ldr	r3, [r3, #0]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	44020c00 	.word	0x44020c00
 8004d94:	080101d4 	.word	0x080101d4
 8004d98:	20000000 	.word	0x20000000

08004d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004da0:	f7ff ffe0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4904      	ldr	r1, [pc, #16]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	44020c00 	.word	0x44020c00
 8004dc4:	080101e4 	.word	0x080101e4

08004dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004dcc:	f7ff ffca 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4904      	ldr	r1, [pc, #16]	@ (8004df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	44020c00 	.word	0x44020c00
 8004df0:	080101e4 	.word	0x080101e4

08004df4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004df8:	f7ff ffb4 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	0b1b      	lsrs	r3, r3, #12
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4904      	ldr	r1, [pc, #16]	@ (8004e1c <HAL_RCC_GetPCLK3Freq+0x28>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	44020c00 	.word	0x44020c00
 8004e1c:	080101e4 	.word	0x080101e4

08004e20 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e24:	b0d8      	sub	sp, #352	@ 0x160
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004e44:	2500      	movs	r5, #0
 8004e46:	ea54 0305 	orrs.w	r3, r4, r5
 8004e4a:	d00b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004e4c:	4bcd      	ldr	r3, [pc, #820]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e52:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5c:	4ac9      	ldr	r2, [pc, #804]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f002 0801 	and.w	r8, r2, #1
 8004e70:	f04f 0900 	mov.w	r9, #0
 8004e74:	ea58 0309 	orrs.w	r3, r8, r9
 8004e78:	d042      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d823      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ed5 	.word	0x08004ed5
 8004e90:	08004ea5 	.word	0x08004ea5
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004ed5 	.word	0x08004ed5
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004ed5 	.word	0x08004ed5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f004 fee0 	bl	8009c70 <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004eb6:	e00e      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ebc:	3330      	adds	r3, #48	@ 0x30
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 ff6e 	bl	8009da0 <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004eca:	e004      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ede:	4ba9      	ldr	r3, [pc, #676]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ee4:	f023 0107 	bic.w	r1, r3, #7
 8004ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eee:	4aa5      	ldr	r2, [pc, #660]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ef6:	e003      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004efc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f002 0a02 	and.w	sl, r2, #2
 8004f0c:	f04f 0b00 	mov.w	fp, #0
 8004f10:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f14:	f000 8088 	beq.w	8005028 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1e:	2b28      	cmp	r3, #40	@ 0x28
 8004f20:	d868      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004ffd 	.word	0x08004ffd
 8004f2c:	08004ff5 	.word	0x08004ff5
 8004f30:	08004ff5 	.word	0x08004ff5
 8004f34:	08004ff5 	.word	0x08004ff5
 8004f38:	08004ff5 	.word	0x08004ff5
 8004f3c:	08004ff5 	.word	0x08004ff5
 8004f40:	08004ff5 	.word	0x08004ff5
 8004f44:	08004ff5 	.word	0x08004ff5
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08004ff5 	.word	0x08004ff5
 8004f50:	08004ff5 	.word	0x08004ff5
 8004f54:	08004ff5 	.word	0x08004ff5
 8004f58:	08004ff5 	.word	0x08004ff5
 8004f5c:	08004ff5 	.word	0x08004ff5
 8004f60:	08004ff5 	.word	0x08004ff5
 8004f64:	08004ff5 	.word	0x08004ff5
 8004f68:	08004fe1 	.word	0x08004fe1
 8004f6c:	08004ff5 	.word	0x08004ff5
 8004f70:	08004ff5 	.word	0x08004ff5
 8004f74:	08004ff5 	.word	0x08004ff5
 8004f78:	08004ff5 	.word	0x08004ff5
 8004f7c:	08004ff5 	.word	0x08004ff5
 8004f80:	08004ff5 	.word	0x08004ff5
 8004f84:	08004ff5 	.word	0x08004ff5
 8004f88:	08004ffd 	.word	0x08004ffd
 8004f8c:	08004ff5 	.word	0x08004ff5
 8004f90:	08004ff5 	.word	0x08004ff5
 8004f94:	08004ff5 	.word	0x08004ff5
 8004f98:	08004ff5 	.word	0x08004ff5
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	08004ff5 	.word	0x08004ff5
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004ff5 	.word	0x08004ff5
 8004fb0:	08004ff5 	.word	0x08004ff5
 8004fb4:	08004ff5 	.word	0x08004ff5
 8004fb8:	08004ff5 	.word	0x08004ff5
 8004fbc:	08004ff5 	.word	0x08004ff5
 8004fc0:	08004ff5 	.word	0x08004ff5
 8004fc4:	08004ff5 	.word	0x08004ff5
 8004fc8:	08004ffd 	.word	0x08004ffd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f004 fe4c 	bl	8009c70 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004fde:	e00e      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe4:	3330      	adds	r3, #48	@ 0x30
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f004 feda 	bl	8009da0 <RCCEx_PLL3_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004ff2:	e004      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10c      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005006:	4b5f      	ldr	r3, [pc, #380]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800500c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005016:	4a5b      	ldr	r2, [pc, #364]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005018:	430b      	orrs	r3, r1
 800501a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800501e:	e003      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005024:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f002 0304 	and.w	r3, r2, #4
 8005034:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005038:	2300      	movs	r3, #0
 800503a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800503e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005042:	460b      	mov	r3, r1
 8005044:	4313      	orrs	r3, r2
 8005046:	d04e      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800504c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800504e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005052:	d02c      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005054:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005058:	d825      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800505a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800505e:	d028      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005064:	d81f      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005066:	2bc0      	cmp	r3, #192	@ 0xc0
 8005068:	d025      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800506a:	2bc0      	cmp	r3, #192	@ 0xc0
 800506c:	d81b      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800506e:	2b80      	cmp	r3, #128	@ 0x80
 8005070:	d00f      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005072:	2b80      	cmp	r3, #128	@ 0x80
 8005074:	d817      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01f      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d113      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800507e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005082:	3308      	adds	r3, #8
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fdf3 	bl	8009c70 <RCCEx_PLL2_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005090:	e014      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005092:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005096:	3330      	adds	r3, #48	@ 0x30
 8005098:	4618      	mov	r0, r3
 800509a:	f004 fe81 	bl	8009da0 <RCCEx_PLL3_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80050a4:	e00a      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80050ae:	bf00      	nop
 80050b0:	e004      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80050ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10c      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80050c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80050c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050ca:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80050ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050dc:	e003      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	f002 0308 	and.w	r3, r2, #8
 80050f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80050fc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005100:	460b      	mov	r3, r1
 8005102:	4313      	orrs	r3, r2
 8005104:	d056      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800510a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800510c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005110:	d031      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005112:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005116:	d82a      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800511c:	d02d      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005122:	d824      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005124:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005128:	d029      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800512a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800512e:	d81e      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005134:	d011      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513a:	d818      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d023      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005144:	d113      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005146:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800514a:	3308      	adds	r3, #8
 800514c:	4618      	mov	r0, r3
 800514e:	f004 fd8f 	bl	8009c70 <RCCEx_PLL2_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005158:	e017      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800515a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800515e:	3330      	adds	r3, #48	@ 0x30
 8005160:	4618      	mov	r0, r3
 8005162:	f004 fe1d 	bl	8009da0 <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800516c:	e00d      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005174:	e009      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005176:	bf00      	nop
 8005178:	e007      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800517a:	bf00      	nop
 800517c:	e005      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800517e:	bf00      	nop
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005182:	bf00      	nop
 8005184:	44020c00 	.word	0x44020c00
        break;
 8005188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005192:	4bbb      	ldr	r3, [pc, #748]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005198:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800519c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051a2:	4ab7      	ldr	r2, [pc, #732]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80051a4:	430b      	orrs	r3, r1
 80051a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f002 0310 	and.w	r3, r2, #16
 80051c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80051c4:	2300      	movs	r3, #0
 80051c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80051ca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d053      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80051d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80051de:	d031      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80051e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80051e4:	d82a      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ea:	d02d      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80051ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f0:	d824      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051f6:	d029      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80051f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051fc:	d81e      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005202:	d011      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005208:	d818      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d020      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005212:	d113      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005218:	3308      	adds	r3, #8
 800521a:	4618      	mov	r0, r3
 800521c:	f004 fd28 	bl	8009c70 <RCCEx_PLL2_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005226:	e014      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522c:	3330      	adds	r3, #48	@ 0x30
 800522e:	4618      	mov	r0, r3
 8005230:	f004 fdb6 	bl	8009da0 <RCCEx_PLL3_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800523a:	e00a      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005242:	e006      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005244:	bf00      	nop
 8005246:	e004      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005248:	bf00      	nop
 800524a:	e002      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800525a:	4b89      	ldr	r3, [pc, #548]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800525c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005260:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800526a:	4a85      	ldr	r2, [pc, #532]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800526c:	430b      	orrs	r3, r1
 800526e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005278:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800527c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f002 0320 	and.w	r3, r2, #32
 8005288:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800528c:	2300      	movs	r3, #0
 800528e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005292:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	d053      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800529c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80052a6:	d031      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80052a8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80052ac:	d82a      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80052ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b2:	d02d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80052b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b8:	d824      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80052ba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80052be:	d029      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80052c0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80052c4:	d81e      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ca:	d011      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d0:	d818      	bhi.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d020      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052da:	d113      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052e0:	3308      	adds	r3, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f004 fcc4 	bl	8009c70 <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80052ee:	e014      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052f4:	3330      	adds	r3, #48	@ 0x30
 80052f6:	4618      	mov	r0, r3
 80052f8:	f004 fd52 	bl	8009da0 <RCCEx_PLL3_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005302:	e00a      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800530a:	e006      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800530c:	bf00      	nop
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10c      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005322:	4b57      	ldr	r3, [pc, #348]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005328:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800532c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	4a53      	ldr	r2, [pc, #332]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005334:	430b      	orrs	r3, r1
 8005336:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005340:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005350:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800535a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d053      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800536e:	d031      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005370:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005374:	d82a      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800537a:	d02d      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005380:	d824      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005382:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005386:	d029      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005388:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800538c:	d81e      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800538e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005392:	d011      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005394:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005398:	d818      	bhi.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d020      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800539e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053a2:	d113      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053a8:	3308      	adds	r3, #8
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 fc60 	bl	8009c70 <RCCEx_PLL2_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80053b6:	e014      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053bc:	3330      	adds	r3, #48	@ 0x30
 80053be:	4618      	mov	r0, r3
 80053c0:	f004 fcee 	bl	8009da0 <RCCEx_PLL3_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80053ca:	e00a      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053d2:	e006      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80053d4:	bf00      	nop
 80053d6:	e004      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80053d8:	bf00      	nop
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80053e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80053ea:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80053ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053f0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80053f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fa:	4a21      	ldr	r2, [pc, #132]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005408:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800540c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005418:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800541c:	2300      	movs	r3, #0
 800541e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005422:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005426:	460b      	mov	r3, r1
 8005428:	4313      	orrs	r3, r2
 800542a:	d055      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800542c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005432:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005436:	d033      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005438:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800543c:	d82c      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800543e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005442:	d02f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005444:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005448:	d826      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800544a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800544e:	d02b      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005450:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005454:	d820      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800545a:	d013      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800545c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005460:	d81a      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d022      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800546a:	d115      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800546c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005470:	3308      	adds	r3, #8
 8005472:	4618      	mov	r0, r3
 8005474:	f004 fbfc 	bl	8009c70 <RCCEx_PLL2_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800547e:	e016      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005480:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005488:	3330      	adds	r3, #48	@ 0x30
 800548a:	4618      	mov	r0, r3
 800548c:	f004 fc88 	bl	8009da0 <RCCEx_PLL3_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005496:	e00a      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800549e:	e006      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80054a0:	bf00      	nop
 80054a2:	e004      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80054a4:	bf00      	nop
 80054a6:	e002      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80054ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80054b6:	4bbb      	ldr	r3, [pc, #748]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80054b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054bc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80054c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c6:	4ab7      	ldr	r2, [pc, #732]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80054ce:	e003      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80054d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80054e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80054ee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d053      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80054f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005502:	d031      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005504:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005508:	d82a      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800550a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800550e:	d02d      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005514:	d824      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005516:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800551a:	d029      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800551c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005520:	d81e      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005526:	d011      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800552c:	d818      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005536:	d113      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800553c:	3308      	adds	r3, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f004 fb96 	bl	8009c70 <RCCEx_PLL2_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800554a:	e014      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800554c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005550:	3330      	adds	r3, #48	@ 0x30
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fc24 	bl	8009da0 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800555e:	e00a      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005566:	e006      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005568:	bf00      	nop
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800557e:	4b89      	ldr	r3, [pc, #548]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005584:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005588:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800558c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800558e:	4a85      	ldr	r2, [pc, #532]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005590:	430b      	orrs	r3, r1
 8005592:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800559c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80055a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80055ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80055b6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d055      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80055c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80055cc:	d031      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80055ce:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80055d2:	d82a      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055d8:	d02d      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80055da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055de:	d824      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80055e0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80055e4:	d029      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80055e6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80055ea:	d81e      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80055ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055f0:	d011      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80055f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055f6:	d818      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005600:	d113      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005606:	3308      	adds	r3, #8
 8005608:	4618      	mov	r0, r3
 800560a:	f004 fb31 	bl	8009c70 <RCCEx_PLL2_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005614:	e014      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800561a:	3330      	adds	r3, #48	@ 0x30
 800561c:	4618      	mov	r0, r3
 800561e:	f004 fbbf 	bl	8009da0 <RCCEx_PLL3_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005628:	e00a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005632:	bf00      	nop
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10d      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005648:	4b56      	ldr	r3, [pc, #344]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800564a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800564e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005652:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800565a:	4a52      	ldr	r2, [pc, #328]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800565c:	430b      	orrs	r3, r1
 800565e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005662:	e003      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005668:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800566c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005678:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005682:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	d044      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800568c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005694:	2b05      	cmp	r3, #5
 8005696:	d823      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056e9 	.word	0x080056e9
 80056a4:	080056b9 	.word	0x080056b9
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056e9 	.word	0x080056e9
 80056b0:	080056e9 	.word	0x080056e9
 80056b4:	080056e9 	.word	0x080056e9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056bc:	3308      	adds	r3, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f004 fad6 	bl	8009c70 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80056ca:	e00e      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056d0:	3330      	adds	r3, #48	@ 0x30
 80056d2:	4618      	mov	r0, r3
 80056d4:	f004 fb64 	bl	8009da0 <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80056de:	e004      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056e6:	e000      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80056e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80056f2:	4b2c      	ldr	r3, [pc, #176]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056f8:	f023 0107 	bic.w	r1, r3, #7
 80056fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005704:	4a27      	ldr	r2, [pc, #156]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005706:	430b      	orrs	r3, r1
 8005708:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800570c:	e003      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005712:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005722:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005726:	2300      	movs	r3, #0
 8005728:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800572c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d04f      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005736:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	2b50      	cmp	r3, #80	@ 0x50
 8005740:	d029      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005742:	2b50      	cmp	r3, #80	@ 0x50
 8005744:	d823      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005746:	2b40      	cmp	r3, #64	@ 0x40
 8005748:	d027      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	d81f      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800574e:	2b30      	cmp	r3, #48	@ 0x30
 8005750:	d025      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005752:	2b30      	cmp	r3, #48	@ 0x30
 8005754:	d81b      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005756:	2b20      	cmp	r3, #32
 8005758:	d00f      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800575a:	2b20      	cmp	r3, #32
 800575c:	d817      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d022      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005762:	2b10      	cmp	r3, #16
 8005764:	d113      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005766:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800576a:	3308      	adds	r3, #8
 800576c:	4618      	mov	r0, r3
 800576e:	f004 fa7f 	bl	8009c70 <RCCEx_PLL2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005778:	e017      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800577a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800577e:	3330      	adds	r3, #48	@ 0x30
 8005780:	4618      	mov	r0, r3
 8005782:	f004 fb0d 	bl	8009da0 <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800578c:	e00d      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005794:	e009      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005796:	bf00      	nop
 8005798:	e007      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800579a:	bf00      	nop
 800579c:	e005      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800579e:	bf00      	nop
 80057a0:	e003      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80057a2:	bf00      	nop
 80057a4:	44020c00 	.word	0x44020c00
        break;
 80057a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10d      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80057b2:	4baf      	ldr	r3, [pc, #700]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80057b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80057b8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80057bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	4aaa      	ldr	r2, [pc, #680]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80057e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057e6:	2300      	movs	r3, #0
 80057e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d055      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80057f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005802:	d031      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005804:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005808:	d82a      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800580a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800580e:	d02d      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005814:	d824      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800581a:	d029      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800581c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005820:	d81e      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005826:	d011      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800582c:	d818      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d020      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005836:	d113      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800583c:	3308      	adds	r3, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f004 fa16 	bl	8009c70 <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800584a:	e014      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800584c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005850:	3330      	adds	r3, #48	@ 0x30
 8005852:	4618      	mov	r0, r3
 8005854:	f004 faa4 	bl	8009da0 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800585e:	e00a      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005868:	bf00      	nop
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10d      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800587e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005884:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005890:	4a77      	ldr	r2, [pc, #476]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005892:	430b      	orrs	r3, r1
 8005894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005898:	e003      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800589e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80058bc:	460b      	mov	r3, r1
 80058be:	4313      	orrs	r3, r2
 80058c0:	d03d      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80058c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058ce:	d01b      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80058d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058d4:	d814      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80058d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058da:	d017      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80058dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058e0:	d80e      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80058e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ea:	d109      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f0:	3330      	adds	r3, #48	@ 0x30
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fa54 	bl	8009da0 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80058fe:	e008      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005906:	e004      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005912:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10d      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800591a:	4b55      	ldr	r3, [pc, #340]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800591c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005920:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592c:	4a50      	ldr	r2, [pc, #320]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800592e:	430b      	orrs	r3, r1
 8005930:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005934:	e003      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005936:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800593a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800593e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800594a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800594e:	2300      	movs	r3, #0
 8005950:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005954:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005958:	460b      	mov	r3, r1
 800595a:	4313      	orrs	r3, r2
 800595c:	d03d      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800595e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005966:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800596a:	d01b      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800596c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005970:	d814      	bhi.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005972:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005976:	d017      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005978:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800597c:	d80e      	bhi.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d014      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005986:	d109      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598c:	3330      	adds	r3, #48	@ 0x30
 800598e:	4618      	mov	r0, r3
 8005990:	f004 fa06 	bl	8009da0 <RCCEx_PLL3_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059a2:	e004      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80059a4:	bf00      	nop
 80059a6:	e002      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80059ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80059b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059bc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80059c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c8:	4a29      	ldr	r2, [pc, #164]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059ea:	2300      	movs	r3, #0
 80059ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059f4:	460b      	mov	r3, r1
 80059f6:	4313      	orrs	r3, r2
 80059f8:	d040      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80059fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a06:	d01b      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005a08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a0c:	d814      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a12:	d017      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005a14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a18:	d80e      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d014      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a22:	d109      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a28:	3330      	adds	r3, #48	@ 0x30
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f004 f9b8 	bl	8009da0 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005a36:	e008      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a3e:	e004      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005a40:	bf00      	nop
 8005a42:	e002      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005a44:	bf00      	nop
 8005a46:	e000      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d110      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a58:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a64:	4a02      	ldr	r2, [pc, #8]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a66:	430b      	orrs	r3, r1
 8005a68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005a6e:	bf00      	nop
 8005a70:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	2100      	movs	r1, #0
 8005a86:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	d03d      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005aa8:	d01b      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005aaa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005aae:	d814      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab4:	d017      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005ab6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aba:	d80e      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d014      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ac4:	d109      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aca:	3330      	adds	r3, #48	@ 0x30
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 f967 	bl	8009da0 <RCCEx_PLL3_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005ad8:	e008      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ae0:	e004      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005ae2:	bf00      	nop
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005af4:	4bbe      	ldr	r3, [pc, #760]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005af6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005afa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b06:	4aba      	ldr	r2, [pc, #744]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b0e:	e003      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005b32:	460b      	mov	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	d035      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b44:	d015      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005b46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b4a:	d80e      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b54:	d109      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b5a:	3330      	adds	r3, #48	@ 0x30
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f004 f91f 	bl	8009da0 <RCCEx_PLL3_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005b68:	e006      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b70:	e002      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10d      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005b80:	4b9b      	ldr	r3, [pc, #620]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b86:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b92:	4a97      	ldr	r2, [pc, #604]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b94:	430b      	orrs	r3, r1
 8005b96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ba0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	2100      	movs	r1, #0
 8005bae:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4a89      	ldr	r2, [pc, #548]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005bca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bce:	61d3      	str	r3, [r2, #28]
 8005bd0:	4b87      	ldr	r3, [pc, #540]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005bd2:	69d9      	ldr	r1, [r3, #28]
 8005bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005bdc:	4a84      	ldr	r2, [pc, #528]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005bde:	430b      	orrs	r3, r1
 8005be0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005bee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005bf8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	d055      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c0a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005c0e:	d031      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005c10:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005c14:	d82a      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	d02d      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c20:	d824      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c26:	d029      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c2c:	d81e      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c32:	d011      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c38:	d818      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c42:	d113      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c48:	3308      	adds	r3, #8
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f004 f810 	bl	8009c70 <RCCEx_PLL2_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005c56:	e014      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c5c:	3330      	adds	r3, #48	@ 0x30
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f004 f89e 	bl	8009da0 <RCCEx_PLL3_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005c6a:	e00a      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c72:	e006      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005c74:	bf00      	nop
 8005c76:	e004      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005c78:	bf00      	nop
 8005c7a:	e002      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005c7c:	bf00      	nop
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005c8a:	4b59      	ldr	r3, [pc, #356]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c90:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c9c:	4a54      	ldr	r2, [pc, #336]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005caa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d055      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cd6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005cda:	d031      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005cdc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ce0:	d82a      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce6:	d02d      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cec:	d824      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005cee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cf2:	d029      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005cf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cf8:	d81e      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfe:	d011      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d04:	d818      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0e:	d113      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d14:	3308      	adds	r3, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f003 ffaa 	bl	8009c70 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005d22:	e014      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d28:	3330      	adds	r3, #48	@ 0x30
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f004 f838 	bl	8009da0 <RCCEx_PLL3_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005d36:	e00a      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d3e:	e006      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005d40:	bf00      	nop
 8005d42:	e004      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005d44:	bf00      	nop
 8005d46:	e002      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005d48:	bf00      	nop
 8005d4a:	e000      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005d56:	4b26      	ldr	r3, [pc, #152]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d68:	4a21      	ldr	r2, [pc, #132]	@ (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d70:	e003      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	2100      	movs	r1, #0
 8005d84:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d94:	460b      	mov	r3, r1
 8005d96:	4313      	orrs	r3, r2
 8005d98:	d057      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005d9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da6:	d033      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dac:	d82c      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005db2:	d02f      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005db4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005db8:	d826      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dbe:	d02b      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005dc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dc4:	d820      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dca:	d013      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd0:	d81a      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d022      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dda:	d115      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de0:	3308      	adds	r3, #8
 8005de2:	4618      	mov	r0, r3
 8005de4:	f003 ff44 	bl	8009c70 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005dee:	e016      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005df0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df8:	3330      	adds	r3, #48	@ 0x30
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f003 ffd0 	bl	8009da0 <RCCEx_PLL3_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005e06:	e00a      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e0e:	e006      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005e10:	bf00      	nop
 8005e12:	e004      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005e14:	bf00      	nop
 8005e16:	e002      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005e18:	bf00      	nop
 8005e1a:	e000      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10d      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005e26:	4bbb      	ldr	r3, [pc, #748]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e38:	4ab6      	ldr	r2, [pc, #728]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	2100      	movs	r1, #0
 8005e54:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d055      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e72:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005e76:	d031      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005e78:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005e7c:	d82a      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e82:	d02d      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e88:	d824      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005e8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e8e:	d029      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005e90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e94:	d81e      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005e96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e9a:	d011      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005e9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ea0:	d818      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d020      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eaa:	d113      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f003 fedc 	bl	8009c70 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005ebe:	e014      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ec4:	3330      	adds	r3, #48	@ 0x30
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f003 ff6a 	bl	8009da0 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005ed2:	e00a      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eda:	e006      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005edc:	bf00      	nop
 8005ede:	e004      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005ee0:	bf00      	nop
 8005ee2:	e002      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005ef2:	4b88      	ldr	r3, [pc, #544]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005ef4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ef8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f04:	4a83      	ldr	r2, [pc, #524]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f06:	430b      	orrs	r3, r1
 8005f08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005f0c:	e003      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	2100      	movs	r1, #0
 8005f20:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f2c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f30:	460b      	mov	r3, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	d055      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005f42:	d031      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005f44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005f48:	d82a      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005f4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f4e:	d02d      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005f50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f54:	d824      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005f56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f5a:	d029      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f60:	d81e      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005f62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f66:	d011      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f6c:	d818      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f76:	d113      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f003 fe76 	bl	8009c70 <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005f8a:	e014      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f90:	3330      	adds	r3, #48	@ 0x30
 8005f92:	4618      	mov	r0, r3
 8005f94:	f003 ff04 	bl	8009da0 <RCCEx_PLL3_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fa6:	e006      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005fa8:	bf00      	nop
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005fac:	bf00      	nop
 8005fae:	e002      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10d      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005fbe:	4b55      	ldr	r3, [pc, #340]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005fc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fc4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fd0:	4a50      	ldr	r2, [pc, #320]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	2100      	movs	r1, #0
 8005fec:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ff8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	d055      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006006:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800600a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800600e:	d031      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006014:	d82a      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601a:	d02d      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006020:	d824      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006022:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006026:	d029      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006028:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800602c:	d81e      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800602e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006032:	d011      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006038:	d818      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d020      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006042:	d113      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006048:	3308      	adds	r3, #8
 800604a:	4618      	mov	r0, r3
 800604c:	f003 fe10 	bl	8009c70 <RCCEx_PLL2_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006056:	e014      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800605c:	3330      	adds	r3, #48	@ 0x30
 800605e:	4618      	mov	r0, r3
 8006060:	f003 fe9e 	bl	8009da0 <RCCEx_PLL3_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800606a:	e00a      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006072:	e006      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006074:	bf00      	nop
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10d      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800608a:	4b22      	ldr	r3, [pc, #136]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800608c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006090:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006098:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800609c:	4a1d      	ldr	r2, [pc, #116]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800609e:	430b      	orrs	r3, r1
 80060a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80060a4:	e003      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80060ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060c8:	460b      	mov	r3, r1
 80060ca:	4313      	orrs	r3, r2
 80060cc:	d055      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80060ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80060d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060da:	d035      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80060dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060e0:	d82e      	bhi.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80060e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060e6:	d031      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80060e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ec:	d828      	bhi.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80060ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f2:	d01b      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80060f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f8:	d822      	bhi.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80060fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006102:	d009      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006104:	e01c      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006106:	4b03      	ldr	r3, [pc, #12]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	4a02      	ldr	r2, [pc, #8]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800610c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006110:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006112:	e01c      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006114:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800611c:	3308      	adds	r3, #8
 800611e:	4618      	mov	r0, r3
 8006120:	f003 fda6 	bl	8009c70 <RCCEx_PLL2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800612a:	e010      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800612c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006130:	3330      	adds	r3, #48	@ 0x30
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fe34 	bl	8009da0 <RCCEx_PLL3_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800613e:	e006      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006146:	e002      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006148:	bf00      	nop
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800614c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10d      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006156:	4bc3      	ldr	r3, [pc, #780]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800615c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006168:	4abe      	ldr	r2, [pc, #760]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800616a:	430b      	orrs	r3, r1
 800616c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006176:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800617a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006186:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006190:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d051      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800619a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800619e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80061a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061a6:	d033      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80061a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061ac:	d82c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80061ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80061b2:	d02d      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80061b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80061b8:	d826      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061be:	d019      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80061c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c4:	d820      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80061ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80061ce:	d007      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80061d0:	e01a      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d2:	4ba4      	ldr	r3, [pc, #656]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80061d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d6:	4aa3      	ldr	r2, [pc, #652]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80061d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80061de:	e018      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e4:	3308      	adds	r3, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f003 fd42 	bl	8009c70 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80061f2:	e00e      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f8:	3330      	adds	r3, #48	@ 0x30
 80061fa:	4618      	mov	r0, r3
 80061fc:	f003 fdd0 	bl	8009da0 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006206:	e004      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800620e:	e000      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006212:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800621a:	4b92      	ldr	r3, [pc, #584]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800621c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006220:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800622c:	4a8d      	ldr	r2, [pc, #564]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800622e:	430b      	orrs	r3, r1
 8006230:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006234:	e003      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800623a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800623e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800624a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800624c:	2300      	movs	r3, #0
 800624e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006250:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006254:	460b      	mov	r3, r1
 8006256:	4313      	orrs	r3, r2
 8006258:	d032      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800625a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006262:	2b05      	cmp	r3, #5
 8006264:	d80f      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006266:	2b03      	cmp	r3, #3
 8006268:	d211      	bcs.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800626a:	2b01      	cmp	r3, #1
 800626c:	d911      	bls.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800626e:	2b02      	cmp	r3, #2
 8006270:	d109      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006276:	3308      	adds	r3, #8
 8006278:	4618      	mov	r0, r3
 800627a:	f003 fcf9 	bl	8009c70 <RCCEx_PLL2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800628c:	e002      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006294:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10d      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800629c:	4b71      	ldr	r3, [pc, #452]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800629e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062a2:	f023 0107 	bic.w	r1, r3, #7
 80062a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80062ae:	4a6d      	ldr	r2, [pc, #436]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80062c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	2100      	movs	r1, #0
 80062ca:	6739      	str	r1, [r7, #112]	@ 0x70
 80062cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80062d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d024      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80062dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d005      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062f2:	e002      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80062f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10d      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006302:	4b58      	ldr	r3, [pc, #352]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006308:	f023 0108 	bic.w	r1, r3, #8
 800630c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006314:	4a53      	ldr	r2, [pc, #332]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006316:	430b      	orrs	r3, r1
 8006318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006322:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006326:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006332:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006334:	2300      	movs	r3, #0
 8006336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006338:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	f000 80b9 	beq.w	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006344:	4b48      	ldr	r3, [pc, #288]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	4a47      	ldr	r2, [pc, #284]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006350:	f7fb fc04 	bl	8001b5c <HAL_GetTick>
 8006354:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006358:	e00b      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635a:	f7fb fbff 	bl	8001b5c <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d903      	bls.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006370:	e005      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006372:	4b3d      	ldr	r3, [pc, #244]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0ed      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800637e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 8093 	bne.w	80064ae <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006388:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800638a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800638e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006392:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006396:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d023      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800639e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80063a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01b      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063bc:	4b29      	ldr	r3, [pc, #164]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063c2:	4a28      	ldr	r2, [pc, #160]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063cc:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063d2:	4a24      	ldr	r2, [pc, #144]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063dc:	4a21      	ldr	r2, [pc, #132]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80063e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d019      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fb fbb3 	bl	8001b5c <HAL_GetTick>
 80063f6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063fa:	e00d      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063fc:	f7fb fbae 	bl	8001b5c <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	f241 3388 	movw	r3, #5000	@ 0x1388
 800640c:	429a      	cmp	r2, r3
 800640e:	d903      	bls.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006416:	e006      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006418:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800641a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0ea      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006426:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800642a:	2b00      	cmp	r3, #0
 800642c:	d13a      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800642e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006432:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800643a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800643e:	d115      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006440:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800644c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006456:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800645a:	4a02      	ldr	r2, [pc, #8]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800645c:	430b      	orrs	r3, r1
 800645e:	61d3      	str	r3, [r2, #28]
 8006460:	e00a      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006462:	bf00      	nop
 8006464:	44020c00 	.word	0x44020c00
 8006468:	44020800 	.word	0x44020800
 800646c:	4b9f      	ldr	r3, [pc, #636]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	4a9e      	ldr	r2, [pc, #632]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006472:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006476:	61d3      	str	r3, [r2, #28]
 8006478:	4b9c      	ldr	r3, [pc, #624]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800647a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800647e:	4a9b      	ldr	r2, [pc, #620]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006484:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006488:	4b98      	ldr	r3, [pc, #608]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800648a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800648e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006492:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649a:	4a94      	ldr	r2, [pc, #592]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800649c:	430b      	orrs	r3, r1
 800649e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064a2:	e008      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80064ac:	e003      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80064c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80064c4:	2300      	movs	r3, #0
 80064c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80064c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d035      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80064d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80064da:	2b30      	cmp	r3, #48	@ 0x30
 80064dc:	d014      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80064de:	2b30      	cmp	r3, #48	@ 0x30
 80064e0:	d80e      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d012      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d80a      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d010      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f2:	4b7e      	ldr	r3, [pc, #504]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80064f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f6:	4a7d      	ldr	r2, [pc, #500]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80064fe:	e008      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006506:	e004      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006508:	bf00      	nop
 800650a:	e002      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006512:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800651a:	4b74      	ldr	r3, [pc, #464]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800651c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006520:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006528:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800652c:	4a6f      	ldr	r2, [pc, #444]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800652e:	430b      	orrs	r3, r1
 8006530:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006534:	e003      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006536:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800653a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800653e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800654a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800654c:	2300      	movs	r3, #0
 800654e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006550:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	d033      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800655a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d007      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800656a:	e010      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4b5f      	ldr	r3, [pc, #380]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	4a5e      	ldr	r2, [pc, #376]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006576:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006578:	e00d      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800657a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800657e:	3308      	adds	r3, #8
 8006580:	4618      	mov	r0, r3
 8006582:	f003 fb75 	bl	8009c70 <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006596:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800659e:	4b53      	ldr	r3, [pc, #332]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065a4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80065a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80065b0:	4a4e      	ldr	r2, [pc, #312]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80065c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80065ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80065d0:	2300      	movs	r3, #0
 80065d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065d4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d033      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80065de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	d007      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80065ee:	e010      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4b3e      	ldr	r3, [pc, #248]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	4a3d      	ldr	r2, [pc, #244]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80065fc:	e00d      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006602:	3308      	adds	r3, #8
 8006604:	4618      	mov	r0, r3
 8006606:	f003 fb33 	bl	8009c70 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006622:	4b32      	ldr	r3, [pc, #200]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006624:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006628:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800662c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006630:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006634:	4a2d      	ldr	r2, [pc, #180]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006636:	430b      	orrs	r3, r1
 8006638:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006642:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006646:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006654:	2300      	movs	r3, #0
 8006656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006658:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d04a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006662:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800666a:	2b04      	cmp	r3, #4
 800666c:	d827      	bhi.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800666e:	a201      	add	r2, pc, #4	@ (adr r2, 8006674 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006689 	.word	0x08006689
 8006678:	08006697 	.word	0x08006697
 800667c:	080066ab 	.word	0x080066ab
 8006680:	080066c7 	.word	0x080066c7
 8006684:	080066c7 	.word	0x080066c7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006688:	4b18      	ldr	r3, [pc, #96]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	4a17      	ldr	r2, [pc, #92]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800668e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006692:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006694:	e018      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800669a:	3308      	adds	r3, #8
 800669c:	4618      	mov	r0, r3
 800669e:	f003 fae7 	bl	8009c70 <RCCEx_PLL2_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80066a8:	e00e      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066ae:	3330      	adds	r3, #48	@ 0x30
 80066b0:	4618      	mov	r0, r3
 80066b2:	f003 fb75 	bl	8009da0 <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80066bc:	e004      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066c4:	e000      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80066c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10f      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80066d0:	4b06      	ldr	r3, [pc, #24]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066d6:	f023 0107 	bic.w	r1, r3, #7
 80066da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066e2:	4a02      	ldr	r2, [pc, #8]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066ea:	e005      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80066ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80066f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006704:	643b      	str	r3, [r7, #64]	@ 0x40
 8006706:	2300      	movs	r3, #0
 8006708:	647b      	str	r3, [r7, #68]	@ 0x44
 800670a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800670e:	460b      	mov	r3, r1
 8006710:	4313      	orrs	r3, r2
 8006712:	f000 8081 	beq.w	8006818 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800671a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800671e:	2b20      	cmp	r3, #32
 8006720:	d85f      	bhi.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006722:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	080067ad 	.word	0x080067ad
 800672c:	080067e3 	.word	0x080067e3
 8006730:	080067e3 	.word	0x080067e3
 8006734:	080067e3 	.word	0x080067e3
 8006738:	080067e3 	.word	0x080067e3
 800673c:	080067e3 	.word	0x080067e3
 8006740:	080067e3 	.word	0x080067e3
 8006744:	080067e3 	.word	0x080067e3
 8006748:	080067bb 	.word	0x080067bb
 800674c:	080067e3 	.word	0x080067e3
 8006750:	080067e3 	.word	0x080067e3
 8006754:	080067e3 	.word	0x080067e3
 8006758:	080067e3 	.word	0x080067e3
 800675c:	080067e3 	.word	0x080067e3
 8006760:	080067e3 	.word	0x080067e3
 8006764:	080067e3 	.word	0x080067e3
 8006768:	080067cf 	.word	0x080067cf
 800676c:	080067e3 	.word	0x080067e3
 8006770:	080067e3 	.word	0x080067e3
 8006774:	080067e3 	.word	0x080067e3
 8006778:	080067e3 	.word	0x080067e3
 800677c:	080067e3 	.word	0x080067e3
 8006780:	080067e3 	.word	0x080067e3
 8006784:	080067e3 	.word	0x080067e3
 8006788:	080067eb 	.word	0x080067eb
 800678c:	080067e3 	.word	0x080067e3
 8006790:	080067e3 	.word	0x080067e3
 8006794:	080067e3 	.word	0x080067e3
 8006798:	080067e3 	.word	0x080067e3
 800679c:	080067e3 	.word	0x080067e3
 80067a0:	080067e3 	.word	0x080067e3
 80067a4:	080067e3 	.word	0x080067e3
 80067a8:	080067eb 	.word	0x080067eb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ac:	4bab      	ldr	r3, [pc, #684]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	4aaa      	ldr	r2, [pc, #680]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80067b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80067b8:	e018      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067be:	3308      	adds	r3, #8
 80067c0:	4618      	mov	r0, r3
 80067c2:	f003 fa55 	bl	8009c70 <RCCEx_PLL2_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80067cc:	e00e      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d2:	3330      	adds	r3, #48	@ 0x30
 80067d4:	4618      	mov	r0, r3
 80067d6:	f003 fae3 	bl	8009da0 <RCCEx_PLL3_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80067e0:	e004      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80067ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80067f4:	4b99      	ldr	r3, [pc, #612]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80067f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80067fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006806:	4a95      	ldr	r2, [pc, #596]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006808:	430b      	orrs	r3, r1
 800680a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800680e:	e003      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006814:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800682a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d04e      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800683c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006840:	d02e      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006846:	d827      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006848:	2bc0      	cmp	r3, #192	@ 0xc0
 800684a:	d02b      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800684c:	2bc0      	cmp	r3, #192	@ 0xc0
 800684e:	d823      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006850:	2b80      	cmp	r3, #128	@ 0x80
 8006852:	d017      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006854:	2b80      	cmp	r3, #128	@ 0x80
 8006856:	d81f      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	d007      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006860:	e01a      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006862:	4b7e      	ldr	r3, [pc, #504]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	4a7d      	ldr	r2, [pc, #500]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800686c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800686e:	e01a      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006874:	3308      	adds	r3, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f003 f9fa 	bl	8009c70 <RCCEx_PLL2_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006882:	e010      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006884:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006888:	3330      	adds	r3, #48	@ 0x30
 800688a:	4618      	mov	r0, r3
 800688c:	f003 fa88 	bl	8009da0 <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006896:	e006      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800689e:	e002      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80068a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10d      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80068ae:	4b6b      	ldr	r3, [pc, #428]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80068b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068b4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80068b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068c0:	4a66      	ldr	r2, [pc, #408]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80068d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068de:	633b      	str	r3, [r7, #48]	@ 0x30
 80068e0:	2300      	movs	r3, #0
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80068e8:	460b      	mov	r3, r1
 80068ea:	4313      	orrs	r3, r2
 80068ec:	d055      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80068ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80068f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80068fa:	d031      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80068fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006900:	d82a      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006906:	d02d      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800690c:	d824      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800690e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006912:	d029      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006914:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006918:	d81e      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691e:	d011      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006924:	d818      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d020      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800692a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800692e:	d113      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006934:	3308      	adds	r3, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f003 f99a 	bl	8009c70 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006942:	e014      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006948:	3330      	adds	r3, #48	@ 0x30
 800694a:	4618      	mov	r0, r3
 800694c:	f003 fa28 	bl	8009da0 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006956:	e00a      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800695e:	e006      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006960:	bf00      	nop
 8006962:	e004      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006964:	bf00      	nop
 8006966:	e002      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006968:	bf00      	nop
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006976:	4b39      	ldr	r3, [pc, #228]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800697c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006984:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006988:	4a34      	ldr	r2, [pc, #208]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800698a:	430b      	orrs	r3, r1
 800698c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006996:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800699a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069a8:	2300      	movs	r3, #0
 80069aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d058      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80069b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069c2:	d031      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80069c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069c8:	d82a      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80069ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ce:	d02d      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80069d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069d4:	d824      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80069d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069da:	d029      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80069dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069e0:	d81e      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80069e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e6:	d011      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80069e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ec:	d818      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d020      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f6:	d113      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fc:	3308      	adds	r3, #8
 80069fe:	4618      	mov	r0, r3
 8006a00:	f003 f936 	bl	8009c70 <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e014      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a10:	3330      	adds	r3, #48	@ 0x30
 8006a12:	4618      	mov	r0, r3
 8006a14:	f003 f9c4 	bl	8009da0 <RCCEx_PLL3_Config>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a26:	e006      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006a2c:	bf00      	nop
 8006a2e:	e002      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006a30:	bf00      	nop
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d110      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a44:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a50:	4902      	ldr	r1, [pc, #8]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006a58:	e006      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006a5a:	bf00      	nop
 8006a5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a64:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	2100      	movs	r1, #0
 8006a72:	6239      	str	r1, [r7, #32]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d055      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a8c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006a90:	d031      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006a92:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006a96:	d82a      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a9c:	d02d      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa2:	d824      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006aa4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006aa8:	d029      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006aaa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006aae:	d81e      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab4:	d011      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aba:	d818      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d020      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac4:	d113      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aca:	3308      	adds	r3, #8
 8006acc:	4618      	mov	r0, r3
 8006ace:	f003 f8cf 	bl	8009c70 <RCCEx_PLL2_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e014      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ade:	3330      	adds	r3, #48	@ 0x30
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f003 f95d 	bl	8009da0 <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006aec:	e00a      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006af4:	e006      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006af6:	bf00      	nop
 8006af8:	e004      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006afa:	bf00      	nop
 8006afc:	e002      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10d      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006b0c:	4b88      	ldr	r3, [pc, #544]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b12:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b1e:	4984      	ldr	r1, [pc, #528]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006b26:	e003      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	61b9      	str	r1, [r7, #24]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d03d      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d81c      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006b58:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b9b 	.word	0x08006b9b
 8006b64:	08006b71 	.word	0x08006b71
 8006b68:	08006b7f 	.word	0x08006b7f
 8006b6c:	08006b9b 	.word	0x08006b9b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b70:	4b6f      	ldr	r3, [pc, #444]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b74:	4a6e      	ldr	r2, [pc, #440]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006b7c:	e00e      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b82:	3308      	adds	r3, #8
 8006b84:	4618      	mov	r0, r3
 8006b86:	f003 f873 	bl	8009c70 <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006b90:	e004      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b98:	e000      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ba4:	4b62      	ldr	r3, [pc, #392]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ba6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006baa:	f023 0203 	bic.w	r2, r3, #3
 8006bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bb6:	495e      	ldr	r1, [pc, #376]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6139      	str	r1, [r7, #16]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bde:	460b      	mov	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d03a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006be8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf0:	d00e      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf6:	d815      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d017      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c00:	d110      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c02:	4b4b      	ldr	r3, [pc, #300]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c06:	4a4a      	ldr	r2, [pc, #296]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c0c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006c0e:	e00e      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c14:	3308      	adds	r3, #8
 8006c16:	4618      	mov	r0, r3
 8006c18:	f003 f82a 	bl	8009c70 <RCCEx_PLL2_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006c36:	4b3e      	ldr	r3, [pc, #248]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c48:	4939      	ldr	r1, [pc, #228]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	2100      	movs	r1, #0
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d038      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006c7e:	2b30      	cmp	r3, #48	@ 0x30
 8006c80:	d01b      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006c82:	2b30      	cmp	r3, #48	@ 0x30
 8006c84:	d815      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d002      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d007      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006c8e:	e010      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b27      	ldr	r3, [pc, #156]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	4a26      	ldr	r2, [pc, #152]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c9c:	e00e      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca2:	3330      	adds	r3, #48	@ 0x30
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f003 f87b 	bl	8009da0 <RCCEx_PLL3_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006cb0:	e004      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cb8:	e000      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006cd6:	4916      	ldr	r1, [pc, #88]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006cde:	e003      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ce4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6039      	str	r1, [r7, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d00c      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006d04:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006d16:	4906      	ldr	r1, [pc, #24]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006d1e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d2e:	bf00      	nop
 8006d30:	44020c00 	.word	0x44020c00

08006d34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b08b      	sub	sp, #44	@ 0x2c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006d3c:	4bae      	ldr	r3, [pc, #696]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d44:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006d46:	4bac      	ldr	r3, [pc, #688]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006d50:	4ba9      	ldr	r3, [pc, #676]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d54:	0a1b      	lsrs	r3, r3, #8
 8006d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d5a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006d5c:	4ba6      	ldr	r3, [pc, #664]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d68:	4ba3      	ldr	r3, [pc, #652]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	ee07 3a90 	vmov	s15, r3
 8006d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d80:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8126 	beq.w	8006fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d053      	beq.n	8006e3a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d86f      	bhi.n	8006e78 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d02b      	beq.n	8006dfc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006da4:	e068      	b.n	8006e78 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006da6:	4b94      	ldr	r3, [pc, #592]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	08db      	lsrs	r3, r3, #3
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	4a92      	ldr	r2, [pc, #584]	@ (8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006db2:	fa22 f303 	lsr.w	r3, r2, r3
 8006db6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dda:	ed97 6a04 	vldr	s12, [r7, #16]
 8006dde:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006dfa:	e068      	b.n	8006ece <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007004 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e18:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e1c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e38:	e049      	b.n	8006ece <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	ee07 3a90 	vmov	s15, r3
 8006e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e44:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007008 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e5a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e76:	e02a      	b.n	8006ece <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e78:	4b5f      	ldr	r3, [pc, #380]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	4a5e      	ldr	r2, [pc, #376]	@ (8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
 8006e88:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eac:	ed97 6a04 	vldr	s12, [r7, #16]
 8006eb0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006ecc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ece:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eda:	d121      	bne.n	8006f20 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006edc:	4b46      	ldr	r3, [pc, #280]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d017      	beq.n	8006f18 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ee8:	4b43      	ldr	r3, [pc, #268]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eec:	0a5b      	lsrs	r3, r3, #9
 8006eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006f02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e006      	b.n	8006f26 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e002      	b.n	8006f26 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f26:	4b34      	ldr	r3, [pc, #208]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f32:	d121      	bne.n	8006f78 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006f34:	4b30      	ldr	r3, [pc, #192]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d017      	beq.n	8006f70 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f40:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006f52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f56:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006f5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f66:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	e006      	b.n	8006f7e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	e002      	b.n	8006f7e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f8a:	d121      	bne.n	8006fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d017      	beq.n	8006fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f98:	4b17      	ldr	r3, [pc, #92]	@ (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9c:	0e1b      	lsrs	r3, r3, #24
 8006f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006fb2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fbe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006fc6:	e010      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
}
 8006fce:	e00c      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]
}
 8006fd6:	e008      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	609a      	str	r2, [r3, #8]
}
 8006fea:	bf00      	nop
 8006fec:	372c      	adds	r7, #44	@ 0x2c
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	44020c00 	.word	0x44020c00
 8006ffc:	03d09000 	.word	0x03d09000
 8007000:	46000000 	.word	0x46000000
 8007004:	4a742400 	.word	0x4a742400
 8007008:	4af42400 	.word	0x4af42400

0800700c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800700c:	b480      	push	{r7}
 800700e:	b08b      	sub	sp, #44	@ 0x2c
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007014:	4bae      	ldr	r3, [pc, #696]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800701e:	4bac      	ldr	r3, [pc, #688]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007028:	4ba9      	ldr	r3, [pc, #676]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	0a1b      	lsrs	r3, r3, #8
 800702e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007032:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007034:	4ba6      	ldr	r3, [pc, #664]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007040:	4ba3      	ldr	r3, [pc, #652]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8126 	beq.w	80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b03      	cmp	r3, #3
 8007068:	d053      	beq.n	8007112 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	2b03      	cmp	r3, #3
 800706e:	d86f      	bhi.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d003      	beq.n	800707e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d02b      	beq.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800707c:	e068      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800707e:	4b94      	ldr	r3, [pc, #592]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	4a92      	ldr	r2, [pc, #584]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800708a:	fa22 f303 	lsr.w	r3, r2, r3
 800708e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a04 	vldr	s12, [r7, #16]
 80070b6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80070d2:	e068      	b.n	80071a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80070f4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80070f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007110:	e049      	b.n	80071a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007132:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800714e:	e02a      	b.n	80071a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007150:	4b5f      	ldr	r3, [pc, #380]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	4a5e      	ldr	r2, [pc, #376]	@ (80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed97 6a04 	vldr	s12, [r7, #16]
 8007188:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800718c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071a4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071a6:	4b4a      	ldr	r3, [pc, #296]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071b2:	d121      	bne.n	80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80071b4:	4b46      	ldr	r3, [pc, #280]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d017      	beq.n	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80071c0:	4b43      	ldr	r3, [pc, #268]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c4:	0a5b      	lsrs	r3, r3, #9
 80071c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80071d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071d6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80071da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e006      	b.n	80071fe <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e002      	b.n	80071fe <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071fe:	4b34      	ldr	r3, [pc, #208]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800720a:	d121      	bne.n	8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800720c:	4b30      	ldr	r3, [pc, #192]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800720e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d017      	beq.n	8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007218:	4b2d      	ldr	r3, [pc, #180]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800721a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800722a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800722e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007232:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800723a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800723e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	e006      	b.n	8007256 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e002      	b.n	8007256 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007256:	4b1e      	ldr	r3, [pc, #120]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800725e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007262:	d121      	bne.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007264:	4b1a      	ldr	r3, [pc, #104]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d017      	beq.n	80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007270:	4b17      	ldr	r3, [pc, #92]	@ (80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007274:	0e1b      	lsrs	r3, r3, #24
 8007276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007286:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800728a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800728e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007296:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800729e:	e010      	b.n	80072c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	e00c      	b.n	80072c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	609a      	str	r2, [r3, #8]
}
 80072ae:	e008      	b.n	80072c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	609a      	str	r2, [r3, #8]
}
 80072c2:	bf00      	nop
 80072c4:	372c      	adds	r7, #44	@ 0x2c
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	44020c00 	.word	0x44020c00
 80072d4:	03d09000 	.word	0x03d09000
 80072d8:	46000000 	.word	0x46000000
 80072dc:	4a742400 	.word	0x4a742400
 80072e0:	4af42400 	.word	0x4af42400

080072e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b08b      	sub	sp, #44	@ 0x2c
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80072ec:	4bae      	ldr	r3, [pc, #696]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80072f6:	4bac      	ldr	r3, [pc, #688]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007300:	4ba9      	ldr	r3, [pc, #676]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	0a1b      	lsrs	r3, r3, #8
 8007306:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800730a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800730c:	4ba6      	ldr	r3, [pc, #664]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	091b      	lsrs	r3, r3, #4
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007318:	4ba3      	ldr	r3, [pc, #652]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800731a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800731c:	08db      	lsrs	r3, r3, #3
 800731e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	fb02 f303 	mul.w	r3, r2, r3
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007330:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8126 	beq.w	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d053      	beq.n	80073ea <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	2b03      	cmp	r3, #3
 8007346:	d86f      	bhi.n	8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d003      	beq.n	8007356 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d02b      	beq.n	80073ac <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007354:	e068      	b.n	8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007356:	4b94      	ldr	r3, [pc, #592]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	08db      	lsrs	r3, r3, #3
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	4a92      	ldr	r2, [pc, #584]	@ (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007362:	fa22 f303 	lsr.w	r3, r2, r3
 8007366:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738a:	ed97 6a04 	vldr	s12, [r7, #16]
 800738e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800739e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80073aa:	e068      	b.n	800747e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80073cc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80073d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80073e8:	e049      	b.n	800747e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80073f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007406:	ed97 6a04 	vldr	s12, [r7, #16]
 800740a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800740e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800741a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007422:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007426:	e02a      	b.n	800747e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007428:	4b5f      	ldr	r3, [pc, #380]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	08db      	lsrs	r3, r3, #3
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	4a5e      	ldr	r2, [pc, #376]	@ (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
 8007438:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007460:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007478:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800747c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800747e:	4b4a      	ldr	r3, [pc, #296]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748a:	d121      	bne.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800748c:	4b46      	ldr	r3, [pc, #280]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d017      	beq.n	80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007498:	4b43      	ldr	r3, [pc, #268]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800749a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749c:	0a5b      	lsrs	r3, r3, #9
 800749e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80074aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80074b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80074b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074be:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e006      	b.n	80074d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074d6:	4b34      	ldr	r3, [pc, #208]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074e2:	d121      	bne.n	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80074e4:	4b30      	ldr	r3, [pc, #192]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d017      	beq.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074f0:	4b2d      	ldr	r3, [pc, #180]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007506:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800750a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800750e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007516:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	e006      	b.n	800752e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	e002      	b.n	800752e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800752e:	4b1e      	ldr	r3, [pc, #120]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800753a:	d121      	bne.n	8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800753c:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d017      	beq.n	8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007548:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800754a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800755a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800755e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007562:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007576:	e010      	b.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	609a      	str	r2, [r3, #8]
}
 800757e:	e00c      	b.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
}
 8007586:	e008      	b.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	609a      	str	r2, [r3, #8]
}
 800759a:	bf00      	nop
 800759c:	372c      	adds	r7, #44	@ 0x2c
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	44020c00 	.word	0x44020c00
 80075ac:	03d09000 	.word	0x03d09000
 80075b0:	46000000 	.word	0x46000000
 80075b4:	4a742400 	.word	0x4a742400
 80075b8:	4af42400 	.word	0x4af42400

080075bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b08f      	sub	sp, #60	@ 0x3c
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80075c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ca:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80075ce:	4321      	orrs	r1, r4
 80075d0:	d150      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80075d2:	4b26      	ldr	r3, [pc, #152]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80075d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80075de:	4b23      	ldr	r3, [pc, #140]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80075e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d108      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f2:	d104      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80075f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075fa:	f002 bb2a 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80075fe:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760c:	d108      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007614:	d104      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007616:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
 800761c:	f002 bb19 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007620:	4b12      	ldr	r3, [pc, #72]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800762c:	d119      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007634:	d115      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800763e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007642:	d30a      	bcc.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007644:	4b09      	ldr	r3, [pc, #36]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	0a1b      	lsrs	r3, r3, #8
 800764a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800764e:	4a08      	ldr	r2, [pc, #32]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007650:	fbb2 f3f3 	udiv	r3, r2, r3
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007656:	f002 bafc 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800765e:	f002 baf8 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
 8007666:	f002 baf4 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800766a:	bf00      	nop
 800766c:	44020c00 	.word	0x44020c00
 8007670:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007678:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800767c:	ea50 0104 	orrs.w	r1, r0, r4
 8007680:	f001 8275 	beq.w	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007688:	2801      	cmp	r0, #1
 800768a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800768e:	f082 82dd 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007696:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800769a:	ea50 0104 	orrs.w	r1, r0, r4
 800769e:	f001 816c 	beq.w	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80076a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a6:	2801      	cmp	r0, #1
 80076a8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80076ac:	f082 82ce 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80076b8:	ea50 0104 	orrs.w	r1, r0, r4
 80076bc:	f001 8602 	beq.w	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80076c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c4:	2801      	cmp	r0, #1
 80076c6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80076ca:	f082 82bf 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80076d6:	ea50 0104 	orrs.w	r1, r0, r4
 80076da:	f001 854c 	beq.w	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80076de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e2:	2801      	cmp	r0, #1
 80076e4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80076e8:	f082 82b0 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076f0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80076f4:	ea50 0104 	orrs.w	r1, r0, r4
 80076f8:	f001 849e 	beq.w	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80076fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007700:	2801      	cmp	r0, #1
 8007702:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007706:	f082 82a1 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800770a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800770e:	f1a1 0420 	sub.w	r4, r1, #32
 8007712:	ea50 0104 	orrs.w	r1, r0, r4
 8007716:	f001 83e8 	beq.w	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800771a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800771e:	2801      	cmp	r0, #1
 8007720:	f171 0120 	sbcs.w	r1, r1, #32
 8007724:	f082 8292 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800772c:	f1a1 0410 	sub.w	r4, r1, #16
 8007730:	ea50 0104 	orrs.w	r1, r0, r4
 8007734:	f002 8256 	beq.w	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800773c:	2801      	cmp	r0, #1
 800773e:	f171 0110 	sbcs.w	r1, r1, #16
 8007742:	f082 8283 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800774a:	f1a1 0408 	sub.w	r4, r1, #8
 800774e:	ea50 0104 	orrs.w	r1, r0, r4
 8007752:	f002 81cc 	beq.w	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800775a:	2801      	cmp	r0, #1
 800775c:	f171 0108 	sbcs.w	r1, r1, #8
 8007760:	f082 8274 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007768:	1f0c      	subs	r4, r1, #4
 800776a:	ea50 0104 	orrs.w	r1, r0, r4
 800776e:	f001 8648 	beq.w	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007776:	2801      	cmp	r0, #1
 8007778:	f171 0104 	sbcs.w	r1, r1, #4
 800777c:	f082 8266 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007784:	1e8c      	subs	r4, r1, #2
 8007786:	ea50 0104 	orrs.w	r1, r0, r4
 800778a:	f002 8143 	beq.w	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800778e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007792:	2801      	cmp	r0, #1
 8007794:	f171 0102 	sbcs.w	r1, r1, #2
 8007798:	f082 8258 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800779c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a0:	1e4c      	subs	r4, r1, #1
 80077a2:	ea50 0104 	orrs.w	r1, r0, r4
 80077a6:	f002 80ce 	beq.w	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80077aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ae:	2801      	cmp	r0, #1
 80077b0:	f171 0101 	sbcs.w	r1, r1, #1
 80077b4:	f082 824a 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077bc:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80077c0:	4321      	orrs	r1, r4
 80077c2:	f002 8059 	beq.w	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80077c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ca:	4cd9      	ldr	r4, [pc, #868]	@ (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80077cc:	42a0      	cmp	r0, r4
 80077ce:	f171 0100 	sbcs.w	r1, r1, #0
 80077d2:	f082 823b 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077da:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80077de:	4321      	orrs	r1, r4
 80077e0:	f001 87d9 	beq.w	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80077e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077e8:	4cd2      	ldr	r4, [pc, #840]	@ (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80077ea:	42a0      	cmp	r0, r4
 80077ec:	f171 0100 	sbcs.w	r1, r1, #0
 80077f0:	f082 822c 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077f8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80077fc:	4321      	orrs	r1, r4
 80077fe:	f001 8751 	beq.w	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007806:	4ccc      	ldr	r4, [pc, #816]	@ (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007808:	42a0      	cmp	r0, r4
 800780a:	f171 0100 	sbcs.w	r1, r1, #0
 800780e:	f082 821d 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007816:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800781a:	4321      	orrs	r1, r4
 800781c:	f001 869a 	beq.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007824:	4cc5      	ldr	r4, [pc, #788]	@ (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007826:	42a0      	cmp	r0, r4
 8007828:	f171 0100 	sbcs.w	r1, r1, #0
 800782c:	f082 820e 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007834:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007838:	4321      	orrs	r1, r4
 800783a:	f001 8612 	beq.w	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800783e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007842:	4cbf      	ldr	r4, [pc, #764]	@ (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007844:	42a0      	cmp	r0, r4
 8007846:	f171 0100 	sbcs.w	r1, r1, #0
 800784a:	f082 81ff 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800784e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007852:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007856:	4321      	orrs	r1, r4
 8007858:	f002 817e 	beq.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800785c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007860:	4cb8      	ldr	r4, [pc, #736]	@ (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007862:	42a0      	cmp	r0, r4
 8007864:	f171 0100 	sbcs.w	r1, r1, #0
 8007868:	f082 81f0 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800786c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007870:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007874:	4321      	orrs	r1, r4
 8007876:	f000 829e 	beq.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800787a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800787e:	4cb2      	ldr	r4, [pc, #712]	@ (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007880:	42a0      	cmp	r0, r4
 8007882:	f171 0100 	sbcs.w	r1, r1, #0
 8007886:	f082 81e1 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800788a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800788e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007892:	4321      	orrs	r1, r4
 8007894:	f000 826d 	beq.w	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800789c:	4cab      	ldr	r4, [pc, #684]	@ (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800789e:	42a0      	cmp	r0, r4
 80078a0:	f171 0100 	sbcs.w	r1, r1, #0
 80078a4:	f082 81d2 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ac:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80078b0:	4321      	orrs	r1, r4
 80078b2:	f001 800d 	beq.w	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80078b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ba:	4ca5      	ldr	r4, [pc, #660]	@ (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80078bc:	42a0      	cmp	r0, r4
 80078be:	f171 0100 	sbcs.w	r1, r1, #0
 80078c2:	f082 81c3 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ca:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80078ce:	4321      	orrs	r1, r4
 80078d0:	f000 81d0 	beq.w	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80078d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078d8:	4c9e      	ldr	r4, [pc, #632]	@ (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078da:	42a0      	cmp	r0, r4
 80078dc:	f171 0100 	sbcs.w	r1, r1, #0
 80078e0:	f082 81b4 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80078ec:	4321      	orrs	r1, r4
 80078ee:	f000 8142 	beq.w	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80078f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078f6:	4c98      	ldr	r4, [pc, #608]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	f171 0100 	sbcs.w	r1, r1, #0
 80078fe:	f082 81a5 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007906:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800790a:	4321      	orrs	r1, r4
 800790c:	f001 824e 	beq.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007914:	4c91      	ldr	r4, [pc, #580]	@ (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007916:	42a0      	cmp	r0, r4
 8007918:	f171 0100 	sbcs.w	r1, r1, #0
 800791c:	f082 8196 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007924:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007928:	4321      	orrs	r1, r4
 800792a:	f001 8197 	beq.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800792e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007932:	4c8b      	ldr	r4, [pc, #556]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007934:	42a0      	cmp	r0, r4
 8007936:	f171 0100 	sbcs.w	r1, r1, #0
 800793a:	f082 8187 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800793e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007942:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007946:	4321      	orrs	r1, r4
 8007948:	f001 8154 	beq.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800794c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007950:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007954:	f171 0100 	sbcs.w	r1, r1, #0
 8007958:	f082 8178 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800795c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007960:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007964:	4321      	orrs	r1, r4
 8007966:	f001 80b7 	beq.w	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800796a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800796e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007972:	42a0      	cmp	r0, r4
 8007974:	f171 0100 	sbcs.w	r1, r1, #0
 8007978:	f082 8168 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800797c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007980:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007984:	4321      	orrs	r1, r4
 8007986:	f001 8064 	beq.w	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800798a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800798e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007992:	42a0      	cmp	r0, r4
 8007994:	f171 0100 	sbcs.w	r1, r1, #0
 8007998:	f082 8158 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800799c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80079a4:	4321      	orrs	r1, r4
 80079a6:	f001 8011 	beq.w	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80079aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ae:	f242 0401 	movw	r4, #8193	@ 0x2001
 80079b2:	42a0      	cmp	r0, r4
 80079b4:	f171 0100 	sbcs.w	r1, r1, #0
 80079b8:	f082 8148 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80079c4:	4321      	orrs	r1, r4
 80079c6:	f000 871e 	beq.w	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80079ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ce:	f241 0401 	movw	r4, #4097	@ 0x1001
 80079d2:	42a0      	cmp	r0, r4
 80079d4:	f171 0100 	sbcs.w	r1, r1, #0
 80079d8:	f082 8138 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80079e4:	4321      	orrs	r1, r4
 80079e6:	f000 86a8 	beq.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80079ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ee:	f640 0401 	movw	r4, #2049	@ 0x801
 80079f2:	42a0      	cmp	r0, r4
 80079f4:	f171 0100 	sbcs.w	r1, r1, #0
 80079f8:	f082 8128 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a00:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007a04:	4321      	orrs	r1, r4
 8007a06:	f000 8632 	beq.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a0e:	f240 4401 	movw	r4, #1025	@ 0x401
 8007a12:	42a0      	cmp	r0, r4
 8007a14:	f171 0100 	sbcs.w	r1, r1, #0
 8007a18:	f082 8118 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a20:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007a24:	4321      	orrs	r1, r4
 8007a26:	f000 85b0 	beq.w	800858a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a2e:	f240 2401 	movw	r4, #513	@ 0x201
 8007a32:	42a0      	cmp	r0, r4
 8007a34:	f171 0100 	sbcs.w	r1, r1, #0
 8007a38:	f082 8108 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a40:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007a44:	4321      	orrs	r1, r4
 8007a46:	f000 8535 	beq.w	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a4e:	f240 1401 	movw	r4, #257	@ 0x101
 8007a52:	42a0      	cmp	r0, r4
 8007a54:	f171 0100 	sbcs.w	r1, r1, #0
 8007a58:	f082 80f8 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a60:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007a64:	4321      	orrs	r1, r4
 8007a66:	f000 84ba 	beq.w	80083de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a6e:	2881      	cmp	r0, #129	@ 0x81
 8007a70:	f171 0100 	sbcs.w	r1, r1, #0
 8007a74:	f082 80ea 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a7c:	2821      	cmp	r0, #33	@ 0x21
 8007a7e:	f171 0100 	sbcs.w	r1, r1, #0
 8007a82:	d26f      	bcs.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a88:	4301      	orrs	r1, r0
 8007a8a:	f002 80df 	beq.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a92:	1e42      	subs	r2, r0, #1
 8007a94:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007a98:	2a20      	cmp	r2, #32
 8007a9a:	f173 0100 	sbcs.w	r1, r3, #0
 8007a9e:	f082 80d5 	bcs.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aa2:	2a1f      	cmp	r2, #31
 8007aa4:	f202 80d2 	bhi.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aa8:	a101      	add	r1, pc, #4	@ (adr r1, 8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007aaa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007e11 	.word	0x08007e11
 8007ab4:	08007edd 	.word	0x08007edd
 8007ab8:	08009c4d 	.word	0x08009c4d
 8007abc:	08007f9d 	.word	0x08007f9d
 8007ac0:	08009c4d 	.word	0x08009c4d
 8007ac4:	08009c4d 	.word	0x08009c4d
 8007ac8:	08009c4d 	.word	0x08009c4d
 8007acc:	0800806d 	.word	0x0800806d
 8007ad0:	08009c4d 	.word	0x08009c4d
 8007ad4:	08009c4d 	.word	0x08009c4d
 8007ad8:	08009c4d 	.word	0x08009c4d
 8007adc:	08009c4d 	.word	0x08009c4d
 8007ae0:	08009c4d 	.word	0x08009c4d
 8007ae4:	08009c4d 	.word	0x08009c4d
 8007ae8:	08009c4d 	.word	0x08009c4d
 8007aec:	0800814f 	.word	0x0800814f
 8007af0:	08009c4d 	.word	0x08009c4d
 8007af4:	08009c4d 	.word	0x08009c4d
 8007af8:	08009c4d 	.word	0x08009c4d
 8007afc:	08009c4d 	.word	0x08009c4d
 8007b00:	08009c4d 	.word	0x08009c4d
 8007b04:	08009c4d 	.word	0x08009c4d
 8007b08:	08009c4d 	.word	0x08009c4d
 8007b0c:	08009c4d 	.word	0x08009c4d
 8007b10:	08009c4d 	.word	0x08009c4d
 8007b14:	08009c4d 	.word	0x08009c4d
 8007b18:	08009c4d 	.word	0x08009c4d
 8007b1c:	08009c4d 	.word	0x08009c4d
 8007b20:	08009c4d 	.word	0x08009c4d
 8007b24:	08009c4d 	.word	0x08009c4d
 8007b28:	08009c4d 	.word	0x08009c4d
 8007b2c:	08008225 	.word	0x08008225
 8007b30:	80000001 	.word	0x80000001
 8007b34:	40000001 	.word	0x40000001
 8007b38:	20000001 	.word	0x20000001
 8007b3c:	10000001 	.word	0x10000001
 8007b40:	08000001 	.word	0x08000001
 8007b44:	04000001 	.word	0x04000001
 8007b48:	00800001 	.word	0x00800001
 8007b4c:	00400001 	.word	0x00400001
 8007b50:	00200001 	.word	0x00200001
 8007b54:	00100001 	.word	0x00100001
 8007b58:	00080001 	.word	0x00080001
 8007b5c:	00040001 	.word	0x00040001
 8007b60:	00020001 	.word	0x00020001
 8007b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b68:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	f000 83c4 	beq.w	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007b72:	f002 b86b 	b.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007b76:	4ba1      	ldr	r3, [pc, #644]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b7c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b88:	d036      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b90:	d86b      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b98:	d02b      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ba0:	d863      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba8:	d01b      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb0:	d85b      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bbe:	d008      	beq.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007bc0:	e053      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bc2:	f107 0320 	add.w	r3, r7, #32
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff f8b4 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bd0:	e04e      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd2:	f107 0314 	add.w	r3, r7, #20
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fa18 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007be0:	e046      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be2:	f107 0308 	add.w	r3, r7, #8
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fb7c 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bf0:	e03e      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007bf2:	4b83      	ldr	r3, [pc, #524]	@ (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007bf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bf6:	e03b      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bf8:	4b80      	ldr	r3, [pc, #512]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bfe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c04:	4b7d      	ldr	r3, [pc, #500]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d10c      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c16:	4b79      	ldr	r3, [pc, #484]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	4a78      	ldr	r2, [pc, #480]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c28:	e01e      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c2a:	4b74      	ldr	r3, [pc, #464]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c36:	d106      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3e:	d102      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c40:	4b71      	ldr	r3, [pc, #452]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c44:	e010      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c46:	4b6d      	ldr	r3, [pc, #436]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007c66:	e003      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007c68:	e002      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c6e:	bf00      	nop
          }
        }
        break;
 8007c70:	f001 bfef 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007c74:	4b61      	ldr	r3, [pc, #388]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c7a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c86:	d036      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c8e:	d86b      	bhi.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c92:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007c96:	d02b      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007c9e:	d863      	bhi.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca6:	d01b      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cae:	d85b      	bhi.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007cbc:	d008      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007cbe:	e053      	b.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc0:	f107 0320 	add.w	r3, r7, #32
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff f835 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cce:	e04e      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff f999 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cde:	e046      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fafd 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cee:	e03e      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007cf0:	4b43      	ldr	r3, [pc, #268]	@ (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007cf2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cf4:	e03b      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cf6:	4b41      	ldr	r3, [pc, #260]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cfc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007d00:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d02:	4b3e      	ldr	r3, [pc, #248]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d10c      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d14:	4b39      	ldr	r3, [pc, #228]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	08db      	lsrs	r3, r3, #3
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	4a39      	ldr	r2, [pc, #228]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
 8007d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d26:	e01e      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d28:	4b34      	ldr	r3, [pc, #208]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d34:	d106      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3c:	d102      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d3e:	4b32      	ldr	r3, [pc, #200]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d42:	e010      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d44:	4b2d      	ldr	r3, [pc, #180]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d50:	d106      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d58:	d102      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5e:	e002      	b.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d64:	e003      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007d66:	e002      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d6c:	bf00      	nop
          }
        }
        break;
 8007d6e:	f001 bf70 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007d72:	4b22      	ldr	r3, [pc, #136]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d84:	f107 0320 	add.w	r3, r7, #32
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe ffd3 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d92:	f001 bf5e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	2b40      	cmp	r3, #64	@ 0x40
 8007d9a:	d108      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9c:	f107 0314 	add.w	r3, r7, #20
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff f933 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007daa:	f001 bf52 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007db2:	f001 bf4e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007db6:	4b11      	ldr	r3, [pc, #68]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d108      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dc8:	f107 0320 	add.w	r3, r7, #32
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe ffb1 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007dd6:	f001 bf3c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	2b80      	cmp	r3, #128	@ 0x80
 8007dde:	d108      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff f911 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dee:	f001 bf30 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007df6:	f001 bf2c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dfa:	bf00      	nop
 8007dfc:	44020c00 	.word	0x44020c00
 8007e00:	00bb8000 	.word	0x00bb8000
 8007e04:	03d09000 	.word	0x03d09000
 8007e08:	003d0900 	.word	0x003d0900
 8007e0c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007e10:	4b9d      	ldr	r3, [pc, #628]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007e22:	f7fc ffd1 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 8007e26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e28:	f001 bf13 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007e2c:	4b96      	ldr	r3, [pc, #600]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e38:	d10a      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e40:	f107 0314 	add.w	r3, r7, #20
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff f8e1 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4e:	e043      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007e50:	4b8d      	ldr	r3, [pc, #564]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e5c:	d10a      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d107      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e64:	f107 0308 	add.w	r3, r7, #8
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff fa3b 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e72:	e031      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007e74:	4b84      	ldr	r3, [pc, #528]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d10c      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d109      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e86:	4b80      	ldr	r3, [pc, #512]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	4a7e      	ldr	r2, [pc, #504]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e98:	e01e      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea6:	d105      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d102      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007eae:	4b78      	ldr	r3, [pc, #480]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb2:	e011      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007eb4:	4b74      	ldr	r3, [pc, #464]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d106      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d103      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ed4:	f001 bebd 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ed8:	f001 bebb 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007edc:	4b6a      	ldr	r3, [pc, #424]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ee6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007eee:	f7fc ff55 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8007ef2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ef4:	f001 bead 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007ef8:	4b63      	ldr	r3, [pc, #396]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f04:	d10a      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d107      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f0c:	f107 0314 	add.w	r3, r7, #20
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff f87b 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1a:	e03d      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d108      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f22:	f107 0308 	add.w	r3, r7, #8
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff f9dc 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f30:	f001 be8f 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007f34:	4b54      	ldr	r3, [pc, #336]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d10c      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	2b18      	cmp	r3, #24
 8007f44:	d109      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f46:	4b50      	ldr	r3, [pc, #320]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	08db      	lsrs	r3, r3, #3
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	4a4e      	ldr	r2, [pc, #312]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007f52:	fa22 f303 	lsr.w	r3, r2, r3
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f58:	e01e      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f66:	d105      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d102      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007f6e:	4b48      	ldr	r3, [pc, #288]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f72:	e011      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007f74:	4b44      	ldr	r3, [pc, #272]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d106      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	2b28      	cmp	r3, #40	@ 0x28
 8007f86:	d103      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8e:	e003      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f94:	f001 be5d 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f98:	f001 be5b 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fa2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007fa6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fae:	f7fc fef5 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8007fb2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fb4:	f001 be4d 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007fb8:	4b33      	ldr	r3, [pc, #204]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fc4:	d10a      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d107      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff f81b 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fda:	e045      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe8:	d10a      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	2b80      	cmp	r3, #128	@ 0x80
 8007fee:	d107      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff f975 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffe:	e033      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008000:	4b21      	ldr	r3, [pc, #132]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b02      	cmp	r3, #2
 800800a:	d10c      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008010:	d109      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008012:	4b1d      	ldr	r3, [pc, #116]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a1b      	ldr	r2, [pc, #108]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	637b      	str	r3, [r7, #52]	@ 0x34
 8008024:	e020      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008026:	4b18      	ldr	r3, [pc, #96]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800802e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800803a:	d102      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800803c:	4b14      	ldr	r3, [pc, #80]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008040:	e012      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008042:	4b11      	ldr	r3, [pc, #68]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b02      	cmp	r3, #2
 800804e:	d107      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008056:	d103      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
 800805e:	e003      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008064:	f001 bdf5 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008068:	f001 bdf3 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800806e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008072:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800807e:	f7fc fe8d 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008082:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008084:	f001 bde5 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008088:	44020c00 	.word	0x44020c00
 800808c:	03d09000 	.word	0x03d09000
 8008090:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008094:	4ba0      	ldr	r3, [pc, #640]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800809c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a0:	d10b      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a8:	d107      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080aa:	f107 0314 	add.w	r3, r7, #20
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe ffac 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b8:	e047      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80080ba:	4b97      	ldr	r3, [pc, #604]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c6:	d10b      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ce:	d107      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d0:	f107 0308 	add.w	r3, r7, #8
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff f905 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080de:	e034      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80080e0:	4b8d      	ldr	r3, [pc, #564]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d10d      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080f2:	d109      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080f4:	4b88      	ldr	r3, [pc, #544]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	4a87      	ldr	r2, [pc, #540]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008100:	fa22 f303 	lsr.w	r3, r2, r3
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
 8008106:	e020      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008108:	4b83      	ldr	r3, [pc, #524]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008114:	d106      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800811c:	d102      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800811e:	4b80      	ldr	r3, [pc, #512]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008120:	637b      	str	r3, [r7, #52]	@ 0x34
 8008122:	e012      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008124:	4b7c      	ldr	r3, [pc, #496]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b02      	cmp	r3, #2
 8008130:	d107      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008138:	d103      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008140:	e003      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008146:	f001 bd84 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800814a:	f001 bd82 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800814e:	4b72      	ldr	r3, [pc, #456]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008154:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008158:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	2b00      	cmp	r3, #0
 800815e:	d104      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008160:	f7fc fe1c 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008164:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008166:	f001 bd74 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800816a:	4b6b      	ldr	r3, [pc, #428]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008176:	d10b      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800817e:	d107      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008180:	f107 0314 	add.w	r3, r7, #20
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe ff41 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
 800818e:	e047      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008190:	4b61      	ldr	r3, [pc, #388]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800819c:	d10b      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a4:	d107      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a6:	f107 0308 	add.w	r3, r7, #8
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f89a 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b4:	e034      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80081b6:	4b58      	ldr	r3, [pc, #352]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d10d      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80081c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081c8:	d109      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081ca:	4b53      	ldr	r3, [pc, #332]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	08db      	lsrs	r3, r3, #3
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	4a51      	ldr	r2, [pc, #324]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80081d6:	fa22 f303 	lsr.w	r3, r2, r3
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
 80081dc:	e020      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80081de:	4b4e      	ldr	r3, [pc, #312]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ea:	d106      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081f2:	d102      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80081f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80081f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081f8:	e012      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80081fa:	4b47      	ldr	r3, [pc, #284]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800820e:	d103      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008214:	637b      	str	r3, [r7, #52]	@ 0x34
 8008216:	e003      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800821c:	f001 bd19 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008220:	f001 bd17 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008224:	4b3c      	ldr	r3, [pc, #240]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008226:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800822a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800822e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008236:	f7fc fdb1 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 800823a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800823c:	f001 bd09 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008240:	4b35      	ldr	r3, [pc, #212]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800824c:	d10b      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008254:	d107      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fed6 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
 8008264:	e047      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008266:	4b2c      	ldr	r3, [pc, #176]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800826e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008272:	d10b      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800827a:	d107      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff f82f 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
 800828a:	e034      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800828c:	4b22      	ldr	r3, [pc, #136]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b02      	cmp	r3, #2
 8008296:	d10d      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800829e:	d109      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	08db      	lsrs	r3, r3, #3
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	4a1c      	ldr	r2, [pc, #112]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80082ac:	fa22 f303 	lsr.w	r3, r2, r3
 80082b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b2:	e020      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80082b4:	4b18      	ldr	r3, [pc, #96]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c0:	d106      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c8:	d102      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80082ca:	4b15      	ldr	r3, [pc, #84]	@ (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80082cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ce:	e012      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80082d0:	4b11      	ldr	r3, [pc, #68]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d107      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80082e4:	d103      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80082e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ec:	e003      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082f2:	f001 bcae 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082f6:	f001 bcac 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80082fa:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008300:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008304:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800830c:	f7fc fd46 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008310:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008312:	f001 bc9e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008316:	bf00      	nop
 8008318:	44020c00 	.word	0x44020c00
 800831c:	03d09000 	.word	0x03d09000
 8008320:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008324:	4ba0      	ldr	r3, [pc, #640]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800832c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008330:	d10b      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008338:	d107      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800833a:	f107 0314 	add.w	r3, r7, #20
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fe64 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
 8008348:	e047      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800834a:	4b97      	ldr	r3, [pc, #604]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008356:	d10b      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800835e:	d107      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe ffbd 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	637b      	str	r3, [r7, #52]	@ 0x34
 800836e:	e034      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008370:	4b8d      	ldr	r3, [pc, #564]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b02      	cmp	r3, #2
 800837a:	d10d      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008382:	d109      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008384:	4b88      	ldr	r3, [pc, #544]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	08db      	lsrs	r3, r3, #3
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	4a87      	ldr	r2, [pc, #540]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008390:	fa22 f303 	lsr.w	r3, r2, r3
 8008394:	637b      	str	r3, [r7, #52]	@ 0x34
 8008396:	e020      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008398:	4b83      	ldr	r3, [pc, #524]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a4:	d106      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ac:	d102      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80083ae:	4b80      	ldr	r3, [pc, #512]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b2:	e012      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80083b4:	4b7c      	ldr	r3, [pc, #496]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80083b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d107      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80083c8:	d103      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80083ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d0:	e003      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d6:	f001 bc3c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083da:	f001 bc3a 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80083de:	4b72      	ldr	r3, [pc, #456]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80083e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083e4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80083e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d104      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083f0:	f7fc fcd4 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80083f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80083f6:	f001 bc2c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80083fa:	4b6b      	ldr	r3, [pc, #428]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008406:	d10b      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800840e:	d107      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008410:	f107 0314 	add.w	r3, r7, #20
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fdf9 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
 800841e:	e047      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008420:	4b61      	ldr	r3, [pc, #388]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800842c:	d10b      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008434:	d107      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008436:	f107 0308 	add.w	r3, r7, #8
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe ff52 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	637b      	str	r3, [r7, #52]	@ 0x34
 8008444:	e034      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008446:	4b58      	ldr	r3, [pc, #352]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b02      	cmp	r3, #2
 8008450:	d10d      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008458:	d109      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800845a:	4b53      	ldr	r3, [pc, #332]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	08db      	lsrs	r3, r3, #3
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	4a51      	ldr	r2, [pc, #324]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008466:	fa22 f303 	lsr.w	r3, r2, r3
 800846a:	637b      	str	r3, [r7, #52]	@ 0x34
 800846c:	e020      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800846e:	4b4e      	ldr	r3, [pc, #312]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800847a:	d106      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008482:	d102      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008484:	4b4a      	ldr	r3, [pc, #296]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
 8008488:	e012      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800848a:	4b47      	ldr	r3, [pc, #284]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800848c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b02      	cmp	r3, #2
 8008496:	d107      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800849e:	d103      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80084a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a6:	e003      	b.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ac:	f001 bbd1 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084b0:	f001 bbcf 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80084b4:	4b3c      	ldr	r3, [pc, #240]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80084ba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80084be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084c6:	f7fc fc69 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80084ca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80084cc:	f001 bbc1 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80084d0:	4b35      	ldr	r3, [pc, #212]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084dc:	d10b      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084e4:	d107      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e6:	f107 0314 	add.w	r3, r7, #20
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fd8e 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f4:	e047      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80084f6:	4b2c      	ldr	r3, [pc, #176]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008502:	d10b      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800850a:	d107      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800850c:	f107 0308 	add.w	r3, r7, #8
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fee7 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
 800851a:	e034      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800851c:	4b22      	ldr	r3, [pc, #136]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b02      	cmp	r3, #2
 8008526:	d10d      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800852e:	d109      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008530:	4b1d      	ldr	r3, [pc, #116]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	08db      	lsrs	r3, r3, #3
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	4a1c      	ldr	r2, [pc, #112]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
 8008542:	e020      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008544:	4b18      	ldr	r3, [pc, #96]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800854c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008550:	d106      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008558:	d102      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800855a:	4b15      	ldr	r3, [pc, #84]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
 800855e:	e012      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008560:	4b11      	ldr	r3, [pc, #68]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b02      	cmp	r3, #2
 800856c:	d107      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008574:	d103      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800857a:	637b      	str	r3, [r7, #52]	@ 0x34
 800857c:	e003      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008582:	f001 bb66 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008586:	f001 bb64 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800858a:	4b07      	ldr	r3, [pc, #28]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800858c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008590:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008594:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800859c:	f7fc fbfe 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80085a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80085a2:	f001 bb56 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085a6:	bf00      	nop
 80085a8:	44020c00 	.word	0x44020c00
 80085ac:	03d09000 	.word	0x03d09000
 80085b0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80085b4:	4ba1      	ldr	r3, [pc, #644]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c0:	d10b      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085c8:	d107      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ca:	f107 0314 	add.w	r3, r7, #20
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fd1c 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d8:	e047      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80085da:	4b98      	ldr	r3, [pc, #608]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085e6:	d10b      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ee:	d107      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f0:	f107 0308 	add.w	r3, r7, #8
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fe75 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fe:	e034      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008600:	4b8e      	ldr	r3, [pc, #568]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b02      	cmp	r3, #2
 800860a:	d10d      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008612:	d109      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008614:	4b89      	ldr	r3, [pc, #548]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	08db      	lsrs	r3, r3, #3
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	4a88      	ldr	r2, [pc, #544]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008620:	fa22 f303 	lsr.w	r3, r2, r3
 8008624:	637b      	str	r3, [r7, #52]	@ 0x34
 8008626:	e020      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008628:	4b84      	ldr	r3, [pc, #528]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008634:	d106      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863c:	d102      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800863e:	4b81      	ldr	r3, [pc, #516]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008640:	637b      	str	r3, [r7, #52]	@ 0x34
 8008642:	e012      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008644:	4b7d      	ldr	r3, [pc, #500]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b02      	cmp	r3, #2
 8008650:	d107      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008658:	d103      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800865a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008660:	e003      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008666:	f001 baf4 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800866a:	f001 baf2 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800866e:	4b73      	ldr	r3, [pc, #460]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008670:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fc fb8c 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008684:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008686:	f001 bae4 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800868a:	4b6c      	ldr	r3, [pc, #432]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008696:	d10a      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	2b01      	cmp	r3, #1
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869e:	f107 0314 	add.w	r3, r7, #20
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fcb2 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ac:	e043      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80086ae:	4b63      	ldr	r3, [pc, #396]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ba:	d10a      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fe0c 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d0:	e031      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80086d2:	4b5a      	ldr	r3, [pc, #360]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d10c      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d109      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086e4:	4b55      	ldr	r3, [pc, #340]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	4a54      	ldr	r2, [pc, #336]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f6:	e01e      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80086f8:	4b50      	ldr	r3, [pc, #320]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008704:	d105      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	2b04      	cmp	r3, #4
 800870a:	d102      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800870c:	4b4d      	ldr	r3, [pc, #308]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008710:	e011      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008712:	4b4a      	ldr	r3, [pc, #296]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b02      	cmp	r3, #2
 800871e:	d106      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	2b05      	cmp	r3, #5
 8008724:	d103      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
 800872c:	e003      	b.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008732:	f001 ba8e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008736:	f001 ba8c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800873a:	4b40      	ldr	r3, [pc, #256]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800873c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008744:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800874c:	f7fc fb26 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008750:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008752:	f001 ba7e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008756:	4b39      	ldr	r3, [pc, #228]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800875e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008762:	d10a      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008766:	2b10      	cmp	r3, #16
 8008768:	d107      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800876a:	f107 0314 	add.w	r3, r7, #20
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fc4c 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	637b      	str	r3, [r7, #52]	@ 0x34
 8008778:	e043      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800877a:	4b30      	ldr	r3, [pc, #192]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008786:	d10a      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	2b20      	cmp	r3, #32
 800878c:	d107      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800878e:	f107 0308 	add.w	r3, r7, #8
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fda6 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	637b      	str	r3, [r7, #52]	@ 0x34
 800879c:	e031      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800879e:	4b27      	ldr	r3, [pc, #156]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d10c      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2b30      	cmp	r3, #48	@ 0x30
 80087ae:	d109      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087b0:	4b22      	ldr	r3, [pc, #136]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	08db      	lsrs	r3, r3, #3
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	4a21      	ldr	r2, [pc, #132]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c2:	e01e      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80087c4:	4b1d      	ldr	r3, [pc, #116]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d0:	d105      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	2b40      	cmp	r3, #64	@ 0x40
 80087d6:	d102      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80087d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80087da:	637b      	str	r3, [r7, #52]	@ 0x34
 80087dc:	e011      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80087de:	4b17      	ldr	r3, [pc, #92]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d106      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	2b50      	cmp	r3, #80	@ 0x50
 80087f0:	d103      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80087f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f8:	e003      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087fe:	f001 ba28 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008802:	f001 ba26 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008806:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800880c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008810:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	2b00      	cmp	r3, #0
 8008816:	d104      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008818:	f7fc faec 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 800881c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800881e:	f001 ba18 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008828:	d10e      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fbec 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008838:	f001 ba0b 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800883c:	44020c00 	.word	0x44020c00
 8008840:	03d09000 	.word	0x03d09000
 8008844:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800884e:	d108      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008850:	f107 0308 	add.w	r3, r7, #8
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fd45 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800885e:	f001 b9f8 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008862:	4ba4      	ldr	r3, [pc, #656]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b02      	cmp	r3, #2
 800886c:	d10d      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008874:	d109      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008876:	4b9f      	ldr	r3, [pc, #636]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	08db      	lsrs	r3, r3, #3
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	4a9d      	ldr	r2, [pc, #628]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008882:	fa22 f303 	lsr.w	r3, r2, r3
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34
 8008888:	e020      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800888a:	4b9a      	ldr	r3, [pc, #616]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008896:	d106      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800889e:	d102      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80088a0:	4b96      	ldr	r3, [pc, #600]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a4:	e012      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80088a6:	4b93      	ldr	r3, [pc, #588]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80088a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d107      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80088ba:	d103      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80088bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088c2:	e003      	b.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c8:	f001 b9c3 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088cc:	f001 b9c1 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80088d0:	4b88      	ldr	r3, [pc, #544]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80088d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80088e2:	f7fc fa3f 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 80088e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80088e8:	f001 b9b3 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d104      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80088f2:	f7fc f90b 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80088f6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088f8:	f001 b9ab 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d108      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008902:	f107 0314 	add.w	r3, r7, #20
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fb80 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008910:	f001 b99f 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008914:	4b77      	ldr	r3, [pc, #476]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008920:	d105      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	2b03      	cmp	r3, #3
 8008926:	d102      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008928:	4b75      	ldr	r3, [pc, #468]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
 800892c:	e023      	b.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800892e:	4b71      	ldr	r3, [pc, #452]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b02      	cmp	r3, #2
 8008938:	d10c      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	2b04      	cmp	r3, #4
 800893e:	d109      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008940:	4b6c      	ldr	r3, [pc, #432]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	08db      	lsrs	r3, r3, #3
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	4a6b      	ldr	r2, [pc, #428]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
 8008952:	e010      	b.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008954:	4b67      	ldr	r3, [pc, #412]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800895c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008960:	d105      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	2b05      	cmp	r3, #5
 8008966:	d102      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008968:	4b64      	ldr	r3, [pc, #400]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
 800896c:	e003      	b.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800896e:	2300      	movs	r3, #0
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008972:	f001 b96e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008976:	f001 b96c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800897a:	4b5e      	ldr	r3, [pc, #376]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800897c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008986:	4b5b      	ldr	r3, [pc, #364]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d106      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	2b00      	cmp	r3, #0
 8008998:	d103      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800899a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a0:	e012      	b.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80089a2:	4b54      	ldr	r3, [pc, #336]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b0:	d106      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d103      	bne.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80089b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089be:	e003      	b.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80089c4:	f001 b945 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089c8:	f001 b943 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80089cc:	4b49      	ldr	r3, [pc, #292]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80089de:	f7fc f9dd 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80089e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80089e4:	f001 b935 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ee:	d108      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fc75 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089fe:	f001 b928 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008a02:	4b3c      	ldr	r3, [pc, #240]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d10d      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a14:	d109      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a16:	4b37      	ldr	r3, [pc, #220]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	08db      	lsrs	r3, r3, #3
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	4a35      	ldr	r2, [pc, #212]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008a22:	fa22 f303 	lsr.w	r3, r2, r3
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a28:	e011      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008a2a:	4b32      	ldr	r3, [pc, #200]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a36:	d106      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008a40:	4b2e      	ldr	r3, [pc, #184]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a44:	e003      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a4a:	f001 b902 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a4e:	f001 b900 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008a52:	4b28      	ldr	r3, [pc, #160]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a58:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008a5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a64:	f7fc f99a 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008a68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a6a:	f001 b8f2 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a74:	d108      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fc32 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a84:	f001 b8e5 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008a88:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d10d      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a9a:	d109      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a9c:	4b15      	ldr	r3, [pc, #84]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	4a14      	ldr	r2, [pc, #80]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aae:	e011      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008ab0:	4b10      	ldr	r3, [pc, #64]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008abc:	d106      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008ac4:	d102      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aca:	e003      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad0:	f001 b8bf 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ad4:	f001 b8bd 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008ad8:	4b06      	ldr	r3, [pc, #24]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ada:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ade:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008ae2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10c      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008aea:	f7fc f983 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 8008aee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008af0:	f001 b8af 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008af4:	44020c00 	.word	0x44020c00
 8008af8:	03d09000 	.word	0x03d09000
 8008afc:	003d0900 	.word	0x003d0900
 8008b00:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b0a:	d108      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b0c:	f107 0308 	add.w	r3, r7, #8
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fbe7 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b1a:	f001 b89a 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008b1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d10d      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b30:	d109      	bne.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b32:	4b9a      	ldr	r3, [pc, #616]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	08db      	lsrs	r3, r3, #3
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	4a98      	ldr	r2, [pc, #608]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b44:	e011      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008b46:	4b95      	ldr	r3, [pc, #596]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b52:	d106      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b5a:	d102      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008b5c:	4b91      	ldr	r3, [pc, #580]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b60:	e003      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b66:	f001 b874 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b6a:	f001 b872 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b74:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008b78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008b80:	f7fc f938 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 8008b84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b86:	f001 b864 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b90:	d108      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe fba4 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ba0:	f001 b857 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008ba4:	4b7d      	ldr	r3, [pc, #500]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d10d      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008bb6:	d109      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bb8:	4b78      	ldr	r3, [pc, #480]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	08db      	lsrs	r3, r3, #3
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	4a77      	ldr	r2, [pc, #476]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bca:	e011      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008bcc:	4b73      	ldr	r3, [pc, #460]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd8:	d106      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bdc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008be0:	d102      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008be2:	4b70      	ldr	r3, [pc, #448]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be6:	e003      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bec:	f001 b831 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bf0:	f001 b82f 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008bf4:	4b69      	ldr	r3, [pc, #420]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bfa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008bfe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fc f8c9 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008c0a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c0c:	f001 b821 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c16:	d108      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fb61 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c26:	f001 b814 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d10e      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c3e:	4b57      	ldr	r3, [pc, #348]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	08db      	lsrs	r3, r3, #3
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	4a55      	ldr	r2, [pc, #340]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c50:	f000 bfff 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c58:	f000 bffb 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c62:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008c6e:	d056      	beq.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c72:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008c76:	f200 808b 	bhi.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c80:	d03e      	beq.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c88:	f200 8082 	bhi.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c92:	d027      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c9a:	d879      	bhi.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ca2:	d017      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008caa:	d871      	bhi.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cb8:	d004      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008cba:	e069      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008cbc:	f7fc f89a 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 8008cc0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008cc2:	e068      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc4:	f107 0314 	add.w	r3, r7, #20
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe f99f 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cd2:	e060      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd4:	f107 0308 	add.w	r3, r7, #8
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fe fb03 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ce2:	e058      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d103      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cf8:	e04d      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cfe:	e04a      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008d00:	4b26      	ldr	r3, [pc, #152]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d0e:	d103      	bne.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008d10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008d14:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008d16:	e03e      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d1c:	e03b      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d24:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008d28:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d10c      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d3c:	4b17      	ldr	r3, [pc, #92]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	08db      	lsrs	r3, r3, #3
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	4a16      	ldr	r2, [pc, #88]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4e:	e01e      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d50:	4b12      	ldr	r3, [pc, #72]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d5c:	d106      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d64:	d102      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d66:	4b0f      	ldr	r3, [pc, #60]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d6a:	e010      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d78:	d106      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d80:	d102      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d82:	4b09      	ldr	r3, [pc, #36]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d86:	e002      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d8c:	e003      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008d8e:	e002      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d94:	bf00      	nop
          }
        }
        break;
 8008d96:	f000 bf5c 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d9a:	bf00      	nop
 8008d9c:	44020c00 	.word	0x44020c00
 8008da0:	03d09000 	.word	0x03d09000
 8008da4:	003d0900 	.word	0x003d0900
 8008da8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008dac:	4b9e      	ldr	r3, [pc, #632]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008dae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008db2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008db6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008dbe:	d056      	beq.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008dc6:	f200 808b 	bhi.w	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dd0:	d03e      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dd8:	f200 8082 	bhi.w	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008de2:	d027      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dea:	d879      	bhi.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008df2:	d017      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dfa:	d871      	bhi.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e08:	d004      	beq.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008e0a:	e069      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008e0c:	f7fb ffc6 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8008e10:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008e12:	e068      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e14:	f107 0314 	add.w	r3, r7, #20
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe f8f7 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e22:	e060      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fa5b 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e32:	e058      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e34:	4b7c      	ldr	r3, [pc, #496]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d103      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e48:	e04d      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e4e:	e04a      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008e50:	4b75      	ldr	r3, [pc, #468]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e5e:	d103      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008e60:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e66:	e03e      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e6c:	e03b      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e74:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d10c      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e8c:	4b66      	ldr	r3, [pc, #408]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	08db      	lsrs	r3, r3, #3
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	4a65      	ldr	r2, [pc, #404]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9e:	e01e      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ea0:	4b61      	ldr	r3, [pc, #388]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eac:	d106      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb4:	d102      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eba:	e010      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ec8:	d106      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ed0:	d102      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ed2:	4b58      	ldr	r3, [pc, #352]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed6:	e002      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008edc:	e003      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008ede:	e002      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ee4:	bf00      	nop
          }
        }
        break;
 8008ee6:	f000 beb4 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008eea:	4b4f      	ldr	r3, [pc, #316]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008eec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ef0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008efc:	d056      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f04:	f200 808b 	bhi.w	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f0e:	d03e      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f16:	f200 8082 	bhi.w	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f20:	d027      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f28:	d879      	bhi.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f30:	d017      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f38:	d871      	bhi.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f46:	d004      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008f48:	e069      	b.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008f4a:	f7fb ff53 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 8008f4e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008f50:	e068      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe f858 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f60:	e060      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe f9bc 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f70:	e058      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f72:	4b2d      	ldr	r3, [pc, #180]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d103      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f84:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f86:	e04d      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f8c:	e04a      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f8e:	4b26      	ldr	r3, [pc, #152]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f9c:	d103      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008f9e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008fa4:	e03e      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008faa:	e03b      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fac:	4b1e      	ldr	r3, [pc, #120]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fb2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d10c      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fca:	4b17      	ldr	r3, [pc, #92]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	08db      	lsrs	r3, r3, #3
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	4a15      	ldr	r2, [pc, #84]	@ (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fdc:	e01e      	b.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fde:	4b12      	ldr	r3, [pc, #72]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fea:	d106      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff2:	d102      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff8:	e010      	b.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009006:	d106      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800900e:	d102      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009010:	4b08      	ldr	r3, [pc, #32]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
 8009014:	e002      	b.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800901a:	e003      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800901c:	e002      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009022:	bf00      	nop
          }
        }
        break;
 8009024:	f000 be15 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009028:	44020c00 	.word	0x44020c00
 800902c:	03d09000 	.word	0x03d09000
 8009030:	003d0900 	.word	0x003d0900
 8009034:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009038:	4b9e      	ldr	r3, [pc, #632]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800903a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800903e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009042:	633b      	str	r3, [r7, #48]	@ 0x30
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800904a:	d056      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009052:	f200 808b 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800905c:	d03e      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009064:	f200 8082 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800906e:	d027      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009076:	d879      	bhi.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800907e:	d017      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009086:	d871      	bhi.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	2b00      	cmp	r3, #0
 800908c:	d004      	beq.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009094:	d004      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009096:	e069      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009098:	f7fb feac 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 800909c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800909e:	e068      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fd ffb1 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090ae:	e060      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe f915 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090be:	e058      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80090c0:	4b7c      	ldr	r3, [pc, #496]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80090c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d103      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80090ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090d4:	e04d      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090da:	e04a      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80090dc:	4b75      	ldr	r3, [pc, #468]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80090de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090ea:	d103      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80090ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090f2:	e03e      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090f8:	e03b      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090fa:	4b6e      	ldr	r3, [pc, #440]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80090fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009100:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009104:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009106:	4b6b      	ldr	r3, [pc, #428]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	2b02      	cmp	r3, #2
 8009110:	d10c      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009118:	4b66      	ldr	r3, [pc, #408]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	08db      	lsrs	r3, r3, #3
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	4a65      	ldr	r2, [pc, #404]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009124:	fa22 f303 	lsr.w	r3, r2, r3
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	e01e      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800912c:	4b61      	ldr	r3, [pc, #388]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009138:	d106      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800913a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009140:	d102      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009142:	4b5e      	ldr	r3, [pc, #376]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
 8009146:	e010      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009148:	4b5a      	ldr	r3, [pc, #360]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009154:	d106      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800915c:	d102      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800915e:	4b58      	ldr	r3, [pc, #352]	@ (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
 8009162:	e002      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009168:	e003      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800916a:	e002      	b.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009170:	bf00      	nop
          }
        }
        break;
 8009172:	f000 bd6e 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009176:	4b4f      	ldr	r3, [pc, #316]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009178:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800917c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009180:	633b      	str	r3, [r7, #48]	@ 0x30
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009188:	d056      	beq.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009190:	f200 808b 	bhi.w	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800919a:	d03e      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091a2:	f200 8082 	bhi.w	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091ac:	d027      	beq.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80091ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091b4:	d879      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091bc:	d017      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091c4:	d871      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80091cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091d2:	d004      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80091d4:	e069      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80091d6:	f7fb fe0d 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 80091da:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80091dc:	e068      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091de:	f107 0314 	add.w	r3, r7, #20
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fd ff12 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ec:	e060      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ee:	f107 0308 	add.w	r3, r7, #8
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe f876 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091fc:	e058      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091fe:	4b2d      	ldr	r3, [pc, #180]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d103      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800920c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009210:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009212:	e04d      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009218:	e04a      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800921a:	4b26      	ldr	r3, [pc, #152]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800921c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009228:	d103      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800922a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009230:	e03e      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009236:	e03b      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009238:	4b1e      	ldr	r3, [pc, #120]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800923a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800923e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009242:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009244:	4b1b      	ldr	r3, [pc, #108]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b02      	cmp	r3, #2
 800924e:	d10c      	bne.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009256:	4b17      	ldr	r3, [pc, #92]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	08db      	lsrs	r3, r3, #3
 800925c:	f003 0303 	and.w	r3, r3, #3
 8009260:	4a15      	ldr	r2, [pc, #84]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009262:	fa22 f303 	lsr.w	r3, r2, r3
 8009266:	637b      	str	r3, [r7, #52]	@ 0x34
 8009268:	e01e      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926a:	4b12      	ldr	r3, [pc, #72]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009276:	d106      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927e:	d102      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009282:	637b      	str	r3, [r7, #52]	@ 0x34
 8009284:	e010      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009286:	4b0b      	ldr	r3, [pc, #44]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800928e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009292:	d106      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800929a:	d102      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800929c:	4b08      	ldr	r3, [pc, #32]	@ (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a0:	e002      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80092a6:	e003      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80092a8:	e002      	b.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ae:	bf00      	nop
          }
        }
        break;
 80092b0:	f000 bccf 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092b4:	44020c00 	.word	0x44020c00
 80092b8:	03d09000 	.word	0x03d09000
 80092bc:	003d0900 	.word	0x003d0900
 80092c0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80092c4:	4b9e      	ldr	r3, [pc, #632]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80092c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80092ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80092ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092d6:	d056      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092de:	f200 808b 	bhi.w	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e8:	d03e      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092f0:	f200 8082 	bhi.w	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80092fa:	d027      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009302:	d879      	bhi.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800930a:	d017      	beq.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009312:	d871      	bhi.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	2b00      	cmp	r3, #0
 8009318:	d004      	beq.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009320:	d004      	beq.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009322:	e069      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009324:	f7fb fd66 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 8009328:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800932a:	e068      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932c:	f107 0314 	add.w	r3, r7, #20
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd fe6b 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933a:	e060      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	4618      	mov	r0, r3
 8009342:	f7fd ffcf 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800934a:	e058      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800934c:	4b7c      	ldr	r3, [pc, #496]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800934e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d103      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800935a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009360:	e04d      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009366:	e04a      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009368:	4b75      	ldr	r3, [pc, #468]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800936a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800936e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009376:	d103      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009378:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800937e:	e03e      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009384:	e03b      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009386:	4b6e      	ldr	r3, [pc, #440]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800938c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009390:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009392:	4b6b      	ldr	r3, [pc, #428]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b02      	cmp	r3, #2
 800939c:	d10c      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d109      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093a4:	4b66      	ldr	r3, [pc, #408]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	08db      	lsrs	r3, r3, #3
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	4a65      	ldr	r2, [pc, #404]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80093b0:	fa22 f303 	lsr.w	r3, r2, r3
 80093b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b6:	e01e      	b.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b8:	4b61      	ldr	r3, [pc, #388]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c4:	d106      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80093c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093cc:	d102      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093ce:	4b5e      	ldr	r3, [pc, #376]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d2:	e010      	b.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093d4:	4b5a      	ldr	r3, [pc, #360]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093e0:	d106      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80093e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093e8:	d102      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093ea:	4b58      	ldr	r3, [pc, #352]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ee:	e002      	b.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093f4:	e003      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80093f6:	e002      	b.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093fc:	bf00      	nop
          }
        }
        break;
 80093fe:	f000 bc28 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009402:	4b4f      	ldr	r3, [pc, #316]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800940c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800940e:	4b4c      	ldr	r3, [pc, #304]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800941a:	d106      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941e:	2b00      	cmp	r3, #0
 8009420:	d103      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009422:	4b4a      	ldr	r3, [pc, #296]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009424:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009426:	f000 bc14 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009430:	d108      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009432:	f107 0320 	add.w	r3, r7, #32
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd fc7c 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009440:	f000 bc07 	b.w	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800944a:	d107      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800944c:	f107 0314 	add.w	r3, r7, #20
 8009450:	4618      	mov	r0, r3
 8009452:	f7fd fddb 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800945a:	e3fa      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800945c:	2300      	movs	r3, #0
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009460:	e3f7      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009462:	4b37      	ldr	r3, [pc, #220]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	633b      	str	r3, [r7, #48]	@ 0x30
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	2b04      	cmp	r3, #4
 8009472:	d861      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009474:	a201      	add	r2, pc, #4	@ (adr r2, 800947c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	08009491 	.word	0x08009491
 8009480:	080094a1 	.word	0x080094a1
 8009484:	080094b1 	.word	0x080094b1
 8009488:	080094c1 	.word	0x080094c1
 800948c:	080094c7 	.word	0x080094c7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009490:	f107 0320 	add.w	r3, r7, #32
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd fc4d 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800949e:	e04e      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fd fdb1 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094ae:	e046      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fd ff15 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094be:	e03e      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80094c0:	4b23      	ldr	r3, [pc, #140]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094c4:	e03b      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80094d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d10c      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80094de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094e4:	4b16      	ldr	r3, [pc, #88]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	08db      	lsrs	r3, r3, #3
 80094ea:	f003 0303 	and.w	r3, r3, #3
 80094ee:	4a15      	ldr	r2, [pc, #84]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80094f0:	fa22 f303 	lsr.w	r3, r2, r3
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e01e      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094f8:	4b11      	ldr	r3, [pc, #68]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009504:	d106      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800950c:	d102      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
 8009512:	e010      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009514:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009520:	d106      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009528:	d102      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800952a:	4b08      	ldr	r3, [pc, #32]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
 800952e:	e002      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009534:	e003      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009536:	e002      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800953c:	bf00      	nop
          }
        }
        break;
 800953e:	e388      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009540:	44020c00 	.word	0x44020c00
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	007a1200 	.word	0x007a1200
 8009550:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009554:	4ba9      	ldr	r3, [pc, #676]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800955a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800955e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	2b20      	cmp	r3, #32
 8009564:	f200 809a 	bhi.w	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009568:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	080095f5 	.word	0x080095f5
 8009574:	0800969d 	.word	0x0800969d
 8009578:	0800969d 	.word	0x0800969d
 800957c:	0800969d 	.word	0x0800969d
 8009580:	0800969d 	.word	0x0800969d
 8009584:	0800969d 	.word	0x0800969d
 8009588:	0800969d 	.word	0x0800969d
 800958c:	0800969d 	.word	0x0800969d
 8009590:	08009605 	.word	0x08009605
 8009594:	0800969d 	.word	0x0800969d
 8009598:	0800969d 	.word	0x0800969d
 800959c:	0800969d 	.word	0x0800969d
 80095a0:	0800969d 	.word	0x0800969d
 80095a4:	0800969d 	.word	0x0800969d
 80095a8:	0800969d 	.word	0x0800969d
 80095ac:	0800969d 	.word	0x0800969d
 80095b0:	08009615 	.word	0x08009615
 80095b4:	0800969d 	.word	0x0800969d
 80095b8:	0800969d 	.word	0x0800969d
 80095bc:	0800969d 	.word	0x0800969d
 80095c0:	0800969d 	.word	0x0800969d
 80095c4:	0800969d 	.word	0x0800969d
 80095c8:	0800969d 	.word	0x0800969d
 80095cc:	0800969d 	.word	0x0800969d
 80095d0:	08009625 	.word	0x08009625
 80095d4:	0800969d 	.word	0x0800969d
 80095d8:	0800969d 	.word	0x0800969d
 80095dc:	0800969d 	.word	0x0800969d
 80095e0:	0800969d 	.word	0x0800969d
 80095e4:	0800969d 	.word	0x0800969d
 80095e8:	0800969d 	.word	0x0800969d
 80095ec:	0800969d 	.word	0x0800969d
 80095f0:	0800962b 	.word	0x0800962b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f4:	f107 0320 	add.w	r3, r7, #32
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fd fb9b 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009602:	e04e      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd fcff 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009612:	e046      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009614:	f107 0308 	add.w	r3, r7, #8
 8009618:	4618      	mov	r0, r3
 800961a:	f7fd fe63 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009622:	e03e      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009624:	4b76      	ldr	r3, [pc, #472]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009628:	e03b      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800962a:	4b74      	ldr	r3, [pc, #464]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800962c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009630:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009634:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009636:	4b71      	ldr	r3, [pc, #452]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b02      	cmp	r3, #2
 8009640:	d10c      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009648:	4b6c      	ldr	r3, [pc, #432]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	08db      	lsrs	r3, r3, #3
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	4a6c      	ldr	r2, [pc, #432]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
 800965a:	e01e      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800965c:	4b67      	ldr	r3, [pc, #412]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009668:	d106      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009670:	d102      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009672:	4b65      	ldr	r3, [pc, #404]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	e010      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009678:	4b60      	ldr	r3, [pc, #384]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009684:	d106      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800968c:	d102      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800968e:	4b5f      	ldr	r3, [pc, #380]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
 8009692:	e002      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009698:	e003      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800969a:	e002      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a0:	bf00      	nop
          }
        }
        break;
 80096a2:	e2d6      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80096a4:	4b55      	ldr	r3, [pc, #340]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80096a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80096ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b6:	d031      	beq.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096be:	d866      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80096c4:	d027      	beq.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80096c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80096ca:	d860      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	2b80      	cmp	r3, #128	@ 0x80
 80096d0:	d019      	beq.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	2b80      	cmp	r3, #128	@ 0x80
 80096d6:	d85a      	bhi.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80096d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	2b40      	cmp	r3, #64	@ 0x40
 80096e2:	d008      	beq.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80096e4:	e053      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096e6:	f107 0320 	add.w	r3, r7, #32
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fd fb22 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096f4:	e04e      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f6:	f107 0314 	add.w	r3, r7, #20
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fd fc86 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009704:	e046      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009706:	f107 0308 	add.w	r3, r7, #8
 800970a:	4618      	mov	r0, r3
 800970c:	f7fd fdea 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009714:	e03e      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009716:	4b3a      	ldr	r3, [pc, #232]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009718:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800971a:	e03b      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800971c:	4b37      	ldr	r3, [pc, #220]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800971e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009722:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009726:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009728:	4b34      	ldr	r3, [pc, #208]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b02      	cmp	r3, #2
 8009732:	d10c      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d109      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800973a:	4b30      	ldr	r3, [pc, #192]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	08db      	lsrs	r3, r3, #3
 8009740:	f003 0303 	and.w	r3, r3, #3
 8009744:	4a2f      	ldr	r2, [pc, #188]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009746:	fa22 f303 	lsr.w	r3, r2, r3
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
 800974c:	e01e      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800974e:	4b2b      	ldr	r3, [pc, #172]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800975a:	d106      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009762:	d102      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009764:	4b28      	ldr	r3, [pc, #160]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
 8009768:	e010      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800976a:	4b24      	ldr	r3, [pc, #144]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009776:	d106      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800977e:	d102      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009780:	4b22      	ldr	r3, [pc, #136]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
 8009784:	e002      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800978a:	e003      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800978c:	e002      	b.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009792:	bf00      	nop
          }
        }
        break;
 8009794:	e25d      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009796:	4b19      	ldr	r3, [pc, #100]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800979c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80097a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80097a8:	f7fb fb0e 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 80097ac:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80097ae:	e250      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80097b0:	4b12      	ldr	r3, [pc, #72]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097bc:	d10b      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097c4:	d107      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097c6:	f107 0314 	add.w	r3, r7, #20
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fd fc1e 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d4:	e04f      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80097d6:	4b09      	ldr	r3, [pc, #36]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097e2:	d115      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80097e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ea:	d111      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fd fd77 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fa:	e03c      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80097fc:	44020c00 	.word	0x44020c00
 8009800:	00bb8000 	.word	0x00bb8000
 8009804:	03d09000 	.word	0x03d09000
 8009808:	003d0900 	.word	0x003d0900
 800980c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009810:	4b94      	ldr	r3, [pc, #592]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d10d      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009822:	d109      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009824:	4b8f      	ldr	r3, [pc, #572]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	4a8e      	ldr	r2, [pc, #568]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
 8009836:	e01e      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009838:	4b8a      	ldr	r3, [pc, #552]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009844:	d106      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800984c:	d102      	bne.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800984e:	4b87      	ldr	r3, [pc, #540]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
 8009852:	e010      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009854:	4b83      	ldr	r3, [pc, #524]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800985c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009860:	d106      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009868:	d102      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800986a:	4b81      	ldr	r3, [pc, #516]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
 800986e:	e002      	b.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009874:	e1ed      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009876:	e1ec      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009878:	4b7a      	ldr	r3, [pc, #488]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800987a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800987e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009882:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	2b00      	cmp	r3, #0
 8009888:	d103      	bne.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800988a:	f7fb fab3 	bl	8004df4 <HAL_RCC_GetPCLK3Freq>
 800988e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009890:	e1df      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009892:	4b74      	ldr	r3, [pc, #464]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800989a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800989e:	d10b      	bne.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098a6:	d107      	bne.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a8:	f107 0314 	add.w	r3, r7, #20
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fd fbad 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b6:	e045      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80098b8:	4b6a      	ldr	r3, [pc, #424]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098c4:	d10b      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ce:	f107 0308 	add.w	r3, r7, #8
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd fd06 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
 80098dc:	e032      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80098de:	4b61      	ldr	r3, [pc, #388]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d10d      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098f0:	d109      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098f2:	4b5c      	ldr	r3, [pc, #368]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	08db      	lsrs	r3, r3, #3
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	4a5a      	ldr	r2, [pc, #360]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
 8009904:	e01e      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009906:	4b57      	ldr	r3, [pc, #348]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800990e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009912:	d106      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800991a:	d102      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800991c:	4b53      	ldr	r3, [pc, #332]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800991e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009920:	e010      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009922:	4b50      	ldr	r3, [pc, #320]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800992a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800992e:	d106      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009936:	d102      	bne.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009938:	4b4d      	ldr	r3, [pc, #308]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800993a:	637b      	str	r3, [r7, #52]	@ 0x34
 800993c:	e002      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009942:	e186      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009944:	e185      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009946:	4b47      	ldr	r3, [pc, #284]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800994c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009950:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009958:	f7fb fa36 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 800995c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800995e:	e178      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009960:	4b40      	ldr	r3, [pc, #256]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800996c:	d10b      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009974:	d107      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009976:	f107 0314 	add.w	r3, r7, #20
 800997a:	4618      	mov	r0, r3
 800997c:	f7fd fb46 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	637b      	str	r3, [r7, #52]	@ 0x34
 8009984:	e045      	b.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009986:	4b37      	ldr	r3, [pc, #220]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800998e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009992:	d10b      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800999a:	d107      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fd fc9f 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099aa:	e032      	b.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80099ac:	4b2d      	ldr	r3, [pc, #180]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d10d      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80099be:	d109      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099c0:	4b28      	ldr	r3, [pc, #160]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	08db      	lsrs	r3, r3, #3
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	4a27      	ldr	r2, [pc, #156]	@ (8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80099cc:	fa22 f303 	lsr.w	r3, r2, r3
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d2:	e01e      	b.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80099d4:	4b23      	ldr	r3, [pc, #140]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e0:	d106      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099e8:	d102      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80099ea:	4b20      	ldr	r3, [pc, #128]	@ (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80099ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ee:	e010      	b.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80099f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099fc:	d106      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009a04:	d102      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009a06:	4b1a      	ldr	r3, [pc, #104]	@ (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0a:	e002      	b.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a10:	e11f      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a12:	e11e      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d85f      	bhi.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009a26:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a45 	.word	0x08009a45
 8009a34:	08009a55 	.word	0x08009a55
 8009a38:	08009a75 	.word	0x08009a75

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009a3c:	f7fb f992 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8009a40:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009a42:	e053      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a44:	f107 0320 	add.w	r3, r7, #32
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fd f973 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a52:	e04b      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a54:	f107 0314 	add.w	r3, r7, #20
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fd fad7 	bl	800700c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a62:	e043      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009a64:	44020c00 	.word	0x44020c00
 8009a68:	03d09000 	.word	0x03d09000
 8009a6c:	003d0900 	.word	0x003d0900
 8009a70:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a74:	4b79      	ldr	r3, [pc, #484]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a80:	4b76      	ldr	r3, [pc, #472]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d10c      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d109      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a92:	4b72      	ldr	r3, [pc, #456]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	4a70      	ldr	r2, [pc, #448]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa4:	e01e      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab2:	d106      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aba:	d102      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009abc:	4b69      	ldr	r3, [pc, #420]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac0:	e010      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac2:	4b66      	ldr	r3, [pc, #408]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ace:	d106      	bne.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ad6:	d102      	bne.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ad8:	4b63      	ldr	r3, [pc, #396]	@ (8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8009adc:	e002      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009ae2:	e003      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009ae4:	e002      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aea:	bf00      	nop
          }
        }
        break;
 8009aec:	e0b1      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009aee:	4b5b      	ldr	r3, [pc, #364]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009af4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009af8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009afa:	4b58      	ldr	r3, [pc, #352]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d106      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b14:	e01f      	b.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009b16:	4b51      	ldr	r3, [pc, #324]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b24:	d106      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	2b40      	cmp	r3, #64	@ 0x40
 8009b2a:	d103      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009b2c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b32:	e010      	b.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009b34:	4b49      	ldr	r3, [pc, #292]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b40:	d106      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	2b80      	cmp	r3, #128	@ 0x80
 8009b46:	d103      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009b48:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4e:	e002      	b.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009b54:	e07d      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b56:	e07c      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009b58:	4b40      	ldr	r3, [pc, #256]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b62:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009b64:	4b3d      	ldr	r3, [pc, #244]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b70:	d105      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009b78:	4b3c      	ldr	r3, [pc, #240]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7c:	e031      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009b7e:	4b37      	ldr	r3, [pc, #220]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b8a:	d10a      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d107      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b92:	f107 0320 	add.w	r3, r7, #32
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fd f8cc 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba0:	e01f      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d106      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d103      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbc:	e011      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009bbe:	4b27      	ldr	r3, [pc, #156]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bcc:	d106      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	2b30      	cmp	r3, #48	@ 0x30
 8009bd2:	d103      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009bd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bda:	e002      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009be0:	e037      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009be2:	e036      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009be4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009be6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009bee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	d107      	bne.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bf6:	f107 0320 	add.w	r3, r7, #32
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fd f89a 	bl	8006d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009c04:	e025      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009c06:	4b15      	ldr	r3, [pc, #84]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c12:	d10a      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	d107      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c1a:	f107 0308 	add.w	r3, r7, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd fb60 	bl	80072e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c28:	e00f      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c36:	d105      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	2b30      	cmp	r3, #48	@ 0x30
 8009c3c:	d102      	bne.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c42:	e002      	b.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009c48:	e003      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c4a:	e002      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c50:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	373c      	adds	r7, #60	@ 0x3c
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd90      	pop	{r4, r7, pc}
 8009c5c:	44020c00 	.word	0x44020c00
 8009c60:	03d09000 	.word	0x03d09000
 8009c64:	003d0900 	.word	0x003d0900
 8009c68:	007a1200 	.word	0x007a1200
 8009c6c:	02dc6c00 	.word	0x02dc6c00

08009c70 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009c78:	4b48      	ldr	r3, [pc, #288]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a47      	ldr	r2, [pc, #284]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c84:	f7f7 ff6a 	bl	8001b5c <HAL_GetTick>
 8009c88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c8a:	e008      	b.n	8009c9e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c8c:	f7f7 ff66 	bl	8001b5c <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d901      	bls.n	8009c9e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e07a      	b.n	8009d94 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1f0      	bne.n	8009c8c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009caa:	4b3c      	ldr	r3, [pc, #240]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009cb2:	f023 0303 	bic.w	r3, r3, #3
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	6811      	ldr	r1, [r2, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	6852      	ldr	r2, [r2, #4]
 8009cbe:	0212      	lsls	r2, r2, #8
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	4936      	ldr	r1, [pc, #216]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	025b      	lsls	r3, r3, #9
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	431a      	orrs	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	041b      	lsls	r3, r3, #16
 8009ce6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	061b      	lsls	r3, r3, #24
 8009cf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009cf8:	4928      	ldr	r1, [pc, #160]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009cfe:	4b27      	ldr	r3, [pc, #156]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d02:	f023 020c 	bic.w	r2, r3, #12
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	4924      	ldr	r1, [pc, #144]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009d10:	4b22      	ldr	r3, [pc, #136]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d14:	f023 0220 	bic.w	r2, r3, #32
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	491f      	ldr	r1, [pc, #124]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009d22:	4b1e      	ldr	r3, [pc, #120]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2a:	491c      	ldr	r1, [pc, #112]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009d30:	4b1a      	ldr	r3, [pc, #104]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d34:	4a19      	ldr	r2, [pc, #100]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d36:	f023 0310 	bic.w	r3, r3, #16
 8009d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009d3c:	4b17      	ldr	r3, [pc, #92]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d44:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	6a12      	ldr	r2, [r2, #32]
 8009d4c:	00d2      	lsls	r2, r2, #3
 8009d4e:	4913      	ldr	r1, [pc, #76]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009d54:	4b11      	ldr	r3, [pc, #68]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d58:	4a10      	ldr	r2, [pc, #64]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d5a:	f043 0310 	orr.w	r3, r3, #16
 8009d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009d60:	4b0e      	ldr	r3, [pc, #56]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a0d      	ldr	r2, [pc, #52]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009d6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d6c:	f7f7 fef6 	bl	8001b5c <HAL_GetTick>
 8009d70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d72:	e008      	b.n	8009d86 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d74:	f7f7 fef2 	bl	8001b5c <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d901      	bls.n	8009d86 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e006      	b.n	8009d94 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d86:	4b05      	ldr	r3, [pc, #20]	@ (8009d9c <RCCEx_PLL2_Config+0x12c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f0      	beq.n	8009d74 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009d92:	2300      	movs	r3, #0

}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	44020c00 	.word	0x44020c00

08009da0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009da8:	4b48      	ldr	r3, [pc, #288]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a47      	ldr	r2, [pc, #284]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009db2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009db4:	f7f7 fed2 	bl	8001b5c <HAL_GetTick>
 8009db8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009dba:	e008      	b.n	8009dce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dbc:	f7f7 fece 	bl	8001b5c <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d901      	bls.n	8009dce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e07a      	b.n	8009ec4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009dce:	4b3f      	ldr	r3, [pc, #252]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f0      	bne.n	8009dbc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009dda:	4b3c      	ldr	r3, [pc, #240]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dde:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009de2:	f023 0303 	bic.w	r3, r3, #3
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6811      	ldr	r1, [r2, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6852      	ldr	r2, [r2, #4]
 8009dee:	0212      	lsls	r2, r2, #8
 8009df0:	430a      	orrs	r2, r1
 8009df2:	4936      	ldr	r1, [pc, #216]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	630b      	str	r3, [r1, #48]	@ 0x30
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	025b      	lsls	r3, r3, #9
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	041b      	lsls	r3, r3, #16
 8009e16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	061b      	lsls	r3, r3, #24
 8009e24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e28:	4928      	ldr	r1, [pc, #160]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e2e:	4b27      	ldr	r3, [pc, #156]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e32:	f023 020c 	bic.w	r2, r3, #12
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	4924      	ldr	r1, [pc, #144]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009e40:	4b22      	ldr	r3, [pc, #136]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e44:	f023 0220 	bic.w	r2, r3, #32
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	491f      	ldr	r1, [pc, #124]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009e52:	4b1e      	ldr	r3, [pc, #120]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5a:	491c      	ldr	r1, [pc, #112]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009e60:	4b1a      	ldr	r3, [pc, #104]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e64:	4a19      	ldr	r2, [pc, #100]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e66:	f023 0310 	bic.w	r3, r3, #16
 8009e6a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009e6c:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6a12      	ldr	r2, [r2, #32]
 8009e7c:	00d2      	lsls	r2, r2, #3
 8009e7e:	4913      	ldr	r1, [pc, #76]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009e84:	4b11      	ldr	r3, [pc, #68]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e88:	4a10      	ldr	r2, [pc, #64]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e8a:	f043 0310 	orr.w	r3, r3, #16
 8009e8e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009e90:	4b0e      	ldr	r3, [pc, #56]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a0d      	ldr	r2, [pc, #52]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e9c:	f7f7 fe5e 	bl	8001b5c <HAL_GetTick>
 8009ea0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ea2:	e008      	b.n	8009eb6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ea4:	f7f7 fe5a 	bl	8001b5c <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d901      	bls.n	8009eb6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e006      	b.n	8009ec4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009eb6:	4b05      	ldr	r3, [pc, #20]	@ (8009ecc <RCCEx_PLL3_Config+0x12c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	44020c00 	.word	0x44020c00

08009ed0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d071      	beq.n	8009fc6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f6 ffea 	bl	8000ed0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009f04:	4b32      	ldr	r3, [pc, #200]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b10      	cmp	r3, #16
 8009f0e:	d051      	beq.n	8009fb4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f10:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f12:	22ca      	movs	r2, #202	@ 0xca
 8009f14:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f16:	4b2e      	ldr	r3, [pc, #184]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f18:	2253      	movs	r2, #83	@ 0x53
 8009f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9a3 	bl	800a268 <RTC_EnterInitMode>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d13f      	bne.n	8009fac <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009f2c:	4b28      	ldr	r3, [pc, #160]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	4a27      	ldr	r2, [pc, #156]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f32:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8009f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f3a:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009f3c:	4b24      	ldr	r3, [pc, #144]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6859      	ldr	r1, [r3, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	4319      	orrs	r1, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	491f      	ldr	r1, [pc, #124]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	041b      	lsls	r3, r3, #16
 8009f60:	491b      	ldr	r1, [pc, #108]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009f66:	4b1a      	ldr	r3, [pc, #104]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	430b      	orrs	r3, r1
 8009f78:	4915      	ldr	r1, [pc, #84]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f9ae 	bl	800a2e0 <RTC_ExitInitMode>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10e      	bne.n	8009fac <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8009f8e:	4b10      	ldr	r3, [pc, #64]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a19      	ldr	r1, [r3, #32]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	4319      	orrs	r1, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	490a      	ldr	r1, [pc, #40]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fac:	4b08      	ldr	r3, [pc, #32]	@ (8009fd0 <HAL_RTC_Init+0x100>)
 8009fae:	22ff      	movs	r2, #255	@ 0xff
 8009fb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fb2:	e001      	b.n	8009fb8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d103      	bne.n	8009fc6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	44007800 	.word	0x44007800

08009fd4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_RTC_SetTime+0x1a>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e07e      	b.n	800a0ec <HAL_RTC_SetTime+0x118>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ffe:	4b3d      	ldr	r3, [pc, #244]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a000:	22ca      	movs	r2, #202	@ 0xca
 800a002:	625a      	str	r2, [r3, #36]	@ 0x24
 800a004:	4b3b      	ldr	r3, [pc, #236]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a006:	2253      	movs	r2, #83	@ 0x53
 800a008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 f92c 	bl	800a268 <RTC_EnterInitMode>
 800a010:	4603      	mov	r3, r0
 800a012:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a014:	7cfb      	ldrb	r3, [r7, #19]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d159      	bne.n	800a0ce <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a01a:	4b36      	ldr	r3, [pc, #216]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a026:	d04d      	beq.n	800a0c4 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d125      	bne.n	800a07a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a02e:	4b31      	ldr	r3, [pc, #196]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2200      	movs	r2, #0
 800a03e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f989 	bl	800a35c <RTC_ByteToBcd2>
 800a04a:	4603      	mov	r3, r0
 800a04c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	785b      	ldrb	r3, [r3, #1]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f982 	bl	800a35c <RTC_ByteToBcd2>
 800a058:	4603      	mov	r3, r0
 800a05a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a05c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	789b      	ldrb	r3, [r3, #2]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f97a 	bl	800a35c <RTC_ByteToBcd2>
 800a068:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a06a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	78db      	ldrb	r3, [r3, #3]
 800a072:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a074:	4313      	orrs	r3, r2
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	e017      	b.n	800a0aa <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a07a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	d102      	bne.n	800a08c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2200      	movs	r2, #0
 800a08a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a098:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a09e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	78db      	ldrb	r3, [r3, #3]
 800a0a4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a0aa:	4a12      	ldr	r2, [pc, #72]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a0b2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a0b6:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a0be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0c2:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f90b 	bl	800a2e0 <RTC_ExitInitMode>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0ce:	4b09      	ldr	r3, [pc, #36]	@ (800a0f4 <HAL_RTC_SetTime+0x120>)
 800a0d0:	22ff      	movs	r2, #255	@ 0xff
 800a0d2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a0d4:	7cfb      	ldrb	r3, [r7, #19]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a0ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	371c      	adds	r7, #28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd90      	pop	{r4, r7, pc}
 800a0f4:	44007800 	.word	0x44007800

0800a0f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a0f8:	b590      	push	{r4, r7, lr}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_RTC_SetDate+0x1a>
 800a10e:	2302      	movs	r3, #2
 800a110:	e071      	b.n	800a1f6 <HAL_RTC_SetDate+0xfe>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10e      	bne.n	800a146 <HAL_RTC_SetDate+0x4e>
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d008      	beq.n	800a146 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	785b      	ldrb	r3, [r3, #1]
 800a138:	f023 0310 	bic.w	r3, r3, #16
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	330a      	adds	r3, #10
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d11c      	bne.n	800a186 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	78db      	ldrb	r3, [r3, #3]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f903 	bl	800a35c <RTC_ByteToBcd2>
 800a156:	4603      	mov	r3, r0
 800a158:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	785b      	ldrb	r3, [r3, #1]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f8fc 	bl	800a35c <RTC_ByteToBcd2>
 800a164:	4603      	mov	r3, r0
 800a166:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a168:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	789b      	ldrb	r3, [r3, #2]
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 f8f4 	bl	800a35c <RTC_ByteToBcd2>
 800a174:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a176:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e00e      	b.n	800a1a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	78db      	ldrb	r3, [r3, #3]
 800a18a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	785b      	ldrb	r3, [r3, #1]
 800a190:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a192:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a198:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1a4:	4b16      	ldr	r3, [pc, #88]	@ (800a200 <HAL_RTC_SetDate+0x108>)
 800a1a6:	22ca      	movs	r2, #202	@ 0xca
 800a1a8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1aa:	4b15      	ldr	r3, [pc, #84]	@ (800a200 <HAL_RTC_SetDate+0x108>)
 800a1ac:	2253      	movs	r2, #83	@ 0x53
 800a1ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f859 	bl	800a268 <RTC_EnterInitMode>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a1ba:	7cfb      	ldrb	r3, [r7, #19]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a1c0:	4a0f      	ldr	r2, [pc, #60]	@ (800a200 <HAL_RTC_SetDate+0x108>)
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a1c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 f886 	bl	800a2e0 <RTC_ExitInitMode>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1d8:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <HAL_RTC_SetDate+0x108>)
 800a1da:	22ff      	movs	r2, #255	@ 0xff
 800a1dc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a1de:	7cfb      	ldrb	r3, [r7, #19]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a1f4:	7cfb      	ldrb	r3, [r7, #19]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd90      	pop	{r4, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	44007800 	.word	0x44007800

0800a204 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a20c:	4b15      	ldr	r3, [pc, #84]	@ (800a264 <HAL_RTC_WaitForSynchro+0x60>)
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4a14      	ldr	r2, [pc, #80]	@ (800a264 <HAL_RTC_WaitForSynchro+0x60>)
 800a212:	f023 0320 	bic.w	r3, r3, #32
 800a216:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a218:	f7f7 fca0 	bl	8001b5c <HAL_GetTick>
 800a21c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a21e:	e013      	b.n	800a248 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a220:	f7f7 fc9c 	bl	8001b5c <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a22e:	d90b      	bls.n	800a248 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a230:	4b0c      	ldr	r3, [pc, #48]	@ (800a264 <HAL_RTC_WaitForSynchro+0x60>)
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10c      	bne.n	800a256 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2203      	movs	r2, #3
 800a240:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e008      	b.n	800a25a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a248:	4b06      	ldr	r3, [pc, #24]	@ (800a264 <HAL_RTC_WaitForSynchro+0x60>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0e5      	beq.n	800a220 <HAL_RTC_WaitForSynchro+0x1c>
 800a254:	e000      	b.n	800a258 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a256:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	44007800 	.word	0x44007800

0800a268 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a274:	4b19      	ldr	r3, [pc, #100]	@ (800a2dc <RTC_EnterInitMode+0x74>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d128      	bne.n	800a2d2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a280:	4b16      	ldr	r3, [pc, #88]	@ (800a2dc <RTC_EnterInitMode+0x74>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	4a15      	ldr	r2, [pc, #84]	@ (800a2dc <RTC_EnterInitMode+0x74>)
 800a286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a28a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a28c:	f7f7 fc66 	bl	8001b5c <HAL_GetTick>
 800a290:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a292:	e013      	b.n	800a2bc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a294:	f7f7 fc62 	bl	8001b5c <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a2a2:	d90b      	bls.n	800a2bc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <RTC_EnterInitMode+0x74>)
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10f      	bne.n	800a2d0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a2bc:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <RTC_EnterInitMode+0x74>)
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <RTC_EnterInitMode+0x6a>
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d1e2      	bne.n	800a294 <RTC_EnterInitMode+0x2c>
 800a2ce:	e000      	b.n	800a2d2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a2d0:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	44007800 	.word	0x44007800

0800a2e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a2ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	4a19      	ldr	r2, [pc, #100]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a2f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2f6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a2f8:	4b17      	ldr	r3, [pc, #92]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f003 0320 	and.w	r3, r3, #32
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10c      	bne.n	800a31e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff ff7d 	bl	800a204 <HAL_RTC_WaitForSynchro>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01e      	beq.n	800a34e <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2203      	movs	r2, #3
 800a314:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	e017      	b.n	800a34e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a31e:	4b0e      	ldr	r3, [pc, #56]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	4a0d      	ldr	r2, [pc, #52]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a324:	f023 0320 	bic.w	r3, r3, #32
 800a328:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff ff6a 	bl	800a204 <HAL_RTC_WaitForSynchro>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2203      	movs	r2, #3
 800a33a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a342:	4b05      	ldr	r3, [pc, #20]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	4a04      	ldr	r2, [pc, #16]	@ (800a358 <RTC_ExitInitMode+0x78>)
 800a348:	f043 0320 	orr.w	r3, r3, #32
 800a34c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	44007800 	.word	0x44007800

0800a35c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800a36e:	e005      	b.n	800a37c <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	3301      	adds	r3, #1
 800a374:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800a376:	7afb      	ldrb	r3, [r7, #11]
 800a378:	3b0a      	subs	r3, #10
 800a37a:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800a37c:	7afb      	ldrb	r3, [r7, #11]
 800a37e:	2b09      	cmp	r3, #9
 800a380:	d8f6      	bhi.n	800a370 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	7afb      	ldrb	r3, [r7, #11]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	b2db      	uxtb	r3, r3
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	4910      	ldr	r1, [pc, #64]	@ (800a3f0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	490c      	ldr	r1, [pc, #48]	@ (800a3f4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	6919      	ldr	r1, [r3, #16]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	041b      	lsls	r3, r3, #16
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	4905      	ldr	r1, [pc, #20]	@ (800a3f4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	44007800 	.word	0x44007800
 800a3f4:	44007c00 	.word	0x44007c00

0800a3f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e162      	b.n	800a6d0 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a70      	ldr	r2, [pc, #448]	@ (800a5d0 <HAL_SPI_Init+0x1d8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d018      	beq.n	800a446 <HAL_SPI_Init+0x4e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a6e      	ldr	r2, [pc, #440]	@ (800a5d4 <HAL_SPI_Init+0x1dc>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d013      	beq.n	800a446 <HAL_SPI_Init+0x4e>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a6d      	ldr	r2, [pc, #436]	@ (800a5d8 <HAL_SPI_Init+0x1e0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d00e      	beq.n	800a446 <HAL_SPI_Init+0x4e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a6b      	ldr	r2, [pc, #428]	@ (800a5dc <HAL_SPI_Init+0x1e4>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d009      	beq.n	800a446 <HAL_SPI_Init+0x4e>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a6a      	ldr	r2, [pc, #424]	@ (800a5e0 <HAL_SPI_Init+0x1e8>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d004      	beq.n	800a446 <HAL_SPI_Init+0x4e>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a68      	ldr	r2, [pc, #416]	@ (800a5e4 <HAL_SPI_Init+0x1ec>)
 800a442:	4293      	cmp	r3, r2
 800a444:	e000      	b.n	800a448 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a446:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a5f      	ldr	r2, [pc, #380]	@ (800a5d0 <HAL_SPI_Init+0x1d8>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d018      	beq.n	800a48a <HAL_SPI_Init+0x92>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a5d      	ldr	r2, [pc, #372]	@ (800a5d4 <HAL_SPI_Init+0x1dc>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <HAL_SPI_Init+0x92>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a5c      	ldr	r2, [pc, #368]	@ (800a5d8 <HAL_SPI_Init+0x1e0>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d00e      	beq.n	800a48a <HAL_SPI_Init+0x92>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a5a      	ldr	r2, [pc, #360]	@ (800a5dc <HAL_SPI_Init+0x1e4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d009      	beq.n	800a48a <HAL_SPI_Init+0x92>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a59      	ldr	r2, [pc, #356]	@ (800a5e0 <HAL_SPI_Init+0x1e8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d004      	beq.n	800a48a <HAL_SPI_Init+0x92>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a57      	ldr	r2, [pc, #348]	@ (800a5e4 <HAL_SPI_Init+0x1ec>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d105      	bne.n	800a496 <HAL_SPI_Init+0x9e>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	2b0f      	cmp	r3, #15
 800a490:	d901      	bls.n	800a496 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e11c      	b.n	800a6d0 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f91e 	bl	800a6d8 <SPI_GetPacketSize>
 800a49c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a4b      	ldr	r2, [pc, #300]	@ (800a5d0 <HAL_SPI_Init+0x1d8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d018      	beq.n	800a4da <HAL_SPI_Init+0xe2>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a49      	ldr	r2, [pc, #292]	@ (800a5d4 <HAL_SPI_Init+0x1dc>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d013      	beq.n	800a4da <HAL_SPI_Init+0xe2>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a48      	ldr	r2, [pc, #288]	@ (800a5d8 <HAL_SPI_Init+0x1e0>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00e      	beq.n	800a4da <HAL_SPI_Init+0xe2>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a46      	ldr	r2, [pc, #280]	@ (800a5dc <HAL_SPI_Init+0x1e4>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d009      	beq.n	800a4da <HAL_SPI_Init+0xe2>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a45      	ldr	r2, [pc, #276]	@ (800a5e0 <HAL_SPI_Init+0x1e8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d004      	beq.n	800a4da <HAL_SPI_Init+0xe2>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a43      	ldr	r2, [pc, #268]	@ (800a5e4 <HAL_SPI_Init+0x1ec>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d102      	bne.n	800a4e0 <HAL_SPI_Init+0xe8>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d820      	bhi.n	800a522 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4e4:	4a40      	ldr	r2, [pc, #256]	@ (800a5e8 <HAL_SPI_Init+0x1f0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d018      	beq.n	800a51c <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a3f      	ldr	r2, [pc, #252]	@ (800a5ec <HAL_SPI_Init+0x1f4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d013      	beq.n	800a51c <HAL_SPI_Init+0x124>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a3d      	ldr	r2, [pc, #244]	@ (800a5f0 <HAL_SPI_Init+0x1f8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d00e      	beq.n	800a51c <HAL_SPI_Init+0x124>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a3c      	ldr	r2, [pc, #240]	@ (800a5f4 <HAL_SPI_Init+0x1fc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d009      	beq.n	800a51c <HAL_SPI_Init+0x124>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a3a      	ldr	r2, [pc, #232]	@ (800a5f8 <HAL_SPI_Init+0x200>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d004      	beq.n	800a51c <HAL_SPI_Init+0x124>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a39      	ldr	r2, [pc, #228]	@ (800a5fc <HAL_SPI_Init+0x204>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d104      	bne.n	800a526 <HAL_SPI_Init+0x12e>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b10      	cmp	r3, #16
 800a520:	d901      	bls.n	800a526 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e0d4      	b.n	800a6d0 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7f6 fd28 	bl	8000f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0201 	bic.w	r2, r2, #1
 800a556:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a562:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a56c:	d119      	bne.n	800a5a2 <HAL_SPI_Init+0x1aa>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a576:	d103      	bne.n	800a580 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10c      	bne.n	800a5a2 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a590:	d107      	bne.n	800a5a2 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d028      	beq.n	800a600 <HAL_SPI_Init+0x208>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	2b06      	cmp	r3, #6
 800a5b4:	d924      	bls.n	800a600 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	601a      	str	r2, [r3, #0]
 800a5cc:	e020      	b.n	800a610 <HAL_SPI_Init+0x218>
 800a5ce:	bf00      	nop
 800a5d0:	40014c00 	.word	0x40014c00
 800a5d4:	50014c00 	.word	0x50014c00
 800a5d8:	44002000 	.word	0x44002000
 800a5dc:	54002000 	.word	0x54002000
 800a5e0:	40015000 	.word	0x40015000
 800a5e4:	50015000 	.word	0x50015000
 800a5e8:	40013000 	.word	0x40013000
 800a5ec:	50013000 	.word	0x50013000
 800a5f0:	40003800 	.word	0x40003800
 800a5f4:	50003800 	.word	0x50003800
 800a5f8:	40003c00 	.word	0x40003c00
 800a5fc:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a60e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a618:	431a      	orrs	r2, r3
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	431a      	orrs	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a622:	ea42 0103 	orr.w	r1, r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	430a      	orrs	r2, r1
 800a630:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	431a      	orrs	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	431a      	orrs	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	431a      	orrs	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	431a      	orrs	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a670:	431a      	orrs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a676:	431a      	orrs	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a67c:	ea42 0103 	orr.w	r1, r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f022 0201 	bic.w	r2, r2, #1
 800a69a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00a      	beq.n	800a6be <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6e4:	095b      	lsrs	r3, r3, #5
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	3307      	adds	r3, #7
 800a6f6:	08db      	lsrs	r3, r3, #3
 800a6f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e042      	b.n	800a7a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f6 fce8 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2224      	movs	r2, #36	@ 0x24
 800a73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f022 0201 	bic.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fa17 	bl	800ab8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f826 	bl	800a7b0 <UART_SetConfig>
 800a764:	4603      	mov	r3, r0
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e01b      	b.n	800a7a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a77c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a78c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f042 0201 	orr.w	r2, r2, #1
 800a79c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa96 	bl	800acd0 <UART_CheckIdleState>
 800a7a4:	4603      	mov	r3, r0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7b4:	b094      	sub	sp, #80	@ 0x50
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	4b78      	ldr	r3, [pc, #480]	@ (800a9a8 <UART_SetConfig+0x1f8>)
 800a7c6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4971      	ldr	r1, [pc, #452]	@ (800a9ac <UART_SetConfig+0x1fc>)
 800a7e8:	4019      	ands	r1, r3
 800a7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f0:	430b      	orrs	r3, r1
 800a7f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a800:	68d9      	ldr	r1, [r3, #12]
 800a802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	ea40 0301 	orr.w	r3, r0, r1
 800a80a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	4b64      	ldr	r3, [pc, #400]	@ (800a9a8 <UART_SetConfig+0x1f8>)
 800a818:	429a      	cmp	r2, r3
 800a81a:	d009      	beq.n	800a830 <UART_SetConfig+0x80>
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b63      	ldr	r3, [pc, #396]	@ (800a9b0 <UART_SetConfig+0x200>)
 800a822:	429a      	cmp	r2, r3
 800a824:	d004      	beq.n	800a830 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	6a1a      	ldr	r2, [r3, #32]
 800a82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a82c:	4313      	orrs	r3, r2
 800a82e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a83a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a844:	430b      	orrs	r3, r1
 800a846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84e:	f023 000f 	bic.w	r0, r3, #15
 800a852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a854:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	ea40 0301 	orr.w	r3, r0, r1
 800a85e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4b53      	ldr	r3, [pc, #332]	@ (800a9b4 <UART_SetConfig+0x204>)
 800a866:	429a      	cmp	r2, r3
 800a868:	d102      	bne.n	800a870 <UART_SetConfig+0xc0>
 800a86a:	2301      	movs	r3, #1
 800a86c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a86e:	e066      	b.n	800a93e <UART_SetConfig+0x18e>
 800a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	4b50      	ldr	r3, [pc, #320]	@ (800a9b8 <UART_SetConfig+0x208>)
 800a876:	429a      	cmp	r2, r3
 800a878:	d102      	bne.n	800a880 <UART_SetConfig+0xd0>
 800a87a:	2302      	movs	r3, #2
 800a87c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a87e:	e05e      	b.n	800a93e <UART_SetConfig+0x18e>
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	4b4d      	ldr	r3, [pc, #308]	@ (800a9bc <UART_SetConfig+0x20c>)
 800a886:	429a      	cmp	r2, r3
 800a888:	d102      	bne.n	800a890 <UART_SetConfig+0xe0>
 800a88a:	2304      	movs	r3, #4
 800a88c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a88e:	e056      	b.n	800a93e <UART_SetConfig+0x18e>
 800a890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4b4a      	ldr	r3, [pc, #296]	@ (800a9c0 <UART_SetConfig+0x210>)
 800a896:	429a      	cmp	r2, r3
 800a898:	d102      	bne.n	800a8a0 <UART_SetConfig+0xf0>
 800a89a:	2308      	movs	r3, #8
 800a89c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a89e:	e04e      	b.n	800a93e <UART_SetConfig+0x18e>
 800a8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b47      	ldr	r3, [pc, #284]	@ (800a9c4 <UART_SetConfig+0x214>)
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d102      	bne.n	800a8b0 <UART_SetConfig+0x100>
 800a8aa:	2310      	movs	r3, #16
 800a8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ae:	e046      	b.n	800a93e <UART_SetConfig+0x18e>
 800a8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	4b44      	ldr	r3, [pc, #272]	@ (800a9c8 <UART_SetConfig+0x218>)
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d102      	bne.n	800a8c0 <UART_SetConfig+0x110>
 800a8ba:	2320      	movs	r3, #32
 800a8bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8be:	e03e      	b.n	800a93e <UART_SetConfig+0x18e>
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	4b41      	ldr	r3, [pc, #260]	@ (800a9cc <UART_SetConfig+0x21c>)
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d102      	bne.n	800a8d0 <UART_SetConfig+0x120>
 800a8ca:	2340      	movs	r3, #64	@ 0x40
 800a8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ce:	e036      	b.n	800a93e <UART_SetConfig+0x18e>
 800a8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d0 <UART_SetConfig+0x220>)
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d102      	bne.n	800a8e0 <UART_SetConfig+0x130>
 800a8da:	2380      	movs	r3, #128	@ 0x80
 800a8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8de:	e02e      	b.n	800a93e <UART_SetConfig+0x18e>
 800a8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a9d4 <UART_SetConfig+0x224>)
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d103      	bne.n	800a8f2 <UART_SetConfig+0x142>
 800a8ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8f0:	e025      	b.n	800a93e <UART_SetConfig+0x18e>
 800a8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	4b38      	ldr	r3, [pc, #224]	@ (800a9d8 <UART_SetConfig+0x228>)
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d103      	bne.n	800a904 <UART_SetConfig+0x154>
 800a8fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a900:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a902:	e01c      	b.n	800a93e <UART_SetConfig+0x18e>
 800a904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	4b34      	ldr	r3, [pc, #208]	@ (800a9dc <UART_SetConfig+0x22c>)
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d103      	bne.n	800a916 <UART_SetConfig+0x166>
 800a90e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a912:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a914:	e013      	b.n	800a93e <UART_SetConfig+0x18e>
 800a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	4b31      	ldr	r3, [pc, #196]	@ (800a9e0 <UART_SetConfig+0x230>)
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d103      	bne.n	800a928 <UART_SetConfig+0x178>
 800a920:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a924:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a926:	e00a      	b.n	800a93e <UART_SetConfig+0x18e>
 800a928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	4b1e      	ldr	r3, [pc, #120]	@ (800a9a8 <UART_SetConfig+0x1f8>)
 800a92e:	429a      	cmp	r2, r3
 800a930:	d103      	bne.n	800a93a <UART_SetConfig+0x18a>
 800a932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a936:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a938:	e001      	b.n	800a93e <UART_SetConfig+0x18e>
 800a93a:	2300      	movs	r3, #0
 800a93c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b19      	ldr	r3, [pc, #100]	@ (800a9a8 <UART_SetConfig+0x1f8>)
 800a944:	429a      	cmp	r2, r3
 800a946:	d005      	beq.n	800a954 <UART_SetConfig+0x1a4>
 800a948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4b18      	ldr	r3, [pc, #96]	@ (800a9b0 <UART_SetConfig+0x200>)
 800a94e:	429a      	cmp	r2, r3
 800a950:	f040 8094 	bne.w	800aa7c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a956:	2200      	movs	r2, #0
 800a958:	623b      	str	r3, [r7, #32]
 800a95a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a95c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a960:	f7fc fe2c 	bl	80075bc <HAL_RCCEx_GetPeriphCLKFreq>
 800a964:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80f7 	beq.w	800ab5c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a972:	4a1c      	ldr	r2, [pc, #112]	@ (800a9e4 <UART_SetConfig+0x234>)
 800a974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a978:	461a      	mov	r2, r3
 800a97a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a97c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a980:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	4613      	mov	r3, r2
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	4413      	add	r3, r2
 800a98c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a98e:	429a      	cmp	r2, r3
 800a990:	d305      	bcc.n	800a99e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d924      	bls.n	800a9e8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a9a4:	e069      	b.n	800aa7a <UART_SetConfig+0x2ca>
 800a9a6:	bf00      	nop
 800a9a8:	44002400 	.word	0x44002400
 800a9ac:	cfff69f3 	.word	0xcfff69f3
 800a9b0:	54002400 	.word	0x54002400
 800a9b4:	40013800 	.word	0x40013800
 800a9b8:	40004400 	.word	0x40004400
 800a9bc:	40004800 	.word	0x40004800
 800a9c0:	40004c00 	.word	0x40004c00
 800a9c4:	40005000 	.word	0x40005000
 800a9c8:	40006400 	.word	0x40006400
 800a9cc:	40007800 	.word	0x40007800
 800a9d0:	40007c00 	.word	0x40007c00
 800a9d4:	40008000 	.word	0x40008000
 800a9d8:	40006800 	.word	0x40006800
 800a9dc:	40006c00 	.word	0x40006c00
 800a9e0:	40008400 	.word	0x40008400
 800a9e4:	080101f8 	.word	0x080101f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	61bb      	str	r3, [r7, #24]
 800a9ee:	61fa      	str	r2, [r7, #28]
 800a9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	4a64      	ldr	r2, [pc, #400]	@ (800ab88 <UART_SetConfig+0x3d8>)
 800a9f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	617a      	str	r2, [r7, #20]
 800aa02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aa0a:	f7f5 fc47 	bl	800029c <__aeabi_uldivmod>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4610      	mov	r0, r2
 800aa14:	4619      	mov	r1, r3
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	f04f 0300 	mov.w	r3, #0
 800aa1e:	020b      	lsls	r3, r1, #8
 800aa20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa24:	0202      	lsls	r2, r0, #8
 800aa26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa28:	6849      	ldr	r1, [r1, #4]
 800aa2a:	0849      	lsrs	r1, r1, #1
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	4605      	mov	r5, r0
 800aa32:	eb12 0804 	adds.w	r8, r2, r4
 800aa36:	eb43 0905 	adc.w	r9, r3, r5
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	60bb      	str	r3, [r7, #8]
 800aa42:	60fa      	str	r2, [r7, #12]
 800aa44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa48:	4640      	mov	r0, r8
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	f7f5 fc26 	bl	800029c <__aeabi_uldivmod>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4613      	mov	r3, r2
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa5e:	d308      	bcc.n	800aa72 <UART_SetConfig+0x2c2>
 800aa60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa66:	d204      	bcs.n	800aa72 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa6e:	60da      	str	r2, [r3, #12]
 800aa70:	e003      	b.n	800aa7a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800aa78:	e070      	b.n	800ab5c <UART_SetConfig+0x3ac>
 800aa7a:	e06f      	b.n	800ab5c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa84:	d13c      	bne.n	800ab00 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aa86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa88:	2200      	movs	r2, #0
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa92:	f7fc fd93 	bl	80075bc <HAL_RCCEx_GetPeriphCLKFreq>
 800aa96:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d05e      	beq.n	800ab5c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa2:	4a39      	ldr	r2, [pc, #228]	@ (800ab88 <UART_SetConfig+0x3d8>)
 800aaa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaac:	fbb3 f3f2 	udiv	r3, r3, r2
 800aab0:	005a      	lsls	r2, r3, #1
 800aab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	085b      	lsrs	r3, r3, #1
 800aab8:	441a      	add	r2, r3
 800aaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d916      	bls.n	800aaf8 <UART_SetConfig+0x348>
 800aaca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aacc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad0:	d212      	bcs.n	800aaf8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	f023 030f 	bic.w	r3, r3, #15
 800aada:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aadc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aaea:	4313      	orrs	r3, r2
 800aaec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800aaee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aaf4:	60da      	str	r2, [r3, #12]
 800aaf6:	e031      	b.n	800ab5c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aafe:	e02d      	b.n	800ab5c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ab00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab02:	2200      	movs	r2, #0
 800ab04:	469a      	mov	sl, r3
 800ab06:	4693      	mov	fp, r2
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	f7fc fd56 	bl	80075bc <HAL_RCCEx_GetPeriphCLKFreq>
 800ab10:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ab12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d021      	beq.n	800ab5c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1c:	4a1a      	ldr	r2, [pc, #104]	@ (800ab88 <UART_SetConfig+0x3d8>)
 800ab1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab22:	461a      	mov	r2, r3
 800ab24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	441a      	add	r2, r3
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab3e:	2b0f      	cmp	r3, #15
 800ab40:	d909      	bls.n	800ab56 <UART_SetConfig+0x3a6>
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab48:	d205      	bcs.n	800ab56 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	60da      	str	r2, [r3, #12]
 800ab54:	e002      	b.n	800ab5c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab66:	2201      	movs	r2, #1
 800ab68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab6e:	2200      	movs	r2, #0
 800ab70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab74:	2200      	movs	r2, #0
 800ab76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3750      	adds	r7, #80	@ 0x50
 800ab80:	46bd      	mov	sp, r7
 800ab82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab86:	bf00      	nop
 800ab88:	080101f8 	.word	0x080101f8

0800ab8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00a      	beq.n	800abb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	430a      	orrs	r2, r1
 800abd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac20:	f003 0310 	and.w	r3, r3, #16
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00a      	beq.n	800ac3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac42:	f003 0320 	and.w	r3, r3, #32
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01a      	beq.n	800aca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac8a:	d10a      	bne.n	800aca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	430a      	orrs	r2, r1
 800acc2:	605a      	str	r2, [r3, #4]
  }
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b098      	sub	sp, #96	@ 0x60
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace0:	f7f6 ff3c 	bl	8001b5c <HAL_GetTick>
 800ace4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0308 	and.w	r3, r3, #8
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d12f      	bne.n	800ad54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acfc:	2200      	movs	r2, #0
 800acfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f88e 	bl	800ae24 <UART_WaitOnFlagUntilTimeout>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d022      	beq.n	800ad54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	e853 3f00 	ldrex	r3, [r3]
 800ad1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad22:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad34:	e841 2300 	strex	r3, r2, [r1]
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e6      	bne.n	800ad0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e063      	b.n	800ae1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	d149      	bne.n	800adf6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f857 	bl	800ae24 <UART_WaitOnFlagUntilTimeout>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d03c      	beq.n	800adf6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	e853 3f00 	ldrex	r3, [r3]
 800ad88:	623b      	str	r3, [r7, #32]
   return(result);
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ada0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ada2:	e841 2300 	strex	r3, r2, [r1]
 800ada6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ada8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e6      	bne.n	800ad7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3308      	adds	r3, #8
 800adb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3308      	adds	r3, #8
 800adcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adce:	61fa      	str	r2, [r7, #28]
 800add0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	69b9      	ldr	r1, [r7, #24]
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	617b      	str	r3, [r7, #20]
   return(result);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e5      	bne.n	800adae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e012      	b.n	800ae1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3758      	adds	r7, #88	@ 0x58
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	4613      	mov	r3, r2
 800ae32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae34:	e04f      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d04b      	beq.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae3e:	f7f6 fe8d 	bl	8001b5c <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d302      	bcc.n	800ae54 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e04e      	b.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0304 	and.w	r3, r3, #4
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d037      	beq.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b80      	cmp	r3, #128	@ 0x80
 800ae6a:	d034      	beq.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b40      	cmp	r3, #64	@ 0x40
 800ae70:	d031      	beq.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d110      	bne.n	800aea2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2208      	movs	r2, #8
 800ae86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f838 	bl	800aefe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2208      	movs	r2, #8
 800ae92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e029      	b.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aeac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aeb0:	d111      	bne.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 f81e 	bl	800aefe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2220      	movs	r2, #32
 800aec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e00f      	b.n	800aef6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69da      	ldr	r2, [r3, #28]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	4013      	ands	r3, r2
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	bf0c      	ite	eq
 800aee6:	2301      	moveq	r3, #1
 800aee8:	2300      	movne	r3, #0
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	461a      	mov	r2, r3
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d0a0      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aefe:	b480      	push	{r7}
 800af00:	b095      	sub	sp, #84	@ 0x54
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0e:	e853 3f00 	ldrex	r3, [r3]
 800af12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af24:	643b      	str	r3, [r7, #64]	@ 0x40
 800af26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af2c:	e841 2300 	strex	r3, r2, [r1]
 800af30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1e6      	bne.n	800af06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3308      	adds	r3, #8
 800af3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	e853 3f00 	ldrex	r3, [r3]
 800af46:	61fb      	str	r3, [r7, #28]
   return(result);
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af4e:	f023 0301 	bic.w	r3, r3, #1
 800af52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3308      	adds	r3, #8
 800af5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af64:	e841 2300 	strex	r3, r2, [r1]
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1e3      	bne.n	800af38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af74:	2b01      	cmp	r3, #1
 800af76:	d118      	bne.n	800afaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	60bb      	str	r3, [r7, #8]
   return(result);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f023 0310 	bic.w	r3, r3, #16
 800af8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af96:	61bb      	str	r3, [r7, #24]
 800af98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9a:	6979      	ldr	r1, [r7, #20]
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	e841 2300 	strex	r3, r2, [r1]
 800afa2:	613b      	str	r3, [r7, #16]
   return(result);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e6      	bne.n	800af78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afbe:	bf00      	nop
 800afc0:	3754      	adds	r7, #84	@ 0x54
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afca:	b480      	push	{r7}
 800afcc:	b085      	sub	sp, #20
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d101      	bne.n	800afe0 <HAL_UARTEx_DisableFifoMode+0x16>
 800afdc:	2302      	movs	r3, #2
 800afde:	e027      	b.n	800b030 <HAL_UARTEx_DisableFifoMode+0x66>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2224      	movs	r2, #36	@ 0x24
 800afec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0201 	bic.w	r2, r2, #1
 800b006:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b00e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2220      	movs	r2, #32
 800b022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d101      	bne.n	800b054 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b050:	2302      	movs	r3, #2
 800b052:	e02d      	b.n	800b0b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2224      	movs	r2, #36	@ 0x24
 800b060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 0201 	bic.w	r2, r2, #1
 800b07a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f84f 	bl	800b134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d101      	bne.n	800b0d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e02d      	b.n	800b12c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2224      	movs	r2, #36	@ 0x24
 800b0dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f022 0201 	bic.w	r2, r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f811 	bl	800b134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b140:	2b00      	cmp	r3, #0
 800b142:	d108      	bne.n	800b156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b154:	e031      	b.n	800b1ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b156:	2308      	movs	r3, #8
 800b158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b15a:	2308      	movs	r3, #8
 800b15c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	0e5b      	lsrs	r3, r3, #25
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	0f5b      	lsrs	r3, r3, #29
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	7b3a      	ldrb	r2, [r7, #12]
 800b182:	4911      	ldr	r1, [pc, #68]	@ (800b1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800b184:	5c8a      	ldrb	r2, [r1, r2]
 800b186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b18a:	7b3a      	ldrb	r2, [r7, #12]
 800b18c:	490f      	ldr	r1, [pc, #60]	@ (800b1cc <UARTEx_SetNbDataToProcess+0x98>)
 800b18e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b190:	fb93 f3f2 	sdiv	r3, r3, r2
 800b194:	b29a      	uxth	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	7b7a      	ldrb	r2, [r7, #13]
 800b1a0:	4909      	ldr	r1, [pc, #36]	@ (800b1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800b1a2:	5c8a      	ldrb	r2, [r1, r2]
 800b1a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1a8:	7b7a      	ldrb	r2, [r7, #13]
 800b1aa:	4908      	ldr	r1, [pc, #32]	@ (800b1cc <UARTEx_SetNbDataToProcess+0x98>)
 800b1ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b1ba:	bf00      	nop
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	08010210 	.word	0x08010210
 800b1cc:	08010218 	.word	0x08010218

0800b1d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e8:	f043 0201 	orr.w	r2, r3, #1
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b1fe:	b084      	sub	sp, #16
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	f107 001c 	add.w	r0, r7, #28
 800b20c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e008      	b.n	800b22c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff ffd8 	bl	800b1d0 <USB_CoreReset>
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b236:	b004      	add	sp, #16
 800b238:	4770      	bx	lr

0800b23a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b085      	sub	sp, #20
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b248:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b24c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b262:	b480      	push	{r7}
 800b264:	b085      	sub	sp, #20
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b26a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b26e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	43db      	mvns	r3, r3
 800b278:	401a      	ands	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d106      	bne.n	800b2ac <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	641a      	str	r2, [r3, #64]	@ 0x40
 800b2aa:	e00b      	b.n	800b2c4 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d106      	bne.n	800b2c0 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	641a      	str	r2, [r3, #64]	@ 0x40
 800b2be:	e001      	b.n	800b2c4 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	f107 001c 	add.w	r0, r7, #28
 800b2e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ee:	f023 0201 	bic.w	r2, r3, #1
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff ffc7 	bl	800b28c <USB_SetCurrentMode>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b314:	b004      	add	sp, #16
 800b316:	4770      	bx	lr

0800b318 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b318:	b480      	push	{r7}
 800b31a:	b09f      	sub	sp, #124	@ 0x7c
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4ba0      	ldr	r3, [pc, #640]	@ (800b5b8 <USB_ActivateEndpoint+0x2a0>)
 800b336:	4013      	ands	r3, r2
 800b338:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	78db      	ldrb	r3, [r3, #3]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d819      	bhi.n	800b376 <USB_ActivateEndpoint+0x5e>
 800b342:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <USB_ActivateEndpoint+0x30>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b36d 	.word	0x0800b36d
 800b350:	0800b37f 	.word	0x0800b37f
 800b354:	0800b363 	.word	0x0800b363
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b35a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b35e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b360:	e00e      	b.n	800b380 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b364:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b368:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b36a:	e009      	b.n	800b380 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b36c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b36e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b372:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b374:	e004      	b.n	800b380 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800b37c:	e000      	b.n	800b380 <USB_ActivateEndpoint+0x68>
      break;
 800b37e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	441a      	add	r2, r3
 800b38a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b38c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b394:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	4b86      	ldr	r3, [pc, #536]	@ (800b5bc <USB_ActivateEndpoint+0x2a4>)
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	7812      	ldrb	r2, [r2, #0]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	441a      	add	r2, r3
 800b3b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3c2:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	7b1b      	ldrb	r3, [r3, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f040 8177 	bne.w	800b6bc <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d079      	beq.n	800b4ca <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b3f4:	0c12      	lsrs	r2, r2, #16
 800b3f6:	0412      	lsls	r2, r2, #16
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b404:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b408:	6819      	ldr	r1, [r3, #0]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	88db      	ldrh	r3, [r3, #6]
 800b40e:	089b      	lsrs	r3, r3, #2
 800b410:	b29b      	uxth	r3, r3
 800b412:	009a      	lsls	r2, r3, #2
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b41e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b422:	430a      	orrs	r2, r1
 800b424:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	61bb      	str	r3, [r7, #24]
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d013      	beq.n	800b466 <USB_ActivateEndpoint+0x14e>
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	4b5c      	ldr	r3, [pc, #368]	@ (800b5bc <USB_ActivateEndpoint+0x2a4>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	441a      	add	r2, r3
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b464:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	78db      	ldrb	r3, [r3, #3]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d018      	beq.n	800b4a0 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	4b51      	ldr	r3, [pc, #324]	@ (800b5c0 <USB_ActivateEndpoint+0x2a8>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f083 0320 	eor.w	r3, r3, #32
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	441a      	add	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e28c      	b.n	800b9ba <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	4b44      	ldr	r3, [pc, #272]	@ (800b5c0 <USB_ActivateEndpoint+0x2a8>)
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	441a      	add	r2, r3
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	e277      	b.n	800b9ba <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b4e8:	0c12      	lsrs	r2, r2, #16
 800b4ea:	0412      	lsls	r2, r2, #16
 800b4ec:	605a      	str	r2, [r3, #4]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b4fc:	6859      	ldr	r1, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	88db      	ldrh	r3, [r3, #6]
 800b502:	089b      	lsrs	r3, r3, #2
 800b504:	b29b      	uxth	r3, r3
 800b506:	009a      	lsls	r2, r3, #2
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b512:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b516:	430a      	orrs	r2, r1
 800b518:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	00db      	lsls	r3, r3, #3
 800b520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b524:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b534:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b538:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b53c:	605a      	str	r2, [r3, #4]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d112      	bne.n	800b56c <USB_ActivateEndpoint+0x254>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	00db      	lsls	r3, r3, #3
 800b55c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b560:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b564:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b568:	605a      	str	r2, [r3, #4]
 800b56a:	e04d      	b.n	800b608 <USB_ActivateEndpoint+0x2f0>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	2b3e      	cmp	r3, #62	@ 0x3e
 800b572:	d827      	bhi.n	800b5c4 <USB_ActivateEndpoint+0x2ac>
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	085b      	lsrs	r3, r3, #1
 800b57a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <USB_ActivateEndpoint+0x276>
 800b588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b58a:	3301      	adds	r3, #1
 800b58c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b59c:	6859      	ldr	r1, [r3, #4]
 800b59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a0:	069a      	lsls	r2, r3, #26
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	605a      	str	r2, [r3, #4]
 800b5b4:	e028      	b.n	800b608 <USB_ActivateEndpoint+0x2f0>
 800b5b6:	bf00      	nop
 800b5b8:	07ff898f 	.word	0x07ff898f
 800b5bc:	07ff8f8f 	.word	0x07ff8f8f
 800b5c0:	07ff8fbf 	.word	0x07ff8fbf
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	095b      	lsrs	r3, r3, #5
 800b5ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f003 031f 	and.w	r3, r3, #31
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <USB_ActivateEndpoint+0x2c6>
 800b5d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f0:	069b      	lsls	r3, r3, #26
 800b5f2:	431a      	orrs	r2, r3
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b602:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b606:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d013      	beq.n	800b648 <USB_ActivateEndpoint+0x330>
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	4b9c      	ldr	r3, [pc, #624]	@ (800b8a0 <USB_ActivateEndpoint+0x588>)
 800b62e:	4013      	ands	r3, r2
 800b630:	627b      	str	r3, [r7, #36]	@ 0x24
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	441a      	add	r2, r3
 800b63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b646:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d11c      	bne.n	800b68a <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	4b91      	ldr	r3, [pc, #580]	@ (800b8a4 <USB_ActivateEndpoint+0x58c>)
 800b65e:	4013      	ands	r3, r2
 800b660:	61fb      	str	r3, [r7, #28]
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	441a      	add	r2, r3
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	e197      	b.n	800b9ba <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b83      	ldr	r3, [pc, #524]	@ (800b8a4 <USB_ActivateEndpoint+0x58c>)
 800b698:	4013      	ands	r3, r2
 800b69a:	623b      	str	r3, [r7, #32]
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b6a2:	623b      	str	r3, [r7, #32]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	441a      	add	r2, r3
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	e17e      	b.n	800b9ba <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	78db      	ldrb	r3, [r3, #3]
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d114      	bne.n	800b6ee <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	4b73      	ldr	r3, [pc, #460]	@ (800b8a0 <USB_ActivateEndpoint+0x588>)
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	441a      	add	r2, r3
 800b6e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	e013      	b.n	800b716 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	4b6b      	ldr	r3, [pc, #428]	@ (800b8a8 <USB_ActivateEndpoint+0x590>)
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	441a      	add	r2, r3
 800b70a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b70c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b714:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b720:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b734:	0c12      	lsrs	r2, r2, #16
 800b736:	0412      	lsls	r2, r2, #16
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b744:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b748:	6819      	ldr	r1, [r3, #0]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	891b      	ldrh	r3, [r3, #8]
 800b74e:	089b      	lsrs	r3, r3, #2
 800b750:	b29b      	uxth	r3, r3
 800b752:	009a      	lsls	r2, r3, #2
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b75e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b762:	430a      	orrs	r2, r1
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	00db      	lsls	r3, r3, #3
 800b76c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b770:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b784:	0c12      	lsrs	r2, r2, #16
 800b786:	0412      	lsls	r2, r2, #16
 800b788:	605a      	str	r2, [r3, #4]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b794:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b798:	6859      	ldr	r1, [r3, #4]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	895b      	ldrh	r3, [r3, #10]
 800b79e:	089b      	lsrs	r3, r3, #2
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	009a      	lsls	r2, r3, #2
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	785b      	ldrb	r3, [r3, #1]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d178      	bne.n	800b8b0 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <USB_ActivateEndpoint+0x4e6>
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b2f      	ldr	r3, [pc, #188]	@ (800b8a0 <USB_ActivateEndpoint+0x588>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	441a      	add	r2, r3
 800b7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7fc:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b812:	2b00      	cmp	r3, #0
 800b814:	d013      	beq.n	800b83e <USB_ActivateEndpoint+0x526>
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	4b1f      	ldr	r3, [pc, #124]	@ (800b8a0 <USB_ActivateEndpoint+0x588>)
 800b824:	4013      	ands	r3, r2
 800b826:	637b      	str	r3, [r7, #52]	@ 0x34
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	441a      	add	r2, r3
 800b832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b838:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b83c:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	4b16      	ldr	r3, [pc, #88]	@ (800b8a4 <USB_ActivateEndpoint+0x58c>)
 800b84c:	4013      	ands	r3, r2
 800b84e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b856:	633b      	str	r3, [r7, #48]	@ 0x30
 800b858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b85e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	441a      	add	r2, r3
 800b86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b874:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	4b0a      	ldr	r3, [pc, #40]	@ (800b8ac <USB_ActivateEndpoint+0x594>)
 800b884:	4013      	ands	r3, r2
 800b886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	441a      	add	r2, r3
 800b892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	e08c      	b.n	800b9ba <USB_ActivateEndpoint+0x6a2>
 800b8a0:	07ff8f8f 	.word	0x07ff8f8f
 800b8a4:	07ffbf8f 	.word	0x07ffbf8f
 800b8a8:	07ff8e8f 	.word	0x07ff8e8f
 800b8ac:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d013      	beq.n	800b8f0 <USB_ActivateEndpoint+0x5d8>
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	4b3d      	ldr	r3, [pc, #244]	@ (800b9cc <USB_ActivateEndpoint+0x6b4>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	441a      	add	r2, r3
 800b8e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ee:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b904:	2b00      	cmp	r3, #0
 800b906:	d013      	beq.n	800b930 <USB_ActivateEndpoint+0x618>
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4b2d      	ldr	r3, [pc, #180]	@ (800b9cc <USB_ActivateEndpoint+0x6b4>)
 800b916:	4013      	ands	r3, r2
 800b918:	653b      	str	r3, [r7, #80]	@ 0x50
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	441a      	add	r2, r3
 800b924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b92a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b92e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	78db      	ldrb	r3, [r3, #3]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d018      	beq.n	800b96a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	4b22      	ldr	r3, [pc, #136]	@ (800b9d0 <USB_ActivateEndpoint+0x6b8>)
 800b946:	4013      	ands	r3, r2
 800b948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b94c:	f083 0320 	eor.w	r3, r3, #32
 800b950:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	441a      	add	r2, r3
 800b95c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b95e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	e013      	b.n	800b992 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	4b16      	ldr	r3, [pc, #88]	@ (800b9d0 <USB_ActivateEndpoint+0x6b8>)
 800b978:	4013      	ands	r3, r2
 800b97a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	441a      	add	r2, r3
 800b986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b990:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d4 <USB_ActivateEndpoint+0x6bc>)
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	441a      	add	r2, r3
 800b9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9b8:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b9ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	377c      	adds	r7, #124	@ 0x7c
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	07ff8f8f 	.word	0x07ff8f8f
 800b9d0:	07ff8fbf 	.word	0x07ff8fbf
 800b9d4:	07ffbf8f 	.word	0x07ffbf8f

0800b9d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b097      	sub	sp, #92	@ 0x5c
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	7b1b      	ldrb	r3, [r3, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d16d      	bne.n	800bac6 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d034      	beq.n	800ba5c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	613b      	str	r3, [r7, #16]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d013      	beq.n	800ba32 <USB_DeactivateEndpoint+0x5a>
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	4b6d      	ldr	r3, [pc, #436]	@ (800bbcc <USB_DeactivateEndpoint+0x1f4>)
 800ba18:	4013      	ands	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	441a      	add	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba30:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b64      	ldr	r3, [pc, #400]	@ (800bbd0 <USB_DeactivateEndpoint+0x1f8>)
 800ba40:	4013      	ands	r3, r2
 800ba42:	60bb      	str	r3, [r7, #8]
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	441a      	add	r2, r3
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	e139      	b.n	800bcd0 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	61fb      	str	r3, [r7, #28]
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d013      	beq.n	800ba9c <USB_DeactivateEndpoint+0xc4>
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	4b52      	ldr	r3, [pc, #328]	@ (800bbcc <USB_DeactivateEndpoint+0x1f4>)
 800ba82:	4013      	ands	r3, r2
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	441a      	add	r2, r3
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba9a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	4b4a      	ldr	r3, [pc, #296]	@ (800bbd4 <USB_DeactivateEndpoint+0x1fc>)
 800baaa:	4013      	ands	r3, r2
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	441a      	add	r2, r3
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800babe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	e104      	b.n	800bcd0 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 8084 	bne.w	800bbd8 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d013      	beq.n	800bb10 <USB_DeactivateEndpoint+0x138>
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	4b35      	ldr	r3, [pc, #212]	@ (800bbcc <USB_DeactivateEndpoint+0x1f4>)
 800baf6:	4013      	ands	r3, r2
 800baf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	441a      	add	r2, r3
 800bb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb0e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d013      	beq.n	800bb50 <USB_DeactivateEndpoint+0x178>
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4413      	add	r3, r2
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	4b25      	ldr	r3, [pc, #148]	@ (800bbcc <USB_DeactivateEndpoint+0x1f4>)
 800bb36:	4013      	ands	r3, r2
 800bb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	441a      	add	r2, r3
 800bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb4e:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	@ (800bbcc <USB_DeactivateEndpoint+0x1f4>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	441a      	add	r2, r3
 800bb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb76:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	4b13      	ldr	r3, [pc, #76]	@ (800bbd4 <USB_DeactivateEndpoint+0x1fc>)
 800bb86:	4013      	ands	r3, r2
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	441a      	add	r2, r3
 800bb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	4b08      	ldr	r3, [pc, #32]	@ (800bbd0 <USB_DeactivateEndpoint+0x1f8>)
 800bbae:	4013      	ands	r3, r2
 800bbb0:	623b      	str	r3, [r7, #32]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	441a      	add	r2, r3
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	e082      	b.n	800bcd0 <USB_DeactivateEndpoint+0x2f8>
 800bbca:	bf00      	nop
 800bbcc:	07ff8f8f 	.word	0x07ff8f8f
 800bbd0:	07ff8fbf 	.word	0x07ff8fbf
 800bbd4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d013      	beq.n	800bc18 <USB_DeactivateEndpoint+0x240>
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	4413      	add	r3, r2
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	4b38      	ldr	r3, [pc, #224]	@ (800bce0 <USB_DeactivateEndpoint+0x308>)
 800bbfe:	4013      	ands	r3, r2
 800bc00:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	441a      	add	r2, r3
 800bc0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc16:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d013      	beq.n	800bc58 <USB_DeactivateEndpoint+0x280>
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	4b28      	ldr	r3, [pc, #160]	@ (800bce0 <USB_DeactivateEndpoint+0x308>)
 800bc3e:	4013      	ands	r3, r2
 800bc40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	441a      	add	r2, r3
 800bc4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc56:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	4b1e      	ldr	r3, [pc, #120]	@ (800bce0 <USB_DeactivateEndpoint+0x308>)
 800bc66:	4013      	ands	r3, r2
 800bc68:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	441a      	add	r2, r3
 800bc74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc7e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	4b15      	ldr	r3, [pc, #84]	@ (800bce4 <USB_DeactivateEndpoint+0x30c>)
 800bc8e:	4013      	ands	r3, r2
 800bc90:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	441a      	add	r2, r3
 800bc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bca6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <USB_DeactivateEndpoint+0x310>)
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	441a      	add	r2, r3
 800bcc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcce:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	375c      	adds	r7, #92	@ 0x5c
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	07ff8f8f 	.word	0x07ff8f8f
 800bce4:	07ff8fbf 	.word	0x07ff8fbf
 800bce8:	07ffbf8f 	.word	0x07ffbf8f

0800bcec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b096      	sub	sp, #88	@ 0x58
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	785b      	ldrb	r3, [r3, #1]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	f040 84ed 	bne.w	800c6da <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	699a      	ldr	r2, [r3, #24]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d903      	bls.n	800bd14 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd12:	e002      	b.n	800bd1a <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	7b1b      	ldrb	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d12e      	bne.n	800bd80 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	6959      	ldr	r1, [r3, #20]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	88da      	ldrh	r2, [r3, #6]
 800bd2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 f963 	bl	800cffa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd52:	b292      	uxth	r2, r2
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd64:	6819      	ldr	r1, [r3, #0]
 800bd66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd68:	041a      	lsls	r2, r3, #16
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	f000 bc90 	b.w	800c6a0 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	78db      	ldrb	r3, [r3, #3]
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	f040 8332 	bne.w	800c3ee <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	6a1a      	ldr	r2, [r3, #32]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	f240 82e4 	bls.w	800c360 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	4ba4      	ldr	r3, [pc, #656]	@ (800c038 <USB_EPStartXfer+0x34c>)
 800bda6:	4013      	ands	r3, r2
 800bda8:	613b      	str	r3, [r7, #16]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	441a      	add	r2, r3
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bdba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdbe:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	6a1a      	ldr	r2, [r3, #32]
 800bdc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdc6:	1ad2      	subs	r2, r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 8161 	beq.w	800c0a4 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	785b      	ldrb	r3, [r3, #1]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d16a      	bne.n	800bec0 <USB_EPStartXfer+0x1d4>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be08:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800be0c:	605a      	str	r2, [r3, #4]
 800be0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be10:	2b00      	cmp	r3, #0
 800be12:	d112      	bne.n	800be3a <USB_EPStartXfer+0x14e>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be32:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800be36:	605a      	str	r2, [r3, #4]
 800be38:	e06a      	b.n	800bf10 <USB_EPStartXfer+0x224>
 800be3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800be3e:	d81e      	bhi.n	800be7e <USB_EPStartXfer+0x192>
 800be40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be42:	085b      	lsrs	r3, r3, #1
 800be44:	653b      	str	r3, [r7, #80]	@ 0x50
 800be46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <USB_EPStartXfer+0x16a>
 800be50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be52:	3301      	adds	r3, #1
 800be54:	653b      	str	r3, [r7, #80]	@ 0x50
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be64:	6859      	ldr	r1, [r3, #4]
 800be66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be68:	069a      	lsls	r2, r3, #26
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be78:	430a      	orrs	r2, r1
 800be7a:	605a      	str	r2, [r3, #4]
 800be7c:	e048      	b.n	800bf10 <USB_EPStartXfer+0x224>
 800be7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be80:	095b      	lsrs	r3, r3, #5
 800be82:	653b      	str	r3, [r7, #80]	@ 0x50
 800be84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be86:	f003 031f 	and.w	r3, r3, #31
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d102      	bne.n	800be94 <USB_EPStartXfer+0x1a8>
 800be8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be90:	3b01      	subs	r3, #1
 800be92:	653b      	str	r3, [r7, #80]	@ 0x50
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea6:	069b      	lsls	r3, r3, #26
 800bea8:	431a      	orrs	r2, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beb8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bebc:	605a      	str	r2, [r3, #4]
 800bebe:	e027      	b.n	800bf10 <USB_EPStartXfer+0x224>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	785b      	ldrb	r3, [r3, #1]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d123      	bne.n	800bf10 <USB_EPStartXfer+0x224>
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	00db      	lsls	r3, r3, #3
 800bede:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bee2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bee6:	b292      	uxth	r2, r2
 800bee8:	605a      	str	r2, [r3, #4]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bef8:	6859      	ldr	r1, [r3, #4]
 800befa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800befc:	041a      	lsls	r2, r3, #16
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	895b      	ldrh	r3, [r3, #10]
 800bf14:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	6959      	ldr	r1, [r3, #20]
 800bf1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	8b7a      	ldrh	r2, [r7, #26]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f001 f86a 	bl	800cffa <USB_WritePMA>
            ep->xfer_buff += len;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	695a      	ldr	r2, [r3, #20]
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf2c:	441a      	add	r2, r3
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	6a1a      	ldr	r2, [r3, #32]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d906      	bls.n	800bf4c <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	6a1a      	ldr	r2, [r3, #32]
 800bf42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf44:	1ad2      	subs	r2, r2, r3
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	621a      	str	r2, [r3, #32]
 800bf4a:	e005      	b.n	800bf58 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2200      	movs	r2, #0
 800bf56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	785b      	ldrb	r3, [r3, #1]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d16d      	bne.n	800c03c <USB_EPStartXfer+0x350>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf7e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d112      	bne.n	800bfb0 <USB_EPStartXfer+0x2c4>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfa8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	e06d      	b.n	800c08c <USB_EPStartXfer+0x3a0>
 800bfb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfb2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfb4:	d81e      	bhi.n	800bff4 <USB_EPStartXfer+0x308>
 800bfb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfb8:	085b      	lsrs	r3, r3, #1
 800bfba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <USB_EPStartXfer+0x2e0>
 800bfc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfc8:	3301      	adds	r3, #1
 800bfca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfda:	6819      	ldr	r1, [r3, #0]
 800bfdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfde:	069a      	lsls	r2, r3, #26
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfee:	430a      	orrs	r2, r1
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	e04b      	b.n	800c08c <USB_EPStartXfer+0x3a0>
 800bff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bff6:	095b      	lsrs	r3, r3, #5
 800bff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bffc:	f003 031f 	and.w	r3, r3, #31
 800c000:	2b00      	cmp	r3, #0
 800c002:	d102      	bne.n	800c00a <USB_EPStartXfer+0x31e>
 800c004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c006:	3b01      	subs	r3, #1
 800c008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c014:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c01c:	069b      	lsls	r3, r3, #26
 800c01e:	431a      	orrs	r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c02a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c02e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	e02a      	b.n	800c08c <USB_EPStartXfer+0x3a0>
 800c036:	bf00      	nop
 800c038:	07ff8f8f 	.word	0x07ff8f8f
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	785b      	ldrb	r3, [r3, #1]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d123      	bne.n	800c08c <USB_EPStartXfer+0x3a0>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	00db      	lsls	r3, r3, #3
 800c04a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c04e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	00db      	lsls	r3, r3, #3
 800c05a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c05e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c062:	b292      	uxth	r2, r2
 800c064:	601a      	str	r2, [r3, #0]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c070:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c074:	6819      	ldr	r1, [r3, #0]
 800c076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c078:	041a      	lsls	r2, r3, #16
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	00db      	lsls	r3, r3, #3
 800c080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c084:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c088:	430a      	orrs	r2, r1
 800c08a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	891b      	ldrh	r3, [r3, #8]
 800c090:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	6959      	ldr	r1, [r3, #20]
 800c096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c098:	b29b      	uxth	r3, r3
 800c09a:	8b7a      	ldrh	r2, [r7, #26]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 ffac 	bl	800cffa <USB_WritePMA>
 800c0a2:	e2fd      	b.n	800c6a0 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	785b      	ldrb	r3, [r3, #1]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d16a      	bne.n	800c182 <USB_EPStartXfer+0x496>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d112      	bne.n	800c0fc <USB_EPStartXfer+0x410>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	e06a      	b.n	800c1d2 <USB_EPStartXfer+0x4e6>
 800c0fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800c100:	d81e      	bhi.n	800c140 <USB_EPStartXfer+0x454>
 800c102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c104:	085b      	lsrs	r3, r3, #1
 800c106:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <USB_EPStartXfer+0x42c>
 800c112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c114:	3301      	adds	r3, #1
 800c116:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c122:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c126:	6819      	ldr	r1, [r3, #0]
 800c128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c12a:	069a      	lsls	r2, r3, #26
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c136:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c13a:	430a      	orrs	r2, r1
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e048      	b.n	800c1d2 <USB_EPStartXfer+0x4e6>
 800c140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c142:	095b      	lsrs	r3, r3, #5
 800c144:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c148:	f003 031f 	and.w	r3, r3, #31
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d102      	bne.n	800c156 <USB_EPStartXfer+0x46a>
 800c150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c152:	3b01      	subs	r3, #1
 800c154:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c168:	069b      	lsls	r3, r3, #26
 800c16a:	431a      	orrs	r2, r3
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c17a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	e027      	b.n	800c1d2 <USB_EPStartXfer+0x4e6>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	785b      	ldrb	r3, [r3, #1]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d123      	bne.n	800c1d2 <USB_EPStartXfer+0x4e6>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1a8:	b292      	uxth	r2, r2
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ba:	6819      	ldr	r1, [r3, #0]
 800c1bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1be:	041a      	lsls	r2, r3, #16
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	891b      	ldrh	r3, [r3, #8]
 800c1d6:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	6959      	ldr	r1, [r3, #20]
 800c1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	8b7a      	ldrh	r2, [r7, #26]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 ff09 	bl	800cffa <USB_WritePMA>
            ep->xfer_buff += len;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	695a      	ldr	r2, [r3, #20]
 800c1ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ee:	441a      	add	r2, r3
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	6a1a      	ldr	r2, [r3, #32]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d906      	bls.n	800c20e <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	6a1a      	ldr	r2, [r3, #32]
 800c204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c206:	1ad2      	subs	r2, r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	621a      	str	r2, [r3, #32]
 800c20c:	e005      	b.n	800c21a <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2200      	movs	r2, #0
 800c218:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d16a      	bne.n	800c2f8 <USB_EPStartXfer+0x60c>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c22c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c23c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c240:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c244:	605a      	str	r2, [r3, #4]
 800c246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d112      	bne.n	800c272 <USB_EPStartXfer+0x586>
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c256:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c266:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c26a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c26e:	605a      	str	r2, [r3, #4]
 800c270:	e06a      	b.n	800c348 <USB_EPStartXfer+0x65c>
 800c272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c274:	2b3e      	cmp	r3, #62	@ 0x3e
 800c276:	d81e      	bhi.n	800c2b6 <USB_EPStartXfer+0x5ca>
 800c278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c27a:	085b      	lsrs	r3, r3, #1
 800c27c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <USB_EPStartXfer+0x5a2>
 800c288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c28a:	3301      	adds	r3, #1
 800c28c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c298:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c29c:	6859      	ldr	r1, [r3, #4]
 800c29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2a0:	069a      	lsls	r2, r3, #26
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2b0:	430a      	orrs	r2, r1
 800c2b2:	605a      	str	r2, [r3, #4]
 800c2b4:	e048      	b.n	800c348 <USB_EPStartXfer+0x65c>
 800c2b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b8:	095b      	lsrs	r3, r3, #5
 800c2ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2be:	f003 031f 	and.w	r3, r3, #31
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <USB_EPStartXfer+0x5e0>
 800c2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2de:	069b      	lsls	r3, r3, #26
 800c2e0:	431a      	orrs	r2, r3
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c2f4:	605a      	str	r2, [r3, #4]
 800c2f6:	e027      	b.n	800c348 <USB_EPStartXfer+0x65c>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	785b      	ldrb	r3, [r3, #1]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d123      	bne.n	800c348 <USB_EPStartXfer+0x65c>
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	00db      	lsls	r3, r3, #3
 800c306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c30e:	685a      	ldr	r2, [r3, #4]
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c31a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c31e:	b292      	uxth	r2, r2
 800c320:	605a      	str	r2, [r3, #4]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c32c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c330:	6859      	ldr	r1, [r3, #4]
 800c332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c334:	041a      	lsls	r2, r3, #16
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c340:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c344:	430a      	orrs	r2, r1
 800c346:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	895b      	ldrh	r3, [r3, #10]
 800c34c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	6959      	ldr	r1, [r3, #20]
 800c352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c354:	b29b      	uxth	r3, r3
 800c356:	8b7a      	ldrh	r2, [r7, #26]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fe4e 	bl	800cffa <USB_WritePMA>
 800c35e:	e19f      	b.n	800c6a0 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	6a1b      	ldr	r3, [r3, #32]
 800c364:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4ba0      	ldr	r3, [pc, #640]	@ (800c5f4 <USB_EPStartXfer+0x908>)
 800c374:	4013      	ands	r3, r2
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	441a      	add	r2, r3
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38c:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c398:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	00db      	lsls	r3, r3, #3
 800c3a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3be:	6819      	ldr	r1, [r3, #0]
 800c3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3c2:	041a      	lsls	r2, r3, #16
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	891b      	ldrh	r3, [r3, #8]
 800c3da:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	6959      	ldr	r1, [r3, #20]
 800c3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	8b7a      	ldrh	r2, [r7, #26]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fe07 	bl	800cffa <USB_WritePMA>
 800c3ec:	e158      	b.n	800c6a0 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	6a1a      	ldr	r2, [r3, #32]
 800c3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3f4:	1ad2      	subs	r2, r2, r3
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 80a3 	beq.w	800c556 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	785b      	ldrb	r3, [r3, #1]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d16a      	bne.n	800c4ee <USB_EPStartXfer+0x802>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c422:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c432:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c436:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c43a:	605a      	str	r2, [r3, #4]
 800c43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d112      	bne.n	800c468 <USB_EPStartXfer+0x77c>
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c44c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	00db      	lsls	r3, r3, #3
 800c458:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c45c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c460:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c464:	605a      	str	r2, [r3, #4]
 800c466:	e06a      	b.n	800c53e <USB_EPStartXfer+0x852>
 800c468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c46a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c46c:	d81e      	bhi.n	800c4ac <USB_EPStartXfer+0x7c0>
 800c46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c470:	085b      	lsrs	r3, r3, #1
 800c472:	643b      	str	r3, [r7, #64]	@ 0x40
 800c474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <USB_EPStartXfer+0x798>
 800c47e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c480:	3301      	adds	r3, #1
 800c482:	643b      	str	r3, [r7, #64]	@ 0x40
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	00db      	lsls	r3, r3, #3
 800c48a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c48e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c492:	6859      	ldr	r1, [r3, #4]
 800c494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c496:	069a      	lsls	r2, r3, #26
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	605a      	str	r2, [r3, #4]
 800c4aa:	e048      	b.n	800c53e <USB_EPStartXfer+0x852>
 800c4ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ae:	095b      	lsrs	r3, r3, #5
 800c4b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4b4:	f003 031f 	and.w	r3, r3, #31
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <USB_EPStartXfer+0x7d6>
 800c4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4d4:	069b      	lsls	r3, r3, #26
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c4ea:	605a      	str	r2, [r3, #4]
 800c4ec:	e027      	b.n	800c53e <USB_EPStartXfer+0x852>
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	785b      	ldrb	r3, [r3, #1]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d123      	bne.n	800c53e <USB_EPStartXfer+0x852>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c500:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c510:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c514:	b292      	uxth	r2, r2
 800c516:	605a      	str	r2, [r3, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c522:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c526:	6859      	ldr	r1, [r3, #4]
 800c528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c52a:	041a      	lsls	r2, r3, #16
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	00db      	lsls	r3, r3, #3
 800c532:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c536:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c53a:	430a      	orrs	r2, r1
 800c53c:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	895b      	ldrh	r3, [r3, #10]
 800c542:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	6959      	ldr	r1, [r3, #20]
 800c548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	8b7a      	ldrh	r2, [r7, #26]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fd53 	bl	800cffa <USB_WritePMA>
 800c554:	e0a4      	b.n	800c6a0 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	785b      	ldrb	r3, [r3, #1]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d16d      	bne.n	800c63a <USB_EPStartXfer+0x94e>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c568:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c578:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c57c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c584:	2b00      	cmp	r3, #0
 800c586:	d112      	bne.n	800c5ae <USB_EPStartXfer+0x8c2>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c592:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	00db      	lsls	r3, r3, #3
 800c59e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	e06d      	b.n	800c68a <USB_EPStartXfer+0x99e>
 800c5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5b2:	d821      	bhi.n	800c5f8 <USB_EPStartXfer+0x90c>
 800c5b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5b6:	085b      	lsrs	r3, r3, #1
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <USB_EPStartXfer+0x8de>
 800c5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5d8:	6819      	ldr	r1, [r3, #0]
 800c5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5dc:	069a      	lsls	r2, r3, #26
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	00db      	lsls	r3, r3, #3
 800c5e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	e04b      	b.n	800c68a <USB_EPStartXfer+0x99e>
 800c5f2:	bf00      	nop
 800c5f4:	07ff8e8f 	.word	0x07ff8e8f
 800c5f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5fa:	095b      	lsrs	r3, r3, #5
 800c5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c600:	f003 031f 	and.w	r3, r3, #31
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <USB_EPStartXfer+0x922>
 800c608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c60a:	3b01      	subs	r3, #1
 800c60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c620:	069b      	lsls	r3, r3, #26
 800c622:	431a      	orrs	r2, r3
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c62e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c632:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	e027      	b.n	800c68a <USB_EPStartXfer+0x99e>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	785b      	ldrb	r3, [r3, #1]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d123      	bne.n	800c68a <USB_EPStartXfer+0x99e>
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c64c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c65c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c660:	b292      	uxth	r2, r2
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c66e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c672:	6819      	ldr	r1, [r3, #0]
 800c674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c676:	041a      	lsls	r2, r3, #16
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c682:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c686:	430a      	orrs	r2, r1
 800c688:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	891b      	ldrh	r3, [r3, #8]
 800c68e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	6959      	ldr	r1, [r3, #20]
 800c694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c696:	b29b      	uxth	r3, r3
 800c698:	8b7a      	ldrh	r2, [r7, #26]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fcad 	bl	800cffa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	4b8b      	ldr	r3, [pc, #556]	@ (800c8dc <USB_EPStartXfer+0xbf0>)
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	60fb      	str	r3, [r7, #12]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f083 0310 	eor.w	r3, r3, #16
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f083 0320 	eor.w	r3, r3, #32
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	441a      	add	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	e36b      	b.n	800cdb2 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	7b1b      	ldrb	r3, [r3, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 8081 	bne.w	800c7e6 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	699a      	ldr	r2, [r3, #24]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d909      	bls.n	800c704 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6fc:	1ad2      	subs	r2, r2, r3
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	619a      	str	r2, [r3, #24]
 800c702:	e005      	b.n	800c710 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2200      	movs	r2, #0
 800c70e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c71a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	00db      	lsls	r3, r3, #3
 800c726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c72a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c72e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c732:	605a      	str	r2, [r3, #4]
 800c734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c736:	2b00      	cmp	r3, #0
 800c738:	d112      	bne.n	800c760 <USB_EPStartXfer+0xa74>
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c744:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c748:	685a      	ldr	r2, [r3, #4]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c754:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c758:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c75c:	605a      	str	r2, [r3, #4]
 800c75e:	e30c      	b.n	800cd7a <USB_EPStartXfer+0x108e>
 800c760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c762:	2b3e      	cmp	r3, #62	@ 0x3e
 800c764:	d81e      	bhi.n	800c7a4 <USB_EPStartXfer+0xab8>
 800c766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c768:	085b      	lsrs	r3, r3, #1
 800c76a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c76c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <USB_EPStartXfer+0xa90>
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	3301      	adds	r3, #1
 800c77a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c78a:	6859      	ldr	r1, [r3, #4]
 800c78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78e:	069a      	lsls	r2, r3, #26
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c79a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	605a      	str	r2, [r3, #4]
 800c7a2:	e2ea      	b.n	800cd7a <USB_EPStartXfer+0x108e>
 800c7a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a6:	095b      	lsrs	r3, r3, #5
 800c7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ac:	f003 031f 	and.w	r3, r3, #31
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <USB_EPStartXfer+0xace>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7cc:	069b      	lsls	r3, r3, #26
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c7e2:	605a      	str	r2, [r3, #4]
 800c7e4:	e2c9      	b.n	800cd7a <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	78db      	ldrb	r3, [r3, #3]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	f040 8176 	bne.w	800cadc <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	785b      	ldrb	r3, [r3, #1]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d173      	bne.n	800c8e0 <USB_EPStartXfer+0xbf4>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	00db      	lsls	r3, r3, #3
 800c7fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c802:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c812:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c816:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d112      	bne.n	800c84a <USB_EPStartXfer+0xb5e>
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c82e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c83e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c842:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	e073      	b.n	800c932 <USB_EPStartXfer+0xc46>
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c850:	d820      	bhi.n	800c894 <USB_EPStartXfer+0xba8>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	085b      	lsrs	r3, r3, #1
 800c858:	637b      	str	r3, [r7, #52]	@ 0x34
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <USB_EPStartXfer+0xb80>
 800c866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c868:	3301      	adds	r3, #1
 800c86a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c87a:	6819      	ldr	r1, [r3, #0]
 800c87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c87e:	069a      	lsls	r2, r3, #26
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c88a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c88e:	430a      	orrs	r2, r1
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	e04e      	b.n	800c932 <USB_EPStartXfer+0xc46>
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	095b      	lsrs	r3, r3, #5
 800c89a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	f003 031f 	and.w	r3, r3, #31
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d102      	bne.n	800c8ae <USB_EPStartXfer+0xbc2>
 800c8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c0:	069b      	lsls	r3, r3, #26
 800c8c2:	431a      	orrs	r2, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	e02b      	b.n	800c932 <USB_EPStartXfer+0xc46>
 800c8da:	bf00      	nop
 800c8dc:	07ff8fbf 	.word	0x07ff8fbf
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	785b      	ldrb	r3, [r3, #1]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d124      	bne.n	800c932 <USB_EPStartXfer+0xc46>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	00db      	lsls	r3, r3, #3
 800c8fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c902:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c906:	b292      	uxth	r2, r2
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c918:	6819      	ldr	r1, [r3, #0]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	041a      	lsls	r2, r3, #16
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c92a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c92e:	430a      	orrs	r2, r1
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	785b      	ldrb	r3, [r3, #1]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d170      	bne.n	800ca1c <USB_EPStartXfer+0xd30>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c944:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c958:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c95c:	605a      	str	r2, [r3, #4]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d112      	bne.n	800c98c <USB_EPStartXfer+0xca0>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c970:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c980:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c984:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c988:	605a      	str	r2, [r3, #4]
 800c98a:	e070      	b.n	800ca6e <USB_EPStartXfer+0xd82>
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	2b3e      	cmp	r3, #62	@ 0x3e
 800c992:	d820      	bhi.n	800c9d6 <USB_EPStartXfer+0xcea>
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	085b      	lsrs	r3, r3, #1
 800c99a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <USB_EPStartXfer+0xcc2>
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9bc:	6859      	ldr	r1, [r3, #4]
 800c9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c0:	069a      	lsls	r2, r3, #26
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	605a      	str	r2, [r3, #4]
 800c9d4:	e04b      	b.n	800ca6e <USB_EPStartXfer+0xd82>
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	095b      	lsrs	r3, r3, #5
 800c9dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	f003 031f 	and.w	r3, r3, #31
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d102      	bne.n	800c9f0 <USB_EPStartXfer+0xd04>
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	00db      	lsls	r3, r3, #3
 800c9f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca02:	069b      	lsls	r3, r3, #26
 800ca04:	431a      	orrs	r2, r3
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca14:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca18:	605a      	str	r2, [r3, #4]
 800ca1a:	e028      	b.n	800ca6e <USB_EPStartXfer+0xd82>
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d124      	bne.n	800ca6e <USB_EPStartXfer+0xd82>
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca42:	b292      	uxth	r2, r2
 800ca44:	605a      	str	r2, [r3, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca54:	6859      	ldr	r1, [r3, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	041a      	lsls	r2, r3, #16
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 8181 	beq.w	800cd7a <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ca86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d004      	beq.n	800ca9a <USB_EPStartXfer+0xdae>
 800ca90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10b      	bne.n	800cab2 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ca9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 816a 	bne.w	800cd7a <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800caa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800caa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caac:	2b00      	cmp	r3, #0
 800caae:	f040 8164 	bne.w	800cd7a <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	4b98      	ldr	r3, [pc, #608]	@ (800cd20 <USB_EPStartXfer+0x1034>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	623b      	str	r3, [r7, #32]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	441a      	add	r2, r3
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	e14e      	b.n	800cd7a <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	78db      	ldrb	r3, [r3, #3]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	f040 8148 	bne.w	800cd76 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	699a      	ldr	r2, [r3, #24]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d909      	bls.n	800cb06 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	699a      	ldr	r2, [r3, #24]
 800cafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	619a      	str	r2, [r3, #24]
 800cb04:	e005      	b.n	800cb12 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	785b      	ldrb	r3, [r3, #1]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d16a      	bne.n	800cbf0 <USB_EPStartXfer+0xf04>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	00db      	lsls	r3, r3, #3
 800cb20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb38:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d112      	bne.n	800cb6a <USB_EPStartXfer+0xe7e>
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb62:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	e06a      	b.n	800cc40 <USB_EPStartXfer+0xf54>
 800cb6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb6c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb6e:	d81e      	bhi.n	800cbae <USB_EPStartXfer+0xec2>
 800cb70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb72:	085b      	lsrs	r3, r3, #1
 800cb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb78:	f003 0301 	and.w	r3, r3, #1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <USB_EPStartXfer+0xe9a>
 800cb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb82:	3301      	adds	r3, #1
 800cb84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb94:	6819      	ldr	r1, [r3, #0]
 800cb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb98:	069a      	lsls	r2, r3, #26
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	e048      	b.n	800cc40 <USB_EPStartXfer+0xf54>
 800cbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb0:	095b      	lsrs	r3, r3, #5
 800cbb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb6:	f003 031f 	and.w	r3, r3, #31
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d102      	bne.n	800cbc4 <USB_EPStartXfer+0xed8>
 800cbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd6:	069b      	lsls	r3, r3, #26
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	00db      	lsls	r3, r3, #3
 800cbe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbe4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbe8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	e027      	b.n	800cc40 <USB_EPStartXfer+0xf54>
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d123      	bne.n	800cc40 <USB_EPStartXfer+0xf54>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	00db      	lsls	r3, r3, #3
 800cc0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc16:	b292      	uxth	r2, r2
 800cc18:	601a      	str	r2, [r3, #0]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc28:	6819      	ldr	r1, [r3, #0]
 800cc2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc2c:	041a      	lsls	r2, r3, #16
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	785b      	ldrb	r3, [r3, #1]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d16d      	bne.n	800cd24 <USB_EPStartXfer+0x1038>
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc66:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc6a:	605a      	str	r2, [r3, #4]
 800cc6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d112      	bne.n	800cc98 <USB_EPStartXfer+0xfac>
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc90:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc94:	605a      	str	r2, [r3, #4]
 800cc96:	e070      	b.n	800cd7a <USB_EPStartXfer+0x108e>
 800cc98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc9a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc9c:	d81e      	bhi.n	800ccdc <USB_EPStartXfer+0xff0>
 800cc9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca0:	085b      	lsrs	r3, r3, #1
 800cca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <USB_EPStartXfer+0xfc8>
 800ccae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccc2:	6859      	ldr	r1, [r3, #4]
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	069a      	lsls	r2, r3, #26
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccd6:	430a      	orrs	r2, r1
 800ccd8:	605a      	str	r2, [r3, #4]
 800ccda:	e04e      	b.n	800cd7a <USB_EPStartXfer+0x108e>
 800ccdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccde:	095b      	lsrs	r3, r3, #5
 800cce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce4:	f003 031f 	and.w	r3, r3, #31
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <USB_EPStartXfer+0x1006>
 800ccec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd04:	069b      	lsls	r3, r3, #26
 800cd06:	431a      	orrs	r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd16:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd1a:	605a      	str	r2, [r3, #4]
 800cd1c:	e02d      	b.n	800cd7a <USB_EPStartXfer+0x108e>
 800cd1e:	bf00      	nop
 800cd20:	07ff8f8f 	.word	0x07ff8f8f
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	785b      	ldrb	r3, [r3, #1]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d126      	bne.n	800cd7a <USB_EPStartXfer+0x108e>
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	00db      	lsls	r3, r3, #3
 800cd32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd4a:	b292      	uxth	r2, r2
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd5c:	6859      	ldr	r1, [r3, #4]
 800cd5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd60:	041a      	lsls	r2, r3, #16
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd70:	430a      	orrs	r2, r1
 800cd72:	605a      	str	r2, [r3, #4]
 800cd74:	e001      	b.n	800cd7a <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e01c      	b.n	800cdb4 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	4b0d      	ldr	r3, [pc, #52]	@ (800cdbc <USB_EPStartXfer+0x10d0>)
 800cd88:	4013      	ands	r3, r2
 800cd8a:	61fb      	str	r3, [r7, #28]
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd92:	61fb      	str	r3, [r7, #28]
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cd9a:	61fb      	str	r3, [r7, #28]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	441a      	add	r2, r3
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3758      	adds	r7, #88	@ 0x58
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	07ffbf8f 	.word	0x07ffbf8f

0800cdc0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d018      	beq.n	800ce04 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b19      	ldr	r3, [pc, #100]	@ (800ce44 <USB_EPSetStall+0x84>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	60bb      	str	r3, [r7, #8]
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	f083 0310 	eor.w	r3, r3, #16
 800cdea:	60bb      	str	r3, [r7, #8]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	441a      	add	r2, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	e017      	b.n	800ce34 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	4b0d      	ldr	r3, [pc, #52]	@ (800ce48 <USB_EPSetStall+0x88>)
 800ce12:	4013      	ands	r3, r2
 800ce14:	60fb      	str	r3, [r7, #12]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	441a      	add	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	07ff8fbf 	.word	0x07ff8fbf
 800ce48:	07ffbf8f 	.word	0x07ffbf8f

0800ce4c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b089      	sub	sp, #36	@ 0x24
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	7b1b      	ldrb	r3, [r3, #12]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d17c      	bne.n	800cf58 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	785b      	ldrb	r3, [r3, #1]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d03c      	beq.n	800cee0 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	613b      	str	r3, [r7, #16]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d013      	beq.n	800cea6 <USB_EPClearStall+0x5a>
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b37      	ldr	r3, [pc, #220]	@ (800cf68 <USB_EPClearStall+0x11c>)
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	441a      	add	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cea0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cea4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	78db      	ldrb	r3, [r3, #3]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d054      	beq.n	800cf58 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	4b2c      	ldr	r3, [pc, #176]	@ (800cf6c <USB_EPClearStall+0x120>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	60bb      	str	r3, [r7, #8]
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	f083 0320 	eor.w	r3, r3, #32
 800cec6:	60bb      	str	r3, [r7, #8]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	441a      	add	r2, r3
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ced8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cedc:	6013      	str	r3, [r2, #0]
 800cede:	e03b      	b.n	800cf58 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	61fb      	str	r3, [r7, #28]
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d013      	beq.n	800cf20 <USB_EPClearStall+0xd4>
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	4b18      	ldr	r3, [pc, #96]	@ (800cf68 <USB_EPClearStall+0x11c>)
 800cf06:	4013      	ands	r3, r2
 800cf08:	61bb      	str	r3, [r7, #24]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	441a      	add	r2, r3
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf1e:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	4b10      	ldr	r3, [pc, #64]	@ (800cf70 <USB_EPClearStall+0x124>)
 800cf2e:	4013      	ands	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cf40:	617b      	str	r3, [r7, #20]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	441a      	add	r2, r3
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf56:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3724      	adds	r7, #36	@ 0x24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	07ff8f8f 	.word	0x07ff8f8f
 800cf6c:	07ff8fbf 	.word	0x07ff8fbf
 800cf70:	07ffbf8f 	.word	0x07ffbf8f

0800cf74 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d102      	bne.n	800cf8c <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2280      	movs	r2, #128	@ 0x80
 800cf8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfa6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfc8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	b085      	sub	sp, #20
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cfec:	68fb      	ldr	r3, [r7, #12]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b08b      	sub	sp, #44	@ 0x2c
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	4611      	mov	r1, r2
 800d006:	461a      	mov	r2, r3
 800d008:	460b      	mov	r3, r1
 800d00a:	80fb      	strh	r3, [r7, #6]
 800d00c:	4613      	mov	r3, r2
 800d00e:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d010:	88bb      	ldrh	r3, [r7, #4]
 800d012:	3303      	adds	r3, #3
 800d014:	089b      	lsrs	r3, r3, #2
 800d016:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d018:	88bb      	ldrh	r3, [r7, #4]
 800d01a:	f003 0303 	and.w	r3, r3, #3
 800d01e:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d024:	8afb      	ldrh	r3, [r7, #22]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <USB_WritePMA+0x36>
  {
    NbWords--;
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d030:	88fb      	ldrh	r3, [r7, #6]
 800d032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d036:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d03a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	623b      	str	r3, [r7, #32]
 800d040:	e015      	b.n	800d06e <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	3304      	adds	r3, #4
 800d04e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	3301      	adds	r3, #1
 800d054:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	3301      	adds	r3, #1
 800d05a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	3301      	adds	r3, #1
 800d060:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3301      	adds	r3, #1
 800d066:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	623b      	str	r3, [r7, #32]
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1e6      	bne.n	800d042 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d074:	8afb      	ldrh	r3, [r7, #22]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d01a      	beq.n	800d0b0 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	fa02 f303 	lsl.w	r3, r2, r3
 800d08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d08e:	4313      	orrs	r3, r2
 800d090:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d092:	6a3b      	ldr	r3, [r7, #32]
 800d094:	3301      	adds	r3, #1
 800d096:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	3301      	adds	r3, #1
 800d09c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d09e:	8afb      	ldrh	r3, [r7, #22]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d0a4:	8afb      	ldrh	r3, [r7, #22]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1e9      	bne.n	800d07e <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ae:	601a      	str	r2, [r3, #0]
  }
}
 800d0b0:	bf00      	nop
 800d0b2:	372c      	adds	r7, #44	@ 0x2c
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b08b      	sub	sp, #44	@ 0x2c
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	80fb      	strh	r3, [r7, #6]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d0d2:	88bb      	ldrh	r3, [r7, #4]
 800d0d4:	3303      	adds	r3, #3
 800d0d6:	089b      	lsrs	r3, r3, #2
 800d0d8:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d0da:	88bb      	ldrh	r3, [r7, #4]
 800d0dc:	f003 0303 	and.w	r3, r3, #3
 800d0e0:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d0e6:	88fb      	ldrh	r3, [r7, #6]
 800d0e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0f0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d0f2:	8b7b      	ldrh	r3, [r7, #26]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	627b      	str	r3, [r7, #36]	@ 0x24
 800d102:	e015      	b.n	800d130 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	3304      	adds	r3, #4
 800d110:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	3301      	adds	r3, #1
 800d116:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	3301      	adds	r3, #1
 800d11c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3301      	adds	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	3301      	adds	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12c:	3b01      	subs	r3, #1
 800d12e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1e6      	bne.n	800d104 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d136:	8b7b      	ldrh	r3, [r7, #26]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d017      	beq.n	800d16c <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d144:	b2db      	uxtb	r3, r3
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	fa22 f303 	lsr.w	r3, r2, r3
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	701a      	strb	r2, [r3, #0]
      count++;
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	3301      	adds	r3, #1
 800d158:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	3301      	adds	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d160:	8b7b      	ldrh	r3, [r7, #26]
 800d162:	3b01      	subs	r3, #1
 800d164:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800d166:	8b7b      	ldrh	r3, [r7, #26]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1ea      	bne.n	800d142 <USB_ReadPMA+0x86>
  }
}
 800d16c:	bf00      	nop
 800d16e:	372c      	adds	r7, #44	@ 0x2c
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d184:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d188:	f000 ffa4 	bl	800e0d4 <USBD_static_malloc>
 800d18c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d109      	bne.n	800d1a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	32b0      	adds	r2, #176	@ 0xb0
 800d19e:	2100      	movs	r1, #0
 800d1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	e0d4      	b.n	800d352 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d1a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f002 fb46 	bl	800f840 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	32b0      	adds	r2, #176	@ 0xb0
 800d1be:	68f9      	ldr	r1, [r7, #12]
 800d1c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	32b0      	adds	r2, #176	@ 0xb0
 800d1ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7c1b      	ldrb	r3, [r3, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d138      	bne.n	800d252 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d1e0:	4b5e      	ldr	r3, [pc, #376]	@ (800d35c <USBD_CDC_Init+0x1e4>)
 800d1e2:	7819      	ldrb	r1, [r3, #0]
 800d1e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fe79 	bl	800dee2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1f0:	4b5a      	ldr	r3, [pc, #360]	@ (800d35c <USBD_CDC_Init+0x1e4>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	f003 020f 	and.w	r2, r3, #15
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	440b      	add	r3, r1
 800d204:	3324      	adds	r3, #36	@ 0x24
 800d206:	2201      	movs	r2, #1
 800d208:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d20a:	4b55      	ldr	r3, [pc, #340]	@ (800d360 <USBD_CDC_Init+0x1e8>)
 800d20c:	7819      	ldrb	r1, [r3, #0]
 800d20e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d212:	2202      	movs	r2, #2
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fe64 	bl	800dee2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d21a:	4b51      	ldr	r3, [pc, #324]	@ (800d360 <USBD_CDC_Init+0x1e8>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	f003 020f 	and.w	r2, r3, #15
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	4613      	mov	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	440b      	add	r3, r1
 800d22e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d232:	2201      	movs	r2, #1
 800d234:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d236:	4b4b      	ldr	r3, [pc, #300]	@ (800d364 <USBD_CDC_Init+0x1ec>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	f003 020f 	and.w	r2, r3, #15
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	440b      	add	r3, r1
 800d24a:	3326      	adds	r3, #38	@ 0x26
 800d24c:	2210      	movs	r2, #16
 800d24e:	801a      	strh	r2, [r3, #0]
 800d250:	e035      	b.n	800d2be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d252:	4b42      	ldr	r3, [pc, #264]	@ (800d35c <USBD_CDC_Init+0x1e4>)
 800d254:	7819      	ldrb	r1, [r3, #0]
 800d256:	2340      	movs	r3, #64	@ 0x40
 800d258:	2202      	movs	r2, #2
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fe41 	bl	800dee2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d260:	4b3e      	ldr	r3, [pc, #248]	@ (800d35c <USBD_CDC_Init+0x1e4>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	f003 020f 	and.w	r2, r3, #15
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	4613      	mov	r3, r2
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4413      	add	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	440b      	add	r3, r1
 800d274:	3324      	adds	r3, #36	@ 0x24
 800d276:	2201      	movs	r2, #1
 800d278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d27a:	4b39      	ldr	r3, [pc, #228]	@ (800d360 <USBD_CDC_Init+0x1e8>)
 800d27c:	7819      	ldrb	r1, [r3, #0]
 800d27e:	2340      	movs	r3, #64	@ 0x40
 800d280:	2202      	movs	r2, #2
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fe2d 	bl	800dee2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d288:	4b35      	ldr	r3, [pc, #212]	@ (800d360 <USBD_CDC_Init+0x1e8>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	f003 020f 	and.w	r2, r3, #15
 800d290:	6879      	ldr	r1, [r7, #4]
 800d292:	4613      	mov	r3, r2
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	440b      	add	r3, r1
 800d29c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d2a4:	4b2f      	ldr	r3, [pc, #188]	@ (800d364 <USBD_CDC_Init+0x1ec>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	f003 020f 	and.w	r2, r3, #15
 800d2ac:	6879      	ldr	r1, [r7, #4]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	440b      	add	r3, r1
 800d2b8:	3326      	adds	r3, #38	@ 0x26
 800d2ba:	2210      	movs	r2, #16
 800d2bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d2be:	4b29      	ldr	r3, [pc, #164]	@ (800d364 <USBD_CDC_Init+0x1ec>)
 800d2c0:	7819      	ldrb	r1, [r3, #0]
 800d2c2:	2308      	movs	r3, #8
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fe0b 	bl	800dee2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d2cc:	4b25      	ldr	r3, [pc, #148]	@ (800d364 <USBD_CDC_Init+0x1ec>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	f003 020f 	and.w	r2, r3, #15
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	440b      	add	r3, r1
 800d2e0:	3324      	adds	r3, #36	@ 0x24
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	33b0      	adds	r3, #176	@ 0xb0
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	4413      	add	r3, r2
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2200      	movs	r2, #0
 800d306:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d31c:	2302      	movs	r3, #2
 800d31e:	e018      	b.n	800d352 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	7c1b      	ldrb	r3, [r3, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10a      	bne.n	800d33e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d328:	4b0d      	ldr	r3, [pc, #52]	@ (800d360 <USBD_CDC_Init+0x1e8>)
 800d32a:	7819      	ldrb	r1, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fe9e 	bl	800e078 <USBD_LL_PrepareReceive>
 800d33c:	e008      	b.n	800d350 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d33e:	4b08      	ldr	r3, [pc, #32]	@ (800d360 <USBD_CDC_Init+0x1e8>)
 800d340:	7819      	ldrb	r1, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d348:	2340      	movs	r3, #64	@ 0x40
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fe94 	bl	800e078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	200000af 	.word	0x200000af
 800d360:	200000b0 	.word	0x200000b0
 800d364:	200000b1 	.word	0x200000b1

0800d368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	460b      	mov	r3, r1
 800d372:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d374:	4b3a      	ldr	r3, [pc, #232]	@ (800d460 <USBD_CDC_DeInit+0xf8>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fdd1 	bl	800df22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d380:	4b37      	ldr	r3, [pc, #220]	@ (800d460 <USBD_CDC_DeInit+0xf8>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 020f 	and.w	r2, r3, #15
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	4613      	mov	r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	440b      	add	r3, r1
 800d394:	3324      	adds	r3, #36	@ 0x24
 800d396:	2200      	movs	r2, #0
 800d398:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d39a:	4b32      	ldr	r3, [pc, #200]	@ (800d464 <USBD_CDC_DeInit+0xfc>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fdbe 	bl	800df22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d3a6:	4b2f      	ldr	r3, [pc, #188]	@ (800d464 <USBD_CDC_DeInit+0xfc>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	f003 020f 	and.w	r2, r3, #15
 800d3ae:	6879      	ldr	r1, [r7, #4]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	440b      	add	r3, r1
 800d3ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3be:	2200      	movs	r2, #0
 800d3c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d3c2:	4b29      	ldr	r3, [pc, #164]	@ (800d468 <USBD_CDC_DeInit+0x100>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fdaa 	bl	800df22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d3ce:	4b26      	ldr	r3, [pc, #152]	@ (800d468 <USBD_CDC_DeInit+0x100>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	f003 020f 	and.w	r2, r3, #15
 800d3d6:	6879      	ldr	r1, [r7, #4]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	3324      	adds	r3, #36	@ 0x24
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d3e8:	4b1f      	ldr	r3, [pc, #124]	@ (800d468 <USBD_CDC_DeInit+0x100>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	f003 020f 	and.w	r2, r3, #15
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	440b      	add	r3, r1
 800d3fc:	3326      	adds	r3, #38	@ 0x26
 800d3fe:	2200      	movs	r2, #0
 800d400:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	32b0      	adds	r2, #176	@ 0xb0
 800d40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d01f      	beq.n	800d454 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	33b0      	adds	r3, #176	@ 0xb0
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	4413      	add	r3, r2
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	32b0      	adds	r2, #176	@ 0xb0
 800d432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 fe5a 	bl	800e0f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	32b0      	adds	r2, #176	@ 0xb0
 800d446:	2100      	movs	r1, #0
 800d448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	200000af 	.word	0x200000af
 800d464:	200000b0 	.word	0x200000b0
 800d468:	200000b1 	.word	0x200000b1

0800d46c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	32b0      	adds	r2, #176	@ 0xb0
 800d480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d484:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d486:	2300      	movs	r3, #0
 800d488:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d101      	bne.n	800d49c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d498:	2303      	movs	r3, #3
 800d49a:	e0bf      	b.n	800d61c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d050      	beq.n	800d54a <USBD_CDC_Setup+0xde>
 800d4a8:	2b20      	cmp	r3, #32
 800d4aa:	f040 80af 	bne.w	800d60c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	88db      	ldrh	r3, [r3, #6]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d03a      	beq.n	800d52c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	b25b      	sxtb	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	da1b      	bge.n	800d4f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	33b0      	adds	r3, #176	@ 0xb0
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	4413      	add	r3, r2
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d4d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	88d2      	ldrh	r2, [r2, #6]
 800d4dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	88db      	ldrh	r3, [r3, #6]
 800d4e2:	2b07      	cmp	r3, #7
 800d4e4:	bf28      	it	cs
 800d4e6:	2307      	movcs	r3, #7
 800d4e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	89fa      	ldrh	r2, [r7, #14]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f002 f8f0 	bl	800f6d6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d4f6:	e090      	b.n	800d61a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	785a      	ldrb	r2, [r3, #1]
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	88db      	ldrh	r3, [r3, #6]
 800d506:	2b3f      	cmp	r3, #63	@ 0x3f
 800d508:	d803      	bhi.n	800d512 <USBD_CDC_Setup+0xa6>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	88db      	ldrh	r3, [r3, #6]
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	e000      	b.n	800d514 <USBD_CDC_Setup+0xa8>
 800d512:	2240      	movs	r2, #64	@ 0x40
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d51a:	6939      	ldr	r1, [r7, #16]
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d522:	461a      	mov	r2, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f002 f902 	bl	800f72e <USBD_CtlPrepareRx>
      break;
 800d52a:	e076      	b.n	800d61a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	33b0      	adds	r3, #176	@ 0xb0
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4413      	add	r3, r2
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	7850      	ldrb	r0, [r2, #1]
 800d542:	2200      	movs	r2, #0
 800d544:	6839      	ldr	r1, [r7, #0]
 800d546:	4798      	blx	r3
      break;
 800d548:	e067      	b.n	800d61a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	785b      	ldrb	r3, [r3, #1]
 800d54e:	2b0b      	cmp	r3, #11
 800d550:	d851      	bhi.n	800d5f6 <USBD_CDC_Setup+0x18a>
 800d552:	a201      	add	r2, pc, #4	@ (adr r2, 800d558 <USBD_CDC_Setup+0xec>)
 800d554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d558:	0800d589 	.word	0x0800d589
 800d55c:	0800d605 	.word	0x0800d605
 800d560:	0800d5f7 	.word	0x0800d5f7
 800d564:	0800d5f7 	.word	0x0800d5f7
 800d568:	0800d5f7 	.word	0x0800d5f7
 800d56c:	0800d5f7 	.word	0x0800d5f7
 800d570:	0800d5f7 	.word	0x0800d5f7
 800d574:	0800d5f7 	.word	0x0800d5f7
 800d578:	0800d5f7 	.word	0x0800d5f7
 800d57c:	0800d5f7 	.word	0x0800d5f7
 800d580:	0800d5b3 	.word	0x0800d5b3
 800d584:	0800d5dd 	.word	0x0800d5dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b03      	cmp	r3, #3
 800d592:	d107      	bne.n	800d5a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d594:	f107 030a 	add.w	r3, r7, #10
 800d598:	2202      	movs	r2, #2
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f002 f89a 	bl	800f6d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d5a2:	e032      	b.n	800d60a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 ff17 	bl	800f3da <USBD_CtlError>
            ret = USBD_FAIL;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	75fb      	strb	r3, [r7, #23]
          break;
 800d5b0:	e02b      	b.n	800d60a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d107      	bne.n	800d5ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d5be:	f107 030d 	add.w	r3, r7, #13
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f002 f885 	bl	800f6d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d5cc:	e01d      	b.n	800d60a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 ff02 	bl	800f3da <USBD_CtlError>
            ret = USBD_FAIL;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	75fb      	strb	r3, [r7, #23]
          break;
 800d5da:	e016      	b.n	800d60a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d00f      	beq.n	800d608 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f001 fef5 	bl	800f3da <USBD_CtlError>
            ret = USBD_FAIL;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d5f4:	e008      	b.n	800d608 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f001 feee 	bl	800f3da <USBD_CtlError>
          ret = USBD_FAIL;
 800d5fe:	2303      	movs	r3, #3
 800d600:	75fb      	strb	r3, [r7, #23]
          break;
 800d602:	e002      	b.n	800d60a <USBD_CDC_Setup+0x19e>
          break;
 800d604:	bf00      	nop
 800d606:	e008      	b.n	800d61a <USBD_CDC_Setup+0x1ae>
          break;
 800d608:	bf00      	nop
      }
      break;
 800d60a:	e006      	b.n	800d61a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d60c:	6839      	ldr	r1, [r7, #0]
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f001 fee3 	bl	800f3da <USBD_CtlError>
      ret = USBD_FAIL;
 800d614:	2303      	movs	r3, #3
 800d616:	75fb      	strb	r3, [r7, #23]
      break;
 800d618:	bf00      	nop
  }

  return (uint8_t)ret;
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	32b0      	adds	r2, #176	@ 0xb0
 800d642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d64a:	2303      	movs	r3, #3
 800d64c:	e065      	b.n	800d71a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	32b0      	adds	r2, #176	@ 0xb0
 800d658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d65e:	78fb      	ldrb	r3, [r7, #3]
 800d660:	f003 020f 	and.w	r2, r3, #15
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	4613      	mov	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	440b      	add	r3, r1
 800d670:	3318      	adds	r3, #24
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d02f      	beq.n	800d6d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d678:	78fb      	ldrb	r3, [r7, #3]
 800d67a:	f003 020f 	and.w	r2, r3, #15
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	4613      	mov	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	440b      	add	r3, r1
 800d68a:	3318      	adds	r3, #24
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	78fb      	ldrb	r3, [r7, #3]
 800d690:	f003 010f 	and.w	r1, r3, #15
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	460b      	mov	r3, r1
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	440b      	add	r3, r1
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	4403      	add	r3, r0
 800d6a0:	3324      	adds	r3, #36	@ 0x24
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d6a8:	fb01 f303 	mul.w	r3, r1, r3
 800d6ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d112      	bne.n	800d6d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d6b2:	78fb      	ldrb	r3, [r7, #3]
 800d6b4:	f003 020f 	and.w	r2, r3, #15
 800d6b8:	6879      	ldr	r1, [r7, #4]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	440b      	add	r3, r1
 800d6c4:	3318      	adds	r3, #24
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d6ca:	78f9      	ldrb	r1, [r7, #3]
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fcb6 	bl	800e042 <USBD_LL_Transmit>
 800d6d6:	e01f      	b.n	800d718 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	33b0      	adds	r3, #176	@ 0xb0
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d010      	beq.n	800d718 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	33b0      	adds	r3, #176	@ 0xb0
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	460b      	mov	r3, r1
 800d72c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	32b0      	adds	r2, #176	@ 0xb0
 800d738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d73c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	32b0      	adds	r2, #176	@ 0xb0
 800d748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d750:	2303      	movs	r3, #3
 800d752:	e01a      	b.n	800d78a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d754:	78fb      	ldrb	r3, [r7, #3]
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 fca8 	bl	800e0ae <USBD_LL_GetRxDataSize>
 800d75e:	4602      	mov	r2, r0
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	33b0      	adds	r3, #176	@ 0xb0
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d784:	4611      	mov	r1, r2
 800d786:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b084      	sub	sp, #16
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	32b0      	adds	r2, #176	@ 0xb0
 800d7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	e024      	b.n	800d7fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	33b0      	adds	r3, #176	@ 0xb0
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d019      	beq.n	800d7fc <USBD_CDC_EP0_RxReady+0x6a>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d7ce:	2bff      	cmp	r3, #255	@ 0xff
 800d7d0:	d014      	beq.n	800d7fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	33b0      	adds	r3, #176	@ 0xb0
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4413      	add	r3, r2
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d7ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	22ff      	movs	r2, #255	@ 0xff
 800d7f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
	...

0800d808 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d810:	2182      	movs	r1, #130	@ 0x82
 800d812:	4818      	ldr	r0, [pc, #96]	@ (800d874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d814:	f000 ffab 	bl	800e76e <USBD_GetEpDesc>
 800d818:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d81a:	2101      	movs	r1, #1
 800d81c:	4815      	ldr	r0, [pc, #84]	@ (800d874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d81e:	f000 ffa6 	bl	800e76e <USBD_GetEpDesc>
 800d822:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d824:	2181      	movs	r1, #129	@ 0x81
 800d826:	4813      	ldr	r0, [pc, #76]	@ (800d874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d828:	f000 ffa1 	bl	800e76e <USBD_GetEpDesc>
 800d82c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2210      	movs	r2, #16
 800d838:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d006      	beq.n	800d84e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	2200      	movs	r2, #0
 800d844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d848:	711a      	strb	r2, [r3, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d006      	beq.n	800d862 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d85c:	711a      	strb	r2, [r3, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2243      	movs	r2, #67	@ 0x43
 800d866:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d868:	4b02      	ldr	r3, [pc, #8]	@ (800d874 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	2000006c 	.word	0x2000006c

0800d878 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d880:	2182      	movs	r1, #130	@ 0x82
 800d882:	4818      	ldr	r0, [pc, #96]	@ (800d8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d884:	f000 ff73 	bl	800e76e <USBD_GetEpDesc>
 800d888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d88a:	2101      	movs	r1, #1
 800d88c:	4815      	ldr	r0, [pc, #84]	@ (800d8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d88e:	f000 ff6e 	bl	800e76e <USBD_GetEpDesc>
 800d892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d894:	2181      	movs	r1, #129	@ 0x81
 800d896:	4813      	ldr	r0, [pc, #76]	@ (800d8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d898:	f000 ff69 	bl	800e76e <USBD_GetEpDesc>
 800d89c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2210      	movs	r2, #16
 800d8a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d006      	beq.n	800d8be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	711a      	strb	r2, [r3, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f042 0202 	orr.w	r2, r2, #2
 800d8bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d006      	beq.n	800d8d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	711a      	strb	r2, [r3, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f042 0202 	orr.w	r2, r2, #2
 800d8d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2243      	movs	r2, #67	@ 0x43
 800d8d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d8d8:	4b02      	ldr	r3, [pc, #8]	@ (800d8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	2000006c 	.word	0x2000006c

0800d8e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8f0:	2182      	movs	r1, #130	@ 0x82
 800d8f2:	4818      	ldr	r0, [pc, #96]	@ (800d954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8f4:	f000 ff3b 	bl	800e76e <USBD_GetEpDesc>
 800d8f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	4815      	ldr	r0, [pc, #84]	@ (800d954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8fe:	f000 ff36 	bl	800e76e <USBD_GetEpDesc>
 800d902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d904:	2181      	movs	r1, #129	@ 0x81
 800d906:	4813      	ldr	r0, [pc, #76]	@ (800d954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d908:	f000 ff31 	bl	800e76e <USBD_GetEpDesc>
 800d90c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	2210      	movs	r2, #16
 800d918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d006      	beq.n	800d92e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	2200      	movs	r2, #0
 800d924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d928:	711a      	strb	r2, [r3, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d006      	beq.n	800d942 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2200      	movs	r2, #0
 800d938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d93c:	711a      	strb	r2, [r3, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2243      	movs	r2, #67	@ 0x43
 800d946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d948:	4b02      	ldr	r3, [pc, #8]	@ (800d954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	2000006c 	.word	0x2000006c

0800d958 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	220a      	movs	r2, #10
 800d964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d966:	4b03      	ldr	r3, [pc, #12]	@ (800d974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	20000028 	.word	0x20000028

0800d978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d988:	2303      	movs	r3, #3
 800d98a:	e009      	b.n	800d9a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	33b0      	adds	r3, #176	@ 0xb0
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4413      	add	r3, r2
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b087      	sub	sp, #28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	32b0      	adds	r2, #176	@ 0xb0
 800d9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	e008      	b.n	800d9e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	32b0      	adds	r2, #176	@ 0xb0
 800da04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800da10:	2303      	movs	r3, #3
 800da12:	e004      	b.n	800da1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
	...

0800da2c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	32b0      	adds	r2, #176	@ 0xb0
 800da3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da42:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800da44:	2301      	movs	r3, #1
 800da46:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800da4e:	2303      	movs	r3, #3
 800da50:	e025      	b.n	800da9e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d11f      	bne.n	800da9c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	2201      	movs	r2, #1
 800da60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800da64:	4b10      	ldr	r3, [pc, #64]	@ (800daa8 <USBD_CDC_TransmitPacket+0x7c>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f003 020f 	and.w	r2, r3, #15
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	4613      	mov	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4403      	add	r3, r0
 800da7e:	3318      	adds	r3, #24
 800da80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800da82:	4b09      	ldr	r3, [pc, #36]	@ (800daa8 <USBD_CDC_TransmitPacket+0x7c>)
 800da84:	7819      	ldrb	r1, [r3, #0]
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fad5 	bl	800e042 <USBD_LL_Transmit>

    ret = USBD_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	200000af 	.word	0x200000af

0800daac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	32b0      	adds	r2, #176	@ 0xb0
 800dabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	32b0      	adds	r2, #176	@ 0xb0
 800dace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dad6:	2303      	movs	r3, #3
 800dad8:	e018      	b.n	800db0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7c1b      	ldrb	r3, [r3, #16]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10a      	bne.n	800daf8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dae2:	4b0c      	ldr	r3, [pc, #48]	@ (800db14 <USBD_CDC_ReceivePacket+0x68>)
 800dae4:	7819      	ldrb	r1, [r3, #0]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800daec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fac1 	bl	800e078 <USBD_LL_PrepareReceive>
 800daf6:	e008      	b.n	800db0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800daf8:	4b06      	ldr	r3, [pc, #24]	@ (800db14 <USBD_CDC_ReceivePacket+0x68>)
 800dafa:	7819      	ldrb	r1, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800db02:	2340      	movs	r3, #64	@ 0x40
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 fab7 	bl	800e078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	200000b0 	.word	0x200000b0

0800db18 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db1c:	2200      	movs	r2, #0
 800db1e:	4905      	ldr	r1, [pc, #20]	@ (800db34 <TEMPLATE_Init+0x1c>)
 800db20:	4805      	ldr	r0, [pc, #20]	@ (800db38 <TEMPLATE_Init+0x20>)
 800db22:	f7ff ff43 	bl	800d9ac <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db26:	4905      	ldr	r1, [pc, #20]	@ (800db3c <TEMPLATE_Init+0x24>)
 800db28:	4803      	ldr	r0, [pc, #12]	@ (800db38 <TEMPLATE_Init+0x20>)
 800db2a:	f7ff ff61 	bl	800d9f0 <USBD_CDC_SetRxBuffer>
      return (0);
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	bd80      	pop	{r7, pc}
 800db34:	20000c40 	.word	0x20000c40
 800db38:	200006bc 	.word	0x200006bc
 800db3c:	20000a40 	.word	0x20000a40

0800db40 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800db40:	b480      	push	{r7}
 800db42:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <TEMPLATE_Transmit>:

uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800db60:	4b0d      	ldr	r3, [pc, #52]	@ (800db98 <TEMPLATE_Transmit+0x48>)
 800db62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800db72:	2301      	movs	r3, #1
 800db74:	e00b      	b.n	800db8e <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800db76:	887b      	ldrh	r3, [r7, #2]
 800db78:	461a      	mov	r2, r3
 800db7a:	6879      	ldr	r1, [r7, #4]
 800db7c:	4806      	ldr	r0, [pc, #24]	@ (800db98 <TEMPLATE_Transmit+0x48>)
 800db7e:	f7ff ff15 	bl	800d9ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db82:	4805      	ldr	r0, [pc, #20]	@ (800db98 <TEMPLATE_Transmit+0x48>)
 800db84:	f7ff ff52 	bl	800da2c <USBD_CDC_TransmitPacket>
 800db88:	4603      	mov	r3, r0
 800db8a:	73fb      	strb	r3, [r7, #15]
  return result;
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	200006bc 	.word	0x200006bc

0800db9c <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	4603      	mov	r3, r0
 800dba4:	6039      	str	r1, [r7, #0]
 800dba6:	71fb      	strb	r3, [r7, #7]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800dbac:	79fb      	ldrb	r3, [r7, #7]
 800dbae:	2b23      	cmp	r3, #35	@ 0x23
 800dbb0:	f200 8098 	bhi.w	800dce4 <TEMPLATE_Control+0x148>
 800dbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800dbbc <TEMPLATE_Control+0x20>)
 800dbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbba:	bf00      	nop
 800dbbc:	0800dce5 	.word	0x0800dce5
 800dbc0:	0800dce5 	.word	0x0800dce5
 800dbc4:	0800dce5 	.word	0x0800dce5
 800dbc8:	0800dce5 	.word	0x0800dce5
 800dbcc:	0800dce5 	.word	0x0800dce5
 800dbd0:	0800dce5 	.word	0x0800dce5
 800dbd4:	0800dce5 	.word	0x0800dce5
 800dbd8:	0800dce5 	.word	0x0800dce5
 800dbdc:	0800dce5 	.word	0x0800dce5
 800dbe0:	0800dce5 	.word	0x0800dce5
 800dbe4:	0800dce5 	.word	0x0800dce5
 800dbe8:	0800dce5 	.word	0x0800dce5
 800dbec:	0800dce5 	.word	0x0800dce5
 800dbf0:	0800dce5 	.word	0x0800dce5
 800dbf4:	0800dce5 	.word	0x0800dce5
 800dbf8:	0800dce5 	.word	0x0800dce5
 800dbfc:	0800dce5 	.word	0x0800dce5
 800dc00:	0800dce5 	.word	0x0800dce5
 800dc04:	0800dce5 	.word	0x0800dce5
 800dc08:	0800dce5 	.word	0x0800dce5
 800dc0c:	0800dce5 	.word	0x0800dce5
 800dc10:	0800dce5 	.word	0x0800dce5
 800dc14:	0800dce5 	.word	0x0800dce5
 800dc18:	0800dce5 	.word	0x0800dce5
 800dc1c:	0800dce5 	.word	0x0800dce5
 800dc20:	0800dce5 	.word	0x0800dce5
 800dc24:	0800dce5 	.word	0x0800dce5
 800dc28:	0800dce5 	.word	0x0800dce5
 800dc2c:	0800dce5 	.word	0x0800dce5
 800dc30:	0800dce5 	.word	0x0800dce5
 800dc34:	0800dce5 	.word	0x0800dce5
 800dc38:	0800dce5 	.word	0x0800dce5
 800dc3c:	0800dc4d 	.word	0x0800dc4d
 800dc40:	0800dc91 	.word	0x0800dc91
 800dc44:	0800dce5 	.word	0x0800dce5
 800dc48:	0800dce5 	.word	0x0800dce5
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	461a      	mov	r2, r3
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	3301      	adds	r3, #1
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	3302      	adds	r3, #2
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800dc64:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	3303      	adds	r3, #3
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	061b      	lsls	r3, r3, #24
 800dc6e:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800dc70:	461a      	mov	r2, r3
 800dc72:	4b20      	ldr	r3, [pc, #128]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dc74:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	791a      	ldrb	r2, [r3, #4]
 800dc7a:	4b1e      	ldr	r3, [pc, #120]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dc7c:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	795a      	ldrb	r2, [r3, #5]
 800dc82:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dc84:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	799a      	ldrb	r2, [r3, #6]
 800dc8a:	4b1a      	ldr	r3, [pc, #104]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dc8c:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800dc8e:	e02a      	b.n	800dce6 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800dc90:	4b18      	ldr	r3, [pc, #96]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800dc9a:	4b16      	ldr	r3, [pc, #88]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	0a1a      	lsrs	r2, r3, #8
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	b2d2      	uxtb	r2, r2
 800dca6:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800dca8:	4b12      	ldr	r3, [pc, #72]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	0c1a      	lsrs	r2, r3, #16
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	3302      	adds	r3, #2
 800dcb2:	b2d2      	uxtb	r2, r2
 800dcb4:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800dcb6:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	0e1a      	lsrs	r2, r3, #24
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	3303      	adds	r3, #3
 800dcc0:	b2d2      	uxtb	r2, r2
 800dcc2:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	4a0a      	ldr	r2, [pc, #40]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dcca:	7912      	ldrb	r2, [r2, #4]
 800dccc:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	3305      	adds	r3, #5
 800dcd2:	4a08      	ldr	r2, [pc, #32]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dcd4:	7952      	ldrb	r2, [r2, #5]
 800dcd6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	3306      	adds	r3, #6
 800dcdc:	4a05      	ldr	r2, [pc, #20]	@ (800dcf4 <TEMPLATE_Control+0x158>)
 800dcde:	7992      	ldrb	r2, [r2, #6]
 800dce0:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800dce2:	e000      	b.n	800dce6 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800dce4:	bf00      	nop
  }

  return (0);
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	200000c8 	.word	0x200000c8

0800dcf8 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b31      	cmp	r3, #49	@ 0x31
 800dd08:	d105      	bne.n	800dd16 <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	2120      	movs	r1, #32
 800dd0e:	480a      	ldr	r0, [pc, #40]	@ (800dd38 <TEMPLATE_Receive+0x40>)
 800dd10:	f7f4 fabe 	bl	8002290 <HAL_GPIO_WritePin>
 800dd14:	e008      	b.n	800dd28 <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	2b30      	cmp	r3, #48	@ 0x30
 800dd1c:	d104      	bne.n	800dd28 <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800dd1e:	2200      	movs	r2, #0
 800dd20:	2120      	movs	r1, #32
 800dd22:	4805      	ldr	r0, [pc, #20]	@ (800dd38 <TEMPLATE_Receive+0x40>)
 800dd24:	f7f4 fab4 	bl	8002290 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd28:	4804      	ldr	r0, [pc, #16]	@ (800dd3c <TEMPLATE_Receive+0x44>)
 800dd2a:	f7ff febf 	bl	800daac <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	42020000 	.word	0x42020000
 800dd3c:	200006bc 	.word	0x200006bc

0800dd40 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800dd70:	4619      	mov	r1, r3
 800dd72:	4610      	mov	r0, r2
 800dd74:	f000 faa5 	bl	800e2c2 <USBD_LL_SetupStage>
}
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800dd92:	78fa      	ldrb	r2, [r7, #3]
 800dd94:	6879      	ldr	r1, [r7, #4]
 800dd96:	4613      	mov	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	440b      	add	r3, r1
 800dda0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	78fb      	ldrb	r3, [r7, #3]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	f000 fadf 	bl	800e36c <USBD_LL_DataOutStage>
}
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b082      	sub	sp, #8
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800ddc8:	78fa      	ldrb	r2, [r7, #3]
 800ddca:	6879      	ldr	r1, [r7, #4]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	00db      	lsls	r3, r3, #3
 800ddd4:	440b      	add	r3, r1
 800ddd6:	3328      	adds	r3, #40	@ 0x28
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	78fb      	ldrb	r3, [r7, #3]
 800dddc:	4619      	mov	r1, r3
 800ddde:	f000 fb78 	bl	800e4d2 <USBD_LL_DataInStage>
}
 800dde2:	bf00      	nop
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b082      	sub	sp, #8
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 fc7e 	bl	800e6fa <USBD_LL_SOF>
}
 800ddfe:	bf00      	nop
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b084      	sub	sp, #16
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de0e:	2301      	movs	r3, #1
 800de10:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	79db      	ldrb	r3, [r3, #7]
 800de16:	2b02      	cmp	r3, #2
 800de18:	d001      	beq.n	800de1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800de1a:	f7f2 ffbd 	bl	8000d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800de24:	7bfa      	ldrb	r2, [r7, #15]
 800de26:	4611      	mov	r1, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 fc56 	bl	800e6da <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800de34:	4618      	mov	r0, r3
 800de36:	f000 fbfe 	bl	800e636 <USBD_LL_Reset>
}
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a19      	ldr	r2, [pc, #100]	@ (800deb4 <USBD_LL_Init+0x70>)
 800de50:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de5a:	2340      	movs	r3, #64	@ 0x40
 800de5c:	2200      	movs	r2, #0
 800de5e:	2100      	movs	r1, #0
 800de60:	f7f5 ffe0 	bl	8003e24 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de6a:	2380      	movs	r3, #128	@ 0x80
 800de6c:	2200      	movs	r2, #0
 800de6e:	2180      	movs	r1, #128	@ 0x80
 800de70:	f7f5 ffd8 	bl	8003e24 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de7a:	23c0      	movs	r3, #192	@ 0xc0
 800de7c:	2200      	movs	r2, #0
 800de7e:	2181      	movs	r1, #129	@ 0x81
 800de80:	f7f5 ffd0 	bl	8003e24 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de8e:	2200      	movs	r2, #0
 800de90:	2101      	movs	r1, #1
 800de92:	f7f5 ffc7 	bl	8003e24 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800de9c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800dea0:	2200      	movs	r2, #0
 800dea2:	2182      	movs	r1, #130	@ 0x82
 800dea4:	f7f5 ffbe 	bl	8003e24 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	200003d8 	.word	0x200003d8

0800deb8 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7f4 fc90 	bl	80027ec <HAL_PCD_Start>
 800decc:	4603      	mov	r3, r0
 800dece:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 f916 	bl	800e104 <USBD_Get_USB_Status>
 800ded8:	4603      	mov	r3, r0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b084      	sub	sp, #16
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
 800deea:	4608      	mov	r0, r1
 800deec:	4611      	mov	r1, r2
 800deee:	461a      	mov	r2, r3
 800def0:	4603      	mov	r3, r0
 800def2:	70fb      	strb	r3, [r7, #3]
 800def4:	460b      	mov	r3, r1
 800def6:	70bb      	strb	r3, [r7, #2]
 800def8:	4613      	mov	r3, r2
 800defa:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df02:	78bb      	ldrb	r3, [r7, #2]
 800df04:	883a      	ldrh	r2, [r7, #0]
 800df06:	78f9      	ldrb	r1, [r7, #3]
 800df08:	f7f4 fdbf 	bl	8002a8a <HAL_PCD_EP_Open>
 800df0c:	4603      	mov	r3, r0
 800df0e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f8f6 	bl	800e104 <USBD_Get_USB_Status>
 800df18:	4603      	mov	r3, r0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b084      	sub	sp, #16
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	460b      	mov	r3, r1
 800df2c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df34:	78fa      	ldrb	r2, [r7, #3]
 800df36:	4611      	mov	r1, r2
 800df38:	4618      	mov	r0, r3
 800df3a:	f7f4 fe07 	bl	8002b4c <HAL_PCD_EP_Close>
 800df3e:	4603      	mov	r3, r0
 800df40:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800df42:	7bfb      	ldrb	r3, [r7, #15]
 800df44:	4618      	mov	r0, r3
 800df46:	f000 f8dd 	bl	800e104 <USBD_Get_USB_Status>
 800df4a:	4603      	mov	r3, r0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	460b      	mov	r3, r1
 800df5e:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df66:	78fa      	ldrb	r2, [r7, #3]
 800df68:	4611      	mov	r1, r2
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7f4 feba 	bl	8002ce4 <HAL_PCD_EP_SetStall>
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	4618      	mov	r0, r3
 800df78:	f000 f8c4 	bl	800e104 <USBD_Get_USB_Status>
 800df7c:	4603      	mov	r3, r0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	460b      	mov	r3, r1
 800df90:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df98:	78fa      	ldrb	r2, [r7, #3]
 800df9a:	4611      	mov	r1, r2
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7f4 fef5 	bl	8002d8c <HAL_PCD_EP_ClrStall>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 f8ab 	bl	800e104 <USBD_Get_USB_Status>
 800dfae:	4603      	mov	r3, r0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b085      	sub	sp, #20
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfca:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800dfcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	da0b      	bge.n	800dfec <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dfd4:	78fb      	ldrb	r3, [r7, #3]
 800dfd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dfda:	68f9      	ldr	r1, [r7, #12]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	440b      	add	r3, r1
 800dfe6:	3316      	adds	r3, #22
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	e00b      	b.n	800e004 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dfec:	78fb      	ldrb	r3, [r7, #3]
 800dfee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dff2:	68f9      	ldr	r1, [r7, #12]
 800dff4:	4613      	mov	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	440b      	add	r3, r1
 800dffe:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e002:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e004:	4618      	mov	r0, r3
 800e006:	3714      	adds	r7, #20
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	460b      	mov	r3, r1
 800e01a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e022:	78fa      	ldrb	r2, [r7, #3]
 800e024:	4611      	mov	r1, r2
 800e026:	4618      	mov	r0, r3
 800e028:	f7f4 fd0b 	bl	8002a42 <HAL_PCD_SetAddress>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 f866 	bl	800e104 <USBD_Get_USB_Status>
 800e038:	4603      	mov	r3, r0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b086      	sub	sp, #24
 800e046:	af00      	add	r7, sp, #0
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	603b      	str	r3, [r7, #0]
 800e04e:	460b      	mov	r3, r1
 800e050:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e058:	7af9      	ldrb	r1, [r7, #11]
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	f7f4 fe09 	bl	8002c74 <HAL_PCD_EP_Transmit>
 800e062:	4603      	mov	r3, r0
 800e064:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e066:	7dfb      	ldrb	r3, [r7, #23]
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 f84b 	bl	800e104 <USBD_Get_USB_Status>
 800e06e:	4603      	mov	r3, r0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3718      	adds	r7, #24
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	607a      	str	r2, [r7, #4]
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	460b      	mov	r3, r1
 800e086:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e08e:	7af9      	ldrb	r1, [r7, #11]
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	f7f4 fda4 	bl	8002be0 <HAL_PCD_EP_Receive>
 800e098:	4603      	mov	r3, r0
 800e09a:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e09c:	7dfb      	ldrb	r3, [r7, #23]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 f830 	bl	800e104 <USBD_Get_USB_Status>
 800e0a4:	4603      	mov	r3, r0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3718      	adds	r7, #24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0c0:	78fa      	ldrb	r2, [r7, #3]
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7f4 fdbd 	bl	8002c44 <HAL_PCD_EP_GetRxCount>
 800e0ca:	4603      	mov	r3, r0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e0dc:	4b03      	ldr	r3, [pc, #12]	@ (800e0ec <USBD_static_malloc+0x18>)
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	370c      	adds	r7, #12
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	20000e40 	.word	0x20000e40

0800e0f0 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	4603      	mov	r3, r0
 800e10c:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e10e:	2300      	movs	r3, #0
 800e110:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	2b03      	cmp	r3, #3
 800e116:	d817      	bhi.n	800e148 <USBD_Get_USB_Status+0x44>
 800e118:	a201      	add	r2, pc, #4	@ (adr r2, 800e120 <USBD_Get_USB_Status+0x1c>)
 800e11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11e:	bf00      	nop
 800e120:	0800e131 	.word	0x0800e131
 800e124:	0800e137 	.word	0x0800e137
 800e128:	0800e13d 	.word	0x0800e13d
 800e12c:	0800e143 	.word	0x0800e143
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e130:	2300      	movs	r3, #0
 800e132:	73fb      	strb	r3, [r7, #15]
             break;
 800e134:	e00b      	b.n	800e14e <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e136:	2303      	movs	r3, #3
 800e138:	73fb      	strb	r3, [r7, #15]
             break;
 800e13a:	e008      	b.n	800e14e <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e13c:	2301      	movs	r3, #1
 800e13e:	73fb      	strb	r3, [r7, #15]
             break;
 800e140:	e005      	b.n	800e14e <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e142:	2303      	movs	r3, #3
 800e144:	73fb      	strb	r3, [r7, #15]
             break;
 800e146:	e002      	b.n	800e14e <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e148:	2303      	movs	r3, #3
 800e14a:	73fb      	strb	r3, [r7, #15]
             break;
 800e14c:	bf00      	nop
      }
      return usb_status;
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	4613      	mov	r3, r2
 800e168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d101      	bne.n	800e174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e170:	2303      	movs	r3, #3
 800e172:	e01f      	b.n	800e1b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d003      	beq.n	800e19a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	79fa      	ldrb	r2, [r7, #7]
 800e1a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f7ff fe4b 	bl	800de44 <USBD_LL_Init>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3718      	adds	r7, #24
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	e025      	b.n	800e220 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	32ae      	adds	r2, #174	@ 0xae
 800e1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00f      	beq.n	800e210 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	32ae      	adds	r2, #174	@ 0xae
 800e1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e200:	f107 020e 	add.w	r2, r7, #14
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	4602      	mov	r2, r0
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7ff fe41 	bl	800deb8 <USBD_LL_Start>
 800e236:	4603      	mov	r3, r0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e248:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b084      	sub	sp, #16
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	460b      	mov	r3, r1
 800e260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d009      	beq.n	800e284 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	78fa      	ldrb	r2, [r7, #3]
 800e27a:	4611      	mov	r1, r2
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	4798      	blx	r3
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e284:	7bfb      	ldrb	r3, [r7, #15]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	460b      	mov	r3, r1
 800e298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	78fa      	ldrb	r2, [r7, #3]
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	4798      	blx	r3
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d001      	beq.n	800e2b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b084      	sub	sp, #16
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 f846 	bl	800f366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e2f6:	f003 031f 	and.w	r3, r3, #31
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d01a      	beq.n	800e334 <USBD_LL_SetupStage+0x72>
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d822      	bhi.n	800e348 <USBD_LL_SetupStage+0x86>
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <USBD_LL_SetupStage+0x4a>
 800e306:	2b01      	cmp	r3, #1
 800e308:	d00a      	beq.n	800e320 <USBD_LL_SetupStage+0x5e>
 800e30a:	e01d      	b.n	800e348 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 fa9d 	bl	800e854 <USBD_StdDevReq>
 800e31a:	4603      	mov	r3, r0
 800e31c:	73fb      	strb	r3, [r7, #15]
      break;
 800e31e:	e020      	b.n	800e362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fb05 	bl	800e938 <USBD_StdItfReq>
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]
      break;
 800e332:	e016      	b.n	800e362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fb67 	bl	800ea10 <USBD_StdEPReq>
 800e342:	4603      	mov	r3, r0
 800e344:	73fb      	strb	r3, [r7, #15]
      break;
 800e346:	e00c      	b.n	800e362 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e34e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e352:	b2db      	uxtb	r3, r3
 800e354:	4619      	mov	r1, r3
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7ff fdfc 	bl	800df54 <USBD_LL_StallEP>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73fb      	strb	r3, [r7, #15]
      break;
 800e360:	bf00      	nop
  }

  return ret;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	460b      	mov	r3, r1
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e37e:	7afb      	ldrb	r3, [r7, #11]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d16e      	bne.n	800e462 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e38a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e392:	2b03      	cmp	r3, #3
 800e394:	f040 8098 	bne.w	800e4c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	689a      	ldr	r2, [r3, #8]
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d913      	bls.n	800e3cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	689a      	ldr	r2, [r3, #8]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	1ad2      	subs	r2, r2, r3
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	68da      	ldr	r2, [r3, #12]
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	bf28      	it	cs
 800e3be:	4613      	movcs	r3, r2
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f001 f9cf 	bl	800f768 <USBD_CtlContinueRx>
 800e3ca:	e07d      	b.n	800e4c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e3d2:	f003 031f 	and.w	r3, r3, #31
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d014      	beq.n	800e404 <USBD_LL_DataOutStage+0x98>
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d81d      	bhi.n	800e41a <USBD_LL_DataOutStage+0xae>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <USBD_LL_DataOutStage+0x7c>
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d003      	beq.n	800e3ee <USBD_LL_DataOutStage+0x82>
 800e3e6:	e018      	b.n	800e41a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	75bb      	strb	r3, [r7, #22]
            break;
 800e3ec:	e018      	b.n	800e420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 f99e 	bl	800e73a <USBD_CoreFindIF>
 800e3fe:	4603      	mov	r3, r0
 800e400:	75bb      	strb	r3, [r7, #22]
            break;
 800e402:	e00d      	b.n	800e420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	4619      	mov	r1, r3
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 f9a0 	bl	800e754 <USBD_CoreFindEP>
 800e414:	4603      	mov	r3, r0
 800e416:	75bb      	strb	r3, [r7, #22]
            break;
 800e418:	e002      	b.n	800e420 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e41a:	2300      	movs	r3, #0
 800e41c:	75bb      	strb	r3, [r7, #22]
            break;
 800e41e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e420:	7dbb      	ldrb	r3, [r7, #22]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d119      	bne.n	800e45a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d113      	bne.n	800e45a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e432:	7dba      	ldrb	r2, [r7, #22]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	32ae      	adds	r2, #174	@ 0xae
 800e438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43c:	691b      	ldr	r3, [r3, #16]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00b      	beq.n	800e45a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e442:	7dba      	ldrb	r2, [r7, #22]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e44a:	7dba      	ldrb	r2, [r7, #22]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	32ae      	adds	r2, #174	@ 0xae
 800e450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f001 f995 	bl	800f78a <USBD_CtlSendStatus>
 800e460:	e032      	b.n	800e4c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e462:	7afb      	ldrb	r3, [r7, #11]
 800e464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	4619      	mov	r1, r3
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 f971 	bl	800e754 <USBD_CoreFindEP>
 800e472:	4603      	mov	r3, r0
 800e474:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e476:	7dbb      	ldrb	r3, [r7, #22]
 800e478:	2bff      	cmp	r3, #255	@ 0xff
 800e47a:	d025      	beq.n	800e4c8 <USBD_LL_DataOutStage+0x15c>
 800e47c:	7dbb      	ldrb	r3, [r7, #22]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d122      	bne.n	800e4c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d117      	bne.n	800e4be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e48e:	7dba      	ldrb	r2, [r7, #22]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	32ae      	adds	r2, #174	@ 0xae
 800e494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e498:	699b      	ldr	r3, [r3, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00f      	beq.n	800e4be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e49e:	7dba      	ldrb	r2, [r7, #22]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e4a6:	7dba      	ldrb	r2, [r7, #22]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	32ae      	adds	r2, #174	@ 0xae
 800e4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	7afa      	ldrb	r2, [r7, #11]
 800e4b4:	4611      	mov	r1, r2
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	4798      	blx	r3
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	e000      	b.n	800e4ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b086      	sub	sp, #24
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	60f8      	str	r0, [r7, #12]
 800e4da:	460b      	mov	r3, r1
 800e4dc:	607a      	str	r2, [r7, #4]
 800e4de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e4e0:	7afb      	ldrb	r3, [r7, #11]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d16f      	bne.n	800e5c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3314      	adds	r3, #20
 800e4ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d15a      	bne.n	800e5ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	689a      	ldr	r2, [r3, #8]
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d914      	bls.n	800e52c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	689a      	ldr	r2, [r3, #8]
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	1ad2      	subs	r2, r2, r3
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	461a      	mov	r2, r3
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f001 f8f7 	bl	800f70c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e51e:	2300      	movs	r3, #0
 800e520:	2200      	movs	r2, #0
 800e522:	2100      	movs	r1, #0
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7ff fda7 	bl	800e078 <USBD_LL_PrepareReceive>
 800e52a:	e03f      	b.n	800e5ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	68da      	ldr	r2, [r3, #12]
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	429a      	cmp	r2, r3
 800e536:	d11c      	bne.n	800e572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	685a      	ldr	r2, [r3, #4]
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e540:	429a      	cmp	r2, r3
 800e542:	d316      	bcc.n	800e572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	685a      	ldr	r2, [r3, #4]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e54e:	429a      	cmp	r2, r3
 800e550:	d20f      	bcs.n	800e572 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e552:	2200      	movs	r2, #0
 800e554:	2100      	movs	r1, #0
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f001 f8d8 	bl	800f70c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e564:	2300      	movs	r3, #0
 800e566:	2200      	movs	r2, #0
 800e568:	2100      	movs	r1, #0
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f7ff fd84 	bl	800e078 <USBD_LL_PrepareReceive>
 800e570:	e01c      	b.n	800e5ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d10f      	bne.n	800e59e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d009      	beq.n	800e59e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e59e:	2180      	movs	r1, #128	@ 0x80
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f7ff fcd7 	bl	800df54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f001 f902 	bl	800f7b0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d03a      	beq.n	800e62c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f7ff fe42 	bl	800e240 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e5c4:	e032      	b.n	800e62c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e5c6:	7afb      	ldrb	r3, [r7, #11]
 800e5c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f000 f8bf 	bl	800e754 <USBD_CoreFindEP>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
 800e5dc:	2bff      	cmp	r3, #255	@ 0xff
 800e5de:	d025      	beq.n	800e62c <USBD_LL_DataInStage+0x15a>
 800e5e0:	7dfb      	ldrb	r3, [r7, #23]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d122      	bne.n	800e62c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	d11c      	bne.n	800e62c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e5f2:	7dfa      	ldrb	r2, [r7, #23]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	32ae      	adds	r2, #174	@ 0xae
 800e5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d014      	beq.n	800e62c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e602:	7dfa      	ldrb	r2, [r7, #23]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e60a:	7dfa      	ldrb	r2, [r7, #23]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	32ae      	adds	r2, #174	@ 0xae
 800e610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	7afa      	ldrb	r2, [r7, #11]
 800e618:	4611      	mov	r1, r2
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	4798      	blx	r3
 800e61e:	4603      	mov	r3, r0
 800e620:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e622:	7dbb      	ldrb	r3, [r7, #22]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e628:	7dbb      	ldrb	r3, [r7, #22]
 800e62a:	e000      	b.n	800e62e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3718      	adds	r7, #24
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b084      	sub	sp, #16
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e63e:	2300      	movs	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d014      	beq.n	800e69c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00e      	beq.n	800e69c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	6852      	ldr	r2, [r2, #4]
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	4611      	mov	r1, r2
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	4798      	blx	r3
 800e692:	4603      	mov	r3, r0
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e698:	2303      	movs	r3, #3
 800e69a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e69c:	2340      	movs	r3, #64	@ 0x40
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7ff fc1d 	bl	800dee2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2240      	movs	r2, #64	@ 0x40
 800e6b4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6b8:	2340      	movs	r3, #64	@ 0x40
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	2180      	movs	r1, #128	@ 0x80
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff fc0f 	bl	800dee2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2240      	movs	r2, #64	@ 0x40
 800e6ce:	621a      	str	r2, [r3, #32]

  return ret;
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e6da:	b480      	push	{r7}
 800e6dc:	b083      	sub	sp, #12
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	78fa      	ldrb	r2, [r7, #3]
 800e6ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	370c      	adds	r7, #12
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b082      	sub	sp, #8
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d110      	bne.n	800e730 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00b      	beq.n	800e730 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e71e:	69db      	ldr	r3, [r3, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d005      	beq.n	800e730 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e73a:	b480      	push	{r7}
 800e73c:	b083      	sub	sp, #12
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	460b      	mov	r3, r1
 800e744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e760:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e762:	4618      	mov	r0, r3
 800e764:	370c      	adds	r7, #12
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b086      	sub	sp, #24
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	460b      	mov	r3, r1
 800e778:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e782:	2300      	movs	r3, #0
 800e784:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	885b      	ldrh	r3, [r3, #2]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	7812      	ldrb	r2, [r2, #0]
 800e790:	4293      	cmp	r3, r2
 800e792:	d91f      	bls.n	800e7d4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e79a:	e013      	b.n	800e7c4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e79c:	f107 030a 	add.w	r3, r7, #10
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	6978      	ldr	r0, [r7, #20]
 800e7a4:	f000 f81b 	bl	800e7de <USBD_GetNextDesc>
 800e7a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	2b05      	cmp	r3, #5
 800e7b0:	d108      	bne.n	800e7c4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	789b      	ldrb	r3, [r3, #2]
 800e7ba:	78fa      	ldrb	r2, [r7, #3]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d008      	beq.n	800e7d2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	885b      	ldrh	r3, [r3, #2]
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	897b      	ldrh	r3, [r7, #10]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d8e5      	bhi.n	800e79c <USBD_GetEpDesc+0x2e>
 800e7d0:	e000      	b.n	800e7d4 <USBD_GetEpDesc+0x66>
          break;
 800e7d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e7d4:	693b      	ldr	r3, [r7, #16]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	7812      	ldrb	r2, [r2, #0]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	461a      	mov	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4413      	add	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e808:	68fb      	ldr	r3, [r7, #12]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr

0800e816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e816:	b480      	push	{r7}
 800e818:	b087      	sub	sp, #28
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	3301      	adds	r3, #1
 800e82c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e834:	8a3b      	ldrh	r3, [r7, #16]
 800e836:	021b      	lsls	r3, r3, #8
 800e838:	b21a      	sxth	r2, r3
 800e83a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e83e:	4313      	orrs	r3, r2
 800e840:	b21b      	sxth	r3, r3
 800e842:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e844:	89fb      	ldrh	r3, [r7, #14]
}
 800e846:	4618      	mov	r0, r3
 800e848:	371c      	adds	r7, #28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
	...

0800e854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e85e:	2300      	movs	r3, #0
 800e860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e86a:	2b40      	cmp	r3, #64	@ 0x40
 800e86c:	d005      	beq.n	800e87a <USBD_StdDevReq+0x26>
 800e86e:	2b40      	cmp	r3, #64	@ 0x40
 800e870:	d857      	bhi.n	800e922 <USBD_StdDevReq+0xce>
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00f      	beq.n	800e896 <USBD_StdDevReq+0x42>
 800e876:	2b20      	cmp	r3, #32
 800e878:	d153      	bne.n	800e922 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	32ae      	adds	r2, #174	@ 0xae
 800e884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	6839      	ldr	r1, [r7, #0]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	4798      	blx	r3
 800e890:	4603      	mov	r3, r0
 800e892:	73fb      	strb	r3, [r7, #15]
      break;
 800e894:	e04a      	b.n	800e92c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	785b      	ldrb	r3, [r3, #1]
 800e89a:	2b09      	cmp	r3, #9
 800e89c:	d83b      	bhi.n	800e916 <USBD_StdDevReq+0xc2>
 800e89e:	a201      	add	r2, pc, #4	@ (adr r2, 800e8a4 <USBD_StdDevReq+0x50>)
 800e8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a4:	0800e8f9 	.word	0x0800e8f9
 800e8a8:	0800e90d 	.word	0x0800e90d
 800e8ac:	0800e917 	.word	0x0800e917
 800e8b0:	0800e903 	.word	0x0800e903
 800e8b4:	0800e917 	.word	0x0800e917
 800e8b8:	0800e8d7 	.word	0x0800e8d7
 800e8bc:	0800e8cd 	.word	0x0800e8cd
 800e8c0:	0800e917 	.word	0x0800e917
 800e8c4:	0800e8ef 	.word	0x0800e8ef
 800e8c8:	0800e8e1 	.word	0x0800e8e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e8cc:	6839      	ldr	r1, [r7, #0]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 fa3c 	bl	800ed4c <USBD_GetDescriptor>
          break;
 800e8d4:	e024      	b.n	800e920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e8d6:	6839      	ldr	r1, [r7, #0]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 fba1 	bl	800f020 <USBD_SetAddress>
          break;
 800e8de:	e01f      	b.n	800e920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fbe0 	bl	800f0a8 <USBD_SetConfig>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
          break;
 800e8ec:	e018      	b.n	800e920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 fc83 	bl	800f1fc <USBD_GetConfig>
          break;
 800e8f6:	e013      	b.n	800e920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 fcb4 	bl	800f268 <USBD_GetStatus>
          break;
 800e900:	e00e      	b.n	800e920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e902:	6839      	ldr	r1, [r7, #0]
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fce3 	bl	800f2d0 <USBD_SetFeature>
          break;
 800e90a:	e009      	b.n	800e920 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e90c:	6839      	ldr	r1, [r7, #0]
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 fd07 	bl	800f322 <USBD_ClrFeature>
          break;
 800e914:	e004      	b.n	800e920 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 fd5e 	bl	800f3da <USBD_CtlError>
          break;
 800e91e:	bf00      	nop
      }
      break;
 800e920:	e004      	b.n	800e92c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e922:	6839      	ldr	r1, [r7, #0]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 fd58 	bl	800f3da <USBD_CtlError>
      break;
 800e92a:	bf00      	nop
  }

  return ret;
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop

0800e938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e942:	2300      	movs	r3, #0
 800e944:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e94e:	2b40      	cmp	r3, #64	@ 0x40
 800e950:	d005      	beq.n	800e95e <USBD_StdItfReq+0x26>
 800e952:	2b40      	cmp	r3, #64	@ 0x40
 800e954:	d852      	bhi.n	800e9fc <USBD_StdItfReq+0xc4>
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <USBD_StdItfReq+0x26>
 800e95a:	2b20      	cmp	r3, #32
 800e95c:	d14e      	bne.n	800e9fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e964:	b2db      	uxtb	r3, r3
 800e966:	3b01      	subs	r3, #1
 800e968:	2b02      	cmp	r3, #2
 800e96a:	d840      	bhi.n	800e9ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	889b      	ldrh	r3, [r3, #4]
 800e970:	b2db      	uxtb	r3, r3
 800e972:	2b01      	cmp	r3, #1
 800e974:	d836      	bhi.n	800e9e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	889b      	ldrh	r3, [r3, #4]
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7ff fedb 	bl	800e73a <USBD_CoreFindIF>
 800e984:	4603      	mov	r3, r0
 800e986:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e988:	7bbb      	ldrb	r3, [r7, #14]
 800e98a:	2bff      	cmp	r3, #255	@ 0xff
 800e98c:	d01d      	beq.n	800e9ca <USBD_StdItfReq+0x92>
 800e98e:	7bbb      	ldrb	r3, [r7, #14]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d11a      	bne.n	800e9ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e994:	7bba      	ldrb	r2, [r7, #14]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	32ae      	adds	r2, #174	@ 0xae
 800e99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00f      	beq.n	800e9c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e9a4:	7bba      	ldrb	r2, [r7, #14]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e9ac:	7bba      	ldrb	r2, [r7, #14]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	32ae      	adds	r2, #174	@ 0xae
 800e9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	4798      	blx	r3
 800e9be:	4603      	mov	r3, r0
 800e9c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e9c2:	e004      	b.n	800e9ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e9c8:	e001      	b.n	800e9ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	88db      	ldrh	r3, [r3, #6]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d110      	bne.n	800e9f8 <USBD_StdItfReq+0xc0>
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10d      	bne.n	800e9f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 fed4 	bl	800f78a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e9e2:	e009      	b.n	800e9f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e9e4:	6839      	ldr	r1, [r7, #0]
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fcf7 	bl	800f3da <USBD_CtlError>
          break;
 800e9ec:	e004      	b.n	800e9f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 fcf2 	bl	800f3da <USBD_CtlError>
          break;
 800e9f6:	e000      	b.n	800e9fa <USBD_StdItfReq+0xc2>
          break;
 800e9f8:	bf00      	nop
      }
      break;
 800e9fa:	e004      	b.n	800ea06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 fceb 	bl	800f3da <USBD_CtlError>
      break;
 800ea04:	bf00      	nop
  }

  return ret;
 800ea06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	889b      	ldrh	r3, [r3, #4]
 800ea22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea2c:	2b40      	cmp	r3, #64	@ 0x40
 800ea2e:	d007      	beq.n	800ea40 <USBD_StdEPReq+0x30>
 800ea30:	2b40      	cmp	r3, #64	@ 0x40
 800ea32:	f200 817f 	bhi.w	800ed34 <USBD_StdEPReq+0x324>
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d02a      	beq.n	800ea90 <USBD_StdEPReq+0x80>
 800ea3a:	2b20      	cmp	r3, #32
 800ea3c:	f040 817a 	bne.w	800ed34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	4619      	mov	r1, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff fe85 	bl	800e754 <USBD_CoreFindEP>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea4e:	7b7b      	ldrb	r3, [r7, #13]
 800ea50:	2bff      	cmp	r3, #255	@ 0xff
 800ea52:	f000 8174 	beq.w	800ed3e <USBD_StdEPReq+0x32e>
 800ea56:	7b7b      	ldrb	r3, [r7, #13]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f040 8170 	bne.w	800ed3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ea5e:	7b7a      	ldrb	r2, [r7, #13]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ea66:	7b7a      	ldrb	r2, [r7, #13]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	32ae      	adds	r2, #174	@ 0xae
 800ea6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 8163 	beq.w	800ed3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ea78:	7b7a      	ldrb	r2, [r7, #13]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	32ae      	adds	r2, #174	@ 0xae
 800ea7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	4798      	blx	r3
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ea8e:	e156      	b.n	800ed3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	785b      	ldrb	r3, [r3, #1]
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d008      	beq.n	800eaaa <USBD_StdEPReq+0x9a>
 800ea98:	2b03      	cmp	r3, #3
 800ea9a:	f300 8145 	bgt.w	800ed28 <USBD_StdEPReq+0x318>
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 809b 	beq.w	800ebda <USBD_StdEPReq+0x1ca>
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d03c      	beq.n	800eb22 <USBD_StdEPReq+0x112>
 800eaa8:	e13e      	b.n	800ed28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b02      	cmp	r3, #2
 800eab4:	d002      	beq.n	800eabc <USBD_StdEPReq+0xac>
 800eab6:	2b03      	cmp	r3, #3
 800eab8:	d016      	beq.n	800eae8 <USBD_StdEPReq+0xd8>
 800eaba:	e02c      	b.n	800eb16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eabc:	7bbb      	ldrb	r3, [r7, #14]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00d      	beq.n	800eade <USBD_StdEPReq+0xce>
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
 800eac4:	2b80      	cmp	r3, #128	@ 0x80
 800eac6:	d00a      	beq.n	800eade <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eac8:	7bbb      	ldrb	r3, [r7, #14]
 800eaca:	4619      	mov	r1, r3
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7ff fa41 	bl	800df54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ead2:	2180      	movs	r1, #128	@ 0x80
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff fa3d 	bl	800df54 <USBD_LL_StallEP>
 800eada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eadc:	e020      	b.n	800eb20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eade:	6839      	ldr	r1, [r7, #0]
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 fc7a 	bl	800f3da <USBD_CtlError>
              break;
 800eae6:	e01b      	b.n	800eb20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	885b      	ldrh	r3, [r3, #2]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10e      	bne.n	800eb0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eaf0:	7bbb      	ldrb	r3, [r7, #14]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00b      	beq.n	800eb0e <USBD_StdEPReq+0xfe>
 800eaf6:	7bbb      	ldrb	r3, [r7, #14]
 800eaf8:	2b80      	cmp	r3, #128	@ 0x80
 800eafa:	d008      	beq.n	800eb0e <USBD_StdEPReq+0xfe>
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	88db      	ldrh	r3, [r3, #6]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d104      	bne.n	800eb0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb04:	7bbb      	ldrb	r3, [r7, #14]
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7ff fa23 	bl	800df54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 fe3b 	bl	800f78a <USBD_CtlSendStatus>

              break;
 800eb14:	e004      	b.n	800eb20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800eb16:	6839      	ldr	r1, [r7, #0]
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 fc5e 	bl	800f3da <USBD_CtlError>
              break;
 800eb1e:	bf00      	nop
          }
          break;
 800eb20:	e107      	b.n	800ed32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	d002      	beq.n	800eb34 <USBD_StdEPReq+0x124>
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d016      	beq.n	800eb60 <USBD_StdEPReq+0x150>
 800eb32:	e04b      	b.n	800ebcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb34:	7bbb      	ldrb	r3, [r7, #14]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00d      	beq.n	800eb56 <USBD_StdEPReq+0x146>
 800eb3a:	7bbb      	ldrb	r3, [r7, #14]
 800eb3c:	2b80      	cmp	r3, #128	@ 0x80
 800eb3e:	d00a      	beq.n	800eb56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb40:	7bbb      	ldrb	r3, [r7, #14]
 800eb42:	4619      	mov	r1, r3
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff fa05 	bl	800df54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb4a:	2180      	movs	r1, #128	@ 0x80
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7ff fa01 	bl	800df54 <USBD_LL_StallEP>
 800eb52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb54:	e040      	b.n	800ebd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 fc3e 	bl	800f3da <USBD_CtlError>
              break;
 800eb5e:	e03b      	b.n	800ebd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	885b      	ldrh	r3, [r3, #2]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d136      	bne.n	800ebd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eb68:	7bbb      	ldrb	r3, [r7, #14]
 800eb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d004      	beq.n	800eb7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff fa05 	bl	800df86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fe04 	bl	800f78a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fde4 	bl	800e754 <USBD_CoreFindEP>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb90:	7b7b      	ldrb	r3, [r7, #13]
 800eb92:	2bff      	cmp	r3, #255	@ 0xff
 800eb94:	d01f      	beq.n	800ebd6 <USBD_StdEPReq+0x1c6>
 800eb96:	7b7b      	ldrb	r3, [r7, #13]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d11c      	bne.n	800ebd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800eb9c:	7b7a      	ldrb	r2, [r7, #13]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800eba4:	7b7a      	ldrb	r2, [r7, #13]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	32ae      	adds	r2, #174	@ 0xae
 800ebaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d010      	beq.n	800ebd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ebb4:	7b7a      	ldrb	r2, [r7, #13]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	32ae      	adds	r2, #174	@ 0xae
 800ebba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	4798      	blx	r3
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ebca:	e004      	b.n	800ebd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ebcc:	6839      	ldr	r1, [r7, #0]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 fc03 	bl	800f3da <USBD_CtlError>
              break;
 800ebd4:	e000      	b.n	800ebd8 <USBD_StdEPReq+0x1c8>
              break;
 800ebd6:	bf00      	nop
          }
          break;
 800ebd8:	e0ab      	b.n	800ed32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d002      	beq.n	800ebec <USBD_StdEPReq+0x1dc>
 800ebe6:	2b03      	cmp	r3, #3
 800ebe8:	d032      	beq.n	800ec50 <USBD_StdEPReq+0x240>
 800ebea:	e097      	b.n	800ed1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebec:	7bbb      	ldrb	r3, [r7, #14]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d007      	beq.n	800ec02 <USBD_StdEPReq+0x1f2>
 800ebf2:	7bbb      	ldrb	r3, [r7, #14]
 800ebf4:	2b80      	cmp	r3, #128	@ 0x80
 800ebf6:	d004      	beq.n	800ec02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ebf8:	6839      	ldr	r1, [r7, #0]
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fbed 	bl	800f3da <USBD_CtlError>
                break;
 800ec00:	e091      	b.n	800ed26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	da0b      	bge.n	800ec22 <USBD_StdEPReq+0x212>
 800ec0a:	7bbb      	ldrb	r3, [r7, #14]
 800ec0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec10:	4613      	mov	r3, r2
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	4413      	add	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	3310      	adds	r3, #16
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	3304      	adds	r3, #4
 800ec20:	e00b      	b.n	800ec3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
 800ec24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec28:	4613      	mov	r3, r2
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	4413      	add	r3, r2
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	4413      	add	r3, r2
 800ec38:	3304      	adds	r3, #4
 800ec3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	2202      	movs	r2, #2
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 fd44 	bl	800f6d6 <USBD_CtlSendData>
              break;
 800ec4e:	e06a      	b.n	800ed26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ec50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	da11      	bge.n	800ec7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
 800ec5a:	f003 020f 	and.w	r2, r3, #15
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	4613      	mov	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4413      	add	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	440b      	add	r3, r1
 800ec6a:	3324      	adds	r3, #36	@ 0x24
 800ec6c:	881b      	ldrh	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d117      	bne.n	800eca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fbb0 	bl	800f3da <USBD_CtlError>
                  break;
 800ec7a:	e054      	b.n	800ed26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	f003 020f 	and.w	r2, r3, #15
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	4613      	mov	r3, r2
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	4413      	add	r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	440b      	add	r3, r1
 800ec8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d104      	bne.n	800eca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fb9d 	bl	800f3da <USBD_CtlError>
                  break;
 800eca0:	e041      	b.n	800ed26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da0b      	bge.n	800ecc2 <USBD_StdEPReq+0x2b2>
 800ecaa:	7bbb      	ldrb	r3, [r7, #14]
 800ecac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	3310      	adds	r3, #16
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	e00b      	b.n	800ecda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ecc2:	7bbb      	ldrb	r3, [r7, #14]
 800ecc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecc8:	4613      	mov	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	4413      	add	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	3304      	adds	r3, #4
 800ecda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ecdc:	7bbb      	ldrb	r3, [r7, #14]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <USBD_StdEPReq+0x2d8>
 800ece2:	7bbb      	ldrb	r3, [r7, #14]
 800ece4:	2b80      	cmp	r3, #128	@ 0x80
 800ece6:	d103      	bne.n	800ecf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	2200      	movs	r2, #0
 800ecec:	601a      	str	r2, [r3, #0]
 800ecee:	e00e      	b.n	800ed0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ecf0:	7bbb      	ldrb	r3, [r7, #14]
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff f95f 	bl	800dfb8 <USBD_LL_IsStallEP>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d003      	beq.n	800ed08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2201      	movs	r2, #1
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	e002      	b.n	800ed0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2202      	movs	r2, #2
 800ed12:	4619      	mov	r1, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fcde 	bl	800f6d6 <USBD_CtlSendData>
              break;
 800ed1a:	e004      	b.n	800ed26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 fb5b 	bl	800f3da <USBD_CtlError>
              break;
 800ed24:	bf00      	nop
          }
          break;
 800ed26:	e004      	b.n	800ed32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fb55 	bl	800f3da <USBD_CtlError>
          break;
 800ed30:	bf00      	nop
      }
      break;
 800ed32:	e005      	b.n	800ed40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fb4f 	bl	800f3da <USBD_CtlError>
      break;
 800ed3c:	e000      	b.n	800ed40 <USBD_StdEPReq+0x330>
      break;
 800ed3e:	bf00      	nop
  }

  return ret;
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
	...

0800ed4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed56:	2300      	movs	r3, #0
 800ed58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	0a1b      	lsrs	r3, r3, #8
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	2b06      	cmp	r3, #6
 800ed6e:	f200 8128 	bhi.w	800efc2 <USBD_GetDescriptor+0x276>
 800ed72:	a201      	add	r2, pc, #4	@ (adr r2, 800ed78 <USBD_GetDescriptor+0x2c>)
 800ed74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed78:	0800ed95 	.word	0x0800ed95
 800ed7c:	0800edad 	.word	0x0800edad
 800ed80:	0800eded 	.word	0x0800eded
 800ed84:	0800efc3 	.word	0x0800efc3
 800ed88:	0800efc3 	.word	0x0800efc3
 800ed8c:	0800ef63 	.word	0x0800ef63
 800ed90:	0800ef8f 	.word	0x0800ef8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	7c12      	ldrb	r2, [r2, #16]
 800eda0:	f107 0108 	add.w	r1, r7, #8
 800eda4:	4610      	mov	r0, r2
 800eda6:	4798      	blx	r3
 800eda8:	60f8      	str	r0, [r7, #12]
      break;
 800edaa:	e112      	b.n	800efd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	7c1b      	ldrb	r3, [r3, #16]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d10d      	bne.n	800edd0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edbc:	f107 0208 	add.w	r2, r7, #8
 800edc0:	4610      	mov	r0, r2
 800edc2:	4798      	blx	r3
 800edc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	3301      	adds	r3, #1
 800edca:	2202      	movs	r2, #2
 800edcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800edce:	e100      	b.n	800efd2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd8:	f107 0208 	add.w	r2, r7, #8
 800eddc:	4610      	mov	r0, r2
 800edde:	4798      	blx	r3
 800ede0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3301      	adds	r3, #1
 800ede6:	2202      	movs	r2, #2
 800ede8:	701a      	strb	r2, [r3, #0]
      break;
 800edea:	e0f2      	b.n	800efd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	885b      	ldrh	r3, [r3, #2]
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	2b05      	cmp	r3, #5
 800edf4:	f200 80ac 	bhi.w	800ef50 <USBD_GetDescriptor+0x204>
 800edf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ee00 <USBD_GetDescriptor+0xb4>)
 800edfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfe:	bf00      	nop
 800ee00:	0800ee19 	.word	0x0800ee19
 800ee04:	0800ee4d 	.word	0x0800ee4d
 800ee08:	0800ee81 	.word	0x0800ee81
 800ee0c:	0800eeb5 	.word	0x0800eeb5
 800ee10:	0800eee9 	.word	0x0800eee9
 800ee14:	0800ef1d 	.word	0x0800ef1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00b      	beq.n	800ee3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	7c12      	ldrb	r2, [r2, #16]
 800ee30:	f107 0108 	add.w	r1, r7, #8
 800ee34:	4610      	mov	r0, r2
 800ee36:	4798      	blx	r3
 800ee38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee3a:	e091      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 facb 	bl	800f3da <USBD_CtlError>
            err++;
 800ee44:	7afb      	ldrb	r3, [r7, #11]
 800ee46:	3301      	adds	r3, #1
 800ee48:	72fb      	strb	r3, [r7, #11]
          break;
 800ee4a:	e089      	b.n	800ef60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00b      	beq.n	800ee70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	7c12      	ldrb	r2, [r2, #16]
 800ee64:	f107 0108 	add.w	r1, r7, #8
 800ee68:	4610      	mov	r0, r2
 800ee6a:	4798      	blx	r3
 800ee6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee6e:	e077      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fab1 	bl	800f3da <USBD_CtlError>
            err++;
 800ee78:	7afb      	ldrb	r3, [r7, #11]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ee7e:	e06f      	b.n	800ef60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00b      	beq.n	800eea4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	7c12      	ldrb	r2, [r2, #16]
 800ee98:	f107 0108 	add.w	r1, r7, #8
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	4798      	blx	r3
 800eea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eea2:	e05d      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eea4:	6839      	ldr	r1, [r7, #0]
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 fa97 	bl	800f3da <USBD_CtlError>
            err++;
 800eeac:	7afb      	ldrb	r3, [r7, #11]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	72fb      	strb	r3, [r7, #11]
          break;
 800eeb2:	e055      	b.n	800ef60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00b      	beq.n	800eed8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	7c12      	ldrb	r2, [r2, #16]
 800eecc:	f107 0108 	add.w	r1, r7, #8
 800eed0:	4610      	mov	r0, r2
 800eed2:	4798      	blx	r3
 800eed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eed6:	e043      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fa7d 	bl	800f3da <USBD_CtlError>
            err++;
 800eee0:	7afb      	ldrb	r3, [r7, #11]
 800eee2:	3301      	adds	r3, #1
 800eee4:	72fb      	strb	r3, [r7, #11]
          break;
 800eee6:	e03b      	b.n	800ef60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eeee:	695b      	ldr	r3, [r3, #20]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00b      	beq.n	800ef0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eefa:	695b      	ldr	r3, [r3, #20]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	7c12      	ldrb	r2, [r2, #16]
 800ef00:	f107 0108 	add.w	r1, r7, #8
 800ef04:	4610      	mov	r0, r2
 800ef06:	4798      	blx	r3
 800ef08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef0a:	e029      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 fa63 	bl	800f3da <USBD_CtlError>
            err++;
 800ef14:	7afb      	ldrb	r3, [r7, #11]
 800ef16:	3301      	adds	r3, #1
 800ef18:	72fb      	strb	r3, [r7, #11]
          break;
 800ef1a:	e021      	b.n	800ef60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00b      	beq.n	800ef40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	7c12      	ldrb	r2, [r2, #16]
 800ef34:	f107 0108 	add.w	r1, r7, #8
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4798      	blx	r3
 800ef3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef3e:	e00f      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fa49 	bl	800f3da <USBD_CtlError>
            err++;
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef4e:	e007      	b.n	800ef60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fa41 	bl	800f3da <USBD_CtlError>
          err++;
 800ef58:	7afb      	ldrb	r3, [r7, #11]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ef5e:	bf00      	nop
      }
      break;
 800ef60:	e037      	b.n	800efd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7c1b      	ldrb	r3, [r3, #16]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d109      	bne.n	800ef7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef72:	f107 0208 	add.w	r2, r7, #8
 800ef76:	4610      	mov	r0, r2
 800ef78:	4798      	blx	r3
 800ef7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef7c:	e029      	b.n	800efd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ef7e:	6839      	ldr	r1, [r7, #0]
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 fa2a 	bl	800f3da <USBD_CtlError>
        err++;
 800ef86:	7afb      	ldrb	r3, [r7, #11]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	72fb      	strb	r3, [r7, #11]
      break;
 800ef8c:	e021      	b.n	800efd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	7c1b      	ldrb	r3, [r3, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d10d      	bne.n	800efb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef9e:	f107 0208 	add.w	r2, r7, #8
 800efa2:	4610      	mov	r0, r2
 800efa4:	4798      	blx	r3
 800efa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	3301      	adds	r3, #1
 800efac:	2207      	movs	r2, #7
 800efae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800efb0:	e00f      	b.n	800efd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800efb2:	6839      	ldr	r1, [r7, #0]
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 fa10 	bl	800f3da <USBD_CtlError>
        err++;
 800efba:	7afb      	ldrb	r3, [r7, #11]
 800efbc:	3301      	adds	r3, #1
 800efbe:	72fb      	strb	r3, [r7, #11]
      break;
 800efc0:	e007      	b.n	800efd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fa08 	bl	800f3da <USBD_CtlError>
      err++;
 800efca:	7afb      	ldrb	r3, [r7, #11]
 800efcc:	3301      	adds	r3, #1
 800efce:	72fb      	strb	r3, [r7, #11]
      break;
 800efd0:	bf00      	nop
  }

  if (err != 0U)
 800efd2:	7afb      	ldrb	r3, [r7, #11]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d11e      	bne.n	800f016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	88db      	ldrh	r3, [r3, #6]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d016      	beq.n	800f00e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800efe0:	893b      	ldrh	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00e      	beq.n	800f004 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	88da      	ldrh	r2, [r3, #6]
 800efea:	893b      	ldrh	r3, [r7, #8]
 800efec:	4293      	cmp	r3, r2
 800efee:	bf28      	it	cs
 800eff0:	4613      	movcs	r3, r2
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eff6:	893b      	ldrh	r3, [r7, #8]
 800eff8:	461a      	mov	r2, r3
 800effa:	68f9      	ldr	r1, [r7, #12]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 fb6a 	bl	800f6d6 <USBD_CtlSendData>
 800f002:	e009      	b.n	800f018 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 f9e7 	bl	800f3da <USBD_CtlError>
 800f00c:	e004      	b.n	800f018 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fbbb 	bl	800f78a <USBD_CtlSendStatus>
 800f014:	e000      	b.n	800f018 <USBD_GetDescriptor+0x2cc>
    return;
 800f016:	bf00      	nop
  }
}
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop

0800f020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	889b      	ldrh	r3, [r3, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d131      	bne.n	800f096 <USBD_SetAddress+0x76>
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	88db      	ldrh	r3, [r3, #6]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d12d      	bne.n	800f096 <USBD_SetAddress+0x76>
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	885b      	ldrh	r3, [r3, #2]
 800f03e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f040:	d829      	bhi.n	800f096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	885b      	ldrh	r3, [r3, #2]
 800f046:	b2db      	uxtb	r3, r3
 800f048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f04c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f054:	b2db      	uxtb	r3, r3
 800f056:	2b03      	cmp	r3, #3
 800f058:	d104      	bne.n	800f064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f9bc 	bl	800f3da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f062:	e01d      	b.n	800f0a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	7bfa      	ldrb	r2, [r7, #15]
 800f068:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f06c:	7bfb      	ldrb	r3, [r7, #15]
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7fe ffcd 	bl	800e010 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 fb87 	bl	800f78a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d004      	beq.n	800f08c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2202      	movs	r2, #2
 800f086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f08a:	e009      	b.n	800f0a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f094:	e004      	b.n	800f0a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f99e 	bl	800f3da <USBD_CtlError>
  }
}
 800f09e:	bf00      	nop
 800f0a0:	bf00      	nop
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	885b      	ldrh	r3, [r3, #2]
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	4b4e      	ldr	r3, [pc, #312]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f0be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f0c0:	4b4d      	ldr	r3, [pc, #308]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d905      	bls.n	800f0d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f0c8:	6839      	ldr	r1, [r7, #0]
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f985 	bl	800f3da <USBD_CtlError>
    return USBD_FAIL;
 800f0d0:	2303      	movs	r3, #3
 800f0d2:	e08c      	b.n	800f1ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d002      	beq.n	800f0e6 <USBD_SetConfig+0x3e>
 800f0e0:	2b03      	cmp	r3, #3
 800f0e2:	d029      	beq.n	800f138 <USBD_SetConfig+0x90>
 800f0e4:	e075      	b.n	800f1d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f0e6:	4b44      	ldr	r3, [pc, #272]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d020      	beq.n	800f130 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f0ee:	4b42      	ldr	r3, [pc, #264]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f0f8:	4b3f      	ldr	r3, [pc, #252]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7ff f8a9 	bl	800e256 <USBD_SetClassConfig>
 800f104:	4603      	mov	r3, r0
 800f106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f108:	7bfb      	ldrb	r3, [r7, #15]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d008      	beq.n	800f120 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 f962 	bl	800f3da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2202      	movs	r2, #2
 800f11a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f11e:	e065      	b.n	800f1ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f000 fb32 	bl	800f78a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2203      	movs	r2, #3
 800f12a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f12e:	e05d      	b.n	800f1ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 fb2a 	bl	800f78a <USBD_CtlSendStatus>
      break;
 800f136:	e059      	b.n	800f1ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f138:	4b2f      	ldr	r3, [pc, #188]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d112      	bne.n	800f166 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2202      	movs	r2, #2
 800f144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f148:	4b2b      	ldr	r3, [pc, #172]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f152:	4b29      	ldr	r3, [pc, #164]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	4619      	mov	r1, r3
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7ff f898 	bl	800e28e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fb13 	bl	800f78a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f164:	e042      	b.n	800f1ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f166:	4b24      	ldr	r3, [pc, #144]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	429a      	cmp	r2, r3
 800f172:	d02a      	beq.n	800f1ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff f886 	bl	800e28e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f182:	4b1d      	ldr	r3, [pc, #116]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f18c:	4b1a      	ldr	r3, [pc, #104]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff f85f 	bl	800e256 <USBD_SetClassConfig>
 800f198:	4603      	mov	r3, r0
 800f19a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00f      	beq.n	800f1c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 f918 	bl	800f3da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff f86b 	bl	800e28e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f1c0:	e014      	b.n	800f1ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 fae1 	bl	800f78a <USBD_CtlSendStatus>
      break;
 800f1c8:	e010      	b.n	800f1ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fadd 	bl	800f78a <USBD_CtlSendStatus>
      break;
 800f1d0:	e00c      	b.n	800f1ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f1d2:	6839      	ldr	r1, [r7, #0]
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f900 	bl	800f3da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1da:	4b07      	ldr	r3, [pc, #28]	@ (800f1f8 <USBD_SetConfig+0x150>)
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	4619      	mov	r1, r3
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7ff f854 	bl	800e28e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	73fb      	strb	r3, [r7, #15]
      break;
 800f1ea:	bf00      	nop
  }

  return ret;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20001060 	.word	0x20001060

0800f1fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	88db      	ldrh	r3, [r3, #6]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d004      	beq.n	800f218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 f8e2 	bl	800f3da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f216:	e023      	b.n	800f260 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	2b02      	cmp	r3, #2
 800f222:	dc02      	bgt.n	800f22a <USBD_GetConfig+0x2e>
 800f224:	2b00      	cmp	r3, #0
 800f226:	dc03      	bgt.n	800f230 <USBD_GetConfig+0x34>
 800f228:	e015      	b.n	800f256 <USBD_GetConfig+0x5a>
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d00b      	beq.n	800f246 <USBD_GetConfig+0x4a>
 800f22e:	e012      	b.n	800f256 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	3308      	adds	r3, #8
 800f23a:	2201      	movs	r2, #1
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fa49 	bl	800f6d6 <USBD_CtlSendData>
        break;
 800f244:	e00c      	b.n	800f260 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	3304      	adds	r3, #4
 800f24a:	2201      	movs	r2, #1
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 fa41 	bl	800f6d6 <USBD_CtlSendData>
        break;
 800f254:	e004      	b.n	800f260 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f256:	6839      	ldr	r1, [r7, #0]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 f8be 	bl	800f3da <USBD_CtlError>
        break;
 800f25e:	bf00      	nop
}
 800f260:	bf00      	nop
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	3b01      	subs	r3, #1
 800f27c:	2b02      	cmp	r3, #2
 800f27e:	d81e      	bhi.n	800f2be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	88db      	ldrh	r3, [r3, #6]
 800f284:	2b02      	cmp	r3, #2
 800f286:	d004      	beq.n	800f292 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 f8a5 	bl	800f3da <USBD_CtlError>
        break;
 800f290:	e01a      	b.n	800f2c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2201      	movs	r2, #1
 800f296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d005      	beq.n	800f2ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	f043 0202 	orr.w	r2, r3, #2
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	330c      	adds	r3, #12
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 fa0d 	bl	800f6d6 <USBD_CtlSendData>
      break;
 800f2bc:	e004      	b.n	800f2c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 f88a 	bl	800f3da <USBD_CtlError>
      break;
 800f2c6:	bf00      	nop
  }
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	885b      	ldrh	r3, [r3, #2]
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d107      	bne.n	800f2f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa4d 	bl	800f78a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f2f0:	e013      	b.n	800f31a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	885b      	ldrh	r3, [r3, #2]
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d10b      	bne.n	800f312 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	889b      	ldrh	r3, [r3, #4]
 800f2fe:	0a1b      	lsrs	r3, r3, #8
 800f300:	b29b      	uxth	r3, r3
 800f302:	b2da      	uxtb	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fa3d 	bl	800f78a <USBD_CtlSendStatus>
}
 800f310:	e003      	b.n	800f31a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f860 	bl	800f3da <USBD_CtlError>
}
 800f31a:	bf00      	nop
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f332:	b2db      	uxtb	r3, r3
 800f334:	3b01      	subs	r3, #1
 800f336:	2b02      	cmp	r3, #2
 800f338:	d80b      	bhi.n	800f352 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	885b      	ldrh	r3, [r3, #2]
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d10c      	bne.n	800f35c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fa1d 	bl	800f78a <USBD_CtlSendStatus>
      }
      break;
 800f350:	e004      	b.n	800f35c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 f840 	bl	800f3da <USBD_CtlError>
      break;
 800f35a:	e000      	b.n	800f35e <USBD_ClrFeature+0x3c>
      break;
 800f35c:	bf00      	nop
  }
}
 800f35e:	bf00      	nop
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b084      	sub	sp, #16
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	781a      	ldrb	r2, [r3, #0]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3301      	adds	r3, #1
 800f380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	781a      	ldrb	r2, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3301      	adds	r3, #1
 800f38e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f7ff fa40 	bl	800e816 <SWAPBYTE>
 800f396:	4603      	mov	r3, r0
 800f398:	461a      	mov	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7ff fa33 	bl	800e816 <SWAPBYTE>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f7ff fa26 	bl	800e816 <SWAPBYTE>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	80da      	strh	r2, [r3, #6]
}
 800f3d2:	bf00      	nop
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b082      	sub	sp, #8
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3e4:	2180      	movs	r1, #128	@ 0x80
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7fe fdb4 	bl	800df54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7fe fdb0 	bl	800df54 <USBD_LL_StallEP>
}
 800f3f4:	bf00      	nop
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f408:	2300      	movs	r3, #0
 800f40a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d036      	beq.n	800f480 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f416:	6938      	ldr	r0, [r7, #16]
 800f418:	f000 f836 	bl	800f488 <USBD_GetLen>
 800f41c:	4603      	mov	r3, r0
 800f41e:	3301      	adds	r3, #1
 800f420:	b29b      	uxth	r3, r3
 800f422:	005b      	lsls	r3, r3, #1
 800f424:	b29a      	uxth	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	4413      	add	r3, r2
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	7812      	ldrb	r2, [r2, #0]
 800f434:	701a      	strb	r2, [r3, #0]
  idx++;
 800f436:	7dfb      	ldrb	r3, [r7, #23]
 800f438:	3301      	adds	r3, #1
 800f43a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f43c:	7dfb      	ldrb	r3, [r7, #23]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	4413      	add	r3, r2
 800f442:	2203      	movs	r2, #3
 800f444:	701a      	strb	r2, [r3, #0]
  idx++;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
 800f448:	3301      	adds	r3, #1
 800f44a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f44c:	e013      	b.n	800f476 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f44e:	7dfb      	ldrb	r3, [r7, #23]
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	4413      	add	r3, r2
 800f454:	693a      	ldr	r2, [r7, #16]
 800f456:	7812      	ldrb	r2, [r2, #0]
 800f458:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	3301      	adds	r3, #1
 800f45e:	613b      	str	r3, [r7, #16]
    idx++;
 800f460:	7dfb      	ldrb	r3, [r7, #23]
 800f462:	3301      	adds	r3, #1
 800f464:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f466:	7dfb      	ldrb	r3, [r7, #23]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	4413      	add	r3, r2
 800f46c:	2200      	movs	r2, #0
 800f46e:	701a      	strb	r2, [r3, #0]
    idx++;
 800f470:	7dfb      	ldrb	r3, [r7, #23]
 800f472:	3301      	adds	r3, #1
 800f474:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d1e7      	bne.n	800f44e <USBD_GetString+0x52>
 800f47e:	e000      	b.n	800f482 <USBD_GetString+0x86>
    return;
 800f480:	bf00      	nop
  }
}
 800f482:	3718      	adds	r7, #24
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f490:	2300      	movs	r3, #0
 800f492:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f498:	e005      	b.n	800f4a6 <USBD_GetLen+0x1e>
  {
    len++;
 800f49a:	7bfb      	ldrb	r3, [r7, #15]
 800f49c:	3301      	adds	r3, #1
 800f49e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1f5      	bne.n	800f49a <USBD_GetLen+0x12>
  }

  return len;
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	6039      	str	r1, [r7, #0]
 800f4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2212      	movs	r2, #18
 800f4cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800f4ce:	4b03      	ldr	r3, [pc, #12]	@ (800f4dc <USBD_Class_DeviceDescriptor+0x20>)
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	200000ec 	.word	0x200000ec

0800f4e0 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	6039      	str	r1, [r7, #0]
 800f4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2204      	movs	r2, #4
 800f4f0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800f4f2:	4b03      	ldr	r3, [pc, #12]	@ (800f500 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr
 800f500:	20000100 	.word	0x20000100

0800f504 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d105      	bne.n	800f522 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800f516:	683a      	ldr	r2, [r7, #0]
 800f518:	4907      	ldr	r1, [pc, #28]	@ (800f538 <USBD_Class_ProductStrDescriptor+0x34>)
 800f51a:	4808      	ldr	r0, [pc, #32]	@ (800f53c <USBD_Class_ProductStrDescriptor+0x38>)
 800f51c:	f7ff ff6e 	bl	800f3fc <USBD_GetString>
 800f520:	e004      	b.n	800f52c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800f522:	683a      	ldr	r2, [r7, #0]
 800f524:	4904      	ldr	r1, [pc, #16]	@ (800f538 <USBD_Class_ProductStrDescriptor+0x34>)
 800f526:	4805      	ldr	r0, [pc, #20]	@ (800f53c <USBD_Class_ProductStrDescriptor+0x38>)
 800f528:	f7ff ff68 	bl	800f3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f52c:	4b02      	ldr	r3, [pc, #8]	@ (800f538 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	20001064 	.word	0x20001064
 800f53c:	0801018c 	.word	0x0801018c

0800f540 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	6039      	str	r1, [r7, #0]
 800f54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	4904      	ldr	r1, [pc, #16]	@ (800f560 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800f550:	4804      	ldr	r0, [pc, #16]	@ (800f564 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800f552:	f7ff ff53 	bl	800f3fc <USBD_GetString>
  return USBD_StrDesc;
 800f556:	4b02      	ldr	r3, [pc, #8]	@ (800f560 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20001064 	.word	0x20001064
 800f564:	080101a4 	.word	0x080101a4

0800f568 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	6039      	str	r1, [r7, #0]
 800f572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	221a      	movs	r2, #26
 800f578:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800f57a:	f000 f843 	bl	800f604 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800f57e:	4b02      	ldr	r3, [pc, #8]	@ (800f588 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800f580:	4618      	mov	r0, r3
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	20000104 	.word	0x20000104

0800f58c <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	4603      	mov	r3, r0
 800f594:	6039      	str	r1, [r7, #0]
 800f596:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d105      	bne.n	800f5aa <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	4907      	ldr	r1, [pc, #28]	@ (800f5c0 <USBD_Class_ConfigStrDescriptor+0x34>)
 800f5a2:	4808      	ldr	r0, [pc, #32]	@ (800f5c4 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f5a4:	f7ff ff2a 	bl	800f3fc <USBD_GetString>
 800f5a8:	e004      	b.n	800f5b4 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	4904      	ldr	r1, [pc, #16]	@ (800f5c0 <USBD_Class_ConfigStrDescriptor+0x34>)
 800f5ae:	4805      	ldr	r0, [pc, #20]	@ (800f5c4 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f5b0:	f7ff ff24 	bl	800f3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5b4:	4b02      	ldr	r3, [pc, #8]	@ (800f5c0 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	20001064 	.word	0x20001064
 800f5c4:	080101b8 	.word	0x080101b8

0800f5c8 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	6039      	str	r1, [r7, #0]
 800f5d2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d105      	bne.n	800f5e6 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800f5da:	683a      	ldr	r2, [r7, #0]
 800f5dc:	4907      	ldr	r1, [pc, #28]	@ (800f5fc <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f5de:	4808      	ldr	r0, [pc, #32]	@ (800f600 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f5e0:	f7ff ff0c 	bl	800f3fc <USBD_GetString>
 800f5e4:	e004      	b.n	800f5f0 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	4904      	ldr	r1, [pc, #16]	@ (800f5fc <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f5ea:	4805      	ldr	r0, [pc, #20]	@ (800f600 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f5ec:	f7ff ff06 	bl	800f3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5f0:	4b02      	ldr	r3, [pc, #8]	@ (800f5fc <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20001064 	.word	0x20001064
 800f600:	080101c4 	.word	0x080101c4

0800f604 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800f60a:	4b0f      	ldr	r3, [pc, #60]	@ (800f648 <Get_SerialNum+0x44>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800f610:	4b0e      	ldr	r3, [pc, #56]	@ (800f64c <Get_SerialNum+0x48>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800f616:	4b0e      	ldr	r3, [pc, #56]	@ (800f650 <Get_SerialNum+0x4c>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4413      	add	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d009      	beq.n	800f63e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800f62a:	2208      	movs	r2, #8
 800f62c:	4909      	ldr	r1, [pc, #36]	@ (800f654 <Get_SerialNum+0x50>)
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f000 f814 	bl	800f65c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800f634:	2204      	movs	r2, #4
 800f636:	4908      	ldr	r1, [pc, #32]	@ (800f658 <Get_SerialNum+0x54>)
 800f638:	68b8      	ldr	r0, [r7, #8]
 800f63a:	f000 f80f 	bl	800f65c <IntToUnicode>
  }
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	08fff800 	.word	0x08fff800
 800f64c:	08fff804 	.word	0x08fff804
 800f650:	08fff808 	.word	0x08fff808
 800f654:	20000106 	.word	0x20000106
 800f658:	20000116 	.word	0x20000116

0800f65c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b087      	sub	sp, #28
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	4613      	mov	r3, r2
 800f668:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800f66a:	2300      	movs	r3, #0
 800f66c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800f66e:	2300      	movs	r3, #0
 800f670:	75fb      	strb	r3, [r7, #23]
 800f672:	e025      	b.n	800f6c0 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	0f1b      	lsrs	r3, r3, #28
 800f678:	2b09      	cmp	r3, #9
 800f67a:	d80a      	bhi.n	800f692 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	0f1b      	lsrs	r3, r3, #28
 800f680:	b2da      	uxtb	r2, r3
 800f682:	7dfb      	ldrb	r3, [r7, #23]
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	68b9      	ldr	r1, [r7, #8]
 800f688:	440b      	add	r3, r1
 800f68a:	3230      	adds	r2, #48	@ 0x30
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	e009      	b.n	800f6a6 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	0f1b      	lsrs	r3, r3, #28
 800f696:	b2da      	uxtb	r2, r3
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	68b9      	ldr	r1, [r7, #8]
 800f69e:	440b      	add	r3, r1
 800f6a0:	3237      	adds	r2, #55	@ 0x37
 800f6a2:	b2d2      	uxtb	r2, r2
 800f6a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	011b      	lsls	r3, r3, #4
 800f6aa:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800f6ac:	7dfb      	ldrb	r3, [r7, #23]
 800f6ae:	005b      	lsls	r3, r3, #1
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800f6ba:	7dfb      	ldrb	r3, [r7, #23]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	75fb      	strb	r3, [r7, #23]
 800f6c0:	7dfa      	ldrb	r2, [r7, #23]
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d3d5      	bcc.n	800f674 <IntToUnicode+0x18>
  }
}
 800f6c8:	bf00      	nop
 800f6ca:	bf00      	nop
 800f6cc:	371c      	adds	r7, #28
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f7fe fca0 	bl	800e042 <USBD_LL_Transmit>

  return USBD_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	2100      	movs	r1, #0
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7fe fc8f 	bl	800e042 <USBD_LL_Transmit>

  return USBD_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b084      	sub	sp, #16
 800f732:	af00      	add	r7, sp, #0
 800f734:	60f8      	str	r0, [r7, #12]
 800f736:	60b9      	str	r1, [r7, #8]
 800f738:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2203      	movs	r2, #3
 800f73e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	2100      	movs	r1, #0
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7fe fc8d 	bl	800e078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	2100      	movs	r1, #0
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f7fe fc7c 	bl	800e078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2204      	movs	r2, #4
 800f796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f79a:	2300      	movs	r3, #0
 800f79c:	2200      	movs	r2, #0
 800f79e:	2100      	movs	r1, #0
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fe fc4e 	bl	800e042 <USBD_LL_Transmit>

  return USBD_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2205      	movs	r2, #5
 800f7bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7fe fc56 	bl	800e078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <sniprintf>:
 800f7d8:	b40c      	push	{r2, r3}
 800f7da:	4b18      	ldr	r3, [pc, #96]	@ (800f83c <sniprintf+0x64>)
 800f7dc:	b530      	push	{r4, r5, lr}
 800f7de:	1e0c      	subs	r4, r1, #0
 800f7e0:	b09d      	sub	sp, #116	@ 0x74
 800f7e2:	681d      	ldr	r5, [r3, #0]
 800f7e4:	da08      	bge.n	800f7f8 <sniprintf+0x20>
 800f7e6:	238b      	movs	r3, #139	@ 0x8b
 800f7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ec:	602b      	str	r3, [r5, #0]
 800f7ee:	b01d      	add	sp, #116	@ 0x74
 800f7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7f4:	b002      	add	sp, #8
 800f7f6:	4770      	bx	lr
 800f7f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f7fc:	9002      	str	r0, [sp, #8]
 800f7fe:	9006      	str	r0, [sp, #24]
 800f800:	a902      	add	r1, sp, #8
 800f802:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f806:	bf14      	ite	ne
 800f808:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f80c:	4623      	moveq	r3, r4
 800f80e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f810:	4628      	mov	r0, r5
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	9307      	str	r3, [sp, #28]
 800f816:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f81a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f81e:	ab21      	add	r3, sp, #132	@ 0x84
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	f000 f995 	bl	800fb50 <_svfiprintf_r>
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	bfbc      	itt	lt
 800f82a:	238b      	movlt	r3, #139	@ 0x8b
 800f82c:	602b      	strlt	r3, [r5, #0]
 800f82e:	2c00      	cmp	r4, #0
 800f830:	d0dd      	beq.n	800f7ee <sniprintf+0x16>
 800f832:	9b02      	ldr	r3, [sp, #8]
 800f834:	2200      	movs	r2, #0
 800f836:	701a      	strb	r2, [r3, #0]
 800f838:	e7d9      	b.n	800f7ee <sniprintf+0x16>
 800f83a:	bf00      	nop
 800f83c:	20000120 	.word	0x20000120

0800f840 <memset>:
 800f840:	4402      	add	r2, r0
 800f842:	4603      	mov	r3, r0
 800f844:	4293      	cmp	r3, r2
 800f846:	d100      	bne.n	800f84a <memset+0xa>
 800f848:	4770      	bx	lr
 800f84a:	f803 1b01 	strb.w	r1, [r3], #1
 800f84e:	e7f9      	b.n	800f844 <memset+0x4>

0800f850 <__errno>:
 800f850:	4b01      	ldr	r3, [pc, #4]	@ (800f858 <__errno+0x8>)
 800f852:	6818      	ldr	r0, [r3, #0]
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	20000120 	.word	0x20000120

0800f85c <__libc_init_array>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	4d0d      	ldr	r5, [pc, #52]	@ (800f894 <__libc_init_array+0x38>)
 800f860:	2600      	movs	r6, #0
 800f862:	4c0d      	ldr	r4, [pc, #52]	@ (800f898 <__libc_init_array+0x3c>)
 800f864:	1b64      	subs	r4, r4, r5
 800f866:	10a4      	asrs	r4, r4, #2
 800f868:	42a6      	cmp	r6, r4
 800f86a:	d109      	bne.n	800f880 <__libc_init_array+0x24>
 800f86c:	4d0b      	ldr	r5, [pc, #44]	@ (800f89c <__libc_init_array+0x40>)
 800f86e:	2600      	movs	r6, #0
 800f870:	4c0b      	ldr	r4, [pc, #44]	@ (800f8a0 <__libc_init_array+0x44>)
 800f872:	f000 fc77 	bl	8010164 <_init>
 800f876:	1b64      	subs	r4, r4, r5
 800f878:	10a4      	asrs	r4, r4, #2
 800f87a:	42a6      	cmp	r6, r4
 800f87c:	d105      	bne.n	800f88a <__libc_init_array+0x2e>
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	f855 3b04 	ldr.w	r3, [r5], #4
 800f884:	3601      	adds	r6, #1
 800f886:	4798      	blx	r3
 800f888:	e7ee      	b.n	800f868 <__libc_init_array+0xc>
 800f88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f88e:	3601      	adds	r6, #1
 800f890:	4798      	blx	r3
 800f892:	e7f2      	b.n	800f87a <__libc_init_array+0x1e>
 800f894:	0801025c 	.word	0x0801025c
 800f898:	0801025c 	.word	0x0801025c
 800f89c:	0801025c 	.word	0x0801025c
 800f8a0:	08010260 	.word	0x08010260

0800f8a4 <__retarget_lock_acquire_recursive>:
 800f8a4:	4770      	bx	lr

0800f8a6 <__retarget_lock_release_recursive>:
 800f8a6:	4770      	bx	lr

0800f8a8 <_free_r>:
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	2900      	cmp	r1, #0
 800f8ae:	d041      	beq.n	800f934 <_free_r+0x8c>
 800f8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8b4:	1f0c      	subs	r4, r1, #4
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	bfb8      	it	lt
 800f8ba:	18e4      	addlt	r4, r4, r3
 800f8bc:	f000 f8e0 	bl	800fa80 <__malloc_lock>
 800f8c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f938 <_free_r+0x90>)
 800f8c2:	6813      	ldr	r3, [r2, #0]
 800f8c4:	b933      	cbnz	r3, 800f8d4 <_free_r+0x2c>
 800f8c6:	6063      	str	r3, [r4, #4]
 800f8c8:	6014      	str	r4, [r2, #0]
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8d0:	f000 b8dc 	b.w	800fa8c <__malloc_unlock>
 800f8d4:	42a3      	cmp	r3, r4
 800f8d6:	d908      	bls.n	800f8ea <_free_r+0x42>
 800f8d8:	6820      	ldr	r0, [r4, #0]
 800f8da:	1821      	adds	r1, r4, r0
 800f8dc:	428b      	cmp	r3, r1
 800f8de:	bf01      	itttt	eq
 800f8e0:	6819      	ldreq	r1, [r3, #0]
 800f8e2:	685b      	ldreq	r3, [r3, #4]
 800f8e4:	1809      	addeq	r1, r1, r0
 800f8e6:	6021      	streq	r1, [r4, #0]
 800f8e8:	e7ed      	b.n	800f8c6 <_free_r+0x1e>
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	b10b      	cbz	r3, 800f8f4 <_free_r+0x4c>
 800f8f0:	42a3      	cmp	r3, r4
 800f8f2:	d9fa      	bls.n	800f8ea <_free_r+0x42>
 800f8f4:	6811      	ldr	r1, [r2, #0]
 800f8f6:	1850      	adds	r0, r2, r1
 800f8f8:	42a0      	cmp	r0, r4
 800f8fa:	d10b      	bne.n	800f914 <_free_r+0x6c>
 800f8fc:	6820      	ldr	r0, [r4, #0]
 800f8fe:	4401      	add	r1, r0
 800f900:	1850      	adds	r0, r2, r1
 800f902:	6011      	str	r1, [r2, #0]
 800f904:	4283      	cmp	r3, r0
 800f906:	d1e0      	bne.n	800f8ca <_free_r+0x22>
 800f908:	6818      	ldr	r0, [r3, #0]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	4408      	add	r0, r1
 800f90e:	6053      	str	r3, [r2, #4]
 800f910:	6010      	str	r0, [r2, #0]
 800f912:	e7da      	b.n	800f8ca <_free_r+0x22>
 800f914:	d902      	bls.n	800f91c <_free_r+0x74>
 800f916:	230c      	movs	r3, #12
 800f918:	602b      	str	r3, [r5, #0]
 800f91a:	e7d6      	b.n	800f8ca <_free_r+0x22>
 800f91c:	6820      	ldr	r0, [r4, #0]
 800f91e:	1821      	adds	r1, r4, r0
 800f920:	428b      	cmp	r3, r1
 800f922:	bf02      	ittt	eq
 800f924:	6819      	ldreq	r1, [r3, #0]
 800f926:	685b      	ldreq	r3, [r3, #4]
 800f928:	1809      	addeq	r1, r1, r0
 800f92a:	6063      	str	r3, [r4, #4]
 800f92c:	bf08      	it	eq
 800f92e:	6021      	streq	r1, [r4, #0]
 800f930:	6054      	str	r4, [r2, #4]
 800f932:	e7ca      	b.n	800f8ca <_free_r+0x22>
 800f934:	bd38      	pop	{r3, r4, r5, pc}
 800f936:	bf00      	nop
 800f938:	200012a8 	.word	0x200012a8

0800f93c <sbrk_aligned>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	4e0f      	ldr	r6, [pc, #60]	@ (800f97c <sbrk_aligned+0x40>)
 800f940:	460c      	mov	r4, r1
 800f942:	4605      	mov	r5, r0
 800f944:	6831      	ldr	r1, [r6, #0]
 800f946:	b911      	cbnz	r1, 800f94e <sbrk_aligned+0x12>
 800f948:	f000 fbaa 	bl	80100a0 <_sbrk_r>
 800f94c:	6030      	str	r0, [r6, #0]
 800f94e:	4621      	mov	r1, r4
 800f950:	4628      	mov	r0, r5
 800f952:	f000 fba5 	bl	80100a0 <_sbrk_r>
 800f956:	1c43      	adds	r3, r0, #1
 800f958:	d103      	bne.n	800f962 <sbrk_aligned+0x26>
 800f95a:	f04f 34ff 	mov.w	r4, #4294967295
 800f95e:	4620      	mov	r0, r4
 800f960:	bd70      	pop	{r4, r5, r6, pc}
 800f962:	1cc4      	adds	r4, r0, #3
 800f964:	f024 0403 	bic.w	r4, r4, #3
 800f968:	42a0      	cmp	r0, r4
 800f96a:	d0f8      	beq.n	800f95e <sbrk_aligned+0x22>
 800f96c:	1a21      	subs	r1, r4, r0
 800f96e:	4628      	mov	r0, r5
 800f970:	f000 fb96 	bl	80100a0 <_sbrk_r>
 800f974:	3001      	adds	r0, #1
 800f976:	d1f2      	bne.n	800f95e <sbrk_aligned+0x22>
 800f978:	e7ef      	b.n	800f95a <sbrk_aligned+0x1e>
 800f97a:	bf00      	nop
 800f97c:	200012a4 	.word	0x200012a4

0800f980 <_malloc_r>:
 800f980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f984:	1ccd      	adds	r5, r1, #3
 800f986:	4606      	mov	r6, r0
 800f988:	f025 0503 	bic.w	r5, r5, #3
 800f98c:	3508      	adds	r5, #8
 800f98e:	2d0c      	cmp	r5, #12
 800f990:	bf38      	it	cc
 800f992:	250c      	movcc	r5, #12
 800f994:	2d00      	cmp	r5, #0
 800f996:	db01      	blt.n	800f99c <_malloc_r+0x1c>
 800f998:	42a9      	cmp	r1, r5
 800f99a:	d904      	bls.n	800f9a6 <_malloc_r+0x26>
 800f99c:	230c      	movs	r3, #12
 800f99e:	6033      	str	r3, [r6, #0]
 800f9a0:	2000      	movs	r0, #0
 800f9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa7c <_malloc_r+0xfc>
 800f9aa:	f000 f869 	bl	800fa80 <__malloc_lock>
 800f9ae:	f8d8 3000 	ldr.w	r3, [r8]
 800f9b2:	461c      	mov	r4, r3
 800f9b4:	bb44      	cbnz	r4, 800fa08 <_malloc_r+0x88>
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f7ff ffbf 	bl	800f93c <sbrk_aligned>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	d158      	bne.n	800fa76 <_malloc_r+0xf6>
 800f9c4:	f8d8 4000 	ldr.w	r4, [r8]
 800f9c8:	4627      	mov	r7, r4
 800f9ca:	2f00      	cmp	r7, #0
 800f9cc:	d143      	bne.n	800fa56 <_malloc_r+0xd6>
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d04b      	beq.n	800fa6a <_malloc_r+0xea>
 800f9d2:	6823      	ldr	r3, [r4, #0]
 800f9d4:	4639      	mov	r1, r7
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	eb04 0903 	add.w	r9, r4, r3
 800f9dc:	f000 fb60 	bl	80100a0 <_sbrk_r>
 800f9e0:	4581      	cmp	r9, r0
 800f9e2:	d142      	bne.n	800fa6a <_malloc_r+0xea>
 800f9e4:	6821      	ldr	r1, [r4, #0]
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	1a6d      	subs	r5, r5, r1
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	f7ff ffa6 	bl	800f93c <sbrk_aligned>
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d03a      	beq.n	800fa6a <_malloc_r+0xea>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	442b      	add	r3, r5
 800f9f8:	6023      	str	r3, [r4, #0]
 800f9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f9fe:	685a      	ldr	r2, [r3, #4]
 800fa00:	bb62      	cbnz	r2, 800fa5c <_malloc_r+0xdc>
 800fa02:	f8c8 7000 	str.w	r7, [r8]
 800fa06:	e00f      	b.n	800fa28 <_malloc_r+0xa8>
 800fa08:	6822      	ldr	r2, [r4, #0]
 800fa0a:	1b52      	subs	r2, r2, r5
 800fa0c:	d420      	bmi.n	800fa50 <_malloc_r+0xd0>
 800fa0e:	2a0b      	cmp	r2, #11
 800fa10:	d917      	bls.n	800fa42 <_malloc_r+0xc2>
 800fa12:	1961      	adds	r1, r4, r5
 800fa14:	42a3      	cmp	r3, r4
 800fa16:	6025      	str	r5, [r4, #0]
 800fa18:	bf18      	it	ne
 800fa1a:	6059      	strne	r1, [r3, #4]
 800fa1c:	6863      	ldr	r3, [r4, #4]
 800fa1e:	bf08      	it	eq
 800fa20:	f8c8 1000 	streq.w	r1, [r8]
 800fa24:	5162      	str	r2, [r4, r5]
 800fa26:	604b      	str	r3, [r1, #4]
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f000 f82f 	bl	800fa8c <__malloc_unlock>
 800fa2e:	f104 000b 	add.w	r0, r4, #11
 800fa32:	1d23      	adds	r3, r4, #4
 800fa34:	f020 0007 	bic.w	r0, r0, #7
 800fa38:	1ac2      	subs	r2, r0, r3
 800fa3a:	bf1c      	itt	ne
 800fa3c:	1a1b      	subne	r3, r3, r0
 800fa3e:	50a3      	strne	r3, [r4, r2]
 800fa40:	e7af      	b.n	800f9a2 <_malloc_r+0x22>
 800fa42:	6862      	ldr	r2, [r4, #4]
 800fa44:	42a3      	cmp	r3, r4
 800fa46:	bf0c      	ite	eq
 800fa48:	f8c8 2000 	streq.w	r2, [r8]
 800fa4c:	605a      	strne	r2, [r3, #4]
 800fa4e:	e7eb      	b.n	800fa28 <_malloc_r+0xa8>
 800fa50:	4623      	mov	r3, r4
 800fa52:	6864      	ldr	r4, [r4, #4]
 800fa54:	e7ae      	b.n	800f9b4 <_malloc_r+0x34>
 800fa56:	463c      	mov	r4, r7
 800fa58:	687f      	ldr	r7, [r7, #4]
 800fa5a:	e7b6      	b.n	800f9ca <_malloc_r+0x4a>
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	d1fb      	bne.n	800fa5c <_malloc_r+0xdc>
 800fa64:	2300      	movs	r3, #0
 800fa66:	6053      	str	r3, [r2, #4]
 800fa68:	e7de      	b.n	800fa28 <_malloc_r+0xa8>
 800fa6a:	230c      	movs	r3, #12
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	6033      	str	r3, [r6, #0]
 800fa70:	f000 f80c 	bl	800fa8c <__malloc_unlock>
 800fa74:	e794      	b.n	800f9a0 <_malloc_r+0x20>
 800fa76:	6005      	str	r5, [r0, #0]
 800fa78:	e7d6      	b.n	800fa28 <_malloc_r+0xa8>
 800fa7a:	bf00      	nop
 800fa7c:	200012a8 	.word	0x200012a8

0800fa80 <__malloc_lock>:
 800fa80:	4801      	ldr	r0, [pc, #4]	@ (800fa88 <__malloc_lock+0x8>)
 800fa82:	f7ff bf0f 	b.w	800f8a4 <__retarget_lock_acquire_recursive>
 800fa86:	bf00      	nop
 800fa88:	200012a0 	.word	0x200012a0

0800fa8c <__malloc_unlock>:
 800fa8c:	4801      	ldr	r0, [pc, #4]	@ (800fa94 <__malloc_unlock+0x8>)
 800fa8e:	f7ff bf0a 	b.w	800f8a6 <__retarget_lock_release_recursive>
 800fa92:	bf00      	nop
 800fa94:	200012a0 	.word	0x200012a0

0800fa98 <__ssputs_r>:
 800fa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa9c:	461f      	mov	r7, r3
 800fa9e:	688e      	ldr	r6, [r1, #8]
 800faa0:	4682      	mov	sl, r0
 800faa2:	460c      	mov	r4, r1
 800faa4:	42be      	cmp	r6, r7
 800faa6:	4690      	mov	r8, r2
 800faa8:	680b      	ldr	r3, [r1, #0]
 800faaa:	d82d      	bhi.n	800fb08 <__ssputs_r+0x70>
 800faac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fab4:	d026      	beq.n	800fb04 <__ssputs_r+0x6c>
 800fab6:	6965      	ldr	r5, [r4, #20]
 800fab8:	6909      	ldr	r1, [r1, #16]
 800faba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fabe:	eba3 0901 	sub.w	r9, r3, r1
 800fac2:	1c7b      	adds	r3, r7, #1
 800fac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fac8:	444b      	add	r3, r9
 800faca:	106d      	asrs	r5, r5, #1
 800facc:	429d      	cmp	r5, r3
 800face:	bf38      	it	cc
 800fad0:	461d      	movcc	r5, r3
 800fad2:	0553      	lsls	r3, r2, #21
 800fad4:	d527      	bpl.n	800fb26 <__ssputs_r+0x8e>
 800fad6:	4629      	mov	r1, r5
 800fad8:	f7ff ff52 	bl	800f980 <_malloc_r>
 800fadc:	4606      	mov	r6, r0
 800fade:	b360      	cbz	r0, 800fb3a <__ssputs_r+0xa2>
 800fae0:	464a      	mov	r2, r9
 800fae2:	6921      	ldr	r1, [r4, #16]
 800fae4:	f000 fafa 	bl	80100dc <memcpy>
 800fae8:	89a3      	ldrh	r3, [r4, #12]
 800faea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800faee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800faf2:	81a3      	strh	r3, [r4, #12]
 800faf4:	6126      	str	r6, [r4, #16]
 800faf6:	444e      	add	r6, r9
 800faf8:	6165      	str	r5, [r4, #20]
 800fafa:	eba5 0509 	sub.w	r5, r5, r9
 800fafe:	6026      	str	r6, [r4, #0]
 800fb00:	463e      	mov	r6, r7
 800fb02:	60a5      	str	r5, [r4, #8]
 800fb04:	42be      	cmp	r6, r7
 800fb06:	d900      	bls.n	800fb0a <__ssputs_r+0x72>
 800fb08:	463e      	mov	r6, r7
 800fb0a:	4632      	mov	r2, r6
 800fb0c:	4641      	mov	r1, r8
 800fb0e:	6820      	ldr	r0, [r4, #0]
 800fb10:	f000 faac 	bl	801006c <memmove>
 800fb14:	68a3      	ldr	r3, [r4, #8]
 800fb16:	2000      	movs	r0, #0
 800fb18:	1b9b      	subs	r3, r3, r6
 800fb1a:	60a3      	str	r3, [r4, #8]
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	4433      	add	r3, r6
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb26:	462a      	mov	r2, r5
 800fb28:	f000 fae5 	bl	80100f6 <_realloc_r>
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d1e0      	bne.n	800faf4 <__ssputs_r+0x5c>
 800fb32:	6921      	ldr	r1, [r4, #16]
 800fb34:	4650      	mov	r0, sl
 800fb36:	f7ff feb7 	bl	800f8a8 <_free_r>
 800fb3a:	230c      	movs	r3, #12
 800fb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb40:	f8ca 3000 	str.w	r3, [sl]
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb4a:	81a3      	strh	r3, [r4, #12]
 800fb4c:	e7e9      	b.n	800fb22 <__ssputs_r+0x8a>
	...

0800fb50 <_svfiprintf_r>:
 800fb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb54:	4698      	mov	r8, r3
 800fb56:	898b      	ldrh	r3, [r1, #12]
 800fb58:	b09d      	sub	sp, #116	@ 0x74
 800fb5a:	4607      	mov	r7, r0
 800fb5c:	061b      	lsls	r3, r3, #24
 800fb5e:	460d      	mov	r5, r1
 800fb60:	4614      	mov	r4, r2
 800fb62:	d510      	bpl.n	800fb86 <_svfiprintf_r+0x36>
 800fb64:	690b      	ldr	r3, [r1, #16]
 800fb66:	b973      	cbnz	r3, 800fb86 <_svfiprintf_r+0x36>
 800fb68:	2140      	movs	r1, #64	@ 0x40
 800fb6a:	f7ff ff09 	bl	800f980 <_malloc_r>
 800fb6e:	6028      	str	r0, [r5, #0]
 800fb70:	6128      	str	r0, [r5, #16]
 800fb72:	b930      	cbnz	r0, 800fb82 <_svfiprintf_r+0x32>
 800fb74:	230c      	movs	r3, #12
 800fb76:	603b      	str	r3, [r7, #0]
 800fb78:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7c:	b01d      	add	sp, #116	@ 0x74
 800fb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb82:	2340      	movs	r3, #64	@ 0x40
 800fb84:	616b      	str	r3, [r5, #20]
 800fb86:	2300      	movs	r3, #0
 800fb88:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb8c:	f04f 0901 	mov.w	r9, #1
 800fb90:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800fd34 <_svfiprintf_r+0x1e4>
 800fb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb96:	2320      	movs	r3, #32
 800fb98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb9c:	2330      	movs	r3, #48	@ 0x30
 800fb9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fba2:	4623      	mov	r3, r4
 800fba4:	469a      	mov	sl, r3
 800fba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbaa:	b10a      	cbz	r2, 800fbb0 <_svfiprintf_r+0x60>
 800fbac:	2a25      	cmp	r2, #37	@ 0x25
 800fbae:	d1f9      	bne.n	800fba4 <_svfiprintf_r+0x54>
 800fbb0:	ebba 0b04 	subs.w	fp, sl, r4
 800fbb4:	d00b      	beq.n	800fbce <_svfiprintf_r+0x7e>
 800fbb6:	465b      	mov	r3, fp
 800fbb8:	4622      	mov	r2, r4
 800fbba:	4629      	mov	r1, r5
 800fbbc:	4638      	mov	r0, r7
 800fbbe:	f7ff ff6b 	bl	800fa98 <__ssputs_r>
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	f000 80a7 	beq.w	800fd16 <_svfiprintf_r+0x1c6>
 800fbc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbca:	445a      	add	r2, fp
 800fbcc:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbce:	f89a 3000 	ldrb.w	r3, [sl]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 809f 	beq.w	800fd16 <_svfiprintf_r+0x1c6>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	f04f 32ff 	mov.w	r2, #4294967295
 800fbde:	f10a 0a01 	add.w	sl, sl, #1
 800fbe2:	9304      	str	r3, [sp, #16]
 800fbe4:	9307      	str	r3, [sp, #28]
 800fbe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fbea:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbf0:	4654      	mov	r4, sl
 800fbf2:	2205      	movs	r2, #5
 800fbf4:	484f      	ldr	r0, [pc, #316]	@ (800fd34 <_svfiprintf_r+0x1e4>)
 800fbf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbfa:	f000 fa61 	bl	80100c0 <memchr>
 800fbfe:	9a04      	ldr	r2, [sp, #16]
 800fc00:	b9d8      	cbnz	r0, 800fc3a <_svfiprintf_r+0xea>
 800fc02:	06d0      	lsls	r0, r2, #27
 800fc04:	bf44      	itt	mi
 800fc06:	2320      	movmi	r3, #32
 800fc08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc0c:	0711      	lsls	r1, r2, #28
 800fc0e:	bf44      	itt	mi
 800fc10:	232b      	movmi	r3, #43	@ 0x2b
 800fc12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc16:	f89a 3000 	ldrb.w	r3, [sl]
 800fc1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc1c:	d015      	beq.n	800fc4a <_svfiprintf_r+0xfa>
 800fc1e:	9a07      	ldr	r2, [sp, #28]
 800fc20:	4654      	mov	r4, sl
 800fc22:	2000      	movs	r0, #0
 800fc24:	f04f 0c0a 	mov.w	ip, #10
 800fc28:	4621      	mov	r1, r4
 800fc2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc2e:	3b30      	subs	r3, #48	@ 0x30
 800fc30:	2b09      	cmp	r3, #9
 800fc32:	d94b      	bls.n	800fccc <_svfiprintf_r+0x17c>
 800fc34:	b1b0      	cbz	r0, 800fc64 <_svfiprintf_r+0x114>
 800fc36:	9207      	str	r2, [sp, #28]
 800fc38:	e014      	b.n	800fc64 <_svfiprintf_r+0x114>
 800fc3a:	eba0 0308 	sub.w	r3, r0, r8
 800fc3e:	46a2      	mov	sl, r4
 800fc40:	fa09 f303 	lsl.w	r3, r9, r3
 800fc44:	4313      	orrs	r3, r2
 800fc46:	9304      	str	r3, [sp, #16]
 800fc48:	e7d2      	b.n	800fbf0 <_svfiprintf_r+0xa0>
 800fc4a:	9b03      	ldr	r3, [sp, #12]
 800fc4c:	1d19      	adds	r1, r3, #4
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	9103      	str	r1, [sp, #12]
 800fc54:	bfbb      	ittet	lt
 800fc56:	425b      	neglt	r3, r3
 800fc58:	f042 0202 	orrlt.w	r2, r2, #2
 800fc5c:	9307      	strge	r3, [sp, #28]
 800fc5e:	9307      	strlt	r3, [sp, #28]
 800fc60:	bfb8      	it	lt
 800fc62:	9204      	strlt	r2, [sp, #16]
 800fc64:	7823      	ldrb	r3, [r4, #0]
 800fc66:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc68:	d10a      	bne.n	800fc80 <_svfiprintf_r+0x130>
 800fc6a:	7863      	ldrb	r3, [r4, #1]
 800fc6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc6e:	d132      	bne.n	800fcd6 <_svfiprintf_r+0x186>
 800fc70:	9b03      	ldr	r3, [sp, #12]
 800fc72:	3402      	adds	r4, #2
 800fc74:	1d1a      	adds	r2, r3, #4
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc7c:	9203      	str	r2, [sp, #12]
 800fc7e:	9305      	str	r3, [sp, #20]
 800fc80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fd44 <_svfiprintf_r+0x1f4>
 800fc84:	2203      	movs	r2, #3
 800fc86:	7821      	ldrb	r1, [r4, #0]
 800fc88:	4650      	mov	r0, sl
 800fc8a:	f000 fa19 	bl	80100c0 <memchr>
 800fc8e:	b138      	cbz	r0, 800fca0 <_svfiprintf_r+0x150>
 800fc90:	eba0 000a 	sub.w	r0, r0, sl
 800fc94:	2240      	movs	r2, #64	@ 0x40
 800fc96:	9b04      	ldr	r3, [sp, #16]
 800fc98:	3401      	adds	r4, #1
 800fc9a:	4082      	lsls	r2, r0
 800fc9c:	4313      	orrs	r3, r2
 800fc9e:	9304      	str	r3, [sp, #16]
 800fca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fca4:	2206      	movs	r2, #6
 800fca6:	4824      	ldr	r0, [pc, #144]	@ (800fd38 <_svfiprintf_r+0x1e8>)
 800fca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcac:	f000 fa08 	bl	80100c0 <memchr>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d036      	beq.n	800fd22 <_svfiprintf_r+0x1d2>
 800fcb4:	4b21      	ldr	r3, [pc, #132]	@ (800fd3c <_svfiprintf_r+0x1ec>)
 800fcb6:	bb1b      	cbnz	r3, 800fd00 <_svfiprintf_r+0x1b0>
 800fcb8:	9b03      	ldr	r3, [sp, #12]
 800fcba:	3307      	adds	r3, #7
 800fcbc:	f023 0307 	bic.w	r3, r3, #7
 800fcc0:	3308      	adds	r3, #8
 800fcc2:	9303      	str	r3, [sp, #12]
 800fcc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcc6:	4433      	add	r3, r6
 800fcc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcca:	e76a      	b.n	800fba2 <_svfiprintf_r+0x52>
 800fccc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcd0:	460c      	mov	r4, r1
 800fcd2:	2001      	movs	r0, #1
 800fcd4:	e7a8      	b.n	800fc28 <_svfiprintf_r+0xd8>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	3401      	adds	r4, #1
 800fcda:	f04f 0c0a 	mov.w	ip, #10
 800fcde:	4619      	mov	r1, r3
 800fce0:	9305      	str	r3, [sp, #20]
 800fce2:	4620      	mov	r0, r4
 800fce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fce8:	3a30      	subs	r2, #48	@ 0x30
 800fcea:	2a09      	cmp	r2, #9
 800fcec:	d903      	bls.n	800fcf6 <_svfiprintf_r+0x1a6>
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d0c6      	beq.n	800fc80 <_svfiprintf_r+0x130>
 800fcf2:	9105      	str	r1, [sp, #20]
 800fcf4:	e7c4      	b.n	800fc80 <_svfiprintf_r+0x130>
 800fcf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e7f0      	b.n	800fce2 <_svfiprintf_r+0x192>
 800fd00:	ab03      	add	r3, sp, #12
 800fd02:	462a      	mov	r2, r5
 800fd04:	a904      	add	r1, sp, #16
 800fd06:	4638      	mov	r0, r7
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd40 <_svfiprintf_r+0x1f0>)
 800fd0c:	f3af 8000 	nop.w
 800fd10:	1c42      	adds	r2, r0, #1
 800fd12:	4606      	mov	r6, r0
 800fd14:	d1d6      	bne.n	800fcc4 <_svfiprintf_r+0x174>
 800fd16:	89ab      	ldrh	r3, [r5, #12]
 800fd18:	065b      	lsls	r3, r3, #25
 800fd1a:	f53f af2d 	bmi.w	800fb78 <_svfiprintf_r+0x28>
 800fd1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd20:	e72c      	b.n	800fb7c <_svfiprintf_r+0x2c>
 800fd22:	ab03      	add	r3, sp, #12
 800fd24:	462a      	mov	r2, r5
 800fd26:	a904      	add	r1, sp, #16
 800fd28:	4638      	mov	r0, r7
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	4b04      	ldr	r3, [pc, #16]	@ (800fd40 <_svfiprintf_r+0x1f0>)
 800fd2e:	f000 f87d 	bl	800fe2c <_printf_i>
 800fd32:	e7ed      	b.n	800fd10 <_svfiprintf_r+0x1c0>
 800fd34:	08010220 	.word	0x08010220
 800fd38:	0801022a 	.word	0x0801022a
 800fd3c:	00000000 	.word	0x00000000
 800fd40:	0800fa99 	.word	0x0800fa99
 800fd44:	08010226 	.word	0x08010226

0800fd48 <_printf_common>:
 800fd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd4c:	4616      	mov	r6, r2
 800fd4e:	4698      	mov	r8, r3
 800fd50:	688a      	ldr	r2, [r1, #8]
 800fd52:	4607      	mov	r7, r0
 800fd54:	690b      	ldr	r3, [r1, #16]
 800fd56:	460c      	mov	r4, r1
 800fd58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	bfb8      	it	lt
 800fd60:	4613      	movlt	r3, r2
 800fd62:	6033      	str	r3, [r6, #0]
 800fd64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd68:	b10a      	cbz	r2, 800fd6e <_printf_common+0x26>
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	6033      	str	r3, [r6, #0]
 800fd6e:	6823      	ldr	r3, [r4, #0]
 800fd70:	0699      	lsls	r1, r3, #26
 800fd72:	bf42      	ittt	mi
 800fd74:	6833      	ldrmi	r3, [r6, #0]
 800fd76:	3302      	addmi	r3, #2
 800fd78:	6033      	strmi	r3, [r6, #0]
 800fd7a:	6825      	ldr	r5, [r4, #0]
 800fd7c:	f015 0506 	ands.w	r5, r5, #6
 800fd80:	d106      	bne.n	800fd90 <_printf_common+0x48>
 800fd82:	f104 0a19 	add.w	sl, r4, #25
 800fd86:	68e3      	ldr	r3, [r4, #12]
 800fd88:	6832      	ldr	r2, [r6, #0]
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	42ab      	cmp	r3, r5
 800fd8e:	dc2b      	bgt.n	800fde8 <_printf_common+0xa0>
 800fd90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd94:	6822      	ldr	r2, [r4, #0]
 800fd96:	3b00      	subs	r3, #0
 800fd98:	bf18      	it	ne
 800fd9a:	2301      	movne	r3, #1
 800fd9c:	0692      	lsls	r2, r2, #26
 800fd9e:	d430      	bmi.n	800fe02 <_printf_common+0xba>
 800fda0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fda4:	4641      	mov	r1, r8
 800fda6:	4638      	mov	r0, r7
 800fda8:	47c8      	blx	r9
 800fdaa:	3001      	adds	r0, #1
 800fdac:	d023      	beq.n	800fdf6 <_printf_common+0xae>
 800fdae:	6823      	ldr	r3, [r4, #0]
 800fdb0:	341a      	adds	r4, #26
 800fdb2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800fdb6:	f003 0306 	and.w	r3, r3, #6
 800fdba:	2b04      	cmp	r3, #4
 800fdbc:	bf0a      	itet	eq
 800fdbe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fdc2:	2500      	movne	r5, #0
 800fdc4:	6833      	ldreq	r3, [r6, #0]
 800fdc6:	f04f 0600 	mov.w	r6, #0
 800fdca:	bf08      	it	eq
 800fdcc:	1aed      	subeq	r5, r5, r3
 800fdce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800fdd2:	bf08      	it	eq
 800fdd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	bfc4      	itt	gt
 800fddc:	1a9b      	subgt	r3, r3, r2
 800fdde:	18ed      	addgt	r5, r5, r3
 800fde0:	42b5      	cmp	r5, r6
 800fde2:	d11a      	bne.n	800fe1a <_printf_common+0xd2>
 800fde4:	2000      	movs	r0, #0
 800fde6:	e008      	b.n	800fdfa <_printf_common+0xb2>
 800fde8:	2301      	movs	r3, #1
 800fdea:	4652      	mov	r2, sl
 800fdec:	4641      	mov	r1, r8
 800fdee:	4638      	mov	r0, r7
 800fdf0:	47c8      	blx	r9
 800fdf2:	3001      	adds	r0, #1
 800fdf4:	d103      	bne.n	800fdfe <_printf_common+0xb6>
 800fdf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdfe:	3501      	adds	r5, #1
 800fe00:	e7c1      	b.n	800fd86 <_printf_common+0x3e>
 800fe02:	18e1      	adds	r1, r4, r3
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	2030      	movs	r0, #48	@ 0x30
 800fe08:	3302      	adds	r3, #2
 800fe0a:	4422      	add	r2, r4
 800fe0c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe18:	e7c2      	b.n	800fda0 <_printf_common+0x58>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4622      	mov	r2, r4
 800fe1e:	4641      	mov	r1, r8
 800fe20:	4638      	mov	r0, r7
 800fe22:	47c8      	blx	r9
 800fe24:	3001      	adds	r0, #1
 800fe26:	d0e6      	beq.n	800fdf6 <_printf_common+0xae>
 800fe28:	3601      	adds	r6, #1
 800fe2a:	e7d9      	b.n	800fde0 <_printf_common+0x98>

0800fe2c <_printf_i>:
 800fe2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe30:	7e0f      	ldrb	r7, [r1, #24]
 800fe32:	4691      	mov	r9, r2
 800fe34:	4680      	mov	r8, r0
 800fe36:	460c      	mov	r4, r1
 800fe38:	2f78      	cmp	r7, #120	@ 0x78
 800fe3a:	469a      	mov	sl, r3
 800fe3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe42:	d807      	bhi.n	800fe54 <_printf_i+0x28>
 800fe44:	2f62      	cmp	r7, #98	@ 0x62
 800fe46:	d80a      	bhi.n	800fe5e <_printf_i+0x32>
 800fe48:	2f00      	cmp	r7, #0
 800fe4a:	f000 80d2 	beq.w	800fff2 <_printf_i+0x1c6>
 800fe4e:	2f58      	cmp	r7, #88	@ 0x58
 800fe50:	f000 80b9 	beq.w	800ffc6 <_printf_i+0x19a>
 800fe54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe5c:	e03a      	b.n	800fed4 <_printf_i+0xa8>
 800fe5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe62:	2b15      	cmp	r3, #21
 800fe64:	d8f6      	bhi.n	800fe54 <_printf_i+0x28>
 800fe66:	a101      	add	r1, pc, #4	@ (adr r1, 800fe6c <_printf_i+0x40>)
 800fe68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe6c:	0800fec5 	.word	0x0800fec5
 800fe70:	0800fed9 	.word	0x0800fed9
 800fe74:	0800fe55 	.word	0x0800fe55
 800fe78:	0800fe55 	.word	0x0800fe55
 800fe7c:	0800fe55 	.word	0x0800fe55
 800fe80:	0800fe55 	.word	0x0800fe55
 800fe84:	0800fed9 	.word	0x0800fed9
 800fe88:	0800fe55 	.word	0x0800fe55
 800fe8c:	0800fe55 	.word	0x0800fe55
 800fe90:	0800fe55 	.word	0x0800fe55
 800fe94:	0800fe55 	.word	0x0800fe55
 800fe98:	0800ffd9 	.word	0x0800ffd9
 800fe9c:	0800ff03 	.word	0x0800ff03
 800fea0:	0800ff93 	.word	0x0800ff93
 800fea4:	0800fe55 	.word	0x0800fe55
 800fea8:	0800fe55 	.word	0x0800fe55
 800feac:	0800fffb 	.word	0x0800fffb
 800feb0:	0800fe55 	.word	0x0800fe55
 800feb4:	0800ff03 	.word	0x0800ff03
 800feb8:	0800fe55 	.word	0x0800fe55
 800febc:	0800fe55 	.word	0x0800fe55
 800fec0:	0800ff9b 	.word	0x0800ff9b
 800fec4:	6833      	ldr	r3, [r6, #0]
 800fec6:	1d1a      	adds	r2, r3, #4
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	6032      	str	r2, [r6, #0]
 800fecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fed4:	2301      	movs	r3, #1
 800fed6:	e09d      	b.n	8010014 <_printf_i+0x1e8>
 800fed8:	6833      	ldr	r3, [r6, #0]
 800feda:	6820      	ldr	r0, [r4, #0]
 800fedc:	1d19      	adds	r1, r3, #4
 800fede:	6031      	str	r1, [r6, #0]
 800fee0:	0606      	lsls	r6, r0, #24
 800fee2:	d501      	bpl.n	800fee8 <_printf_i+0xbc>
 800fee4:	681d      	ldr	r5, [r3, #0]
 800fee6:	e003      	b.n	800fef0 <_printf_i+0xc4>
 800fee8:	0645      	lsls	r5, r0, #25
 800feea:	d5fb      	bpl.n	800fee4 <_printf_i+0xb8>
 800feec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fef0:	2d00      	cmp	r5, #0
 800fef2:	da03      	bge.n	800fefc <_printf_i+0xd0>
 800fef4:	232d      	movs	r3, #45	@ 0x2d
 800fef6:	426d      	negs	r5, r5
 800fef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fefc:	4859      	ldr	r0, [pc, #356]	@ (8010064 <_printf_i+0x238>)
 800fefe:	230a      	movs	r3, #10
 800ff00:	e011      	b.n	800ff26 <_printf_i+0xfa>
 800ff02:	6821      	ldr	r1, [r4, #0]
 800ff04:	6833      	ldr	r3, [r6, #0]
 800ff06:	0608      	lsls	r0, r1, #24
 800ff08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff0c:	d402      	bmi.n	800ff14 <_printf_i+0xe8>
 800ff0e:	0649      	lsls	r1, r1, #25
 800ff10:	bf48      	it	mi
 800ff12:	b2ad      	uxthmi	r5, r5
 800ff14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff16:	6033      	str	r3, [r6, #0]
 800ff18:	4852      	ldr	r0, [pc, #328]	@ (8010064 <_printf_i+0x238>)
 800ff1a:	bf14      	ite	ne
 800ff1c:	230a      	movne	r3, #10
 800ff1e:	2308      	moveq	r3, #8
 800ff20:	2100      	movs	r1, #0
 800ff22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff26:	6866      	ldr	r6, [r4, #4]
 800ff28:	2e00      	cmp	r6, #0
 800ff2a:	60a6      	str	r6, [r4, #8]
 800ff2c:	bfa2      	ittt	ge
 800ff2e:	6821      	ldrge	r1, [r4, #0]
 800ff30:	f021 0104 	bicge.w	r1, r1, #4
 800ff34:	6021      	strge	r1, [r4, #0]
 800ff36:	b90d      	cbnz	r5, 800ff3c <_printf_i+0x110>
 800ff38:	2e00      	cmp	r6, #0
 800ff3a:	d04b      	beq.n	800ffd4 <_printf_i+0x1a8>
 800ff3c:	4616      	mov	r6, r2
 800ff3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff42:	fb03 5711 	mls	r7, r3, r1, r5
 800ff46:	5dc7      	ldrb	r7, [r0, r7]
 800ff48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff4c:	462f      	mov	r7, r5
 800ff4e:	460d      	mov	r5, r1
 800ff50:	42bb      	cmp	r3, r7
 800ff52:	d9f4      	bls.n	800ff3e <_printf_i+0x112>
 800ff54:	2b08      	cmp	r3, #8
 800ff56:	d10b      	bne.n	800ff70 <_printf_i+0x144>
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	07df      	lsls	r7, r3, #31
 800ff5c:	d508      	bpl.n	800ff70 <_printf_i+0x144>
 800ff5e:	6923      	ldr	r3, [r4, #16]
 800ff60:	6861      	ldr	r1, [r4, #4]
 800ff62:	4299      	cmp	r1, r3
 800ff64:	bfde      	ittt	le
 800ff66:	2330      	movle	r3, #48	@ 0x30
 800ff68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff70:	1b92      	subs	r2, r2, r6
 800ff72:	6122      	str	r2, [r4, #16]
 800ff74:	464b      	mov	r3, r9
 800ff76:	aa03      	add	r2, sp, #12
 800ff78:	4621      	mov	r1, r4
 800ff7a:	4640      	mov	r0, r8
 800ff7c:	f8cd a000 	str.w	sl, [sp]
 800ff80:	f7ff fee2 	bl	800fd48 <_printf_common>
 800ff84:	3001      	adds	r0, #1
 800ff86:	d14a      	bne.n	801001e <_printf_i+0x1f2>
 800ff88:	f04f 30ff 	mov.w	r0, #4294967295
 800ff8c:	b004      	add	sp, #16
 800ff8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	f043 0320 	orr.w	r3, r3, #32
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	2778      	movs	r7, #120	@ 0x78
 800ff9c:	4832      	ldr	r0, [pc, #200]	@ (8010068 <_printf_i+0x23c>)
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ffa4:	061f      	lsls	r7, r3, #24
 800ffa6:	6831      	ldr	r1, [r6, #0]
 800ffa8:	f851 5b04 	ldr.w	r5, [r1], #4
 800ffac:	d402      	bmi.n	800ffb4 <_printf_i+0x188>
 800ffae:	065f      	lsls	r7, r3, #25
 800ffb0:	bf48      	it	mi
 800ffb2:	b2ad      	uxthmi	r5, r5
 800ffb4:	6031      	str	r1, [r6, #0]
 800ffb6:	07d9      	lsls	r1, r3, #31
 800ffb8:	bf44      	itt	mi
 800ffba:	f043 0320 	orrmi.w	r3, r3, #32
 800ffbe:	6023      	strmi	r3, [r4, #0]
 800ffc0:	b11d      	cbz	r5, 800ffca <_printf_i+0x19e>
 800ffc2:	2310      	movs	r3, #16
 800ffc4:	e7ac      	b.n	800ff20 <_printf_i+0xf4>
 800ffc6:	4827      	ldr	r0, [pc, #156]	@ (8010064 <_printf_i+0x238>)
 800ffc8:	e7e9      	b.n	800ff9e <_printf_i+0x172>
 800ffca:	6823      	ldr	r3, [r4, #0]
 800ffcc:	f023 0320 	bic.w	r3, r3, #32
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	e7f6      	b.n	800ffc2 <_printf_i+0x196>
 800ffd4:	4616      	mov	r6, r2
 800ffd6:	e7bd      	b.n	800ff54 <_printf_i+0x128>
 800ffd8:	6833      	ldr	r3, [r6, #0]
 800ffda:	6825      	ldr	r5, [r4, #0]
 800ffdc:	1d18      	adds	r0, r3, #4
 800ffde:	6961      	ldr	r1, [r4, #20]
 800ffe0:	6030      	str	r0, [r6, #0]
 800ffe2:	062e      	lsls	r6, r5, #24
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	d501      	bpl.n	800ffec <_printf_i+0x1c0>
 800ffe8:	6019      	str	r1, [r3, #0]
 800ffea:	e002      	b.n	800fff2 <_printf_i+0x1c6>
 800ffec:	0668      	lsls	r0, r5, #25
 800ffee:	d5fb      	bpl.n	800ffe8 <_printf_i+0x1bc>
 800fff0:	8019      	strh	r1, [r3, #0]
 800fff2:	2300      	movs	r3, #0
 800fff4:	4616      	mov	r6, r2
 800fff6:	6123      	str	r3, [r4, #16]
 800fff8:	e7bc      	b.n	800ff74 <_printf_i+0x148>
 800fffa:	6833      	ldr	r3, [r6, #0]
 800fffc:	2100      	movs	r1, #0
 800fffe:	1d1a      	adds	r2, r3, #4
 8010000:	6032      	str	r2, [r6, #0]
 8010002:	681e      	ldr	r6, [r3, #0]
 8010004:	6862      	ldr	r2, [r4, #4]
 8010006:	4630      	mov	r0, r6
 8010008:	f000 f85a 	bl	80100c0 <memchr>
 801000c:	b108      	cbz	r0, 8010012 <_printf_i+0x1e6>
 801000e:	1b80      	subs	r0, r0, r6
 8010010:	6060      	str	r0, [r4, #4]
 8010012:	6863      	ldr	r3, [r4, #4]
 8010014:	6123      	str	r3, [r4, #16]
 8010016:	2300      	movs	r3, #0
 8010018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801001c:	e7aa      	b.n	800ff74 <_printf_i+0x148>
 801001e:	6923      	ldr	r3, [r4, #16]
 8010020:	4632      	mov	r2, r6
 8010022:	4649      	mov	r1, r9
 8010024:	4640      	mov	r0, r8
 8010026:	47d0      	blx	sl
 8010028:	3001      	adds	r0, #1
 801002a:	d0ad      	beq.n	800ff88 <_printf_i+0x15c>
 801002c:	6823      	ldr	r3, [r4, #0]
 801002e:	079b      	lsls	r3, r3, #30
 8010030:	d413      	bmi.n	801005a <_printf_i+0x22e>
 8010032:	68e0      	ldr	r0, [r4, #12]
 8010034:	9b03      	ldr	r3, [sp, #12]
 8010036:	4298      	cmp	r0, r3
 8010038:	bfb8      	it	lt
 801003a:	4618      	movlt	r0, r3
 801003c:	e7a6      	b.n	800ff8c <_printf_i+0x160>
 801003e:	2301      	movs	r3, #1
 8010040:	4632      	mov	r2, r6
 8010042:	4649      	mov	r1, r9
 8010044:	4640      	mov	r0, r8
 8010046:	47d0      	blx	sl
 8010048:	3001      	adds	r0, #1
 801004a:	d09d      	beq.n	800ff88 <_printf_i+0x15c>
 801004c:	3501      	adds	r5, #1
 801004e:	68e3      	ldr	r3, [r4, #12]
 8010050:	9903      	ldr	r1, [sp, #12]
 8010052:	1a5b      	subs	r3, r3, r1
 8010054:	42ab      	cmp	r3, r5
 8010056:	dcf2      	bgt.n	801003e <_printf_i+0x212>
 8010058:	e7eb      	b.n	8010032 <_printf_i+0x206>
 801005a:	2500      	movs	r5, #0
 801005c:	f104 0619 	add.w	r6, r4, #25
 8010060:	e7f5      	b.n	801004e <_printf_i+0x222>
 8010062:	bf00      	nop
 8010064:	08010231 	.word	0x08010231
 8010068:	08010242 	.word	0x08010242

0801006c <memmove>:
 801006c:	4288      	cmp	r0, r1
 801006e:	b510      	push	{r4, lr}
 8010070:	eb01 0402 	add.w	r4, r1, r2
 8010074:	d902      	bls.n	801007c <memmove+0x10>
 8010076:	4284      	cmp	r4, r0
 8010078:	4623      	mov	r3, r4
 801007a:	d807      	bhi.n	801008c <memmove+0x20>
 801007c:	1e43      	subs	r3, r0, #1
 801007e:	42a1      	cmp	r1, r4
 8010080:	d008      	beq.n	8010094 <memmove+0x28>
 8010082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010086:	f803 2f01 	strb.w	r2, [r3, #1]!
 801008a:	e7f8      	b.n	801007e <memmove+0x12>
 801008c:	4402      	add	r2, r0
 801008e:	4601      	mov	r1, r0
 8010090:	428a      	cmp	r2, r1
 8010092:	d100      	bne.n	8010096 <memmove+0x2a>
 8010094:	bd10      	pop	{r4, pc}
 8010096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801009a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801009e:	e7f7      	b.n	8010090 <memmove+0x24>

080100a0 <_sbrk_r>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	2300      	movs	r3, #0
 80100a4:	4d05      	ldr	r5, [pc, #20]	@ (80100bc <_sbrk_r+0x1c>)
 80100a6:	4604      	mov	r4, r0
 80100a8:	4608      	mov	r0, r1
 80100aa:	602b      	str	r3, [r5, #0]
 80100ac:	f7f1 f9f4 	bl	8001498 <_sbrk>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_sbrk_r+0x1a>
 80100b4:	682b      	ldr	r3, [r5, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_sbrk_r+0x1a>
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	2000129c 	.word	0x2000129c

080100c0 <memchr>:
 80100c0:	b2c9      	uxtb	r1, r1
 80100c2:	4603      	mov	r3, r0
 80100c4:	4402      	add	r2, r0
 80100c6:	b510      	push	{r4, lr}
 80100c8:	4293      	cmp	r3, r2
 80100ca:	4618      	mov	r0, r3
 80100cc:	d101      	bne.n	80100d2 <memchr+0x12>
 80100ce:	2000      	movs	r0, #0
 80100d0:	e003      	b.n	80100da <memchr+0x1a>
 80100d2:	7804      	ldrb	r4, [r0, #0]
 80100d4:	3301      	adds	r3, #1
 80100d6:	428c      	cmp	r4, r1
 80100d8:	d1f6      	bne.n	80100c8 <memchr+0x8>
 80100da:	bd10      	pop	{r4, pc}

080100dc <memcpy>:
 80100dc:	440a      	add	r2, r1
 80100de:	1e43      	subs	r3, r0, #1
 80100e0:	4291      	cmp	r1, r2
 80100e2:	d100      	bne.n	80100e6 <memcpy+0xa>
 80100e4:	4770      	bx	lr
 80100e6:	b510      	push	{r4, lr}
 80100e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ec:	4291      	cmp	r1, r2
 80100ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100f2:	d1f9      	bne.n	80100e8 <memcpy+0xc>
 80100f4:	bd10      	pop	{r4, pc}

080100f6 <_realloc_r>:
 80100f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100fa:	4680      	mov	r8, r0
 80100fc:	4615      	mov	r5, r2
 80100fe:	460c      	mov	r4, r1
 8010100:	b921      	cbnz	r1, 801010c <_realloc_r+0x16>
 8010102:	4611      	mov	r1, r2
 8010104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010108:	f7ff bc3a 	b.w	800f980 <_malloc_r>
 801010c:	b92a      	cbnz	r2, 801011a <_realloc_r+0x24>
 801010e:	f7ff fbcb 	bl	800f8a8 <_free_r>
 8010112:	2400      	movs	r4, #0
 8010114:	4620      	mov	r0, r4
 8010116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011a:	f000 f81a 	bl	8010152 <_malloc_usable_size_r>
 801011e:	4285      	cmp	r5, r0
 8010120:	4606      	mov	r6, r0
 8010122:	d802      	bhi.n	801012a <_realloc_r+0x34>
 8010124:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010128:	d8f4      	bhi.n	8010114 <_realloc_r+0x1e>
 801012a:	4629      	mov	r1, r5
 801012c:	4640      	mov	r0, r8
 801012e:	f7ff fc27 	bl	800f980 <_malloc_r>
 8010132:	4607      	mov	r7, r0
 8010134:	2800      	cmp	r0, #0
 8010136:	d0ec      	beq.n	8010112 <_realloc_r+0x1c>
 8010138:	42b5      	cmp	r5, r6
 801013a:	462a      	mov	r2, r5
 801013c:	4621      	mov	r1, r4
 801013e:	bf28      	it	cs
 8010140:	4632      	movcs	r2, r6
 8010142:	f7ff ffcb 	bl	80100dc <memcpy>
 8010146:	4621      	mov	r1, r4
 8010148:	4640      	mov	r0, r8
 801014a:	463c      	mov	r4, r7
 801014c:	f7ff fbac 	bl	800f8a8 <_free_r>
 8010150:	e7e0      	b.n	8010114 <_realloc_r+0x1e>

08010152 <_malloc_usable_size_r>:
 8010152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010156:	1f18      	subs	r0, r3, #4
 8010158:	2b00      	cmp	r3, #0
 801015a:	bfbc      	itt	lt
 801015c:	580b      	ldrlt	r3, [r1, r0]
 801015e:	18c0      	addlt	r0, r0, r3
 8010160:	4770      	bx	lr
	...

08010164 <_init>:
 8010164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010166:	bf00      	nop
 8010168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016a:	bc08      	pop	{r3}
 801016c:	469e      	mov	lr, r3
 801016e:	4770      	bx	lr

08010170 <_fini>:
 8010170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010172:	bf00      	nop
 8010174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010176:	bc08      	pop	{r3}
 8010178:	469e      	mov	lr, r3
 801017a:	4770      	bx	lr
